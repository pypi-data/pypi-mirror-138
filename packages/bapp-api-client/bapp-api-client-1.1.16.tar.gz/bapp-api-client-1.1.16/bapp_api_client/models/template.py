# coding: utf-8

"""
    BAPP API

    Test description  # noqa: E501

    OpenAPI spec version: v1
    Contact: contact@snippets.local
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class Template(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'type': 'int',
        'source': 'int',
        'name': 'str',
        'docx_file': 'str',
        'content': 'object',
        'options': 'object',
        'screenshot': 'str',
        'default': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'source': 'source',
        'name': 'name',
        'docx_file': 'docx_file',
        'content': 'content',
        'options': 'options',
        'screenshot': 'screenshot',
        'default': 'default'
    }

    def __init__(self, id=None, type=None, source=None, name=None, docx_file=None, content=None, options=None, screenshot=None, default=None, _configuration=None):  # noqa: E501
        """Template - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._type = None
        self._source = None
        self._name = None
        self._docx_file = None
        self._content = None
        self._options = None
        self._screenshot = None
        self._default = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if source is not None:
            self.source = source
        self.name = name
        if docx_file is not None:
            self.docx_file = docx_file
        if content is not None:
            self.content = content
        if options is not None:
            self.options = options
        if screenshot is not None:
            self.screenshot = screenshot
        if default is not None:
            self.default = default

    @property
    def id(self):
        """Gets the id of this Template.  # noqa: E501


        :return: The id of this Template.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Template.


        :param id: The id of this Template.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this Template.  # noqa: E501


        :return: The type of this Template.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Template.


        :param type: The type of this Template.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def source(self):
        """Gets the source of this Template.  # noqa: E501


        :return: The source of this Template.  # noqa: E501
        :rtype: int
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Template.


        :param source: The source of this Template.  # noqa: E501
        :type: int
        """

        self._source = source

    @property
    def name(self):
        """Gets the name of this Template.  # noqa: E501


        :return: The name of this Template.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Template.


        :param name: The name of this Template.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 120):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `120`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def docx_file(self):
        """Gets the docx_file of this Template.  # noqa: E501


        :return: The docx_file of this Template.  # noqa: E501
        :rtype: str
        """
        return self._docx_file

    @docx_file.setter
    def docx_file(self, docx_file):
        """Sets the docx_file of this Template.


        :param docx_file: The docx_file of this Template.  # noqa: E501
        :type: str
        """

        self._docx_file = docx_file

    @property
    def content(self):
        """Gets the content of this Template.  # noqa: E501


        :return: The content of this Template.  # noqa: E501
        :rtype: object
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Template.


        :param content: The content of this Template.  # noqa: E501
        :type: object
        """

        self._content = content

    @property
    def options(self):
        """Gets the options of this Template.  # noqa: E501


        :return: The options of this Template.  # noqa: E501
        :rtype: object
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this Template.


        :param options: The options of this Template.  # noqa: E501
        :type: object
        """

        self._options = options

    @property
    def screenshot(self):
        """Gets the screenshot of this Template.  # noqa: E501


        :return: The screenshot of this Template.  # noqa: E501
        :rtype: str
        """
        return self._screenshot

    @screenshot.setter
    def screenshot(self, screenshot):
        """Sets the screenshot of this Template.


        :param screenshot: The screenshot of this Template.  # noqa: E501
        :type: str
        """

        self._screenshot = screenshot

    @property
    def default(self):
        """Gets the default of this Template.  # noqa: E501

        Setat ca implicit  # noqa: E501

        :return: The default of this Template.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this Template.

        Setat ca implicit  # noqa: E501

        :param default: The default of this Template.  # noqa: E501
        :type: bool
        """

        self._default = default

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Template, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Template):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Template):
            return True

        return self.to_dict() != other.to_dict()
