# coding: utf-8

"""
    BAPP API

    Test description  # noqa: E501

    OpenAPI spec version: v1
    Contact: contact@snippets.local
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class InvoiceSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'automatically_send_invoice_to_client': 'bool',
        'two_invoices_on_the_same_pdf_page': 'bool',
        'add_certificate_of_conformity': 'bool'
    }

    attribute_map = {
        'automatically_send_invoice_to_client': 'automatically_send_invoice_to_client',
        'two_invoices_on_the_same_pdf_page': 'two_invoices_on_the_same_pdf_page',
        'add_certificate_of_conformity': 'add_certificate_of_conformity'
    }

    def __init__(self, automatically_send_invoice_to_client=False, two_invoices_on_the_same_pdf_page=False, add_certificate_of_conformity=False, _configuration=None):  # noqa: E501
        """InvoiceSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._automatically_send_invoice_to_client = None
        self._two_invoices_on_the_same_pdf_page = None
        self._add_certificate_of_conformity = None
        self.discriminator = None

        if automatically_send_invoice_to_client is not None:
            self.automatically_send_invoice_to_client = automatically_send_invoice_to_client
        if two_invoices_on_the_same_pdf_page is not None:
            self.two_invoices_on_the_same_pdf_page = two_invoices_on_the_same_pdf_page
        if add_certificate_of_conformity is not None:
            self.add_certificate_of_conformity = add_certificate_of_conformity

    @property
    def automatically_send_invoice_to_client(self):
        """Gets the automatically_send_invoice_to_client of this InvoiceSettings.  # noqa: E501

        Trimite automat factura clientului la finalizarea acesteia.  # noqa: E501

        :return: The automatically_send_invoice_to_client of this InvoiceSettings.  # noqa: E501
        :rtype: bool
        """
        return self._automatically_send_invoice_to_client

    @automatically_send_invoice_to_client.setter
    def automatically_send_invoice_to_client(self, automatically_send_invoice_to_client):
        """Sets the automatically_send_invoice_to_client of this InvoiceSettings.

        Trimite automat factura clientului la finalizarea acesteia.  # noqa: E501

        :param automatically_send_invoice_to_client: The automatically_send_invoice_to_client of this InvoiceSettings.  # noqa: E501
        :type: bool
        """

        self._automatically_send_invoice_to_client = automatically_send_invoice_to_client

    @property
    def two_invoices_on_the_same_pdf_page(self):
        """Gets the two_invoices_on_the_same_pdf_page of this InvoiceSettings.  # noqa: E501

        Încearcă să pună 2 facturi pe o singură pagină A4, dacă acestea au numărul de articole mai mic sau egal cu 5  # noqa: E501

        :return: The two_invoices_on_the_same_pdf_page of this InvoiceSettings.  # noqa: E501
        :rtype: bool
        """
        return self._two_invoices_on_the_same_pdf_page

    @two_invoices_on_the_same_pdf_page.setter
    def two_invoices_on_the_same_pdf_page(self, two_invoices_on_the_same_pdf_page):
        """Sets the two_invoices_on_the_same_pdf_page of this InvoiceSettings.

        Încearcă să pună 2 facturi pe o singură pagină A4, dacă acestea au numărul de articole mai mic sau egal cu 5  # noqa: E501

        :param two_invoices_on_the_same_pdf_page: The two_invoices_on_the_same_pdf_page of this InvoiceSettings.  # noqa: E501
        :type: bool
        """

        self._two_invoices_on_the_same_pdf_page = two_invoices_on_the_same_pdf_page

    @property
    def add_certificate_of_conformity(self):
        """Gets the add_certificate_of_conformity of this InvoiceSettings.  # noqa: E501

        Adaugă certificatul de conformitate pe factură  # noqa: E501

        :return: The add_certificate_of_conformity of this InvoiceSettings.  # noqa: E501
        :rtype: bool
        """
        return self._add_certificate_of_conformity

    @add_certificate_of_conformity.setter
    def add_certificate_of_conformity(self, add_certificate_of_conformity):
        """Sets the add_certificate_of_conformity of this InvoiceSettings.

        Adaugă certificatul de conformitate pe factură  # noqa: E501

        :param add_certificate_of_conformity: The add_certificate_of_conformity of this InvoiceSettings.  # noqa: E501
        :type: bool
        """

        self._add_certificate_of_conformity = add_certificate_of_conformity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvoiceSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvoiceSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InvoiceSettings):
            return True

        return self.to_dict() != other.to_dict()
