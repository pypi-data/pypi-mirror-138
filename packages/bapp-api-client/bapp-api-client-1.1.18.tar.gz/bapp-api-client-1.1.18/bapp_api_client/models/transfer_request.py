# coding: utf-8

"""
    BAPP API

    Test description  # noqa: E501

    OpenAPI spec version: v1
    Contact: contact@snippets.local
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class TransferRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'value': 'str',
        'identifier': 'str',
        'approval_identifier': 'str',
        'completed': 'bool',
        'from_str': 'str'
    }

    attribute_map = {
        'id': 'id',
        'value': 'value',
        'identifier': 'identifier',
        'approval_identifier': 'approval_identifier',
        'completed': 'completed',
        'from_str': 'from_str'
    }

    def __init__(self, id=None, value=None, identifier=None, approval_identifier=None, completed=None, from_str=None, _configuration=None):  # noqa: E501
        """TransferRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._value = None
        self._identifier = None
        self._approval_identifier = None
        self._completed = None
        self._from_str = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if value is not None:
            self.value = value
        if identifier is not None:
            self.identifier = identifier
        if approval_identifier is not None:
            self.approval_identifier = approval_identifier
        if completed is not None:
            self.completed = completed
        if from_str is not None:
            self.from_str = from_str

    @property
    def id(self):
        """Gets the id of this TransferRequest.  # noqa: E501


        :return: The id of this TransferRequest.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TransferRequest.


        :param id: The id of this TransferRequest.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def value(self):
        """Gets the value of this TransferRequest.  # noqa: E501


        :return: The value of this TransferRequest.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this TransferRequest.


        :param value: The value of this TransferRequest.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def identifier(self):
        """Gets the identifier of this TransferRequest.  # noqa: E501


        :return: The identifier of this TransferRequest.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this TransferRequest.


        :param identifier: The identifier of this TransferRequest.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                identifier is not None and len(identifier) > 200):
            raise ValueError("Invalid value for `identifier`, length must be less than or equal to `200`")  # noqa: E501

        self._identifier = identifier

    @property
    def approval_identifier(self):
        """Gets the approval_identifier of this TransferRequest.  # noqa: E501


        :return: The approval_identifier of this TransferRequest.  # noqa: E501
        :rtype: str
        """
        return self._approval_identifier

    @approval_identifier.setter
    def approval_identifier(self, approval_identifier):
        """Sets the approval_identifier of this TransferRequest.


        :param approval_identifier: The approval_identifier of this TransferRequest.  # noqa: E501
        :type: str
        """

        self._approval_identifier = approval_identifier

    @property
    def completed(self):
        """Gets the completed of this TransferRequest.  # noqa: E501


        :return: The completed of this TransferRequest.  # noqa: E501
        :rtype: bool
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this TransferRequest.


        :param completed: The completed of this TransferRequest.  # noqa: E501
        :type: bool
        """

        self._completed = completed

    @property
    def from_str(self):
        """Gets the from_str of this TransferRequest.  # noqa: E501


        :return: The from_str of this TransferRequest.  # noqa: E501
        :rtype: str
        """
        return self._from_str

    @from_str.setter
    def from_str(self, from_str):
        """Sets the from_str of this TransferRequest.


        :param from_str: The from_str of this TransferRequest.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                from_str is not None and len(from_str) > 80):
            raise ValueError("Invalid value for `from_str`, length must be less than or equal to `80`")  # noqa: E501

        self._from_str = from_str

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransferRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransferRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TransferRequest):
            return True

        return self.to_dict() != other.to_dict()
