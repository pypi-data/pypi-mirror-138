# coding: utf-8

"""
    BAPP API

    Test description  # noqa: E501

    OpenAPI spec version: v1
    Contact: contact@snippets.local
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class InlineResponse20056Balances(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'currency': 'str',
        'sold': 'float',
        'completed_transfers': 'float',
        'not_completed_transfers': 'float'
    }

    attribute_map = {
        'id': 'id',
        'currency': 'currency',
        'sold': 'sold',
        'completed_transfers': 'completed_transfers',
        'not_completed_transfers': 'not_completed_transfers'
    }

    def __init__(self, id=None, currency=None, sold=None, completed_transfers=None, not_completed_transfers=None, _configuration=None):  # noqa: E501
        """InlineResponse20056Balances - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._currency = None
        self._sold = None
        self._completed_transfers = None
        self._not_completed_transfers = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if currency is not None:
            self.currency = currency
        if sold is not None:
            self.sold = sold
        if completed_transfers is not None:
            self.completed_transfers = completed_transfers
        if not_completed_transfers is not None:
            self.not_completed_transfers = not_completed_transfers

    @property
    def id(self):
        """Gets the id of this InlineResponse20056Balances.  # noqa: E501


        :return: The id of this InlineResponse20056Balances.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20056Balances.


        :param id: The id of this InlineResponse20056Balances.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def currency(self):
        """Gets the currency of this InlineResponse20056Balances.  # noqa: E501


        :return: The currency of this InlineResponse20056Balances.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this InlineResponse20056Balances.


        :param currency: The currency of this InlineResponse20056Balances.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def sold(self):
        """Gets the sold of this InlineResponse20056Balances.  # noqa: E501


        :return: The sold of this InlineResponse20056Balances.  # noqa: E501
        :rtype: float
        """
        return self._sold

    @sold.setter
    def sold(self, sold):
        """Sets the sold of this InlineResponse20056Balances.


        :param sold: The sold of this InlineResponse20056Balances.  # noqa: E501
        :type: float
        """

        self._sold = sold

    @property
    def completed_transfers(self):
        """Gets the completed_transfers of this InlineResponse20056Balances.  # noqa: E501


        :return: The completed_transfers of this InlineResponse20056Balances.  # noqa: E501
        :rtype: float
        """
        return self._completed_transfers

    @completed_transfers.setter
    def completed_transfers(self, completed_transfers):
        """Sets the completed_transfers of this InlineResponse20056Balances.


        :param completed_transfers: The completed_transfers of this InlineResponse20056Balances.  # noqa: E501
        :type: float
        """

        self._completed_transfers = completed_transfers

    @property
    def not_completed_transfers(self):
        """Gets the not_completed_transfers of this InlineResponse20056Balances.  # noqa: E501


        :return: The not_completed_transfers of this InlineResponse20056Balances.  # noqa: E501
        :rtype: float
        """
        return self._not_completed_transfers

    @not_completed_transfers.setter
    def not_completed_transfers(self, not_completed_transfers):
        """Sets the not_completed_transfers of this InlineResponse20056Balances.


        :param not_completed_transfers: The not_completed_transfers of this InlineResponse20056Balances.  # noqa: E501
        :type: float
        """

        self._not_completed_transfers = not_completed_transfers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20056Balances, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20056Balances):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20056Balances):
            return True

        return self.to_dict() != other.to_dict()
