# coding: utf-8

"""
    BAPP API

    Test description  # noqa: E501

    OpenAPI spec version: v1
    Contact: contact@snippets.local
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class InventoryModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'stock': 'int',
        'administrator': 'int',
        'series': 'int',
        'location': 'int',
        'number': 'str',
        '_date': 'date',
        'status': 'int',
        'accounting': 'str',
        'inventory': 'str',
        'difference': 'str',
        'depreciation': 'str',
        'view_tokens': 'str',
        'formatted_number': 'str'
    }

    attribute_map = {
        'id': 'id',
        'stock': 'stock',
        'administrator': 'administrator',
        'series': 'series',
        'location': 'location',
        'number': 'number',
        '_date': 'date',
        'status': 'status',
        'accounting': 'accounting',
        'inventory': 'inventory',
        'difference': 'difference',
        'depreciation': 'depreciation',
        'view_tokens': 'view_tokens',
        'formatted_number': 'formatted_number'
    }

    def __init__(self, id=None, stock=None, administrator=None, series=None, location=None, number=None, _date=None, status=None, accounting=None, inventory=None, difference=None, depreciation=None, view_tokens=None, formatted_number=None, _configuration=None):  # noqa: E501
        """InventoryModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._stock = None
        self._administrator = None
        self._series = None
        self._location = None
        self._number = None
        self.__date = None
        self._status = None
        self._accounting = None
        self._inventory = None
        self._difference = None
        self._depreciation = None
        self._view_tokens = None
        self._formatted_number = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.stock = stock
        if administrator is not None:
            self.administrator = administrator
        if series is not None:
            self.series = series
        if location is not None:
            self.location = location
        if number is not None:
            self.number = number
        self._date = _date
        if status is not None:
            self.status = status
        if accounting is not None:
            self.accounting = accounting
        if inventory is not None:
            self.inventory = inventory
        if difference is not None:
            self.difference = difference
        if depreciation is not None:
            self.depreciation = depreciation
        if view_tokens is not None:
            self.view_tokens = view_tokens
        if formatted_number is not None:
            self.formatted_number = formatted_number

    @property
    def id(self):
        """Gets the id of this InventoryModel.  # noqa: E501


        :return: The id of this InventoryModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InventoryModel.


        :param id: The id of this InventoryModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def stock(self):
        """Gets the stock of this InventoryModel.  # noqa: E501


        :return: The stock of this InventoryModel.  # noqa: E501
        :rtype: int
        """
        return self._stock

    @stock.setter
    def stock(self, stock):
        """Sets the stock of this InventoryModel.


        :param stock: The stock of this InventoryModel.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and stock is None:
            raise ValueError("Invalid value for `stock`, must not be `None`")  # noqa: E501

        self._stock = stock

    @property
    def administrator(self):
        """Gets the administrator of this InventoryModel.  # noqa: E501


        :return: The administrator of this InventoryModel.  # noqa: E501
        :rtype: int
        """
        return self._administrator

    @administrator.setter
    def administrator(self, administrator):
        """Sets the administrator of this InventoryModel.


        :param administrator: The administrator of this InventoryModel.  # noqa: E501
        :type: int
        """

        self._administrator = administrator

    @property
    def series(self):
        """Gets the series of this InventoryModel.  # noqa: E501


        :return: The series of this InventoryModel.  # noqa: E501
        :rtype: int
        """
        return self._series

    @series.setter
    def series(self, series):
        """Sets the series of this InventoryModel.


        :param series: The series of this InventoryModel.  # noqa: E501
        :type: int
        """

        self._series = series

    @property
    def location(self):
        """Gets the location of this InventoryModel.  # noqa: E501


        :return: The location of this InventoryModel.  # noqa: E501
        :rtype: int
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this InventoryModel.


        :param location: The location of this InventoryModel.  # noqa: E501
        :type: int
        """

        self._location = location

    @property
    def number(self):
        """Gets the number of this InventoryModel.  # noqa: E501


        :return: The number of this InventoryModel.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this InventoryModel.


        :param number: The number of this InventoryModel.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                number is not None and len(number) < 1):
            raise ValueError("Invalid value for `number`, length must be greater than or equal to `1`")  # noqa: E501

        self._number = number

    @property
    def _date(self):
        """Gets the _date of this InventoryModel.  # noqa: E501


        :return: The _date of this InventoryModel.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this InventoryModel.


        :param _date: The _date of this InventoryModel.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def status(self):
        """Gets the status of this InventoryModel.  # noqa: E501


        :return: The status of this InventoryModel.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InventoryModel.


        :param status: The status of this InventoryModel.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def accounting(self):
        """Gets the accounting of this InventoryModel.  # noqa: E501


        :return: The accounting of this InventoryModel.  # noqa: E501
        :rtype: str
        """
        return self._accounting

    @accounting.setter
    def accounting(self, accounting):
        """Sets the accounting of this InventoryModel.


        :param accounting: The accounting of this InventoryModel.  # noqa: E501
        :type: str
        """

        self._accounting = accounting

    @property
    def inventory(self):
        """Gets the inventory of this InventoryModel.  # noqa: E501


        :return: The inventory of this InventoryModel.  # noqa: E501
        :rtype: str
        """
        return self._inventory

    @inventory.setter
    def inventory(self, inventory):
        """Sets the inventory of this InventoryModel.


        :param inventory: The inventory of this InventoryModel.  # noqa: E501
        :type: str
        """

        self._inventory = inventory

    @property
    def difference(self):
        """Gets the difference of this InventoryModel.  # noqa: E501


        :return: The difference of this InventoryModel.  # noqa: E501
        :rtype: str
        """
        return self._difference

    @difference.setter
    def difference(self, difference):
        """Sets the difference of this InventoryModel.


        :param difference: The difference of this InventoryModel.  # noqa: E501
        :type: str
        """

        self._difference = difference

    @property
    def depreciation(self):
        """Gets the depreciation of this InventoryModel.  # noqa: E501


        :return: The depreciation of this InventoryModel.  # noqa: E501
        :rtype: str
        """
        return self._depreciation

    @depreciation.setter
    def depreciation(self, depreciation):
        """Sets the depreciation of this InventoryModel.


        :param depreciation: The depreciation of this InventoryModel.  # noqa: E501
        :type: str
        """

        self._depreciation = depreciation

    @property
    def view_tokens(self):
        """Gets the view_tokens of this InventoryModel.  # noqa: E501


        :return: The view_tokens of this InventoryModel.  # noqa: E501
        :rtype: str
        """
        return self._view_tokens

    @view_tokens.setter
    def view_tokens(self, view_tokens):
        """Sets the view_tokens of this InventoryModel.


        :param view_tokens: The view_tokens of this InventoryModel.  # noqa: E501
        :type: str
        """

        self._view_tokens = view_tokens

    @property
    def formatted_number(self):
        """Gets the formatted_number of this InventoryModel.  # noqa: E501


        :return: The formatted_number of this InventoryModel.  # noqa: E501
        :rtype: str
        """
        return self._formatted_number

    @formatted_number.setter
    def formatted_number(self, formatted_number):
        """Sets the formatted_number of this InventoryModel.


        :param formatted_number: The formatted_number of this InventoryModel.  # noqa: E501
        :type: str
        """

        self._formatted_number = formatted_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InventoryModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InventoryModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InventoryModel):
            return True

        return self.to_dict() != other.to_dict()
