# coding: utf-8

"""
    BAPP API

    Test description  # noqa: E501

    OpenAPI spec version: v1
    Contact: contact@snippets.local
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class InlineResponse20058Results(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'time': 'str',
        'document_number': 'str',
        'value': 'str',
        'after_value': 'float'
    }

    attribute_map = {
        'time': 'time',
        'document_number': 'document_number',
        'value': 'value',
        'after_value': 'after_value'
    }

    def __init__(self, time=None, document_number=None, value=None, after_value=None, _configuration=None):  # noqa: E501
        """InlineResponse20058Results - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._time = None
        self._document_number = None
        self._value = None
        self._after_value = None
        self.discriminator = None

        if time is not None:
            self.time = time
        if document_number is not None:
            self.document_number = document_number
        if value is not None:
            self.value = value
        if after_value is not None:
            self.after_value = after_value

    @property
    def time(self):
        """Gets the time of this InlineResponse20058Results.  # noqa: E501


        :return: The time of this InlineResponse20058Results.  # noqa: E501
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this InlineResponse20058Results.


        :param time: The time of this InlineResponse20058Results.  # noqa: E501
        :type: str
        """

        self._time = time

    @property
    def document_number(self):
        """Gets the document_number of this InlineResponse20058Results.  # noqa: E501


        :return: The document_number of this InlineResponse20058Results.  # noqa: E501
        :rtype: str
        """
        return self._document_number

    @document_number.setter
    def document_number(self, document_number):
        """Sets the document_number of this InlineResponse20058Results.


        :param document_number: The document_number of this InlineResponse20058Results.  # noqa: E501
        :type: str
        """

        self._document_number = document_number

    @property
    def value(self):
        """Gets the value of this InlineResponse20058Results.  # noqa: E501


        :return: The value of this InlineResponse20058Results.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this InlineResponse20058Results.


        :param value: The value of this InlineResponse20058Results.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def after_value(self):
        """Gets the after_value of this InlineResponse20058Results.  # noqa: E501


        :return: The after_value of this InlineResponse20058Results.  # noqa: E501
        :rtype: float
        """
        return self._after_value

    @after_value.setter
    def after_value(self, after_value):
        """Sets the after_value of this InlineResponse20058Results.


        :param after_value: The after_value of this InlineResponse20058Results.  # noqa: E501
        :type: float
        """

        self._after_value = after_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20058Results, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20058Results):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20058Results):
            return True

        return self.to_dict() != other.to_dict()
