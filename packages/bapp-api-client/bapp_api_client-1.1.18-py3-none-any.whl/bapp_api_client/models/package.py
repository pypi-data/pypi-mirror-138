# coding: utf-8

"""
    BAPP API

    Test description  # noqa: E501

    OpenAPI spec version: v1
    Contact: contact@snippets.local
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class Package(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'extra_data': 'object',
        'price': 'str',
        'qty': 'int',
        'category': 'int',
        'product': 'int',
        'currency': 'str',
        'features': 'list[int]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'extra_data': 'extra_data',
        'price': 'price',
        'qty': 'qty',
        'category': 'category',
        'product': 'product',
        'currency': 'currency',
        'features': 'features'
    }

    def __init__(self, id=None, name=None, extra_data=None, price=None, qty=None, category=None, product=None, currency=None, features=None, _configuration=None):  # noqa: E501
        """Package - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._extra_data = None
        self._price = None
        self._qty = None
        self._category = None
        self._product = None
        self._currency = None
        self._features = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        if extra_data is not None:
            self.extra_data = extra_data
        self.price = price
        if qty is not None:
            self.qty = qty
        if category is not None:
            self.category = category
        if product is not None:
            self.product = product
        self.currency = currency
        self.features = features

    @property
    def id(self):
        """Gets the id of this Package.  # noqa: E501


        :return: The id of this Package.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Package.


        :param id: The id of this Package.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Package.  # noqa: E501


        :return: The name of this Package.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Package.


        :param name: The name of this Package.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 100):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def extra_data(self):
        """Gets the extra_data of this Package.  # noqa: E501


        :return: The extra_data of this Package.  # noqa: E501
        :rtype: object
        """
        return self._extra_data

    @extra_data.setter
    def extra_data(self, extra_data):
        """Sets the extra_data of this Package.


        :param extra_data: The extra_data of this Package.  # noqa: E501
        :type: object
        """

        self._extra_data = extra_data

    @property
    def price(self):
        """Gets the price of this Package.  # noqa: E501


        :return: The price of this Package.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Package.


        :param price: The price of this Package.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def qty(self):
        """Gets the qty of this Package.  # noqa: E501


        :return: The qty of this Package.  # noqa: E501
        :rtype: int
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """Sets the qty of this Package.


        :param qty: The qty of this Package.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                qty is not None and qty > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `qty`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self._configuration.client_side_validation and
                qty is not None and qty < 0):  # noqa: E501
            raise ValueError("Invalid value for `qty`, must be a value greater than or equal to `0`")  # noqa: E501

        self._qty = qty

    @property
    def category(self):
        """Gets the category of this Package.  # noqa: E501


        :return: The category of this Package.  # noqa: E501
        :rtype: int
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Package.


        :param category: The category of this Package.  # noqa: E501
        :type: int
        """

        self._category = category

    @property
    def product(self):
        """Gets the product of this Package.  # noqa: E501


        :return: The product of this Package.  # noqa: E501
        :rtype: int
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this Package.


        :param product: The product of this Package.  # noqa: E501
        :type: int
        """

        self._product = product

    @property
    def currency(self):
        """Gets the currency of this Package.  # noqa: E501


        :return: The currency of this Package.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Package.


        :param currency: The currency of this Package.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def features(self):
        """Gets the features of this Package.  # noqa: E501


        :return: The features of this Package.  # noqa: E501
        :rtype: list[int]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this Package.


        :param features: The features of this Package.  # noqa: E501
        :type: list[int]
        """
        if self._configuration.client_side_validation and features is None:
            raise ValueError("Invalid value for `features`, must not be `None`")  # noqa: E501

        self._features = features

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Package, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Package):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Package):
            return True

        return self.to_dict() != other.to_dict()
