# coding: utf-8

"""
    Aliro Q.Network

    This is an api for the Aliro Q.Network  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: nick@aliroquantum.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from aliro_quantum_networking.configuration import Configuration


class StatisticsSummary(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'average_entanglement_fidelity': 'float',
        'average_entanglement_rate': 'float',
        'average_pairs_entangled': 'float'
    }

    attribute_map = {
        'average_entanglement_fidelity': 'averageEntanglementFidelity',
        'average_entanglement_rate': 'averageEntanglementRate',
        'average_pairs_entangled': 'averagePairsEntangled'
    }

    def __init__(self, average_entanglement_fidelity=None, average_entanglement_rate=None, average_pairs_entangled=None, local_vars_configuration=None):  # noqa: E501
        """StatisticsSummary - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._average_entanglement_fidelity = None
        self._average_entanglement_rate = None
        self._average_pairs_entangled = None
        self.discriminator = None

        if average_entanglement_fidelity is not None:
            self.average_entanglement_fidelity = average_entanglement_fidelity
        if average_entanglement_rate is not None:
            self.average_entanglement_rate = average_entanglement_rate
        if average_pairs_entangled is not None:
            self.average_pairs_entangled = average_pairs_entangled

    @property
    def average_entanglement_fidelity(self):
        """Gets the average_entanglement_fidelity of this StatisticsSummary.  # noqa: E501


        :return: The average_entanglement_fidelity of this StatisticsSummary.  # noqa: E501
        :rtype: float
        """
        return self._average_entanglement_fidelity

    @average_entanglement_fidelity.setter
    def average_entanglement_fidelity(self, average_entanglement_fidelity):
        """Sets the average_entanglement_fidelity of this StatisticsSummary.


        :param average_entanglement_fidelity: The average_entanglement_fidelity of this StatisticsSummary.  # noqa: E501
        :type: float
        """

        self._average_entanglement_fidelity = average_entanglement_fidelity

    @property
    def average_entanglement_rate(self):
        """Gets the average_entanglement_rate of this StatisticsSummary.  # noqa: E501


        :return: The average_entanglement_rate of this StatisticsSummary.  # noqa: E501
        :rtype: float
        """
        return self._average_entanglement_rate

    @average_entanglement_rate.setter
    def average_entanglement_rate(self, average_entanglement_rate):
        """Sets the average_entanglement_rate of this StatisticsSummary.


        :param average_entanglement_rate: The average_entanglement_rate of this StatisticsSummary.  # noqa: E501
        :type: float
        """

        self._average_entanglement_rate = average_entanglement_rate

    @property
    def average_pairs_entangled(self):
        """Gets the average_pairs_entangled of this StatisticsSummary.  # noqa: E501


        :return: The average_pairs_entangled of this StatisticsSummary.  # noqa: E501
        :rtype: float
        """
        return self._average_pairs_entangled

    @average_pairs_entangled.setter
    def average_pairs_entangled(self, average_pairs_entangled):
        """Sets the average_pairs_entangled of this StatisticsSummary.


        :param average_pairs_entangled: The average_pairs_entangled of this StatisticsSummary.  # noqa: E501
        :type: float
        """

        self._average_pairs_entangled = average_pairs_entangled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatisticsSummary):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StatisticsSummary):
            return True

        return self.to_dict() != other.to_dict()
