# coding: utf-8

"""
    Aliro Q.Network

    This is an api for the Aliro Q.Network  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: nick@aliroquantum.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from aliro_quantum_networking.configuration import Configuration


class SubmissionOverviewOutputAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'complete_date': 'str',
        'create_date': 'str',
        'id': 'str',
        'status': 'StatusTitle',
        'submission_overview_type': 'str',
        'summary': 'StatisticsSummary'
    }

    attribute_map = {
        'complete_date': 'completeDate',
        'create_date': 'createDate',
        'id': 'id',
        'status': 'status',
        'submission_overview_type': 'submissionOverviewType',
        'summary': 'summary'
    }

    def __init__(self, complete_date=None, create_date=None, id=None, status=None, submission_overview_type=None, summary=None, local_vars_configuration=None):  # noqa: E501
        """SubmissionOverviewOutputAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._complete_date = None
        self._create_date = None
        self._id = None
        self._status = None
        self._submission_overview_type = None
        self._summary = None
        self.discriminator = None

        if complete_date is not None:
            self.complete_date = complete_date
        self.create_date = create_date
        self.id = id
        self.status = status
        self.submission_overview_type = submission_overview_type
        self.summary = summary

    @property
    def complete_date(self):
        """Gets the complete_date of this SubmissionOverviewOutputAllOf.  # noqa: E501


        :return: The complete_date of this SubmissionOverviewOutputAllOf.  # noqa: E501
        :rtype: str
        """
        return self._complete_date

    @complete_date.setter
    def complete_date(self, complete_date):
        """Sets the complete_date of this SubmissionOverviewOutputAllOf.


        :param complete_date: The complete_date of this SubmissionOverviewOutputAllOf.  # noqa: E501
        :type: str
        """

        self._complete_date = complete_date

    @property
    def create_date(self):
        """Gets the create_date of this SubmissionOverviewOutputAllOf.  # noqa: E501


        :return: The create_date of this SubmissionOverviewOutputAllOf.  # noqa: E501
        :rtype: str
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this SubmissionOverviewOutputAllOf.


        :param create_date: The create_date of this SubmissionOverviewOutputAllOf.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and create_date is None:  # noqa: E501
            raise ValueError("Invalid value for `create_date`, must not be `None`")  # noqa: E501

        self._create_date = create_date

    @property
    def id(self):
        """Gets the id of this SubmissionOverviewOutputAllOf.  # noqa: E501


        :return: The id of this SubmissionOverviewOutputAllOf.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubmissionOverviewOutputAllOf.


        :param id: The id of this SubmissionOverviewOutputAllOf.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def status(self):
        """Gets the status of this SubmissionOverviewOutputAllOf.  # noqa: E501


        :return: The status of this SubmissionOverviewOutputAllOf.  # noqa: E501
        :rtype: StatusTitle
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SubmissionOverviewOutputAllOf.


        :param status: The status of this SubmissionOverviewOutputAllOf.  # noqa: E501
        :type: StatusTitle
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def submission_overview_type(self):
        """Gets the submission_overview_type of this SubmissionOverviewOutputAllOf.  # noqa: E501

        Must be \"SubmissionOverviewOutput\"  # noqa: E501

        :return: The submission_overview_type of this SubmissionOverviewOutputAllOf.  # noqa: E501
        :rtype: str
        """
        return self._submission_overview_type

    @submission_overview_type.setter
    def submission_overview_type(self, submission_overview_type):
        """Sets the submission_overview_type of this SubmissionOverviewOutputAllOf.

        Must be \"SubmissionOverviewOutput\"  # noqa: E501

        :param submission_overview_type: The submission_overview_type of this SubmissionOverviewOutputAllOf.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and submission_overview_type is None:  # noqa: E501
            raise ValueError("Invalid value for `submission_overview_type`, must not be `None`")  # noqa: E501

        self._submission_overview_type = submission_overview_type

    @property
    def summary(self):
        """Gets the summary of this SubmissionOverviewOutputAllOf.  # noqa: E501


        :return: The summary of this SubmissionOverviewOutputAllOf.  # noqa: E501
        :rtype: StatisticsSummary
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this SubmissionOverviewOutputAllOf.


        :param summary: The summary of this SubmissionOverviewOutputAllOf.  # noqa: E501
        :type: StatisticsSummary
        """
        if self.local_vars_configuration.client_side_validation and summary is None:  # noqa: E501
            raise ValueError("Invalid value for `summary`, must not be `None`")  # noqa: E501

        self._summary = summary

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubmissionOverviewOutputAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubmissionOverviewOutputAllOf):
            return True

        return self.to_dict() != other.to_dict()
