# coding: utf-8

"""
    Aliro Q.Network

    This is an api for the Aliro Q.Network  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: nick@aliroquantum.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from aliro_quantum_networking.configuration import Configuration


class Status(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'status_title': 'StatusTitle',
        'status_message': 'str'
    }

    attribute_map = {
        'status_title': 'statusTitle',
        'status_message': 'statusMessage'
    }

    def __init__(self, status_title=None, status_message=None, local_vars_configuration=None):  # noqa: E501
        """Status - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._status_title = None
        self._status_message = None
        self.discriminator = None

        self.status_title = status_title
        self.status_message = status_message

    @property
    def status_title(self):
        """Gets the status_title of this Status.  # noqa: E501


        :return: The status_title of this Status.  # noqa: E501
        :rtype: StatusTitle
        """
        return self._status_title

    @status_title.setter
    def status_title(self, status_title):
        """Sets the status_title of this Status.


        :param status_title: The status_title of this Status.  # noqa: E501
        :type: StatusTitle
        """
        if self.local_vars_configuration.client_side_validation and status_title is None:  # noqa: E501
            raise ValueError("Invalid value for `status_title`, must not be `None`")  # noqa: E501

        self._status_title = status_title

    @property
    def status_message(self):
        """Gets the status_message of this Status.  # noqa: E501


        :return: The status_message of this Status.  # noqa: E501
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this Status.


        :param status_message: The status_message of this Status.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and status_message is None:  # noqa: E501
            raise ValueError("Invalid value for `status_message`, must not be `None`")  # noqa: E501

        self._status_message = status_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Status):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Status):
            return True

        return self.to_dict() != other.to_dict()
