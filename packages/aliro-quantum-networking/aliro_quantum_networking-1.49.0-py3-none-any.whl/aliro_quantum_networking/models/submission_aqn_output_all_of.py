# coding: utf-8

"""
    Aliro Q.Network

    This is an api for the Aliro Q.Network  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: nick@aliroquantum.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from aliro_quantum_networking.configuration import Configuration


class SubmissionAqnOutputAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'run_results': 'list[SubmissionAqnOutputAllOfRunResults]',
        'submission_overview': 'SubmissionOverviewOutput'
    }

    attribute_map = {
        'run_results': 'runResults',
        'submission_overview': 'submissionOverview'
    }

    def __init__(self, run_results=None, submission_overview=None, local_vars_configuration=None):  # noqa: E501
        """SubmissionAqnOutputAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._run_results = None
        self._submission_overview = None
        self.discriminator = None

        self.run_results = run_results
        self.submission_overview = submission_overview

    @property
    def run_results(self):
        """Gets the run_results of this SubmissionAqnOutputAllOf.  # noqa: E501


        :return: The run_results of this SubmissionAqnOutputAllOf.  # noqa: E501
        :rtype: list[SubmissionAqnOutputAllOfRunResults]
        """
        return self._run_results

    @run_results.setter
    def run_results(self, run_results):
        """Sets the run_results of this SubmissionAqnOutputAllOf.


        :param run_results: The run_results of this SubmissionAqnOutputAllOf.  # noqa: E501
        :type: list[SubmissionAqnOutputAllOfRunResults]
        """
        if self.local_vars_configuration.client_side_validation and run_results is None:  # noqa: E501
            raise ValueError("Invalid value for `run_results`, must not be `None`")  # noqa: E501

        self._run_results = run_results

    @property
    def submission_overview(self):
        """Gets the submission_overview of this SubmissionAqnOutputAllOf.  # noqa: E501


        :return: The submission_overview of this SubmissionAqnOutputAllOf.  # noqa: E501
        :rtype: SubmissionOverviewOutput
        """
        return self._submission_overview

    @submission_overview.setter
    def submission_overview(self, submission_overview):
        """Sets the submission_overview of this SubmissionAqnOutputAllOf.


        :param submission_overview: The submission_overview of this SubmissionAqnOutputAllOf.  # noqa: E501
        :type: SubmissionOverviewOutput
        """
        if self.local_vars_configuration.client_side_validation and submission_overview is None:  # noqa: E501
            raise ValueError("Invalid value for `submission_overview`, must not be `None`")  # noqa: E501

        self._submission_overview = submission_overview

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubmissionAqnOutputAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubmissionAqnOutputAllOf):
            return True

        return self.to_dict() != other.to_dict()
