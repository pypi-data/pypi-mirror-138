# coding: utf-8

"""
    Aliro Q.Network

    This is an api for the Aliro Q.Network  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: nick@aliroquantum.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from aliro_quantum_networking.configuration import Configuration


class SubmissionAqnBase(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'classical_channels': 'list[ClassicalChannel]',
        'global_settings': 'SubmissionAqnBaseGlobalSettings',
        'nodes': 'list[Node]',
        'quantum_connections': 'list[QuantumConnection]',
        'request': 'Request'
    }

    attribute_map = {
        'classical_channels': 'classicalChannels',
        'global_settings': 'globalSettings',
        'nodes': 'nodes',
        'quantum_connections': 'quantumConnections',
        'request': 'request'
    }

    def __init__(self, classical_channels=None, global_settings=None, nodes=None, quantum_connections=None, request=None, local_vars_configuration=None):  # noqa: E501
        """SubmissionAqnBase - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._classical_channels = None
        self._global_settings = None
        self._nodes = None
        self._quantum_connections = None
        self._request = None
        self.discriminator = None

        if classical_channels is not None:
            self.classical_channels = classical_channels
        if global_settings is not None:
            self.global_settings = global_settings
        self.nodes = nodes
        self.quantum_connections = quantum_connections
        self.request = request

    @property
    def classical_channels(self):
        """Gets the classical_channels of this SubmissionAqnBase.  # noqa: E501


        :return: The classical_channels of this SubmissionAqnBase.  # noqa: E501
        :rtype: list[ClassicalChannel]
        """
        return self._classical_channels

    @classical_channels.setter
    def classical_channels(self, classical_channels):
        """Sets the classical_channels of this SubmissionAqnBase.


        :param classical_channels: The classical_channels of this SubmissionAqnBase.  # noqa: E501
        :type: list[ClassicalChannel]
        """

        self._classical_channels = classical_channels

    @property
    def global_settings(self):
        """Gets the global_settings of this SubmissionAqnBase.  # noqa: E501


        :return: The global_settings of this SubmissionAqnBase.  # noqa: E501
        :rtype: SubmissionAqnBaseGlobalSettings
        """
        return self._global_settings

    @global_settings.setter
    def global_settings(self, global_settings):
        """Sets the global_settings of this SubmissionAqnBase.


        :param global_settings: The global_settings of this SubmissionAqnBase.  # noqa: E501
        :type: SubmissionAqnBaseGlobalSettings
        """

        self._global_settings = global_settings

    @property
    def nodes(self):
        """Gets the nodes of this SubmissionAqnBase.  # noqa: E501


        :return: The nodes of this SubmissionAqnBase.  # noqa: E501
        :rtype: list[Node]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this SubmissionAqnBase.


        :param nodes: The nodes of this SubmissionAqnBase.  # noqa: E501
        :type: list[Node]
        """
        if self.local_vars_configuration.client_side_validation and nodes is None:  # noqa: E501
            raise ValueError("Invalid value for `nodes`, must not be `None`")  # noqa: E501

        self._nodes = nodes

    @property
    def quantum_connections(self):
        """Gets the quantum_connections of this SubmissionAqnBase.  # noqa: E501


        :return: The quantum_connections of this SubmissionAqnBase.  # noqa: E501
        :rtype: list[QuantumConnection]
        """
        return self._quantum_connections

    @quantum_connections.setter
    def quantum_connections(self, quantum_connections):
        """Sets the quantum_connections of this SubmissionAqnBase.


        :param quantum_connections: The quantum_connections of this SubmissionAqnBase.  # noqa: E501
        :type: list[QuantumConnection]
        """
        if self.local_vars_configuration.client_side_validation and quantum_connections is None:  # noqa: E501
            raise ValueError("Invalid value for `quantum_connections`, must not be `None`")  # noqa: E501

        self._quantum_connections = quantum_connections

    @property
    def request(self):
        """Gets the request of this SubmissionAqnBase.  # noqa: E501


        :return: The request of this SubmissionAqnBase.  # noqa: E501
        :rtype: Request
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this SubmissionAqnBase.


        :param request: The request of this SubmissionAqnBase.  # noqa: E501
        :type: Request
        """
        if self.local_vars_configuration.client_side_validation and request is None:  # noqa: E501
            raise ValueError("Invalid value for `request`, must not be `None`")  # noqa: E501

        self._request = request

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubmissionAqnBase):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubmissionAqnBase):
            return True

        return self.to_dict() != other.to_dict()
