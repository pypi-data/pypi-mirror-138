# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: p2pd.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\np2pd.proto\"\xea\x03\n\x07Request\x12\x1b\n\x04type\x18\x01 \x02(\x0e\x32\r.Request.Type\x12 \n\x07\x63onnect\x18\x02 \x01(\x0b\x32\x0f.ConnectRequest\x12&\n\nstreamOpen\x18\x03 \x01(\x0b\x32\x12.StreamOpenRequest\x12,\n\rstreamHandler\x18\x04 \x01(\x0b\x32\x15.StreamHandlerRequest\x12\x18\n\x03\x64ht\x18\x05 \x01(\x0b\x32\x0b.DHTRequest\x12(\n\x0b\x63onnManager\x18\x06 \x01(\x0b\x32\x13.ConnManagerRequest\x12&\n\ndisconnect\x18\x07 \x01(\x0b\x32\x12.DisconnectRequest\x12\x1a\n\x06pubsub\x18\x08 \x01(\x0b\x32\n.PSRequest\x12$\n\tpeerStore\x18\t \x01(\x0b\x32\x11.PeerstoreRequest\"\x9b\x01\n\x04Type\x12\x0c\n\x08IDENTIFY\x10\x00\x12\x0b\n\x07\x43ONNECT\x10\x01\x12\x0f\n\x0bSTREAM_OPEN\x10\x02\x12\x12\n\x0eSTREAM_HANDLER\x10\x03\x12\x07\n\x03\x44HT\x10\x04\x12\x0e\n\nLIST_PEERS\x10\x05\x12\x0f\n\x0b\x43ONNMANAGER\x10\x06\x12\x0e\n\nDISCONNECT\x10\x07\x12\n\n\x06PUBSUB\x10\x08\x12\r\n\tPEERSTORE\x10\t\"\xa1\x02\n\x08Response\x12\x1c\n\x04type\x18\x01 \x02(\x0e\x32\x0e.Response.Type\x12\x1d\n\x05\x65rror\x18\x02 \x01(\x0b\x32\x0e.ErrorResponse\x12\x1f\n\nstreamInfo\x18\x03 \x01(\x0b\x32\x0b.StreamInfo\x12#\n\x08identify\x18\x04 \x01(\x0b\x32\x11.IdentifyResponse\x12\x19\n\x03\x64ht\x18\x05 \x01(\x0b\x32\x0c.DHTResponse\x12\x18\n\x05peers\x18\x06 \x03(\x0b\x32\t.PeerInfo\x12\x1b\n\x06pubsub\x18\x07 \x01(\x0b\x32\x0b.PSResponse\x12%\n\tpeerStore\x18\x08 \x01(\x0b\x32\x12.PeerstoreResponse\"\x19\n\x04Type\x12\x06\n\x02OK\x10\x00\x12\t\n\x05\x45RROR\x10\x01\"-\n\x10IdentifyResponse\x12\n\n\x02id\x18\x01 \x02(\x0c\x12\r\n\x05\x61\x64\x64rs\x18\x02 \x03(\x0c\">\n\x0e\x43onnectRequest\x12\x0c\n\x04peer\x18\x01 \x02(\x0c\x12\r\n\x05\x61\x64\x64rs\x18\x02 \x03(\x0c\x12\x0f\n\x07timeout\x18\x03 \x01(\x03\"A\n\x11StreamOpenRequest\x12\x0c\n\x04peer\x18\x01 \x02(\x0c\x12\r\n\x05proto\x18\x02 \x03(\t\x12\x0f\n\x07timeout\x18\x03 \x01(\x03\"3\n\x14StreamHandlerRequest\x12\x0c\n\x04\x61\x64\x64r\x18\x01 \x02(\x0c\x12\r\n\x05proto\x18\x02 \x03(\t\"\x1c\n\rErrorResponse\x12\x0b\n\x03msg\x18\x01 \x02(\t\"7\n\nStreamInfo\x12\x0c\n\x04peer\x18\x01 \x02(\x0c\x12\x0c\n\x04\x61\x64\x64r\x18\x02 \x02(\x0c\x12\r\n\x05proto\x18\x03 \x02(\t\"\xb9\x02\n\nDHTRequest\x12\x1e\n\x04type\x18\x01 \x02(\x0e\x32\x10.DHTRequest.Type\x12\x0c\n\x04peer\x18\x02 \x01(\x0c\x12\x0b\n\x03\x63id\x18\x03 \x01(\x0c\x12\x0b\n\x03key\x18\x04 \x01(\x0c\x12\r\n\x05value\x18\x05 \x01(\x0c\x12\r\n\x05\x63ount\x18\x06 \x01(\x05\x12\x0f\n\x07timeout\x18\x07 \x01(\x03\"\xb3\x01\n\x04Type\x12\r\n\tFIND_PEER\x10\x00\x12 \n\x1c\x46IND_PEERS_CONNECTED_TO_PEER\x10\x01\x12\x12\n\x0e\x46IND_PROVIDERS\x10\x02\x12\x15\n\x11GET_CLOSEST_PEERS\x10\x03\x12\x12\n\x0eGET_PUBLIC_KEY\x10\x04\x12\r\n\tGET_VALUE\x10\x05\x12\x10\n\x0cSEARCH_VALUE\x10\x06\x12\r\n\tPUT_VALUE\x10\x07\x12\x0b\n\x07PROVIDE\x10\x08\"}\n\x0b\x44HTResponse\x12\x1f\n\x04type\x18\x01 \x02(\x0e\x32\x11.DHTResponse.Type\x12\x17\n\x04peer\x18\x02 \x01(\x0b\x32\t.PeerInfo\x12\r\n\x05value\x18\x03 \x01(\x0c\"%\n\x04Type\x12\t\n\x05\x42\x45GIN\x10\x00\x12\t\n\x05VALUE\x10\x01\x12\x07\n\x03\x45ND\x10\x02\"%\n\x08PeerInfo\x12\n\n\x02id\x18\x01 \x02(\x0c\x12\r\n\x05\x61\x64\x64rs\x18\x02 \x03(\x0c\"\x97\x01\n\x12\x43onnManagerRequest\x12&\n\x04type\x18\x01 \x02(\x0e\x32\x18.ConnManagerRequest.Type\x12\x0c\n\x04peer\x18\x02 \x01(\x0c\x12\x0b\n\x03tag\x18\x03 \x01(\t\x12\x0e\n\x06weight\x18\x04 \x01(\x03\".\n\x04Type\x12\x0c\n\x08TAG_PEER\x10\x00\x12\x0e\n\nUNTAG_PEER\x10\x01\x12\x08\n\x04TRIM\x10\x02\"!\n\x11\x44isconnectRequest\x12\x0c\n\x04peer\x18\x01 \x02(\x0c\"\x8b\x01\n\tPSRequest\x12\x1d\n\x04type\x18\x01 \x02(\x0e\x32\x0f.PSRequest.Type\x12\r\n\x05topic\x18\x02 \x01(\t\x12\x0c\n\x04\x64\x61ta\x18\x03 \x01(\x0c\"B\n\x04Type\x12\x0e\n\nGET_TOPICS\x10\x00\x12\x0e\n\nLIST_PEERS\x10\x01\x12\x0b\n\x07PUBLISH\x10\x02\x12\r\n\tSUBSCRIBE\x10\x03\"h\n\tPSMessage\x12\x0c\n\x04\x66rom\x18\x01 \x01(\x0c\x12\x0c\n\x04\x64\x61ta\x18\x02 \x01(\x0c\x12\r\n\x05seqno\x18\x03 \x01(\x0c\x12\x10\n\x08topicIDs\x18\x04 \x03(\t\x12\x11\n\tsignature\x18\x05 \x01(\x0c\x12\x0b\n\x03key\x18\x06 \x01(\x0c\"-\n\nPSResponse\x12\x0e\n\x06topics\x18\x01 \x03(\t\x12\x0f\n\x07peerIDs\x18\x02 \x03(\x0c\"\x82\x01\n\x10PeerstoreRequest\x12$\n\x04type\x18\x01 \x02(\x0e\x32\x16.PeerstoreRequest.Type\x12\n\n\x02id\x18\x02 \x01(\x0c\x12\x0e\n\x06protos\x18\x03 \x03(\t\",\n\x04Type\x12\x11\n\rGET_PROTOCOLS\x10\x01\x12\x11\n\rGET_PEER_INFO\x10\x02\"<\n\x11PeerstoreResponse\x12\x17\n\x04peer\x18\x01 \x01(\x0b\x32\t.PeerInfo\x12\x0e\n\x06protos\x18\x02 \x03(\t')



_REQUEST = DESCRIPTOR.message_types_by_name['Request']
_RESPONSE = DESCRIPTOR.message_types_by_name['Response']
_IDENTIFYRESPONSE = DESCRIPTOR.message_types_by_name['IdentifyResponse']
_CONNECTREQUEST = DESCRIPTOR.message_types_by_name['ConnectRequest']
_STREAMOPENREQUEST = DESCRIPTOR.message_types_by_name['StreamOpenRequest']
_STREAMHANDLERREQUEST = DESCRIPTOR.message_types_by_name['StreamHandlerRequest']
_ERRORRESPONSE = DESCRIPTOR.message_types_by_name['ErrorResponse']
_STREAMINFO = DESCRIPTOR.message_types_by_name['StreamInfo']
_DHTREQUEST = DESCRIPTOR.message_types_by_name['DHTRequest']
_DHTRESPONSE = DESCRIPTOR.message_types_by_name['DHTResponse']
_PEERINFO = DESCRIPTOR.message_types_by_name['PeerInfo']
_CONNMANAGERREQUEST = DESCRIPTOR.message_types_by_name['ConnManagerRequest']
_DISCONNECTREQUEST = DESCRIPTOR.message_types_by_name['DisconnectRequest']
_PSREQUEST = DESCRIPTOR.message_types_by_name['PSRequest']
_PSMESSAGE = DESCRIPTOR.message_types_by_name['PSMessage']
_PSRESPONSE = DESCRIPTOR.message_types_by_name['PSResponse']
_PEERSTOREREQUEST = DESCRIPTOR.message_types_by_name['PeerstoreRequest']
_PEERSTORERESPONSE = DESCRIPTOR.message_types_by_name['PeerstoreResponse']
_REQUEST_TYPE = _REQUEST.enum_types_by_name['Type']
_RESPONSE_TYPE = _RESPONSE.enum_types_by_name['Type']
_DHTREQUEST_TYPE = _DHTREQUEST.enum_types_by_name['Type']
_DHTRESPONSE_TYPE = _DHTRESPONSE.enum_types_by_name['Type']
_CONNMANAGERREQUEST_TYPE = _CONNMANAGERREQUEST.enum_types_by_name['Type']
_PSREQUEST_TYPE = _PSREQUEST.enum_types_by_name['Type']
_PEERSTOREREQUEST_TYPE = _PEERSTOREREQUEST.enum_types_by_name['Type']
Request = _reflection.GeneratedProtocolMessageType('Request', (_message.Message,), {
  'DESCRIPTOR' : _REQUEST,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:Request)
  })
_sym_db.RegisterMessage(Request)

Response = _reflection.GeneratedProtocolMessageType('Response', (_message.Message,), {
  'DESCRIPTOR' : _RESPONSE,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:Response)
  })
_sym_db.RegisterMessage(Response)

IdentifyResponse = _reflection.GeneratedProtocolMessageType('IdentifyResponse', (_message.Message,), {
  'DESCRIPTOR' : _IDENTIFYRESPONSE,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:IdentifyResponse)
  })
_sym_db.RegisterMessage(IdentifyResponse)

ConnectRequest = _reflection.GeneratedProtocolMessageType('ConnectRequest', (_message.Message,), {
  'DESCRIPTOR' : _CONNECTREQUEST,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:ConnectRequest)
  })
_sym_db.RegisterMessage(ConnectRequest)

StreamOpenRequest = _reflection.GeneratedProtocolMessageType('StreamOpenRequest', (_message.Message,), {
  'DESCRIPTOR' : _STREAMOPENREQUEST,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:StreamOpenRequest)
  })
_sym_db.RegisterMessage(StreamOpenRequest)

StreamHandlerRequest = _reflection.GeneratedProtocolMessageType('StreamHandlerRequest', (_message.Message,), {
  'DESCRIPTOR' : _STREAMHANDLERREQUEST,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:StreamHandlerRequest)
  })
_sym_db.RegisterMessage(StreamHandlerRequest)

ErrorResponse = _reflection.GeneratedProtocolMessageType('ErrorResponse', (_message.Message,), {
  'DESCRIPTOR' : _ERRORRESPONSE,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:ErrorResponse)
  })
_sym_db.RegisterMessage(ErrorResponse)

StreamInfo = _reflection.GeneratedProtocolMessageType('StreamInfo', (_message.Message,), {
  'DESCRIPTOR' : _STREAMINFO,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:StreamInfo)
  })
_sym_db.RegisterMessage(StreamInfo)

DHTRequest = _reflection.GeneratedProtocolMessageType('DHTRequest', (_message.Message,), {
  'DESCRIPTOR' : _DHTREQUEST,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:DHTRequest)
  })
_sym_db.RegisterMessage(DHTRequest)

DHTResponse = _reflection.GeneratedProtocolMessageType('DHTResponse', (_message.Message,), {
  'DESCRIPTOR' : _DHTRESPONSE,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:DHTResponse)
  })
_sym_db.RegisterMessage(DHTResponse)

PeerInfo = _reflection.GeneratedProtocolMessageType('PeerInfo', (_message.Message,), {
  'DESCRIPTOR' : _PEERINFO,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:PeerInfo)
  })
_sym_db.RegisterMessage(PeerInfo)

ConnManagerRequest = _reflection.GeneratedProtocolMessageType('ConnManagerRequest', (_message.Message,), {
  'DESCRIPTOR' : _CONNMANAGERREQUEST,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:ConnManagerRequest)
  })
_sym_db.RegisterMessage(ConnManagerRequest)

DisconnectRequest = _reflection.GeneratedProtocolMessageType('DisconnectRequest', (_message.Message,), {
  'DESCRIPTOR' : _DISCONNECTREQUEST,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:DisconnectRequest)
  })
_sym_db.RegisterMessage(DisconnectRequest)

PSRequest = _reflection.GeneratedProtocolMessageType('PSRequest', (_message.Message,), {
  'DESCRIPTOR' : _PSREQUEST,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:PSRequest)
  })
_sym_db.RegisterMessage(PSRequest)

PSMessage = _reflection.GeneratedProtocolMessageType('PSMessage', (_message.Message,), {
  'DESCRIPTOR' : _PSMESSAGE,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:PSMessage)
  })
_sym_db.RegisterMessage(PSMessage)

PSResponse = _reflection.GeneratedProtocolMessageType('PSResponse', (_message.Message,), {
  'DESCRIPTOR' : _PSRESPONSE,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:PSResponse)
  })
_sym_db.RegisterMessage(PSResponse)

PeerstoreRequest = _reflection.GeneratedProtocolMessageType('PeerstoreRequest', (_message.Message,), {
  'DESCRIPTOR' : _PEERSTOREREQUEST,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:PeerstoreRequest)
  })
_sym_db.RegisterMessage(PeerstoreRequest)

PeerstoreResponse = _reflection.GeneratedProtocolMessageType('PeerstoreResponse', (_message.Message,), {
  'DESCRIPTOR' : _PEERSTORERESPONSE,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:PeerstoreResponse)
  })
_sym_db.RegisterMessage(PeerstoreResponse)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _REQUEST._serialized_start=15
  _REQUEST._serialized_end=505
  _REQUEST_TYPE._serialized_start=350
  _REQUEST_TYPE._serialized_end=505
  _RESPONSE._serialized_start=508
  _RESPONSE._serialized_end=797
  _RESPONSE_TYPE._serialized_start=772
  _RESPONSE_TYPE._serialized_end=797
  _IDENTIFYRESPONSE._serialized_start=799
  _IDENTIFYRESPONSE._serialized_end=844
  _CONNECTREQUEST._serialized_start=846
  _CONNECTREQUEST._serialized_end=908
  _STREAMOPENREQUEST._serialized_start=910
  _STREAMOPENREQUEST._serialized_end=975
  _STREAMHANDLERREQUEST._serialized_start=977
  _STREAMHANDLERREQUEST._serialized_end=1028
  _ERRORRESPONSE._serialized_start=1030
  _ERRORRESPONSE._serialized_end=1058
  _STREAMINFO._serialized_start=1060
  _STREAMINFO._serialized_end=1115
  _DHTREQUEST._serialized_start=1118
  _DHTREQUEST._serialized_end=1431
  _DHTREQUEST_TYPE._serialized_start=1252
  _DHTREQUEST_TYPE._serialized_end=1431
  _DHTRESPONSE._serialized_start=1433
  _DHTRESPONSE._serialized_end=1558
  _DHTRESPONSE_TYPE._serialized_start=1521
  _DHTRESPONSE_TYPE._serialized_end=1558
  _PEERINFO._serialized_start=1560
  _PEERINFO._serialized_end=1597
  _CONNMANAGERREQUEST._serialized_start=1600
  _CONNMANAGERREQUEST._serialized_end=1751
  _CONNMANAGERREQUEST_TYPE._serialized_start=1705
  _CONNMANAGERREQUEST_TYPE._serialized_end=1751
  _DISCONNECTREQUEST._serialized_start=1753
  _DISCONNECTREQUEST._serialized_end=1786
  _PSREQUEST._serialized_start=1789
  _PSREQUEST._serialized_end=1928
  _PSREQUEST_TYPE._serialized_start=1862
  _PSREQUEST_TYPE._serialized_end=1928
  _PSMESSAGE._serialized_start=1930
  _PSMESSAGE._serialized_end=2034
  _PSRESPONSE._serialized_start=2036
  _PSRESPONSE._serialized_end=2081
  _PEERSTOREREQUEST._serialized_start=2084
  _PEERSTOREREQUEST._serialized_end=2214
  _PEERSTOREREQUEST_TYPE._serialized_start=2170
  _PEERSTOREREQUEST_TYPE._serialized_end=2214
  _PEERSTORERESPONSE._serialized_start=2216
  _PEERSTORERESPONSE._serialized_end=2276
# @@protoc_insertion_point(module_scope)
