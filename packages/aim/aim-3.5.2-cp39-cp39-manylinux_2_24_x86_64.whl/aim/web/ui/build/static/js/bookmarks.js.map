{"version":3,"sources":["components/CopyToClipBoard/CopyToClipBoard.tsx","components/CodeBlock/CodeBlock.tsx","services/models/bookmarks/bookmarksAppModel.ts","pages/Bookmarks/components/BookmarkCard/BookmarkCard.tsx","pages/Bookmarks/Bookmarks.tsx","pages/Bookmarks/BookmarksContainer.tsx","config/colors/colors.ts","assets/icons/noData.svg","components/EmptyComponent/EmptyComponent.tsx","services/api/apps/appsService.ts","assets/icons/successIcon.svg","assets/icons/errorIcon.svg","components/NotificationContainer/NotificationContainer.tsx","services/api/dashboard/dashboardService.ts","components/AppBar/AppBar.tsx","components/ConfirmModal/ConfirmModal.tsx"],"names":["CopyToClipboard","contentRef","showSuccessDelay","className","React","useState","showCopiedIcon","setShowCopiedIcon","useEffect","setTimeout","onCopy","useCallback","current","navigator","clipboard","writeText","innerText","trim","then","catch","ErrorBoundary","onClick","style","color","fontSize","name","displayName","memo","CodeBlock","code","language","createRef","defaultProps","theme","tokens","getLineProps","getTokenProps","ref","map","line","i","key","token","CopyToClipBoard","bookmarksRequestRef","model","createModel","isLoading","listData","notifyData","getBookmarksData","dashboardService","fetchDashboardsList","call","data","a","appsService","fetchAppsList","detail","exceptionHandler","appsList","item","app","find","appData","id","app_id","select","state","type","setState","onNotificationAdd","notification","Date","now","message","severity","abort","deleteDashboard","getState","newListData","filter","bookmark","bookmarkAppModel","initialize","init","err","destroy","onBookmarkDelete","onBookmarksNotificationDelete","onNotificationDelete","BookmarkIconType","images","params","metrics","scatters","BookmarkCard","description","openModal","setOpenModal","tags","useMemo","val","label","size","weight","component","tint","to","variant","analytics","ANALYTICS_EVENT_KEYS","bookmarks","view","withOnlyIcon","advancedMode","advancedQuery","query","length","tag","index","COLORS","ConfirmModal","open","onCancel","onSubmit","text","icon","title","statusType","confirmBtnText","Bookmarks","AppBar","BusyLoaderWrapper","EmptyComponent","content","NotificationContainer","handleClose","BookmarksContainer","bookmarksData","useModel","pageView","BGColorLighten","img","src","noData","alt","endpoints","APPS","API","get","fetchApp","createApp","reqBody","post","updateApp","put","deleteApp","delete","Snackbar","autoHideDuration","anchorOrigin","vertical","horizontal","Box","mt","Alert","onClose","iconMapping","success","successIconImg","error","errorIconImg","DASHBOARD","createDashboard","headers","fetchDashboard","updateDashboard","props","children","aria-labelledby","aria-describedby","PaperProps","elevation","cancelBtnText","autoFocus"],"mappings":"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","file":"static/js/bookmarks.js?version=44546a1fdcbb1ed04fc9","sourcesContent":["import React from 'react';\n\nimport { Icon } from 'components/kit';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport { ICopyToClipBoardProps } from 'types/components/CopyToClipBoard/CopyToClipBoard';\n\nfunction CopyToClipboard({\n  contentRef,\n  showSuccessDelay = 1500,\n  className = '',\n}: ICopyToClipBoardProps): React.FunctionComponentElement<ICopyToClipBoardProps> {\n  const [showCopiedIcon, setShowCopiedIcon] = React.useState<boolean>(false);\n\n  React.useEffect(() => {\n    if (showCopiedIcon) {\n      setTimeout(() => {\n        setShowCopiedIcon(false);\n      }, showSuccessDelay);\n    }\n  }, [showCopiedIcon]);\n\n  const onCopy = React.useCallback(() => {\n    if (contentRef.current && !showCopiedIcon) {\n      navigator.clipboard\n        .writeText(contentRef.current.innerText.trim(''))\n        .then(function () {\n          setShowCopiedIcon(true);\n        })\n        .catch();\n    }\n  }, [contentRef, showCopiedIcon]);\n\n  return (\n    <ErrorBoundary>\n      <span className={className} onClick={onCopy}>\n        {showCopiedIcon ? (\n          <span style={{ color: 'green', fontSize: 12 }}>Copied!</span>\n        ) : (\n          <Icon name='copy' />\n        )}\n      </span>\n    </ErrorBoundary>\n  );\n}\n\nCopyToClipboard.displayName = 'CopyToClipBoard';\n\nexport default React.memo<ICopyToClipBoardProps>(CopyToClipboard);\n","import React from 'react';\n// import AssignmentTurnedInOutlinedIcon from '@material-kit/icons/AssignmentTurnedInOutlined';\nimport Highlight, { defaultProps } from 'prism-react-renderer';\n\nimport theme from 'prism-react-renderer/themes/nightOwlLight';\n\nimport CopyToClipBoard from 'components/CopyToClipBoard/CopyToClipBoard';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport { ICodeBlockProps } from 'types/components/CodeBlock/CodeBlock';\n\nimport './CodeBlock.scss';\n\nfunction CodeBlock({\n  code = '',\n  className = '',\n  language = 'python',\n}: ICodeBlockProps): React.FunctionComponentElement<React.ReactNode> {\n  const contentRef = React.createRef<HTMLPreElement>();\n  return (\n    <ErrorBoundary>\n      <div className={`CodeBlock ${className}`}>\n        <Highlight\n          {...defaultProps}\n          theme={theme}\n          code={code.trim()}\n          language={language}\n        >\n          {({ className, style, tokens, getLineProps, getTokenProps }) => (\n            <pre className={className} style={style} ref={contentRef}>\n              {tokens.map((line, i) => (\n                <div key={i} {...getLineProps({ line, key: i })}>\n                  {line.map((token, key) => (\n                    <span key={key} {...getTokenProps({ token, key })} />\n                  ))}\n                </div>\n              ))}\n            </pre>\n          )}\n        </Highlight>\n        <ErrorBoundary>\n          <CopyToClipBoard\n            className='CodeBlock__copy__span'\n            contentRef={contentRef}\n          />\n        </ErrorBoundary>\n      </div>\n    </ErrorBoundary>\n  );\n}\n\nexport default React.memo(CodeBlock);\n","import dashboardService from 'services/api/dashboard/dashboardService';\nimport appsService from 'services/api/apps/appsService';\nimport * as analytics from 'services/analytics';\n\nimport { IBookmarksAppModelState } from 'types/services/models/bookmarks/bookmarksAppModel';\nimport { IBookmarksData } from 'types/pages/bookmarks/Bookmarks';\n\nimport onNotificationAdd from 'utils/app/onNotificationAdd';\nimport exceptionHandler from 'utils/app/exceptionHandler';\nimport onNotificationDelete from 'utils/app/onNotificationDelete';\n\nimport createModel from '../model';\n\nlet bookmarksRequestRef: {\n  call: (exceptionHandler: (detail: any) => void) => Promise<any>;\n  abort: () => void;\n};\n\nconst model = createModel<Partial<IBookmarksAppModelState>>({\n  isLoading: true,\n  listData: [],\n  notifyData: [],\n});\n\nfunction getBookmarksData() {\n  const { call, abort } = dashboardService.fetchDashboardsList();\n  return {\n    call: () =>\n      call().then(async (data: any) => {\n        try {\n          const appsList = await appsService\n            .fetchAppsList()\n            .call((detail: any) => {\n              exceptionHandler({ detail, model: model as any });\n            });\n          const listData = data.map((item: any) => {\n            const app = appsList.find(\n              (appData: any) => appData.id === item.app_id,\n            );\n            return { ...item, select: app.state.select, type: app.type };\n          });\n          model.setState({\n            isLoading: false,\n            listData,\n          });\n        } catch (err: any) {\n          onNotificationAdd({\n            notification: {\n              id: Date.now(),\n              message: err.message,\n              severity: 'error',\n            },\n            model: model as any,\n          });\n        }\n        model.setState({ isLoading: false });\n      }),\n\n    abort,\n  };\n}\n\nfunction onBookmarksNotificationDelete(id: number) {\n  onNotificationDelete({ id, model });\n}\n\nasync function onBookmarkDelete(id: string) {\n  try {\n    model.setState({ isLoading: true });\n    await dashboardService.deleteDashboard(id).call((detail: any) => {\n      exceptionHandler({ detail, model });\n    });\n    const listData: IBookmarksData[] | any = model.getState()?.listData;\n    const newListData = [...listData].filter((bookmark) => bookmark.id !== id);\n    model.setState({\n      listData: newListData,\n      isLoading: false,\n    });\n  } catch (err: any) {\n    model.setState({\n      isLoading: false,\n    });\n    onNotificationAdd({\n      notification: {\n        id: Date.now(),\n        message: err.message,\n        severity: 'error',\n      },\n      model: model as any,\n    });\n  }\n}\n\nfunction initialize() {\n  model.init();\n  try {\n    bookmarksRequestRef = getBookmarksData();\n    bookmarksRequestRef.call((detail) => {\n      exceptionHandler({ detail, model: model as any });\n      model.setState({\n        isLoading: false,\n      });\n    });\n  } catch (err: any) {\n    onNotificationAdd({\n      notification: {\n        id: Date.now(),\n        message: err.message,\n        severity: 'error',\n      },\n      model: model as any,\n    });\n    model.setState({\n      isLoading: false,\n    });\n    bookmarksRequestRef.abort();\n  }\n}\n\nfunction destroy() {\n  bookmarksRequestRef.abort();\n  model.destroy();\n}\nconst bookmarkAppModel = {\n  ...model,\n  initialize,\n  destroy,\n  getBookmarksData,\n  onBookmarkDelete,\n  onBookmarksNotificationDelete,\n};\n\nexport default bookmarkAppModel;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport ConfirmModal from 'components/ConfirmModal/ConfirmModal';\nimport CodeBlock from 'components/CodeBlock/CodeBlock';\nimport { Button, Icon, Badge, Text } from 'components/kit';\nimport { IconName } from 'components/kit/Icon';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport COLORS from 'config/colors/colors';\nimport { ANALYTICS_EVENT_KEYS } from 'config/analytics/analyticsKeysMap';\n\nimport * as analytics from 'services/analytics';\n\nimport { IBookmarkCardProps } from 'types/pages/bookmarks/components/BookmarkCard';\n\nimport './BookmarkCard.scss';\n\nconst BookmarkIconType: { [key: string]: IconName } = {\n  images: 'images',\n  params: 'params',\n  metrics: 'metrics',\n  scatters: 'scatterplot',\n};\n\nfunction BookmarkCard({\n  name,\n  id,\n  app_id,\n  description,\n  onBookmarkDelete,\n  select,\n  type,\n}: IBookmarkCardProps): React.FunctionComponentElement<React.ReactNode> {\n  const [openModal, setOpenModal] = React.useState<boolean>(false);\n\n  function handleOpenModal(): void {\n    setOpenModal(true);\n  }\n  function handleCloseModal(): void {\n    setOpenModal(false);\n  }\n\n  function handleBookmarkDelete(): void {\n    onBookmarkDelete(id);\n  }\n\n  const tags: { label: string }[] = React.useMemo(() => {\n    return select[type]?.map((val: any) => ({ label: val.label })) || [];\n  }, [select]);\n\n  return (\n    <ErrorBoundary>\n      <div className='BookmarkCard'>\n        <div className='BookmarkCard__top'>\n          <div className='BookmarkCard__title__section'>\n            <div className='BookmarkCard__title__section__container'>\n              <Icon name={BookmarkIconType[type]} fontSize={16} />\n              <Text size={18} weight={600} component='h3' tint={100}>\n                {name}\n              </Text>\n            </div>\n            <div className='flex fac fjc'>\n              <NavLink to={`/${type}/${app_id}`}>\n                <Button\n                  variant='outlined'\n                  onClick={() =>\n                    analytics.trackEvent(ANALYTICS_EVENT_KEYS.bookmarks.view)\n                  }\n                >\n                  View Bookmark\n                </Button>\n              </NavLink>\n              <span className='BookmarkCard__delete'>\n                <Button\n                  color='secondary'\n                  withOnlyIcon\n                  onClick={handleOpenModal}\n                >\n                  <Icon name='delete' />\n                </Button>\n              </span>\n            </div>\n          </div>\n          <Text size={12} weight={400} tint={100} component='p'>\n            {description}\n          </Text>\n        </div>\n        {select.advancedMode ? (\n          <div className='BookmarkCard__bottom'>\n            <div className='BookmarkCard__run__expression'>\n              <CodeBlock code={select.advancedQuery} />\n            </div>\n          </div>\n        ) : (\n          <>\n            {select.query && (\n              <div className='BookmarkCard__bottom'>\n                <div className='BookmarkCard__run__expression'>\n                  <CodeBlock code={select.query} />\n                </div>\n              </div>\n            )}\n            {tags.length > 0 && (\n              <div className='BookmarkCard__selected__metrics ScrollBar__hidden'>\n                {tags.map((tag, index) => {\n                  return (\n                    <Badge\n                      size='large'\n                      key={tag.label}\n                      label={tag.label}\n                      color={COLORS[0][index % COLORS[0].length]}\n                    />\n                  );\n                })}\n              </div>\n            )}\n          </>\n        )}\n        <ConfirmModal\n          open={openModal}\n          onCancel={handleCloseModal}\n          onSubmit={handleBookmarkDelete}\n          text='Are you sure you want to delete this bookmark?'\n          icon={<Icon name='delete' />}\n          title='Are you sure?'\n          statusType='error'\n          confirmBtnText='Delete'\n        />\n      </div>\n    </ErrorBoundary>\n  );\n}\n\nexport default BookmarkCard;\n","import React from 'react';\n\nimport AppBar from 'components/AppBar/AppBar';\nimport BusyLoaderWrapper from 'components/BusyLoaderWrapper/BusyLoaderWrapper';\nimport EmptyComponent from 'components/EmptyComponent/EmptyComponent';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\nimport NotificationContainer from 'components/NotificationContainer/NotificationContainer';\n\nimport { IBookmarksProps } from 'types/pages/bookmarks/Bookmarks';\n\nimport BookmarkCard from './components/BookmarkCard/BookmarkCard';\n\nimport './Bookmarks.scss';\n\nfunction Bookmarks({\n  data,\n  onBookmarkDelete,\n  isLoading,\n  notifyData,\n  onNotificationDelete,\n}: IBookmarksProps): React.FunctionComponentElement<React.ReactNode> {\n  return (\n    <ErrorBoundary>\n      <section className='Bookmarks'>\n        <AppBar title='Bookmarks' />\n        <div className='Bookmarks__list container'>\n          <BusyLoaderWrapper isLoading={isLoading}>\n            {data?.length > 0 &&\n              data.map((bookmark) => (\n                <BookmarkCard\n                  key={bookmark.id}\n                  {...bookmark}\n                  onBookmarkDelete={onBookmarkDelete}\n                />\n              ))}\n          </BusyLoaderWrapper>\n          {!isLoading && data?.length === 0 ? (\n            <EmptyComponent size='big' content={'No Bookmarks'} />\n          ) : null}\n        </div>\n      </section>\n      {notifyData?.length > 0 && (\n        <NotificationContainer\n          handleClose={onNotificationDelete}\n          data={notifyData}\n        />\n      )}\n    </ErrorBoundary>\n  );\n}\n\nexport default Bookmarks;\n","import React from 'react';\n\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport { ANALYTICS_EVENT_KEYS } from 'config/analytics/analyticsKeysMap';\n\nimport useModel from 'hooks/model/useModel';\n\nimport bookmarkAppModel from 'services/models/bookmarks/bookmarksAppModel';\nimport * as analytics from 'services/analytics';\n\nimport { INotification } from 'types/components/NotificationContainer/NotificationContainer';\n\nimport Bookmarks from './Bookmarks';\n\nfunction BookmarksContainer(): React.FunctionComponentElement<React.ReactNode> {\n  const bookmarksData = useModel(bookmarkAppModel);\n\n  React.useEffect(() => {\n    bookmarkAppModel.initialize();\n    analytics.pageView(ANALYTICS_EVENT_KEYS.bookmarks.pageView);\n    return () => {\n      bookmarkAppModel.destroy();\n    };\n  }, []);\n\n  return (\n    <ErrorBoundary>\n      <Bookmarks\n        data={bookmarksData?.listData!}\n        isLoading={bookmarksData?.isLoading!}\n        onBookmarkDelete={bookmarkAppModel.onBookmarkDelete}\n        notifyData={bookmarksData?.notifyData as INotification[]}\n        onNotificationDelete={bookmarkAppModel.onBookmarksNotificationDelete}\n      />\n    </ErrorBoundary>\n  );\n}\n\nexport default BookmarksContainer;\n","const COLORS: Array<string[]> = [\n  [\n    '#3E72E7',\n    '#18AB6D',\n    '#7A4CE0',\n    '#E149A0',\n    '#E43D3D',\n    '#E8853D',\n    '#0394B4',\n    '#729B1B',\n  ],\n  [\n    '#336699',\n    '#339966',\n    '#993399',\n    '#999966',\n    '#669966',\n    '#663333',\n    '#669999',\n    '#663366',\n    '#666633',\n    '#996666',\n    '#999933',\n    '#669933',\n    '#663399',\n    '#666699',\n    '#993366',\n    '#996633',\n    '#996699',\n    '#339999',\n    '#333366',\n    '#336633',\n    '#333399',\n    '#339933',\n    '#336666',\n    '#FD7272',\n  ],\n];\n\nexport const BGColorLighten = {\n  '#3E72E7': '#ECF1FD',\n  '#18AB6D': '#E8F7F0',\n  '#7A4CE0': '#F2EDFC',\n  '#E149A0': '#FCEDF6',\n  '#E43D3D': '#FCECEC',\n  '#E8853D': '#FEF2E9',\n  '#0394B4': '#E6F4F7',\n  '#729B1B': '#F1F5E8',\n};\n\nexport default COLORS;\n","export default __webpack_public_path__ + \"static/media/noData.3ca2c2cf.svg\";","import React, { memo } from 'react';\n\nimport noData from 'assets/icons/noData.svg';\n\nimport './EmptyComponent.scss';\n\nfunction EmptyComponent({\n  title,\n  content = 'No Data',\n  img,\n  className = '',\n  size = 'small',\n}: any): React.FunctionComponentElement<React.ReactNode> {\n  return (\n    <div className={`EmptyComponent ${className}`}>\n      <div className={`EmptyComponent__${size}__img`}>\n        {img || <img src={noData} alt='' />}\n      </div>\n      <p className={`EmptyComponent__${size}__title`}>{title}</p>\n      <p className={`EmptyComponent__${size}__content`}>{content}</p>\n    </div>\n  );\n}\n\nexport default memo(EmptyComponent);\n","import { IAppData } from 'types/services/models/metrics/metricsAppModel';\nimport { IApiRequest } from 'types/services/services';\n\nimport API from '../api';\n\nconst endpoints = {\n  APPS: 'apps',\n};\n\nfunction fetchAppsList(): IApiRequest<IAppData[]> {\n  return API.get(endpoints.APPS);\n}\n\nfunction fetchApp(id: string): IApiRequest<IAppData> {\n  return API.get(`${endpoints.APPS}/${id}`);\n}\n\nfunction createApp(reqBody: IAppData): IApiRequest<IAppData> {\n  return API.post(endpoints.APPS, reqBody);\n}\n\nfunction updateApp(id: string, reqBody: IAppData): IApiRequest<IAppData> {\n  return API.put(`${endpoints.APPS}/${id}`, reqBody);\n}\n\nfunction deleteApp(id: string): IApiRequest<any> {\n  return API.delete(`${endpoints.APPS}/${id}`);\n}\nconst appsService = {\n  endpoints,\n  fetchAppsList,\n  fetchApp,\n  createApp,\n  updateApp,\n  deleteApp,\n};\n\nexport default appsService;\n","export default __webpack_public_path__ + \"static/media/successIcon.bd3fad23.svg\";","export default __webpack_public_path__ + \"static/media/errorIcon.09cae82c.svg\";","import React from 'react';\n\nimport { Alert } from '@material-ui/lab';\nimport { Box, Snackbar } from '@material-ui/core';\n\nimport successIconImg from 'assets/icons/successIcon.svg';\nimport errorIconImg from 'assets/icons/errorIcon.svg';\n\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport { INotificationContainer } from 'types/components/NotificationContainer/NotificationContainer';\n\nimport './NotificationContainer.scss';\n\nexport default function NotificationContainer({\n  data,\n  handleClose,\n}: INotificationContainer): React.FunctionComponentElement<React.ReactNode> {\n  return (\n    <ErrorBoundary>\n      <div>\n        <Snackbar\n          open={true}\n          autoHideDuration={3000}\n          anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n        >\n          <div className='NotificationContainer'>\n            {data.map(({ id, severity, message }) => (\n              <Box key={id} mt={0.5}>\n                <Alert\n                  onClose={() => handleClose(+id)}\n                  variant='outlined'\n                  severity={severity}\n                  iconMapping={{\n                    success: <img src={successIconImg} alt='' />,\n                    error: <img src={errorIconImg} alt='' />,\n                  }}\n                >\n                  <div className='NotificationContainer__contentBox'>\n                    <p className='NotificationContainer__contentBox__severity'>\n                      {severity}\n                    </p>\n                    <p className='NotificationContainer__contentBox__message'>\n                      {message}\n                    </p>\n                  </div>\n                </Alert>\n              </Box>\n            ))}\n          </div>\n        </Snackbar>\n      </div>\n    </ErrorBoundary>\n  );\n}\n","import {\n  IAppData,\n  IDashboardRequestBody,\n} from 'types/services/models/metrics/metricsAppModel';\nimport { IApiRequest } from 'types/services/services';\n\nimport API from '../api';\n\nconst endpoints = {\n  DASHBOARD: 'dashboards',\n};\n\nfunction fetchDashboardsList(): IApiRequest<any> {\n  return API.get(endpoints.DASHBOARD);\n}\n\nfunction fetchDashboard(id: string): IApiRequest<any> {\n  return API.get(`${endpoints.DASHBOARD}/${id}`);\n}\n\nfunction createDashboard(\n  reqBody: IDashboardRequestBody,\n): IApiRequest<IAppData> {\n  return API.post(endpoints.DASHBOARD, reqBody, {\n    headers: { 'Content-type': 'application/json' },\n  });\n}\n\nfunction updateDashboard(\n  id: string,\n  reqBody: IDashboardRequestBody,\n): IApiRequest<any> {\n  return API.put(`${endpoints.DASHBOARD}/${id}`, reqBody);\n}\n\nfunction deleteDashboard(id: string): IApiRequest<any> {\n  return API.delete(`${endpoints.DASHBOARD}/${id}`);\n}\n\nconst dashboardService = {\n  endpoints,\n  createDashboard,\n  fetchDashboardsList,\n  fetchDashboard,\n  updateDashboard,\n  deleteDashboard,\n};\n\nexport default dashboardService;\n","import React from 'react';\n\nimport { Text } from 'components/kit';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport { IAppBarProps } from 'types/components/AppBar/AppBar';\n\nimport './AppBar.scss';\n\nfunction AppBar(\n  props: IAppBarProps,\n): React.FunctionComponentElement<React.ReactNode> {\n  return (\n    <ErrorBoundary>\n      <div className='AppBar'>\n        <Text\n          component='h3'\n          weight={600}\n          size={14}\n          tint={100}\n          className='AppBar__title'\n        >\n          {props.title}\n        </Text>\n        {props.children && (\n          <div className={`AppBar__content ${props.className || ''}`}>\n            {props.children}\n          </div>\n        )}\n      </div>\n    </ErrorBoundary>\n  );\n}\n\nexport default AppBar;\n","import React from 'react';\n\nimport { Dialog } from '@material-ui/core';\n\nimport { Button, Text, Icon } from 'components/kit';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport { IConfirmModalProps } from 'types/components/ConfirmModal/ConfirmModal';\n\nimport './ConfirmModal.scss';\n\nfunction ConfirmModal(\n  props: IConfirmModalProps,\n): React.FunctionComponentElement<React.ReactNode> {\n  return (\n    <ErrorBoundary>\n      <Dialog\n        open={props.open}\n        onClose={props.onCancel}\n        aria-labelledby='dialog-title'\n        aria-describedby='dialog-description'\n        PaperProps={{\n          elevation: 10,\n        }}\n        className={`ConfirmModal ConfirmModal__${props.statusType}`}\n      >\n        <div className='ConfirmModal__Body'>\n          <Button\n            size='small'\n            className='ConfirmModal__Close__Icon'\n            color='secondary'\n            withOnlyIcon\n            onClick={props.onCancel}\n          >\n            <Icon name='close' />\n          </Button>\n\n          <div className='ConfirmModal__Title__Container'>\n            <div className='ConfirmModal__Icon'>{props.icon}</div>\n            {props.title && (\n              <Text size={16} tint={100} component='h4' weight={600}>\n                {props.title}\n              </Text>\n            )}\n          </div>\n\n          <div>\n            {props.text && (\n              <Text\n                size={14}\n                className='ConfirmModal__description'\n                weight={400}\n                component='p'\n                id='dialog-description'\n              >\n                {props.title}\n              </Text>\n            )}\n\n            <div>\n              {props.text && (\n                <Text\n                  className='ConfirmModal__description'\n                  weight={400}\n                  component='p'\n                  id='dialog-description'\n                >\n                  {props.text || ''}\n                </Text>\n              )}\n              {props.children && props.children}\n            </div>\n          </div>\n        </div>\n\n        <div className='ConfirmModal__Footer'>\n          <Button\n            onClick={props.onCancel}\n            className='ConfirmModal__CancelButton'\n          >\n            {props.cancelBtnText}\n          </Button>\n          <Button\n            onClick={props.onSubmit}\n            color='primary'\n            variant='contained'\n            className='ConfirmModal__ConfirmButton'\n            autoFocus\n          >\n            {props.confirmBtnText}\n          </Button>\n        </div>\n      </Dialog>\n    </ErrorBoundary>\n  );\n}\n\nConfirmModal.defaultProps = {\n  confirmBtnText: 'Confirm',\n  cancelBtnText: 'Cancel',\n  statusType: 'info',\n};\n\nConfirmModal.displayName = 'ConfirmModal';\n\nexport default React.memo<IConfirmModalProps>(ConfirmModal);\n"],"sourceRoot":""}