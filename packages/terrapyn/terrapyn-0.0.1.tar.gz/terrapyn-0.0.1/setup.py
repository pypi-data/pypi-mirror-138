# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['terrapyn']

package_data = \
{'': ['*']}

install_requires = \
['importlib_metadata>=3.4.0,<4.0.0']

setup_kwargs = {
    'name': 'terrapyn',
    'version': '0.0.1',
    'description': 'Toolkit to manipulate Earth observations and models.',
    'long_description': '# terrapyn\n\n\n[![PyPI version](https://badge.fury.io/py/terrapyn.svg)](https://badge.fury.io/py/terrapyn)\n![versions](https://img.shields.io/pypi/pyversions/terrapyn.svg)\n[![GitHub license](https://img.shields.io/github/license/colinahill/terrapyn.svg)](https://github.com/colinahill/terrapyn/blob/main/LICENSE)\n\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\nToolkit to manipulate Earth observations and models.\n\n\n- Free software: BSD-3-Clause\n- Documentation: https://colinahill.github.io/terrapyn.\n\n\n## Setup\n\n### Turn the project directory into a local Git repository\nFirst, move into the package directory:\n\n```bash\ncd project-name/\n```\n\nThen, install the poetry dependency manager:\n\n```bash\npip install poetry && poetry install\n```\n\n*For more info on poetry, see [python-poetry.org](https://python-poetry.org/).*\n\nLastly, make the directory a Git repository:\n\n```bash\ngit init\n```\n\n### Link the local repository to a remote repository\nCreate a remote repository on GitHub for this project with the following steps:\n1. Go to [create new repository](https://github.com/new) on GitHub.com.\n2. Fill in the repository name (`project-name` from above) and description.\n3. Choose a Public or Private repo.\n4. Leave all other boxes unchecked.\n\nCopy the URL of the repo and set it as the `origin` remote:\n\n```bash\ngit remote add origin https://gitlab.com/<username>/<project-name>.git\n```\n\nInstall pre-commit so we perform checks before committing files\n\n```bash\npoetry run pre-commit install\n```\n\nAdd the files and stage them for commitment\n\n```\ngit add .\ngit commit -m "initial commit"\n```\n\nName the current branch to *main*:\n\n```\ngit branch -M main\n```\n\nFinally, push the initial commit to GitHub:\n\n```\ngit push -u origin main\n```\n\nYou should now see all the files in the repository on GitHub.\n\n## GitHub Continuous Integration\nGitHub Actions takes care of the CI (testing code and deploying docs).\n\n### Setup development branch\nCreate a development branch where changes will by pushed for testing/development, before it is merged to the `main` branch once it\'s safe for production.\n1. Click on the "main" dropdown button your repo\'s homepage\n2. Type in "development" in the search bar\n3. Select "Create branch: development from main".\n\n**Note if \'development\' is not used. You must change the branch reference in certain files within the \'.github/workflows\' directory for CI checks to work.**\n\nAs seen with main, Actions will run for `development`. Additionally, whenever you open a pull request (PR) from `development` to `main`, the checks will automatically run to make sure the code is safe for merging. This is the basic requirement for CI to work.\n\nCI checks exist on the `main` and `development` branches so these are typically "protected" from having bad code. Having the test pypi before pypi allows for user-testing of a new release without pushing out code that isn\'t ready for production. Documentation is auto-published when `main` is updated.\n\n## Create documentation\nGithub Actions creates a `gh-pages` branch with files that are automatically generated from the repository\'s `docs` folder. For more information on how to add pages to this documentation visit [MkDocs-Material docs](https://squidfunk.github.io/mkdocs-material/).\n\nTo publish these docs to your own GitHub site do the following:\n1. Go to "Settings" section.\n2. Scroll down to "GitHub Pages" section.\n3. Within the "Source" section select `gh-pages` branch and `/(root)`.\n4. Click "Save" button.\n\nScroll back down to "GitHub Pages" and a link should be given for where your docs will be published (wait a few minutes for publication). In addition, this link can be added in the `About` section of your repository under "website" to display the link in a convenient location.\n\n## Publish to Test PyPI\n\n### Release process\nThe cookiecutter creates a project which has a release action for release candidates and a seperate one for production releases. This is because, before merging into main (and releasing to production) the developer should develop the code on the `development` branch. With the `development` code ready for production, the developer would create a *release candidate* (otherwise known as *pre-release*) which ships the package to [test pypi](https://test.pypi.org). This is done so the package can be downloaded and user-tested without messing up the *release history* of your pypi package. In addition, it\'s typically recommended to only have production-ready code on your main branch.\n\nFor this process to work, we require both pypi and test pypi accounts:\n\n### Create test PyPI account\nVisit [test pypi](https://test.pypi.org) and sign-up for an account. Remember your username and password as it will be needed later on.\n\n### Setup repository secrets for test PyPI\nGithub Secrets allows you to inject secret variables into your Github Actions without them being visible to the public, which is especially important for open-source projects. This cookiecutter\'s out-of-the-box continous deployment process looks for a few secret variables so we\'ll set those here.\n\nNavigate to the `Settings -> Secrets` section of your repository and add the secrets `TEST_PYPI_USERNAME` and `TEST_PYPI_PASSWORD`. **If you use other variable names, you\'ll have to change the secret references in `.github/workflows/test_pypi_publish.yml`.**\n\n### Create release candidate\nThese are the steps needed to publish to test pypi:\n\n1. Navigate to the `Releases` section of your repository.\n2. Click "Create a new release".\n3. Set `Tag version` to `0.1.0-rc0`.\n4. Select `development` branch.\n5. Set `Release title` to `Release Candidate: v0.1.0` (or another name).\n6. Select "This is a pre-release"\n7. Click "Publish release"\n\nWait a few minutes (or watch the Github Action) for it to be published then visit your [test pypi projects page](https://test.pypi.org/manage/projects/) to see the release.\n\n### Install package\nNow that you code is on test pypi, it can be installed with `pip install` using the extra argument `--extra-index-url`, allowing pip to also check another registry. The full command is:\n\n```bash\npip install your_package_name==0.1.0rc0 --extra-index-url=https://test.pypi.org/simple/`\n```\n\nAs there is no release candidates (and therefore no `0.1.0rc0`) on pypi. This command would not be able to find the given release without the `extra-index-url`.\n\n## Publish to PyPI\n\n## Differences in the process\nPublishing to PyPi is similar to the above process publishing to test pypi. Here, the main differences are outlined:\n\n1. Visit [PyPI](https://www.pypi.org) (not test pypi) and create an account\n2. Set the given username and password as `PYPI_USERNAME` and `PYPI_PASSWORD`.\n3. For release:\n    - Select `main branch`,\n    - Set tag version to `0.1.0`,\n    - Set release title to `v0.1.0`,\n    - **DO NOT** select "This is pre-release".\n\nThe `pip` command should be:\n\n```bash\npip install package-name\n```\n\nor\n\n```bash\npip install package-name==0.1.0\n```\n\nif you wish to pin the version number.\n',
    'author': 'Colin Hill',
    'author_email': 'colinalastairhill@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/colinahill/terrapyn',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
