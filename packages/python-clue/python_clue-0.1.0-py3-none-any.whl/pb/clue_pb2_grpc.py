# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import clue_pb2 as clue__pb2


class CLUEStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AuthLogin = channel.unary_unary(
                '/CLUE/AuthLogin',
                request_serializer=clue__pb2.RequestLogin.SerializeToString,
                response_deserializer=clue__pb2.ResponseLogin.FromString,
                )
        self.GetCohortList = channel.unary_unary(
                '/CLUE/GetCohortList',
                request_serializer=clue__pb2.RequestCohortList.SerializeToString,
                response_deserializer=clue__pb2.ResponseCohortList.FromString,
                )
        self.GetCohortPersonTable = channel.stream_stream(
                '/CLUE/GetCohortPersonTable',
                request_serializer=clue__pb2.RequestCohortStream.SerializeToString,
                response_deserializer=clue__pb2.PersonInfo.FromString,
                )


class CLUEServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AuthLogin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCohortList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCohortPersonTable(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CLUEServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AuthLogin': grpc.unary_unary_rpc_method_handler(
                    servicer.AuthLogin,
                    request_deserializer=clue__pb2.RequestLogin.FromString,
                    response_serializer=clue__pb2.ResponseLogin.SerializeToString,
            ),
            'GetCohortList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCohortList,
                    request_deserializer=clue__pb2.RequestCohortList.FromString,
                    response_serializer=clue__pb2.ResponseCohortList.SerializeToString,
            ),
            'GetCohortPersonTable': grpc.stream_stream_rpc_method_handler(
                    servicer.GetCohortPersonTable,
                    request_deserializer=clue__pb2.RequestCohortStream.FromString,
                    response_serializer=clue__pb2.PersonInfo.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'CLUE', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CLUE(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AuthLogin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CLUE/AuthLogin',
            clue__pb2.RequestLogin.SerializeToString,
            clue__pb2.ResponseLogin.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCohortList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CLUE/GetCohortList',
            clue__pb2.RequestCohortList.SerializeToString,
            clue__pb2.ResponseCohortList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCohortPersonTable(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/CLUE/GetCohortPersonTable',
            clue__pb2.RequestCohortStream.SerializeToString,
            clue__pb2.PersonInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
