# -*- coding: utf-8 -*-
from setuptools import setup

modules = \
['paintprint']
setup_kwargs = {
    'name': 'paintprint',
    'version': '1.0.1',
    'description': 'This module can colorize any text in your terminal',
    'long_description': '# PaintPrint\nThis module can colorize any text in your terminal\n\n# Installing\n```bat\npip install PaintPrint\n```\n\n# Quick start\n\n## Hello world\nThis is a simple hello world:\n```python\nfrom PaintPrint import *\n\nbprint("Hello world!", \n       FORMATTING.BOLD, \n       FOREGROUND.RED, \n       BACKGROUND.GREEN)\n```\nIn your console you can see something like this:\n\n<img src="https://github.com/tankalxat34/PaintPrint/blob/main/mdcontent/src1.png"/>\n\n## Unreadable symbols\nIf you see incomprehensible symbols instead of colors in the console, perform this function at the beginning of your code:\n```python\nfrom PaintPrint import *\nneutralizeColorProblem()\n```\n\n## Templates\nIn this module you can use some templates for beautiful print on terminal:\n\n```python\nfrom PaintPrint import *\n\nbprint("TEMPLATES", \n       FORMATTING.BORDERED, \n       FORMATTING.BOLD, \n       FOREGROUND.MAGENTA, \n       BACKGROUND.WHITE)\n\nprint("Template for links: " + bformat("python.org", TEMPLATE.URL))\nbprint("This is a `positive` template", TEMPLATE.POSITIVE)\nbprint("\\tAnd this is a `negative`", TEMPLATE.NEGATIVE)\nprint("You also can write " + bformat("yes", TEMPLATE.YES) + " and " + bformat("no", TEMPLATE.NO) + " like here")\nprint("If you like " + bformat("black and white", TEMPLATE.BLACKWHITE1) + " or " + bformat("white and black", TEMPLATE.BLACKWHITE2) + " you can using special templates!")\n```\n\n<img src="https://github.com/tankalxat34/PaintPrint/blob/main/mdcontent/src2.png"/>\n\n# All functions\n\nInstall `PaintPrint` in perform this code on your PC:\n```python\nfrom PaintPrint import *\nneutralizeColorProblem()\n\nbprint("TEMPLATES",\n       FORMATTING.BORDERED,\n       FORMATTING.BOLD,\n       FOREGROUND.MAGENTA,\n       BACKGROUND.WHITE)\n\nprint("Template for links: " + bformat("python.org", TEMPLATE.URL))\nbprint("This is a `positive` template", TEMPLATE.POSITIVE)\nbprint("\\tAnd this is a `negative`", TEMPLATE.NEGATIVE)\nprint("You also can write " + bformat("yes", TEMPLATE.YES) + " and " + bformat("no", TEMPLATE.NO) + " like here")\nprint("If you like " + bformat("black and white", TEMPLATE.BLACKWHITE1) + " or " + bformat("white and black", TEMPLATE.BLACKWHITE2) + " you can using special templates!")\n\nprint("\\n")\n\nbprint("COLORS - BACKGROUND",\n       FORMATTING.BORDERED,\n       FORMATTING.BOLD,\n       FOREGROUND.MAGENTA,\n       BACKGROUND.WHITE)\n\nprint("In " + bformat("PaintPrint", TEMPLATE.BLACKWHITE1) + " you can find " + bformat("10", FOREGROUND.GREEN)+ " backgrounds and foregrounds:")\nbprint("BACKGROUNDS", FORMATTING.BORDERED)\nbprint("Red", BACKGROUND.RED, end="\\t")\nbprint("Green", BACKGROUND.GREEN)\n\nbprint("Yellow", BACKGROUND.YELLOW, end="\\t")\nbprint("Blue", BACKGROUND.BLUE)\n\nbprint("Magenta", BACKGROUND.MAGENTA, end="\\t")\nbprint("Cyan", BACKGROUND.CYAN)\n\nbprint("White", BACKGROUND.WHITE, end="\\t")\nbprint("Black", BACKGROUND.BLACK)\n\nbprint("Gold", BACKGROUND.GOLD, end="\\t")\nbprint("Silver", BACKGROUND.SILVER)\nbprint("Copper", BACKGROUND.COPPER)\n\nprint()\n\nbprint("COLORS - BACKGROUND",\n       FORMATTING.BORDERED,\n       FORMATTING.BOLD,\n       FOREGROUND.MAGENTA,\n       BACKGROUND.WHITE)\nbprint("Red", FOREGROUND.RED, end="\\t")\nbprint("Green", FOREGROUND.GREEN)\n\nbprint("Yellow", FOREGROUND.YELLOW, end="\\t")\nbprint("Blue", FOREGROUND.BLUE)\n\nbprint("Magenta", FOREGROUND.MAGENTA, end="\\t")\nbprint("Cyan", FOREGROUND.CYAN)\n\nbprint("White", FOREGROUND.WHITE, end="\\t")\nbprint("Black", FOREGROUND.BLACK)\n\nbprint("Gold", FOREGROUND.GOLD, end="\\t")\nbprint("Silver", FOREGROUND.SILVER)\nbprint("Copper", FOREGROUND.COPPER)\n\nprint("\\n\\nAnd more " + bformat("240", FOREGROUND.GOLD) + " colors with indexes, RGB or HEX support:")\nfor i in range(256):\n    bprint("*", UserColor.BACKGROUND(i).get(), end="")\nprint()\nfor i in range(256):\n    bprint("*", UserColor.FOREGROUND(i).get(), end="")\nprint("\\n")\n\nprint("Also you can set your own color by RGB or HEX:")\nbprint("Foreground: ", FORMATTING.BORDERED,\n       FORMATTING.BOLD,\n       FOREGROUND.MAGENTA,\n       BACKGROUND.WHITE)\nbprint("\\t\\tPrint by RGB", UserColor.FOREGROUND((150, 15, 240)).get())\nbprint("\\t\\tPrint by HEX", UserColor.FOREGROUND("#960FF0").get())\nbprint("\\t\\tPrint by HEX without #-symbol", UserColor.FOREGROUND("960FF0").get())\n\nbprint("Background: ", FORMATTING.BORDERED,\n       FORMATTING.BOLD,\n       FOREGROUND.MAGENTA,\n       BACKGROUND.WHITE)\nbprint("\\t\\tPrint by RGB", UserColor.BACKGROUND((150, 15, 240)).get())\nbprint("\\t\\tPrint by HEX", UserColor.BACKGROUND("#960FF0").get())\nbprint("\\t\\tPrint by HEX without #-symbol", UserColor.BACKGROUND("960FF0").get())\n```\n\nYou will see something like this:\n\n<img src="https://github.com/tankalxat34/PaintPrint/blob/main/mdcontent/srcFULL.png"/>\n',
    'author': 'tankalxat34',
    'author_email': 'tankalxat34@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/tankalxat34/PaintPrint',
    'py_modules': modules,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
