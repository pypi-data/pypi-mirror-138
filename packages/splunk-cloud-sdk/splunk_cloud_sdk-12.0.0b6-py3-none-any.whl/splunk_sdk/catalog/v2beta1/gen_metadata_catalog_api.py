# coding: utf-8

# Copyright Â© 2022 Splunk, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"): you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# [http://www.apache.org/licenses/LICENSE-2.0]
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

############# This file is auto-generated.  Do not edit! #############

"""
    SDC Service: Search Catalog service

    With the Metadata Catalog in Splunk Cloud Services you can create and manage knowledge objects such as datasets, fields, rules, actions, and dashboards.

    OpenAPI spec version: v2beta1.4 (recommended default)
    Generated by: https://openapi-generator.tech
"""


from requests import Response
from string import Template
from typing import List, Dict

from splunk_sdk.base_client import handle_response
from splunk_sdk.base_service import BaseService
from splunk_sdk.common.sscmodel import SSCModel, SSCVoidModel

from splunk_sdk.catalog.v2beta1.gen_models import Action
from splunk_sdk.catalog.v2beta1.gen_models import ActionPATCH
from splunk_sdk.catalog.v2beta1.gen_models import ActionPOST
from splunk_sdk.catalog.v2beta1.gen_models import Annotation
from splunk_sdk.catalog.v2beta1.gen_models import AnnotationPOST
from splunk_sdk.catalog.v2beta1.gen_models import Dashboard
from splunk_sdk.catalog.v2beta1.gen_models import DashboardPATCH
from splunk_sdk.catalog.v2beta1.gen_models import DashboardPOST
from splunk_sdk.catalog.v2beta1.gen_models import Dataset
from splunk_sdk.catalog.v2beta1.gen_models import DatasetGet
from splunk_sdk.catalog.v2beta1.gen_models import DatasetImportedBy
from splunk_sdk.catalog.v2beta1.gen_models import DatasetPATCH
from splunk_sdk.catalog.v2beta1.gen_models import DatasetPOST
from splunk_sdk.catalog.v2beta1.gen_models import Field
from splunk_sdk.catalog.v2beta1.gen_models import FieldPATCH
from splunk_sdk.catalog.v2beta1.gen_models import FieldPOST
from splunk_sdk.catalog.v2beta1.gen_models import Module
from splunk_sdk.catalog.v2beta1.gen_models import Relationship
from splunk_sdk.catalog.v2beta1.gen_models import RelationshipPATCH
from splunk_sdk.catalog.v2beta1.gen_models import RelationshipPOST
from splunk_sdk.catalog.v2beta1.gen_models import Rule
from splunk_sdk.catalog.v2beta1.gen_models import RulePATCH
from splunk_sdk.catalog.v2beta1.gen_models import RulePOST


class MetadataCatalog(BaseService):
    """
    Search Catalog service
    Version: v2beta1.4
    With the Metadata Catalog in Splunk Cloud Services you can create and manage knowledge objects such as datasets, fields, rules, actions, and dashboards.
    """

    def __init__(self, base_client):
        super().__init__(base_client)

    def create_action_for_rule(self, ruleresource: str, action_post: ActionPOST, query_params: Dict[str, object] = None) -> Action:
        """
        Creates a new action for the specified rule by rule id or resource name.
        """
        if query_params is None:
            query_params = {}

        path_params = {
            "ruleresource": ruleresource,
        }

        path = Template("/catalog/v2beta1/rules/${ruleresource}/actions").substitute(path_params)
        url = self.base_client.build_url(path)
        data = action_post.to_dict()
        response = self.base_client.post(url, json=data, params=query_params)
        return handle_response(response, Action)

    def create_annotation_for_dashboard(self, dashboardresource: str, annotation_post: AnnotationPOST, query_params: Dict[str, object] = None) -> Annotation:
        """
        Creates a new annotation for the specified dashboard.
        """
        if query_params is None:
            query_params = {}

        path_params = {
            "dashboardresource": dashboardresource,
        }

        path = Template("/catalog/v2beta1/dashboards/${dashboardresource}/annotations").substitute(path_params)
        url = self.base_client.build_url(path)
        data = annotation_post.to_dict()
        response = self.base_client.post(url, json=data, params=query_params)
        return handle_response(response, Annotation)

    def create_annotation_for_dataset(self, datasetresource: str, annotation_post: AnnotationPOST, query_params: Dict[str, object] = None) -> Annotation:
        """
        Creates a new annotation for the specified dataset.
        """
        if query_params is None:
            query_params = {}

        path_params = {
            "datasetresource": datasetresource,
        }

        path = Template("/catalog/v2beta1/datasets/${datasetresource}/annotations").substitute(path_params)
        url = self.base_client.build_url(path)
        data = annotation_post.to_dict()
        response = self.base_client.post(url, json=data, params=query_params)
        return handle_response(response, Annotation)

    def create_dashboard(self, dashboard_post: DashboardPOST, query_params: Dict[str, object] = None) -> Dashboard:
        """
        Creates a new dashboard.
        """
        if query_params is None:
            query_params = {}

        path_params = {
        }

        path = Template("/catalog/v2beta1/dashboards").substitute(path_params)
        url = self.base_client.build_url(path)
        data = dashboard_post.to_dict()
        response = self.base_client.post(url, json=data, params=query_params)
        return handle_response(response, Dashboard)

    def create_dataset(self, dataset_post: DatasetPOST, query_params: Dict[str, object] = None) -> Dataset:
        """
        Creates a new dataset.
        """
        if query_params is None:
            query_params = {}

        path_params = {
        }

        path = Template("/catalog/v2beta1/datasets").substitute(path_params)
        url = self.base_client.build_url(path)
        data = dataset_post.to_dict()
        response = self.base_client.post(url, json=data, params=query_params)
        return handle_response(response, Dataset)

    def create_dataset_import(self, datasetresource: str, dataset_imported_by: DatasetImportedBy = None, query_params: Dict[str, object] = None) -> DatasetImportedBy:
        """
        Creates a new dataset import using the ID or resource name of the imported dataset.
        """
        if query_params is None:
            query_params = {}

        path_params = {
            "datasetresource": datasetresource,
        }

        path = Template("/catalog/v2beta1/datasets/${datasetresource}/imported-by").substitute(path_params)
        url = self.base_client.build_url(path)
        data = dataset_imported_by.to_dict()
        response = self.base_client.post(url, json=data, params=query_params)
        return handle_response(response, DatasetImportedBy)

    def create_field_for_dataset(self, datasetresource: str, field_post: FieldPOST, query_params: Dict[str, object] = None) -> Field:
        """
        Adds a new field to the dataset with the specified ID or resource name.
        """
        if query_params is None:
            query_params = {}

        path_params = {
            "datasetresource": datasetresource,
        }

        path = Template("/catalog/v2beta1/datasets/${datasetresource}/fields").substitute(path_params)
        url = self.base_client.build_url(path)
        data = field_post.to_dict()
        response = self.base_client.post(url, json=data, params=query_params)
        return handle_response(response, Field)

    def create_relationship(self, relationship_post: RelationshipPOST, query_params: Dict[str, object] = None) -> Relationship:
        """
        Creates a new relationship.
        """
        if query_params is None:
            query_params = {}

        path_params = {
        }

        path = Template("/catalog/v2beta1/relationships").substitute(path_params)
        url = self.base_client.build_url(path)
        data = relationship_post.to_dict()
        response = self.base_client.post(url, json=data, params=query_params)
        return handle_response(response, Relationship)

    def create_rule(self, rule_post: RulePOST, query_params: Dict[str, object] = None) -> Rule:
        """
        Creates a new rule.
        """
        if query_params is None:
            query_params = {}

        path_params = {
        }

        path = Template("/catalog/v2beta1/rules").substitute(path_params)
        url = self.base_client.build_url(path)
        data = rule_post.to_dict()
        response = self.base_client.post(url, json=data, params=query_params)
        return handle_response(response, Rule)

    def delete_action_by_id_for_rule(self, ruleresource: str, actionid: str, query_params: Dict[str, object] = None) -> SSCVoidModel:
        """
        Deletes the action with the specified ID that is associated with the specified rule.
        """
        if query_params is None:
            query_params = {}

        path_params = {
            "ruleresource": ruleresource,
            "actionid": actionid,
        }

        path = Template("/catalog/v2beta1/rules/${ruleresource}/actions/${actionid}").substitute(path_params)
        url = self.base_client.build_url(path)
        response = self.base_client.delete(url, params=query_params)
        return handle_response(response, )

    def delete_annotation_of_dashboard(self, dashboardresource: str, annotationid: str, query_params: Dict[str, object] = None) -> SSCVoidModel:
        """
        Deletes the annotation with the speciifed ID that is associted with the specified dashboard.
        """
        if query_params is None:
            query_params = {}

        path_params = {
            "dashboardresource": dashboardresource,
            "annotationid": annotationid,
        }

        path = Template("/catalog/v2beta1/dashboards/${dashboardresource}/annotations/${annotationid}").substitute(path_params)
        url = self.base_client.build_url(path)
        response = self.base_client.delete(url, params=query_params)
        return handle_response(response, )

    def delete_annotation_of_dataset(self, datasetresource: str, annotationid: str, query_params: Dict[str, object] = None) -> SSCVoidModel:
        """
        Deletes the annotation with the specified ID that is associated with the specified dataset.
        """
        if query_params is None:
            query_params = {}

        path_params = {
            "datasetresource": datasetresource,
            "annotationid": annotationid,
        }

        path = Template("/catalog/v2beta1/datasets/${datasetresource}/annotations/${annotationid}").substitute(path_params)
        url = self.base_client.build_url(path)
        response = self.base_client.delete(url, params=query_params)
        return handle_response(response, )

    def delete_dashboard(self, dashboardresource: str, query_params: Dict[str, object] = None) -> SSCVoidModel:
        """
        Deletes the dashboard with the specified ID or resource name.
        """
        if query_params is None:
            query_params = {}

        path_params = {
            "dashboardresource": dashboardresource,
        }

        path = Template("/catalog/v2beta1/dashboards/${dashboardresource}").substitute(path_params)
        url = self.base_client.build_url(path)
        response = self.base_client.delete(url, params=query_params)
        return handle_response(response, )

    def delete_dataset(self, datasetresource: str, query_params: Dict[str, object] = None) -> SSCVoidModel:
        """
        Deletes the dataset with the specified ID or resource name. Deleting a dataset also deletes its dependent objects, such as fields.
        """
        if query_params is None:
            query_params = {}

        path_params = {
            "datasetresource": datasetresource,
        }

        path = Template("/catalog/v2beta1/datasets/${datasetresource}").substitute(path_params)
        url = self.base_client.build_url(path)
        response = self.base_client.delete(url, params=query_params)
        return handle_response(response, )

    def delete_field_by_id_for_dataset(self, datasetresource: str, fieldid: str, query_params: Dict[str, object] = None) -> SSCVoidModel:
        """
        Deletes the field with the specified ID that is part of the specified dataset.
        """
        if query_params is None:
            query_params = {}

        path_params = {
            "datasetresource": datasetresource,
            "fieldid": fieldid,
        }

        path = Template("/catalog/v2beta1/datasets/${datasetresource}/fields/${fieldid}").substitute(path_params)
        url = self.base_client.build_url(path)
        response = self.base_client.delete(url, params=query_params)
        return handle_response(response, )

    def delete_relationship_by_id(self, relationshipid: str, query_params: Dict[str, object] = None) -> SSCVoidModel:
        """
        Deletes the relationship with the specified relationship ID. Deleting a relationship also deletes any objects that are dependents of that relationship, such as relationship fields.
        """
        if query_params is None:
            query_params = {}

        path_params = {
            "relationshipid": relationshipid,
        }

        path = Template("/catalog/v2beta1/relationships/${relationshipid}").substitute(path_params)
        url = self.base_client.build_url(path)
        response = self.base_client.delete(url, params=query_params)
        return handle_response(response, )

    def delete_rule(self, ruleresource: str, query_params: Dict[str, object] = None) -> SSCVoidModel:
        """
        Deletes the rule with the specfied ID or resource name. Deleting a rule also deleletes any objects that are dependents of that rule, such as rule actions.
        """
        if query_params is None:
            query_params = {}

        path_params = {
            "ruleresource": ruleresource,
        }

        path = Template("/catalog/v2beta1/rules/${ruleresource}").substitute(path_params)
        url = self.base_client.build_url(path)
        response = self.base_client.delete(url, params=query_params)
        return handle_response(response, )

    def get_action_by_id_for_rule(self, ruleresource: str, actionid: str, query_params: Dict[str, object] = None) -> Action:
        """
        Returns information about the action with the specified ID that is associated with the specified rule.
        """
        if query_params is None:
            query_params = {}

        path_params = {
            "ruleresource": ruleresource,
            "actionid": actionid,
        }

        path = Template("/catalog/v2beta1/rules/${ruleresource}/actions/${actionid}").substitute(path_params)
        url = self.base_client.build_url(path)
        response = self.base_client.get(url, params=query_params)
        return handle_response(response, Action)

    def get_dashboard(self, dashboardresource: str, query_params: Dict[str, object] = None) -> Dashboard:
        """
        Returns information about the dashboard with the specified ID or resource name.
        """
        if query_params is None:
            query_params = {}

        path_params = {
            "dashboardresource": dashboardresource,
        }

        path = Template("/catalog/v2beta1/dashboards/${dashboardresource}").substitute(path_params)
        url = self.base_client.build_url(path)
        response = self.base_client.get(url, params=query_params)
        return handle_response(response, Dashboard)

    def get_dataset(self, datasetresource: str, maxstale: int = None, query_params: Dict[str, object] = None) -> DatasetGet:
        """
        Returns information about the dataset with the specified ID or resource name. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
        """
        if query_params is None:
            query_params = {}
        if maxstale is not None:
            query_params['maxstale'] = maxstale

        path_params = {
            "datasetresource": datasetresource,
        }

        path = Template("/catalog/v2beta1/datasets/${datasetresource}").substitute(path_params)
        url = self.base_client.build_url(path)
        response = self.base_client.get(url, params=query_params)
        return handle_response(response, DatasetGet)

    def get_field_by_id(self, fieldid: str, query_params: Dict[str, object] = None) -> Field:
        """
        Returns the field with the specified ID.
        """
        if query_params is None:
            query_params = {}

        path_params = {
            "fieldid": fieldid,
        }

        path = Template("/catalog/v2beta1/fields/${fieldid}").substitute(path_params)
        url = self.base_client.build_url(path)
        response = self.base_client.get(url, params=query_params)
        return handle_response(response, Field)

    def get_field_by_id_for_dataset(self, datasetresource: str, fieldid: str, query_params: Dict[str, object] = None) -> Field:
        """
        Returns the field with the specified ID that is part of the specified dataset.
        """
        if query_params is None:
            query_params = {}

        path_params = {
            "datasetresource": datasetresource,
            "fieldid": fieldid,
        }

        path = Template("/catalog/v2beta1/datasets/${datasetresource}/fields/${fieldid}").substitute(path_params)
        url = self.base_client.build_url(path)
        response = self.base_client.get(url, params=query_params)
        return handle_response(response, Field)

    def get_relationship_by_id(self, relationshipid: str, query_params: Dict[str, object] = None) -> Relationship:
        """
        Returns the relationship with the specified relationship ID.
        """
        if query_params is None:
            query_params = {}

        path_params = {
            "relationshipid": relationshipid,
        }

        path = Template("/catalog/v2beta1/relationships/${relationshipid}").substitute(path_params)
        url = self.base_client.build_url(path)
        response = self.base_client.get(url, params=query_params)
        return handle_response(response, Relationship)

    def get_rule(self, ruleresource: str, query_params: Dict[str, object] = None) -> Rule:
        """
        Returns information about rule with the specified rule ID or resource name.
        """
        if query_params is None:
            query_params = {}

        path_params = {
            "ruleresource": ruleresource,
        }

        path = Template("/catalog/v2beta1/rules/${ruleresource}").substitute(path_params)
        url = self.base_client.build_url(path)
        response = self.base_client.get(url, params=query_params)
        return handle_response(response, Rule)

    def import_dataset(self, datasetresource: str, dataset_imported_by: DatasetImportedBy = None, query_params: Dict[str, object] = None) -> DatasetImportedBy:
        """
        Creates a new dataset import using the ID or resource name of the imported dataset.
        """
        if query_params is None:
            query_params = {}

        path_params = {
            "datasetresource": datasetresource,
        }

        path = Template("/catalog/v2beta1/datasets/${datasetresource}/importedby").substitute(path_params)
        url = self.base_client.build_url(path)
        data = dataset_imported_by.to_dict()
        response = self.base_client.post(url, json=data, params=query_params)
        return handle_response(response, DatasetImportedBy)

    def list_actions_for_rule(self, ruleresource: str, count: int = None, filter: str = None, offset: int = None, orderby: List[str] = None, query_params: Dict[str, object] = None) -> List[Action]:
        """
        Returns the set of actions that are part of the specified rule.
        """
        if query_params is None:
            query_params = {}
        if count is not None:
            query_params['count'] = count
        if filter is not None:
            query_params['filter'] = filter
        if offset is not None:
            query_params['offset'] = offset
        if orderby is not None:
            query_params['orderby'] = orderby

        path_params = {
            "ruleresource": ruleresource,
        }

        path = Template("/catalog/v2beta1/rules/${ruleresource}/actions").substitute(path_params)
        url = self.base_client.build_url(path)
        response = self.base_client.get(url, params=query_params)
        return handle_response(response, Action)

    def list_annotations(self, count: int = None, filter: str = None, offset: int = None, orderby: List[str] = None, query_params: Dict[str, object] = None) -> List[Annotation]:
        """
        Returns the set of annotations across all objects.
        """
        if query_params is None:
            query_params = {}
        if count is not None:
            query_params['count'] = count
        if filter is not None:
            query_params['filter'] = filter
        if offset is not None:
            query_params['offset'] = offset
        if orderby is not None:
            query_params['orderby'] = orderby

        path_params = {
        }

        path = Template("/catalog/v2beta1/annotations").substitute(path_params)
        url = self.base_client.build_url(path)
        response = self.base_client.get(url, params=query_params)
        return handle_response(response, Annotation)

    def list_annotations_for_dashboard(self, dashboardresource: str, filter: str = None, query_params: Dict[str, object] = None) -> List[Annotation]:
        """
        Returns the set of annotations that are associated with the specified dashboard.
        """
        if query_params is None:
            query_params = {}
        if filter is not None:
            query_params['filter'] = filter

        path_params = {
            "dashboardresource": dashboardresource,
        }

        path = Template("/catalog/v2beta1/dashboards/${dashboardresource}/annotations").substitute(path_params)
        url = self.base_client.build_url(path)
        response = self.base_client.get(url, params=query_params)
        return handle_response(response, Annotation)

    def list_annotations_for_dataset(self, datasetresource: str, count: int = None, filter: str = None, offset: int = None, orderby: List[str] = None, query_params: Dict[str, object] = None) -> List[Annotation]:
        """
        Returns the set of annotations that are associated with the specified dataset.
        """
        if query_params is None:
            query_params = {}
        if count is not None:
            query_params['count'] = count
        if filter is not None:
            query_params['filter'] = filter
        if offset is not None:
            query_params['offset'] = offset
        if orderby is not None:
            query_params['orderby'] = orderby

        path_params = {
            "datasetresource": datasetresource,
        }

        path = Template("/catalog/v2beta1/datasets/${datasetresource}/annotations").substitute(path_params)
        url = self.base_client.build_url(path)
        response = self.base_client.get(url, params=query_params)
        return handle_response(response, Annotation)

    def list_dashboards(self, count: int = None, filter: str = None, offset: int = None, orderby: List[str] = None, query_params: Dict[str, object] = None) -> List[Dashboard]:
        """
        Returns a list of dashboards.
        """
        if query_params is None:
            query_params = {}
        if count is not None:
            query_params['count'] = count
        if filter is not None:
            query_params['filter'] = filter
        if offset is not None:
            query_params['offset'] = offset
        if orderby is not None:
            query_params['orderby'] = orderby

        path_params = {
        }

        path = Template("/catalog/v2beta1/dashboards").substitute(path_params)
        url = self.base_client.build_url(path)
        response = self.base_client.get(url, params=query_params)
        return handle_response(response, Dashboard)

    def list_datasets(self, count: int = None, filter: str = None, maxstale: int = None, offset: int = None, orderby: List[str] = None, query_params: Dict[str, object] = None) -> List[DatasetGet]:
        """
        Returns a list of all datasets. Use a filter to return a specific list of datasets.
        """
        if query_params is None:
            query_params = {}
        if count is not None:
            query_params['count'] = count
        if filter is not None:
            query_params['filter'] = filter
        if maxstale is not None:
            query_params['maxstale'] = maxstale
        if offset is not None:
            query_params['offset'] = offset
        if orderby is not None:
            query_params['orderby'] = orderby

        path_params = {
        }

        path = Template("/catalog/v2beta1/datasets").substitute(path_params)
        url = self.base_client.build_url(path)
        response = self.base_client.get(url, params=query_params)
        return handle_response(response, DatasetGet)

    def list_fields(self, count: int = None, filter: str = None, offset: int = None, orderby: List[str] = None, query_params: Dict[str, object] = None) -> List[Field]:
        """
        Returns a list of all of the fields in the Metadata Catalog.
        """
        if query_params is None:
            query_params = {}
        if count is not None:
            query_params['count'] = count
        if filter is not None:
            query_params['filter'] = filter
        if offset is not None:
            query_params['offset'] = offset
        if orderby is not None:
            query_params['orderby'] = orderby

        path_params = {
        }

        path = Template("/catalog/v2beta1/fields").substitute(path_params)
        url = self.base_client.build_url(path)
        response = self.base_client.get(url, params=query_params)
        return handle_response(response, Field)

    def list_fields_for_dataset(self, datasetresource: str, count: int = None, filter: str = None, offset: int = None, orderby: List[str] = None, query_params: Dict[str, object] = None) -> List[Field]:
        """
        Returns the set of fields for the dataset with the specified ID or resource name.
        """
        if query_params is None:
            query_params = {}
        if count is not None:
            query_params['count'] = count
        if filter is not None:
            query_params['filter'] = filter
        if offset is not None:
            query_params['offset'] = offset
        if orderby is not None:
            query_params['orderby'] = orderby

        path_params = {
            "datasetresource": datasetresource,
        }

        path = Template("/catalog/v2beta1/datasets/${datasetresource}/fields").substitute(path_params)
        url = self.base_client.build_url(path)
        response = self.base_client.get(url, params=query_params)
        return handle_response(response, Field)

    def list_modules(self, filter: str = None, query_params: Dict[str, object] = None) -> List[Module]:
        """
        Returns a list of all modules. Use a filter to return a specific list of modules.
        """
        if query_params is None:
            query_params = {}
        if filter is not None:
            query_params['filter'] = filter

        path_params = {
        }

        path = Template("/catalog/v2beta1/modules").substitute(path_params)
        url = self.base_client.build_url(path)
        response = self.base_client.get(url, params=query_params)
        return handle_response(response, Module)

    def list_relationships(self, count: int = None, filter: str = None, offset: int = None, orderby: List[str] = None, query_params: Dict[str, object] = None) -> List[Relationship]:
        """
        Returns a list of all relationships. Use a filter to return a specific list of relationships.
        """
        if query_params is None:
            query_params = {}
        if count is not None:
            query_params['count'] = count
        if filter is not None:
            query_params['filter'] = filter
        if offset is not None:
            query_params['offset'] = offset
        if orderby is not None:
            query_params['orderby'] = orderby

        path_params = {
        }

        path = Template("/catalog/v2beta1/relationships").substitute(path_params)
        url = self.base_client.build_url(path)
        response = self.base_client.get(url, params=query_params)
        return handle_response(response, Relationship)

    def list_rules(self, count: int = None, filter: str = None, offset: int = None, orderby: List[str] = None, query_params: Dict[str, object] = None) -> List[Rule]:
        """
        Returns a list of rules that match a filter, if specified, otherwise returns all rules.
        """
        if query_params is None:
            query_params = {}
        if count is not None:
            query_params['count'] = count
        if filter is not None:
            query_params['filter'] = filter
        if offset is not None:
            query_params['offset'] = offset
        if orderby is not None:
            query_params['orderby'] = orderby

        path_params = {
        }

        path = Template("/catalog/v2beta1/rules").substitute(path_params)
        url = self.base_client.build_url(path)
        response = self.base_client.get(url, params=query_params)
        return handle_response(response, Rule)

    def update_action_by_id_for_rule(self, ruleresource: str, actionid: str, action_patch: ActionPATCH, query_params: Dict[str, object] = None) -> Action:
        """
        Modifies the action with the specified ID that is associated with the specified rule.
        """
        if query_params is None:
            query_params = {}

        path_params = {
            "ruleresource": ruleresource,
            "actionid": actionid,
        }

        path = Template("/catalog/v2beta1/rules/${ruleresource}/actions/${actionid}").substitute(path_params)
        url = self.base_client.build_url(path)
        data = action_patch.to_dict()
        response = self.base_client.patch(url, json=data, params=query_params)
        return handle_response(response, Action)

    def update_dashboard(self, dashboardresource: str, dashboard_patch: DashboardPATCH, query_params: Dict[str, object] = None) -> Dashboard:
        """
        Modifies the dashboard with the specified ID or resource name.
        """
        if query_params is None:
            query_params = {}

        path_params = {
            "dashboardresource": dashboardresource,
        }

        path = Template("/catalog/v2beta1/dashboards/${dashboardresource}").substitute(path_params)
        url = self.base_client.build_url(path)
        data = dashboard_patch.to_dict()
        response = self.base_client.patch(url, json=data, params=query_params)
        return handle_response(response, Dashboard)

    def update_dataset(self, datasetresource: str, dataset_patch: DatasetPATCH, query_params: Dict[str, object] = None) -> Dataset:
        """
        Modifies the dataset with the specified Dataset ID or Resource Name. For the default module, the resource name format is datasetName, otherwise, the resource name format is module.datasetName.
        """
        if query_params is None:
            query_params = {}

        path_params = {
            "datasetresource": datasetresource,
        }

        path = Template("/catalog/v2beta1/datasets/${datasetresource}").substitute(path_params)
        url = self.base_client.build_url(path)
        data = dataset_patch.to_dict()
        response = self.base_client.patch(url, json=data, params=query_params)
        return handle_response(response, Dataset)

    def update_field_by_id_for_dataset(self, datasetresource: str, fieldid: str, field_patch: FieldPATCH, query_params: Dict[str, object] = None) -> Field:
        """
        Modifies the field with the specified ID that is part of the specified dataset.
        """
        if query_params is None:
            query_params = {}

        path_params = {
            "datasetresource": datasetresource,
            "fieldid": fieldid,
        }

        path = Template("/catalog/v2beta1/datasets/${datasetresource}/fields/${fieldid}").substitute(path_params)
        url = self.base_client.build_url(path)
        data = field_patch.to_dict()
        response = self.base_client.patch(url, json=data, params=query_params)
        return handle_response(response, Field)

    def update_relationship_by_id(self, relationshipid: str, relationship_patch: RelationshipPATCH, query_params: Dict[str, object] = None) -> Relationship:
        """
        Modifies the relationship with the specified relationship ID.
        """
        if query_params is None:
            query_params = {}

        path_params = {
            "relationshipid": relationshipid,
        }

        path = Template("/catalog/v2beta1/relationships/${relationshipid}").substitute(path_params)
        url = self.base_client.build_url(path)
        data = relationship_patch.to_dict()
        response = self.base_client.patch(url, json=data, params=query_params)
        return handle_response(response, Relationship)

    def update_rule(self, ruleresource: str, rule_patch: RulePATCH, query_params: Dict[str, object] = None) -> Rule:
        """
        Modifies the rule with the specified rule ID or resource name.
        """
        if query_params is None:
            query_params = {}

        path_params = {
            "ruleresource": ruleresource,
        }

        path = Template("/catalog/v2beta1/rules/${ruleresource}").substitute(path_params)
        url = self.base_client.build_url(path)
        data = rule_patch.to_dict()
        response = self.base_client.patch(url, json=data, params=query_params)
        return handle_response(response, Rule)


