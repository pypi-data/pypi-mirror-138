"""
    Prime Developer Trial

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from fds.sdk.QuotesAPIforDigitalPortals.api_client import ApiClient, Endpoint as _Endpoint
from fds.sdk.QuotesAPIforDigitalPortals.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from fds.sdk.QuotesAPIforDigitalPortals.model.inline_object21 import InlineObject21
from fds.sdk.QuotesAPIforDigitalPortals.model.inline_response20079 import InlineResponse20079
from fds.sdk.QuotesAPIforDigitalPortals.model.inline_response20080 import InlineResponse20080
from fds.sdk.QuotesAPIforDigitalPortals.model.inline_response20081 import InlineResponse20081
from fds.sdk.QuotesAPIforDigitalPortals.model.inline_response20082 import InlineResponse20082
from fds.sdk.QuotesAPIforDigitalPortals.model.inline_response20083 import InlineResponse20083
from fds.sdk.QuotesAPIforDigitalPortals.model.inline_response20084 import InlineResponse20084
from fds.sdk.QuotesAPIforDigitalPortals.model.inline_response20085 import InlineResponse20085
from fds.sdk.QuotesAPIforDigitalPortals.model.inline_response20086 import InlineResponse20086


class PricesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.get_prices_bid_ask_get_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse20081,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/prices/bidAsk/get',
                'operation_id': 'get_prices_bid_ask_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'quality',
                    'attributes',
                    'subscription_minimum_interval',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                    'quality',
                    'subscription_minimum_interval',
                ],
                'validation': [
                    'attributes',
                ]
            },
            root_map={
                'validations': {
                    ('attributes',): {

                        'max_items': 50,
                    },
                },
                'allowed_values': {
                    ('quality',): {

                        "RLT": "RLT",
                        "DLY": "DLY",
                        "EOD": "EOD",
                        "BST": "BST"
                    },
                    ('subscription_minimum_interval',): {

                        "1000": 1000,
                        "5000": 5000,
                        "10000": 10000,
                        "30000": 30000,
                        "60000": 60000,
                        "300000": 300000
                    },
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'quality':
                        (str,),
                    'attributes':
                        ([str],),
                    'subscription_minimum_interval':
                        (float,),
                },
                'attribute_map': {
                    'id': 'id',
                    'quality': 'quality',
                    'attributes': '_attributes',
                    'subscription_minimum_interval': '_subscriptionMinimumInterval',
                },
                'location_map': {
                    'id': 'query',
                    'quality': 'query',
                    'attributes': 'query',
                    'subscription_minimum_interval': 'query',
                },
                'collection_format_map': {
                    'attributes': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_prices_bid_ask_list_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse20082,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/prices/bidAsk/list',
                'operation_id': 'get_prices_bid_ask_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'ids',
                    'quality',
                    'same_quality',
                    'attributes',
                ],
                'required': [
                    'ids',
                ],
                'nullable': [
                ],
                'enum': [
                    'quality',
                ],
                'validation': [
                    'ids',
                    'attributes',
                ]
            },
            root_map={
                'validations': {
                    ('ids',): {

                        'max_items': 100,
                    },
                    ('attributes',): {

                        'max_items': 50,
                    },
                },
                'allowed_values': {
                    ('quality',): {

                        "RLT": "RLT",
                        "DLY": "DLY",
                        "EOD": "EOD",
                        "BST": "BST"
                    },
                },
                'openapi_types': {
                    'ids':
                        ([str],),
                    'quality':
                        (str,),
                    'same_quality':
                        (bool,),
                    'attributes':
                        ([str],),
                },
                'attribute_map': {
                    'ids': 'ids',
                    'quality': 'quality',
                    'same_quality': 'sameQuality',
                    'attributes': '_attributes',
                },
                'location_map': {
                    'ids': 'query',
                    'quality': 'query',
                    'same_quality': 'query',
                    'attributes': 'query',
                },
                'collection_format_map': {
                    'ids': 'csv',
                    'attributes': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_prices_get_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse20079,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/prices/get',
                'operation_id': 'get_prices_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'quality',
                    'attributes',
                    'subscription_minimum_interval',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                    'quality',
                    'subscription_minimum_interval',
                ],
                'validation': [
                    'attributes',
                ]
            },
            root_map={
                'validations': {
                    ('attributes',): {

                        'max_items': 50,
                    },
                },
                'allowed_values': {
                    ('quality',): {

                        "RLT": "RLT",
                        "DLY": "DLY",
                        "EOD": "EOD",
                        "BST": "BST"
                    },
                    ('subscription_minimum_interval',): {

                        "1000": 1000,
                        "5000": 5000,
                        "10000": 10000,
                        "30000": 30000,
                        "60000": 60000,
                        "300000": 300000
                    },
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'quality':
                        (str,),
                    'attributes':
                        ([str],),
                    'subscription_minimum_interval':
                        (float,),
                },
                'attribute_map': {
                    'id': 'id',
                    'quality': 'quality',
                    'attributes': '_attributes',
                    'subscription_minimum_interval': '_subscriptionMinimumInterval',
                },
                'location_map': {
                    'id': 'query',
                    'quality': 'query',
                    'attributes': 'query',
                    'subscription_minimum_interval': 'query',
                },
                'collection_format_map': {
                    'attributes': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_prices_list_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse20080,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/prices/list',
                'operation_id': 'get_prices_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'ids',
                    'quality',
                    'same_quality',
                    'attributes',
                ],
                'required': [
                    'ids',
                ],
                'nullable': [
                ],
                'enum': [
                    'quality',
                ],
                'validation': [
                    'ids',
                    'attributes',
                ]
            },
            root_map={
                'validations': {
                    ('ids',): {

                        'max_items': 100,
                    },
                    ('attributes',): {

                        'max_items': 50,
                    },
                },
                'allowed_values': {
                    ('quality',): {

                        "RLT": "RLT",
                        "DLY": "DLY",
                        "EOD": "EOD",
                        "BST": "BST"
                    },
                },
                'openapi_types': {
                    'ids':
                        ([str],),
                    'quality':
                        (str,),
                    'same_quality':
                        (bool,),
                    'attributes':
                        ([str],),
                },
                'attribute_map': {
                    'ids': 'ids',
                    'quality': 'quality',
                    'same_quality': 'sameQuality',
                    'attributes': '_attributes',
                },
                'location_map': {
                    'ids': 'query',
                    'quality': 'query',
                    'same_quality': 'query',
                    'attributes': 'query',
                },
                'collection_format_map': {
                    'ids': 'csv',
                    'attributes': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_prices_orderbook_aggregated_get_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse20083,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/prices/orderbook/aggregated/get',
                'operation_id': 'get_prices_orderbook_aggregated_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'quality',
                    'attributes',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                    'quality',
                ],
                'validation': [
                    'attributes',
                ]
            },
            root_map={
                'validations': {
                    ('attributes',): {

                        'max_items': 50,
                    },
                },
                'allowed_values': {
                    ('quality',): {

                        "RLT": "RLT",
                        "DLY": "DLY",
                        "BST": "BST"
                    },
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'quality':
                        (str,),
                    'attributes':
                        ([str],),
                },
                'attribute_map': {
                    'id': 'id',
                    'quality': 'quality',
                    'attributes': '_attributes',
                },
                'location_map': {
                    'id': 'query',
                    'quality': 'query',
                    'attributes': 'query',
                },
                'collection_format_map': {
                    'attributes': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_prices_orderbook_full_get_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse20084,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/prices/orderbook/full/get',
                'operation_id': 'get_prices_orderbook_full_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'quality',
                    'attributes',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                    'quality',
                ],
                'validation': [
                    'attributes',
                ]
            },
            root_map={
                'validations': {
                    ('attributes',): {

                        'max_items': 50,
                    },
                },
                'allowed_values': {
                    ('quality',): {

                        "RLT": "RLT",
                        "DLY": "DLY",
                        "BST": "BST"
                    },
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'quality':
                        (str,),
                    'attributes':
                        ([str],),
                },
                'attribute_map': {
                    'id': 'id',
                    'quality': 'quality',
                    'attributes': '_attributes',
                },
                'location_map': {
                    'id': 'query',
                    'quality': 'query',
                    'attributes': 'query',
                },
                'collection_format_map': {
                    'attributes': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_prices_trading_schedule_event_type_list_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse20086,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/prices/tradingSchedule/event/type/list',
                'operation_id': 'get_prices_trading_schedule_event_type_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'attributes',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'attributes',
                ]
            },
            root_map={
                'validations': {
                    ('attributes',): {

                        'max_items': 50,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'attributes':
                        ([str],),
                },
                'attribute_map': {
                    'attributes': '_attributes',
                },
                'location_map': {
                    'attributes': 'query',
                },
                'collection_format_map': {
                    'attributes': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.post_prices_trading_schedule_event_list_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse20085,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/prices/tradingSchedule/event/list',
                'operation_id': 'post_prices_trading_schedule_event_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (InlineObject21,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def get_prices_bid_ask_get(
        self,
        id,
        **kwargs
    ):
        """Current bid and ask prices (best bid / offer) for a notation.  # noqa: E501

        Current bid and ask prices (best bid / offer) for a notation.  The endpoint is subscribable to provide push updates. See attribute `_subscriptionMinimalInterval` for valid update rates.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_prices_bid_ask_get(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (str): Identifier of the notation.

        Keyword Args:
            quality (str): Quality of the price.. [optional] if omitted the server will use the default value of "DLY"
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            subscription_minimum_interval (float): Minimum number of milliseconds at which updates are send.. [optional] if omitted the server will use the default value of 5000.0
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse20081
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        return self.get_prices_bid_ask_get_endpoint.call_with_http_info(**kwargs)

    def get_prices_bid_ask_list(
        self,
        ids,
        **kwargs
    ):
        """Current bid and ask prices (best bid / offer) for a list of notations.  # noqa: E501

        Current bid and ask prices (best bid / offer) for a list of notations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_prices_bid_ask_list(ids, async_req=True)
        >>> result = thread.get()

        Args:
            ids ([str]): List of notations.

        Keyword Args:
            quality (str): Quality of the price.. [optional] if omitted the server will use the default value of "DLY"
            same_quality (bool): Assure that the prices for all notations are of the same quality.. [optional] if omitted the server will use the default value of True
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse20082
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['ids'] = \
            ids
        return self.get_prices_bid_ask_list_endpoint.call_with_http_info(**kwargs)

    def get_prices_get(
        self,
        id,
        **kwargs
    ):
        """Overview of trading on the current trading day, including the latest price, for a notation.  # noqa: E501

        Overview of trading on the current trading day, including the latest price, for a notation.  The endpoint is subscribable to provide push updates. See attribute `_subscriptionMinimalInterval` for valid update rates.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_prices_get(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (str): Identifier of the notation.

        Keyword Args:
            quality (str): Quality of the price.. [optional] if omitted the server will use the default value of "DLY"
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            subscription_minimum_interval (float): Minimum number of milliseconds at which updates are send.. [optional] if omitted the server will use the default value of 5000.0
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse20079
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        return self.get_prices_get_endpoint.call_with_http_info(**kwargs)

    def get_prices_list(
        self,
        ids,
        **kwargs
    ):
        """Overview of trading on the current trading day, including the latest price, for a list of notations.  # noqa: E501

        Overview of trading on the current trading day, including the latest price, for a list of notations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_prices_list(ids, async_req=True)
        >>> result = thread.get()

        Args:
            ids ([str]): List of notations.

        Keyword Args:
            quality (str): Quality of the price.. [optional] if omitted the server will use the default value of "DLY"
            same_quality (bool): Assure that the prices for all notations are of the same quality.. [optional] if omitted the server will use the default value of True
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse20080
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['ids'] = \
            ids
        return self.get_prices_list_endpoint.call_with_http_info(**kwargs)

    def get_prices_orderbook_aggregated_get(
        self,
        id,
        **kwargs
    ):
        """Orderbook aggregated by price.  # noqa: E501

        Orderbook aggregated by price.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_prices_orderbook_aggregated_get(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (str): Identifier of the notation.

        Keyword Args:
            quality (str): Quality of the price.. [optional] if omitted the server will use the default value of "RLT"
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse20083
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        return self.get_prices_orderbook_aggregated_get_endpoint.call_with_http_info(**kwargs)

    def get_prices_orderbook_full_get(
        self,
        id,
        **kwargs
    ):
        """Full orderbook  # noqa: E501

        Full orderbook  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_prices_orderbook_full_get(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (str): Identifier of the notation.

        Keyword Args:
            quality (str): Quality of the price.. [optional] if omitted the server will use the default value of "RLT"
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse20084
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        return self.get_prices_orderbook_full_get_endpoint.call_with_http_info(**kwargs)

    def get_prices_trading_schedule_event_type_list(
        self,
        **kwargs
    ):
        """Trading schedule event types.  # noqa: E501

        Trading schedule event types define the events which may occur during any period of trading. Types of trading schedule events are for instance OPEN, CLOSE, END_OF_DAY.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_prices_trading_schedule_event_type_list(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse20086
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.get_prices_trading_schedule_event_type_list_endpoint.call_with_http_info(**kwargs)

    def post_prices_trading_schedule_event_list(
        self,
        body,
        **kwargs
    ):
        """Sequence of market-related events.  # noqa: E501

        Sequence of market-related events like the opening time or closing time of a market of a specific notation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_prices_trading_schedule_event_list(body, async_req=True)
        >>> result = thread.get()

        Args:
            body (InlineObject21):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse20085
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['body'] = \
            body
        return self.post_prices_trading_schedule_event_list_endpoint.call_with_http_info(**kwargs)

