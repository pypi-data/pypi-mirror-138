# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Disputes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'in_dispute': 'bool',
        'evidence_provided_on': 'datetime'
    }

    attribute_map = {
        'in_dispute': 'InDispute',
        'evidence_provided_on': 'EvidenceProvidedOn'
    }

    def __init__(self, in_dispute=None, evidence_provided_on=None):  # noqa: E501
        """Disputes - a model defined in Swagger"""  # noqa: E501

        self._in_dispute = None
        self._evidence_provided_on = None
        self.discriminator = None

        if in_dispute is not None:
            self._in_dispute = in_dispute
        if evidence_provided_on is not None:
            self._evidence_provided_on = evidence_provided_on

    @property
    def in_dispute(self):
        """Gets the in_dispute of this Disputes.  # noqa: E501


        :return: The in_dispute of this Disputes.  # noqa: E501
        :rtype: bool
        """
        return self._in_dispute

    @in_dispute.setter
    def in_dispute(self, in_dispute):
        """Sets the in_dispute of this Disputes.


        :param in_dispute: The in_dispute of this Disputes.  # noqa: E501
        :type: bool
        """

        self._in_dispute = in_dispute

    @property
    def evidence_provided_on(self):
        """Gets the evidence_provided_on of this Disputes.  # noqa: E501


        :return: The evidence_provided_on of this Disputes.  # noqa: E501
        :rtype: datetime
        """
        return self._evidence_provided_on

    @evidence_provided_on.setter
    def evidence_provided_on(self, evidence_provided_on):
        """Sets the evidence_provided_on of this Disputes.


        :param evidence_provided_on: The evidence_provided_on of this Disputes.  # noqa: E501
        :type: datetime
        """

        self._evidence_provided_on = evidence_provided_on

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Disputes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Disputes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
