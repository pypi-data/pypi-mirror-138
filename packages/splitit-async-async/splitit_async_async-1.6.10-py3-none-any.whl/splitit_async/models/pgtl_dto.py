# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PgtlDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'result': 'bool',
        'trace_id': 'str',
        'capture_id': 'str',
        'is_chargeback': 'bool',
        'created_date': 'str',
        'transaction_id': 'str',
        'installment_plan_id': 'int',
        'complete_response_xml': 'str',
        'terminal_gateway_data_id': 'int',
        'avs_message_message_code': 'str',
        'avs_message_message_text': 'str',
        'cvv_message_message_code': 'str',
        'cvv_message_message_text': 'str',
        'requested_currency_code': 'str',
        'processed_amount_amount': 'float',
        'requested_amount_amount': 'float',
        'result_message_message_code': 'str',
        'result_message_message_text': 'str',
        'type': 'OperationType',
        'reference_payment_gateway_transaction_log_id': 'int'
    }

    attribute_map = {
        'id': 'Id',
        'result': 'Result',
        'trace_id': 'TraceId',
        'capture_id': 'CaptureId',
        'is_chargeback': 'IsChargeback',
        'created_date': 'CreatedDate',
        'transaction_id': 'TransactionId',
        'installment_plan_id': 'InstallmentPlanId',
        'complete_response_xml': 'CompleteResponseXml',
        'terminal_gateway_data_id': 'TerminalGatewayDataId',
        'avs_message_message_code': 'AvsMessageMessageCode',
        'avs_message_message_text': 'AvsMessageMessageText',
        'cvv_message_message_code': 'CvvMessageMessageCode',
        'cvv_message_message_text': 'CvvMessageMessageText',
        'requested_currency_code': 'RequestedCurrencyCode',
        'processed_amount_amount': 'ProcessedAmountAmount',
        'requested_amount_amount': 'RequestedAmountAmount',
        'result_message_message_code': 'ResultMessageMessageCode',
        'result_message_message_text': 'ResultMessageMessageText',
        'type': 'Type',
        'reference_payment_gateway_transaction_log_id': 'ReferencePaymentGatewayTransactionLogId'
    }

    def __init__(self, id=None, result=None, trace_id=None, capture_id=None, is_chargeback=None, created_date=None, transaction_id=None, installment_plan_id=None, complete_response_xml=None, terminal_gateway_data_id=None, avs_message_message_code=None, avs_message_message_text=None, cvv_message_message_code=None, cvv_message_message_text=None, requested_currency_code=None, processed_amount_amount=None, requested_amount_amount=None, result_message_message_code=None, result_message_message_text=None, type=None, reference_payment_gateway_transaction_log_id=None):  # noqa: E501
        """PgtlDto - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._result = None
        self._trace_id = None
        self._capture_id = None
        self._is_chargeback = None
        self._created_date = None
        self._transaction_id = None
        self._installment_plan_id = None
        self._complete_response_xml = None
        self._terminal_gateway_data_id = None
        self._avs_message_message_code = None
        self._avs_message_message_text = None
        self._cvv_message_message_code = None
        self._cvv_message_message_text = None
        self._requested_currency_code = None
        self._processed_amount_amount = None
        self._requested_amount_amount = None
        self._result_message_message_code = None
        self._result_message_message_text = None
        self._type = None
        self._reference_payment_gateway_transaction_log_id = None
        self.discriminator = None

        self._id = id
        self._result = result
        if trace_id is not None:
            self._trace_id = trace_id
        if capture_id is not None:
            self._capture_id = capture_id
        self._is_chargeback = is_chargeback
        if created_date is not None:
            self._created_date = created_date
        if transaction_id is not None:
            self._transaction_id = transaction_id
        if installment_plan_id is not None:
            self._installment_plan_id = installment_plan_id
        if complete_response_xml is not None:
            self._complete_response_xml = complete_response_xml
        self._terminal_gateway_data_id = terminal_gateway_data_id
        if avs_message_message_code is not None:
            self._avs_message_message_code = avs_message_message_code
        if avs_message_message_text is not None:
            self._avs_message_message_text = avs_message_message_text
        if cvv_message_message_code is not None:
            self._cvv_message_message_code = cvv_message_message_code
        if cvv_message_message_text is not None:
            self._cvv_message_message_text = cvv_message_message_text
        if requested_currency_code is not None:
            self._requested_currency_code = requested_currency_code
        self._processed_amount_amount = processed_amount_amount
        self._requested_amount_amount = requested_amount_amount
        if result_message_message_code is not None:
            self._result_message_message_code = result_message_message_code
        if result_message_message_text is not None:
            self._result_message_message_text = result_message_message_text
        self._type = type
        if reference_payment_gateway_transaction_log_id is not None:
            self._reference_payment_gateway_transaction_log_id = reference_payment_gateway_transaction_log_id

    @property
    def id(self):
        """Gets the id of this PgtlDto.  # noqa: E501


        :return: The id of this PgtlDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PgtlDto.


        :param id: The id of this PgtlDto.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def result(self):
        """Gets the result of this PgtlDto.  # noqa: E501


        :return: The result of this PgtlDto.  # noqa: E501
        :rtype: bool
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this PgtlDto.


        :param result: The result of this PgtlDto.  # noqa: E501
        :type: bool
        """
        result = bool(result)
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501

        self._result = result

    @property
    def trace_id(self):
        """Gets the trace_id of this PgtlDto.  # noqa: E501


        :return: The trace_id of this PgtlDto.  # noqa: E501
        :rtype: str
        """
        return self._trace_id

    @trace_id.setter
    def trace_id(self, trace_id):
        """Sets the trace_id of this PgtlDto.


        :param trace_id: The trace_id of this PgtlDto.  # noqa: E501
        :type: str
        """

        self._trace_id = trace_id

    @property
    def capture_id(self):
        """Gets the capture_id of this PgtlDto.  # noqa: E501


        :return: The capture_id of this PgtlDto.  # noqa: E501
        :rtype: str
        """
        return self._capture_id

    @capture_id.setter
    def capture_id(self, capture_id):
        """Sets the capture_id of this PgtlDto.


        :param capture_id: The capture_id of this PgtlDto.  # noqa: E501
        :type: str
        """

        self._capture_id = capture_id

    @property
    def is_chargeback(self):
        """Gets the is_chargeback of this PgtlDto.  # noqa: E501


        :return: The is_chargeback of this PgtlDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_chargeback

    @is_chargeback.setter
    def is_chargeback(self, is_chargeback):
        """Sets the is_chargeback of this PgtlDto.


        :param is_chargeback: The is_chargeback of this PgtlDto.  # noqa: E501
        :type: bool
        """
        is_chargeback = bool(is_chargeback)
        if is_chargeback is None:
            raise ValueError("Invalid value for `is_chargeback`, must not be `None`")  # noqa: E501

        self._is_chargeback = is_chargeback

    @property
    def created_date(self):
        """Gets the created_date of this PgtlDto.  # noqa: E501


        :return: The created_date of this PgtlDto.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this PgtlDto.


        :param created_date: The created_date of this PgtlDto.  # noqa: E501
        :type: str
        """

        self._created_date = created_date

    @property
    def transaction_id(self):
        """Gets the transaction_id of this PgtlDto.  # noqa: E501


        :return: The transaction_id of this PgtlDto.  # noqa: E501
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this PgtlDto.


        :param transaction_id: The transaction_id of this PgtlDto.  # noqa: E501
        :type: str
        """

        self._transaction_id = transaction_id

    @property
    def installment_plan_id(self):
        """Gets the installment_plan_id of this PgtlDto.  # noqa: E501


        :return: The installment_plan_id of this PgtlDto.  # noqa: E501
        :rtype: int
        """
        return self._installment_plan_id

    @installment_plan_id.setter
    def installment_plan_id(self, installment_plan_id):
        """Sets the installment_plan_id of this PgtlDto.


        :param installment_plan_id: The installment_plan_id of this PgtlDto.  # noqa: E501
        :type: int
        """

        self._installment_plan_id = installment_plan_id

    @property
    def complete_response_xml(self):
        """Gets the complete_response_xml of this PgtlDto.  # noqa: E501


        :return: The complete_response_xml of this PgtlDto.  # noqa: E501
        :rtype: str
        """
        return self._complete_response_xml

    @complete_response_xml.setter
    def complete_response_xml(self, complete_response_xml):
        """Sets the complete_response_xml of this PgtlDto.


        :param complete_response_xml: The complete_response_xml of this PgtlDto.  # noqa: E501
        :type: str
        """

        self._complete_response_xml = complete_response_xml

    @property
    def terminal_gateway_data_id(self):
        """Gets the terminal_gateway_data_id of this PgtlDto.  # noqa: E501


        :return: The terminal_gateway_data_id of this PgtlDto.  # noqa: E501
        :rtype: int
        """
        return self._terminal_gateway_data_id

    @terminal_gateway_data_id.setter
    def terminal_gateway_data_id(self, terminal_gateway_data_id):
        """Sets the terminal_gateway_data_id of this PgtlDto.


        :param terminal_gateway_data_id: The terminal_gateway_data_id of this PgtlDto.  # noqa: E501
        :type: int
        """
        
        if terminal_gateway_data_id is None:
            raise ValueError("Invalid value for `terminal_gateway_data_id`, must not be `None`")  # noqa: E501

        self._terminal_gateway_data_id = terminal_gateway_data_id

    @property
    def avs_message_message_code(self):
        """Gets the avs_message_message_code of this PgtlDto.  # noqa: E501


        :return: The avs_message_message_code of this PgtlDto.  # noqa: E501
        :rtype: str
        """
        return self._avs_message_message_code

    @avs_message_message_code.setter
    def avs_message_message_code(self, avs_message_message_code):
        """Sets the avs_message_message_code of this PgtlDto.


        :param avs_message_message_code: The avs_message_message_code of this PgtlDto.  # noqa: E501
        :type: str
        """

        self._avs_message_message_code = avs_message_message_code

    @property
    def avs_message_message_text(self):
        """Gets the avs_message_message_text of this PgtlDto.  # noqa: E501


        :return: The avs_message_message_text of this PgtlDto.  # noqa: E501
        :rtype: str
        """
        return self._avs_message_message_text

    @avs_message_message_text.setter
    def avs_message_message_text(self, avs_message_message_text):
        """Sets the avs_message_message_text of this PgtlDto.


        :param avs_message_message_text: The avs_message_message_text of this PgtlDto.  # noqa: E501
        :type: str
        """

        self._avs_message_message_text = avs_message_message_text

    @property
    def cvv_message_message_code(self):
        """Gets the cvv_message_message_code of this PgtlDto.  # noqa: E501


        :return: The cvv_message_message_code of this PgtlDto.  # noqa: E501
        :rtype: str
        """
        return self._cvv_message_message_code

    @cvv_message_message_code.setter
    def cvv_message_message_code(self, cvv_message_message_code):
        """Sets the cvv_message_message_code of this PgtlDto.


        :param cvv_message_message_code: The cvv_message_message_code of this PgtlDto.  # noqa: E501
        :type: str
        """

        self._cvv_message_message_code = cvv_message_message_code

    @property
    def cvv_message_message_text(self):
        """Gets the cvv_message_message_text of this PgtlDto.  # noqa: E501


        :return: The cvv_message_message_text of this PgtlDto.  # noqa: E501
        :rtype: str
        """
        return self._cvv_message_message_text

    @cvv_message_message_text.setter
    def cvv_message_message_text(self, cvv_message_message_text):
        """Sets the cvv_message_message_text of this PgtlDto.


        :param cvv_message_message_text: The cvv_message_message_text of this PgtlDto.  # noqa: E501
        :type: str
        """

        self._cvv_message_message_text = cvv_message_message_text

    @property
    def requested_currency_code(self):
        """Gets the requested_currency_code of this PgtlDto.  # noqa: E501


        :return: The requested_currency_code of this PgtlDto.  # noqa: E501
        :rtype: str
        """
        return self._requested_currency_code

    @requested_currency_code.setter
    def requested_currency_code(self, requested_currency_code):
        """Sets the requested_currency_code of this PgtlDto.


        :param requested_currency_code: The requested_currency_code of this PgtlDto.  # noqa: E501
        :type: str
        """

        self._requested_currency_code = requested_currency_code

    @property
    def processed_amount_amount(self):
        """Gets the processed_amount_amount of this PgtlDto.  # noqa: E501


        :return: The processed_amount_amount of this PgtlDto.  # noqa: E501
        :rtype: float
        """
        return self._processed_amount_amount

    @processed_amount_amount.setter
    def processed_amount_amount(self, processed_amount_amount):
        """Sets the processed_amount_amount of this PgtlDto.


        :param processed_amount_amount: The processed_amount_amount of this PgtlDto.  # noqa: E501
        :type: float
        """
        
        if processed_amount_amount is None:
            raise ValueError("Invalid value for `processed_amount_amount`, must not be `None`")  # noqa: E501

        self._processed_amount_amount = processed_amount_amount

    @property
    def requested_amount_amount(self):
        """Gets the requested_amount_amount of this PgtlDto.  # noqa: E501


        :return: The requested_amount_amount of this PgtlDto.  # noqa: E501
        :rtype: float
        """
        return self._requested_amount_amount

    @requested_amount_amount.setter
    def requested_amount_amount(self, requested_amount_amount):
        """Sets the requested_amount_amount of this PgtlDto.


        :param requested_amount_amount: The requested_amount_amount of this PgtlDto.  # noqa: E501
        :type: float
        """
        
        if requested_amount_amount is None:
            raise ValueError("Invalid value for `requested_amount_amount`, must not be `None`")  # noqa: E501

        self._requested_amount_amount = requested_amount_amount

    @property
    def result_message_message_code(self):
        """Gets the result_message_message_code of this PgtlDto.  # noqa: E501


        :return: The result_message_message_code of this PgtlDto.  # noqa: E501
        :rtype: str
        """
        return self._result_message_message_code

    @result_message_message_code.setter
    def result_message_message_code(self, result_message_message_code):
        """Sets the result_message_message_code of this PgtlDto.


        :param result_message_message_code: The result_message_message_code of this PgtlDto.  # noqa: E501
        :type: str
        """

        self._result_message_message_code = result_message_message_code

    @property
    def result_message_message_text(self):
        """Gets the result_message_message_text of this PgtlDto.  # noqa: E501


        :return: The result_message_message_text of this PgtlDto.  # noqa: E501
        :rtype: str
        """
        return self._result_message_message_text

    @result_message_message_text.setter
    def result_message_message_text(self, result_message_message_text):
        """Sets the result_message_message_text of this PgtlDto.


        :param result_message_message_text: The result_message_message_text of this PgtlDto.  # noqa: E501
        :type: str
        """

        self._result_message_message_text = result_message_message_text

    @property
    def type(self):
        """Gets the type of this PgtlDto.  # noqa: E501


        :return: The type of this PgtlDto.  # noqa: E501
        :rtype: OperationType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PgtlDto.


        :param type: The type of this PgtlDto.  # noqa: E501
        :type: OperationType
        """
        
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def reference_payment_gateway_transaction_log_id(self):
        """Gets the reference_payment_gateway_transaction_log_id of this PgtlDto.  # noqa: E501


        :return: The reference_payment_gateway_transaction_log_id of this PgtlDto.  # noqa: E501
        :rtype: int
        """
        return self._reference_payment_gateway_transaction_log_id

    @reference_payment_gateway_transaction_log_id.setter
    def reference_payment_gateway_transaction_log_id(self, reference_payment_gateway_transaction_log_id):
        """Sets the reference_payment_gateway_transaction_log_id of this PgtlDto.


        :param reference_payment_gateway_transaction_log_id: The reference_payment_gateway_transaction_log_id of this PgtlDto.  # noqa: E501
        :type: int
        """

        self._reference_payment_gateway_transaction_log_id = reference_payment_gateway_transaction_log_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PgtlDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PgtlDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
