{"version":3,"file":"lib_index_js.35f95420160244624313.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAwD;AACJ;AAC2B;AACjC;AACA;AAC9C;AACA;AACA;AACA,eAAe,kEAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,wEAAoB;AAC3D,+BAA+B,mEAAe;AAC9C;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,gBAAgB,gFAA4B;AAC5C;AACA;AACA;AACA;AACA,qCAAqC,kBAAkB,IAAI,mBAAmB;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,4DAAS,+FAA+F,kEAAe;AACtK;AACA;AACA;AACA;AACA,yDAAyD,kEAAe;AACxE;AACA;AACA,oBAAoB,+EAAiC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iEAAe,MAAM,EAAC","sources":["webpack://jupyterlab-autoimport/./lib/index.js"],"sourcesContent":["import { INotebookTracker } from \"@jupyterlab/notebook\";\nimport { isCodeCellModel } from \"@jupyterlab/cells\";\nimport { SimplifiedOutputArea, OutputAreaModel } from \"@jupyterlab/outputarea\";\nimport { ElementExt } from \"@lumino/domutils\";\nimport { findIndex } from \"@lumino/algorithm\";\nconst plugin = {\n    id: \"@jupyterlab/autoimport:plugin\",\n    autoStart: true,\n    optional: [INotebookTracker],\n    activate: (app, notebookTracker) => {\n        app.commands.addCommand(\"refresh-imports\", {\n            label: \"Refresh Imports\",\n            execute: () => {\n                const current = notebookTracker === null || notebookTracker === void 0 ? void 0 : notebookTracker.currentWidget;\n                const notebook = current === null || current === void 0 ? void 0 : current.content;\n                if (!current || current !== app.shell.currentWidget ||\n                    !(notebook === null || notebook === void 0 ? void 0 : notebook.model) || !notebook.activeCell) {\n                    return;\n                }\n                const outputArea = new SimplifiedOutputArea({\n                    model: new OutputAreaModel(),\n                    rendermime: current.content.rendermime,\n                });\n                const printImports = `\n          if '_imported' not in dir(get_ipython().user_ns):\n            %load_ext ipython_autoimport\n          print(*get_ipython().user_ns._imported, sep='\\\\n')\n        `;\n                SimplifiedOutputArea.execute(printImports, outputArea, current.sessionContext)\n                    .then((msg) => {\n                    var _a, _b;\n                    if ((msg === null || msg === void 0 ? void 0 : msg.content.status) !== \"ok\") {\n                        if ((msg === null || msg === void 0 ? void 0 : msg.content.status) === \"error\") {\n                            alert(`${msg.content.ename}\\n${msg.content.evalue}`);\n                        }\n                        else if (msg) {\n                            alert(msg.content.status);\n                        }\n                        else {\n                            alert(\"Unknown problem\");\n                        }\n                        return;\n                    }\n                    const imports = outputArea.model.toJSON().map(output => output.text).join(\"\");\n                    var importsText = (imports != null) ? imports.replace(/\\n+$/, \"\") : \"\";\n                    notebook.activeCellIndex = 0;\n                    const firstCodeCellIndex = findIndex(((_a = notebook.model) === null || _a === void 0 ? void 0 : _a.cells) || [], (cell, index) => isCodeCellModel(cell));\n                    if (firstCodeCellIndex !== -1) {\n                        notebook.activeCellIndex = firstCodeCellIndex;\n                    }\n                    notebook.deselectAll();\n                    if (notebook.activeCell === null || !isCodeCellModel(notebook.activeCell.model)) {\n                        return;\n                    }\n                    ElementExt.scrollIntoViewIfNeeded(notebook.node, notebook.activeCell.node);\n                    const cellText = notebook.activeCell.model.value.text;\n                    const start = (_b = cellText.match(/^(import|from) /m)) === null || _b === void 0 ? void 0 : _b.index;\n                    const end = (start != null) ? cellText.indexOf(\"\\n\\n\", start) : null;\n                    var before, after;\n                    if (start != null && end != null) {\n                        before = cellText.slice(0, start);\n                        after = ((end >= 0) ? cellText.slice(end) : \"\");\n                    }\n                    else {\n                        before = \"\";\n                        after = cellText;\n                    }\n                    after = after.replace(/^\\n+/, \"\");\n                    if (importsText !== \"\" && after !== \"\") {\n                        importsText = importsText + \"\\n\\n\";\n                    }\n                    notebook.activeCell.model.value.text = before + importsText + after;\n                });\n            }\n        });\n        app.commands.addKeyBinding({\n            command: \"refresh-imports\",\n            keys: [\"Accel K\"],\n            selector: \".jp-Notebook\",\n        });\n    }\n};\nexport default plugin;\n"],"names":[],"sourceRoot":""}