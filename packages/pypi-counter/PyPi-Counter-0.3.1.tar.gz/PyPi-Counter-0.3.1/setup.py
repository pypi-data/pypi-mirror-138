# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['pypi_count']

package_data = \
{'': ['*']}

install_requires = \
['libcst>=0.4.0,<0.5.0', 'rich>=10.9.0,<11.0.0', 'typer[all]>=0.3.2,<0.4.0']

entry_points = \
{'console_scripts': ['pypicount = pypi_count.command_line_interface:cli']}

setup_kwargs = {
    'name': 'pypi-counter',
    'version': '0.3.1',
    'description': 'A counting program used for different Python packages and modules.',
    'long_description': '# PyPi-Counter\n\n![PyPi-Counter](picture/design.png)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n![example workflow](https://github.com/cmpsc-481-s22-m1/PyPiCounter/actions/workflows/main.yml/badge.svg)\n![github issues](https://img.shields.io/github/issues/cmpsc-481-s22-m1/PyPiCounter)\n\n## Table of Contents\n\n- [Overview](#overview)\n- [Project Usage](#usefulness-of-project)\n- [Getting Started](#getting-started)\n  - [Importing to Another Tool](#importing-into-another-grading-tool)\n  - [Stand-Alone Usage](#stand-alone-usage)\n- [Help and Bug Fixes](#help-and-bug-fixes)\n- [Authors](#authors)\n\n## Overview\n\n- This project is a tool that, on its own, will provide assistance to\ncomputer science professors to assist in grading assignments.\nThis tool will count and output the number of \'common errors\'\n(e.g., Classes without docstrings, functions without docstrings, etc.)\nas well as the number of common computing structures (e.g.,\nfunctions, Classes, looping constructs, imports, etc.)\nall as specified by the user in the command line interface.\n\n- This project also can serve as a collaborative enhancement\nto import this tool into Allegheny College\'s\nown GatorGrader to create new GatorGrader checks.\nThe program utilizes LibCST, which parses Python\ncode as a CST (Concrete Syntax Tree)\nthat keeps all formatting details (comments,\nwhite spaces, parentheses, etc.).\nAs a released tool on PiPy, this tool can be imported into\nany other automated grading tool as well.\n\n## Usefulness of Project\n\n- Within LibCST, it has many nodes to "match" modules, expressions, and\nstatements which allowed us as programmers to complete our user stories in a\nmore uniform way. This project is useful because of the exploration of LibCST,\nwhich ultimately allows end users to specify a given construct they would like\nto identify in the source code (as LibCST will find all matches of this construct).\n\n## Getting Started\n\n### Importing into Another Grading Tool\n\n1. Install from PyPi by running `poetry add pypi-counter` in your terminal.\n2. Import the PyPiCounter package with the syntax:\n`from pypi_count.py_counter import PyPiCount`.\n3. Call `PyPiCount` Class on specified file with the following syntax:\n`stored_path = PyPiCount("path_to_file")`\nThroughout this example, `stored_path` is an instance variable that stores the\nresult of the parsed file. Functions must be called on a parsed file.\n4. Run the functions in the package using the `stored_path.[function_name]` syntax.\nFor example, `stored_path.count_comments()`\n\nFor best results, we recommend adding a print statement, as the functions\nwill only return the number of the specified construct. For example,\n\n```python\n\nconsole.print(f"Number of comments in this file: {stored_path.count_comments()}")\n\n```\n\nWill produce:\n\n```python\n\nNumber of comments in this file: 26\n\n```\n\nThe list of functions available are:\n\n```python\n\ncount_class_definitions(file_name)                      \n# returns the number of class definitions\n\ncount_comments(file_name)                                \n# returns the number of comments\n\ncount_import_statements(file_name)                     \n# returns the number of import statements\n\ncount_for_loops(file_name)                           \n# returns the number of for loops\n\ncount_while_loops(file_name)                           \n# returns the number of while loops\n\ncount_function_definitions(file_name)            \n# returns the number of function definitions  \n\ncount_functions_without_docstrings(file_name)         \n# returns the number of functions without docstrings\n\ncount_functions_with_docstrings(file_name)          \n# returns the number of functions with docstrings\n\ncount_classes_with_docstrings(file_name)                  \n# returns the number of classes with docstrings\n\ncount_classes_without_docstrings(file_name)             \n# returns the number of classes without docstrings\n\ncount_function_parameters(file_name, function_name)    \n# returns the number of function parameters\n# after specifying the function name\n\ncount_assignment_statements(file_name)              \n# returns the number of assignment statements\n\ncount_augmented_assignment_statements(file_name)\n# returns the number of assignment statements that include\nan augmented assignment operator (+=, -=)\n\n```\n\n### Stand-Alone Usage\n\nUsers can get started with this project by following the following steps:\n\n1. Install the package with pip, using the command `pip install pypi-counter`\nor `pipx install pypi-counter`\n2. To familiarize yourself with the arguments accepted for this project, run the\ncommand ```poetry run pypicount --help```. This command displays all of the\ndifferent arguments that can be passed. The list of the different arguments\nare listed below:\n\n  ```python\n Usage: pypicount [OPTIONS] INPUT_FILE\n\n  Main method to display the different options.\n\nArguments:\n  INPUT_FILE  [required]\n\nOptions:\n  --class-definitions             [default: False]\n  --import-statements             [default: False]\n  --comments                      [default: False]\n  --function-definitions          [default: False]\n  --if-statements                 [default: False]\n  --function-without-docstrings   [default: False]\n  --function-with-docstrings      [default: False]\n  --class-with-docstrings         [default: False]\n  --class-without-docstrings      [default: False]\n  --function-parameters TEXT\n  --assignment-statements         [default: False]\n  --augmented-assignment-statements\n                                  [default: False]\n  --while-loops                   [default: False]\n  --for-loops                     [default: False]\n  --install-completion            Install completion for the current shell.\n  --show-completion               Show completion for the current shell, to\n                                  copy it or customize the installation.\n\n  --help                          Show this message and exit.\n\n  ```\n\nThese are the different types of arguments that PyPiCount will accept in this release.\n\nOnce you find your chosen arguments, run the following:\n\n```python\npoetry run pypicount --[argument] --input-file path/to/file\n```\n\n## Example of Output\n\nSample run command:\n\n```python\npoetry run pypicount --class-with-docstrings --input-file tests/input/sample_file.py\n```\n\nSample Output:\n\n```python\n# of functions with docstrings: 1\n```\n\n## Help and Bug Fixes\n\n- Users who are having trouble with navigating the program can come to the ReadMe\nfor assistance.\n- Users can also open an issue on our [Issue Tracker](https://github.com/cmpsc-481-s22-m1/PyCount/issues)\nwith the following format:\n  - Describe the bug\n  - Include steps to replicate the bug\n  - Expected behavior\n  - Screenshots\n  - Desktop OS\n\n## Authors\n\n- The people who maintain and contribute to this project are\n  - Alexis Caldwell, [@caldwella2](https://github.com/caldwella2)\n  - Adriana Solis, [@solisa986](https://github.com/solisa986)\n  - Rachael Harris, [@rachaelharris](https://github.com/rachaelharris)\n  - Ramon Guzman, [@guzmanr04](https://github.com/guzmanr04)\n  - Ryan Hilty, [@RyanHiltyAllegheny](https://github.com/RyanHiltyAllegheny)\n',
    'author': 'Adriana Solis',
    'author_email': 'solisa@allegheny.edu',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/cmpsc-481-s22-m1/PyPiCounter/tree/main',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
