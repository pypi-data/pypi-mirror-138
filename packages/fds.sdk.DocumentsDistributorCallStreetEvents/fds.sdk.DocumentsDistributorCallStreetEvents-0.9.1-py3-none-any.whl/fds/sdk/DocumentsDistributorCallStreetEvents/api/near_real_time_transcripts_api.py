"""
    Documents Distributor - CallStreet Events

    CallStreet Events contains all the Documents Distributor APIs that provide events data such as Events Audio and Near Real-Time Transcripts  The  Events Audio API provides access to all audio recordings to various company events covered by FactSet. The events include, but are not limited to: earnings calls, conferences, and investor days.   This API also provides relevant metadata such as timestamps and identifiers around each audio file.  The Documents Distributor - Near Real-time Transcripts API enables access to Near Real-time Transcripts provided by CallStreet to time-sensitive clients. This API also provides the relevant speaker metadata along with their confidence scores. This data caters to quant clients interested in building machine learning models.  Clients can leverage this API to perform sentiment analysis through natural language processing or machine learning. It can also be used to complement analysis using FactSet's transcripts service.  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from fds.sdk.DocumentsDistributorCallStreetEvents.api_client import ApiClient, Endpoint as _Endpoint
from fds.sdk.DocumentsDistributorCallStreetEvents.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from fds.sdk.DocumentsDistributorCallStreetEvents.model.error import Error
from fds.sdk.DocumentsDistributorCallStreetEvents.model.nrt_calls import NRTCalls
from fds.sdk.DocumentsDistributorCallStreetEvents.model.nrt_calls400_response import NRTCalls400Response
from fds.sdk.DocumentsDistributorCallStreetEvents.model.nrt_snippets import NRTSnippets
from fds.sdk.DocumentsDistributorCallStreetEvents.model.nrt_snippets400_response import NRTSnippets400Response
from fds.sdk.DocumentsDistributorCallStreetEvents.model.nrt_speakerids import NRTSpeakerids
from fds.sdk.DocumentsDistributorCallStreetEvents.model.nrt_speakerids400_response import NRTSpeakerids400Response


class NearRealTimeTranscriptsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.get_bulk_documents_nrt_v1_calls_endpoint = _Endpoint(
            settings={
                'response_type': (NRTCalls,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/bulk-documents/nrt/v1/calls',
                'operation_id': 'get_bulk_documents_nrt_v1_calls',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'sort',
                    'report_id',
                    'audio_source_id',
                    'entity_id',
                    'ticker',
                    'call_status',
                    'pagination_limit',
                    'pagination_offset',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'sort',
                    'call_status',
                ],
                'validation': [
                    'pagination_limit',
                ]
            },
            root_map={
                'validations': {
                    ('pagination_limit',): {

                        'inclusive_maximum': 500,
                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                    ('sort',): {

                        "STARTDATE": "startDate",
                        "-STARTDATE": "-startDate"
                    },
                    ('call_status',): {

                        "INPROGRESS": "inProgress",
                        "ENDED": "ended",
                        "EWN": "ewn",
                        "ISSUEATSOURCE": "issueAtSource"
                    },
                },
                'openapi_types': {
                    'sort':
                        (str,),
                    'report_id':
                        (int,),
                    'audio_source_id':
                        (int,),
                    'entity_id':
                        (str,),
                    'ticker':
                        (str,),
                    'call_status':
                        (str,),
                    'pagination_limit':
                        (int,),
                    'pagination_offset':
                        (int,),
                },
                'attribute_map': {
                    'sort': '_sort',
                    'report_id': 'reportId',
                    'audio_source_id': 'audioSourceId',
                    'entity_id': 'entityId',
                    'ticker': 'ticker',
                    'call_status': 'callStatus',
                    'pagination_limit': '_paginationLimit',
                    'pagination_offset': '_paginationOffset',
                },
                'location_map': {
                    'sort': 'query',
                    'report_id': 'query',
                    'audio_source_id': 'query',
                    'entity_id': 'query',
                    'ticker': 'query',
                    'call_status': 'query',
                    'pagination_limit': 'query',
                    'pagination_offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_bulk_documents_nrt_v1_list_snippets_endpoint = _Endpoint(
            settings={
                'response_type': (NRTSnippets,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/bulk-documents/nrt/v1/list-snippets',
                'operation_id': 'get_bulk_documents_nrt_v1_list_snippets',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'audio_source_id',
                    'report_id',
                    'pagination_limit',
                    'pagination_offset',
                ],
                'required': [
                    'audio_source_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'pagination_limit',
                ]
            },
            root_map={
                'validations': {
                    ('pagination_limit',): {

                        'inclusive_maximum': 500,
                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'audio_source_id':
                        (int,),
                    'report_id':
                        (int,),
                    'pagination_limit':
                        (int,),
                    'pagination_offset':
                        (int,),
                },
                'attribute_map': {
                    'audio_source_id': 'audioSourceId',
                    'report_id': 'reportId',
                    'pagination_limit': '_paginationLimit',
                    'pagination_offset': '_paginationOffset',
                },
                'location_map': {
                    'audio_source_id': 'query',
                    'report_id': 'query',
                    'pagination_limit': 'query',
                    'pagination_offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_bulk_documents_nrt_v1_speakerids_endpoint = _Endpoint(
            settings={
                'response_type': (NRTSpeakerids,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/bulk-documents/nrt/v1/speakerids',
                'operation_id': 'get_bulk_documents_nrt_v1_speakerids',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'audio_source_id',
                    'sort',
                    'pagination_limit',
                    'pagination_offset',
                ],
                'required': [
                    'audio_source_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'sort',
                ],
                'validation': [
                    'pagination_limit',
                ]
            },
            root_map={
                'validations': {
                    ('pagination_limit',): {

                        'inclusive_maximum': 500,
                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                    ('sort',): {

                        "STARTDATE": "startDate",
                        "-STARTDATE": "-startDate"
                    },
                },
                'openapi_types': {
                    'audio_source_id':
                        (int,),
                    'sort':
                        (str,),
                    'pagination_limit':
                        (int,),
                    'pagination_offset':
                        (int,),
                },
                'attribute_map': {
                    'audio_source_id': 'audioSourceId',
                    'sort': '_sort',
                    'pagination_limit': '_paginationLimit',
                    'pagination_offset': '_paginationOffset',
                },
                'location_map': {
                    'audio_source_id': 'query',
                    'sort': 'query',
                    'pagination_limit': 'query',
                    'pagination_offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def get_bulk_documents_nrt_v1_calls(
        self,
        **kwargs
    ):
        """Returns the active calls happening at the moment  # noqa: E501

        Returns the active calls happening at the moment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_bulk_documents_nrt_v1_calls(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            sort (str): Enables to get the data in chronological or reverse chronological order based on startDate. Results are in reverse chronological order if this parameter is not used. [optional] if omitted the server will use the default value of "-startDate"
            report_id (int): Unique identifier for an event. [optional]
            audio_source_id (int): Unique Id for an internal recording specific to reportId. For example, reportId X would have multiple recordings from different source (dial-in or webcast).One reportId can have multiple audiosource ids.. [optional]
            entity_id (str): Factset entity level identifier for the company hosting the event. [optional]
            ticker (str): Ticker-region identifier for the company hosting the event. [optional]
            call_status (str): Status of the call i.e. ended or inProgress or ewn or issueAtSource. [optional]
            pagination_limit (int): Specifies the number of results to return per page.[ Min=0 ; Max=500 ]. [optional]
            pagination_offset (int): Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            NRTCalls
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.get_bulk_documents_nrt_v1_calls_endpoint.call_with_http_info(**kwargs)

    def get_bulk_documents_nrt_v1_list_snippets(
        self,
        audio_source_id,
        **kwargs
    ):
        """Returns the latest snippets from an active call  # noqa: E501

        Returns the latest snippets from an active call  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_bulk_documents_nrt_v1_list_snippets(audio_source_id, async_req=True)
        >>> result = thread.get()

        Args:
            audio_source_id (int): Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSource ids.

        Keyword Args:
            report_id (int): Unique identifier for an event. [optional]
            pagination_limit (int): Specifies the  number of results to return per page. [ Min=0; Max=500 ]. [optional]
            pagination_offset (int): Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            NRTSnippets
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['audio_source_id'] = \
            audio_source_id
        return self.get_bulk_documents_nrt_v1_list_snippets_endpoint.call_with_http_info(**kwargs)

    def get_bulk_documents_nrt_v1_speakerids(
        self,
        audio_source_id,
        **kwargs
    ):
        """Returns the latest speakerIds with the confidence scores generated for an active call.  # noqa: E501

        Returns the latest speakerIds with the cosine scores(confidence scores) generated for an active call.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_bulk_documents_nrt_v1_speakerids(audio_source_id, async_req=True)
        >>> result = thread.get()

        Args:
            audio_source_id (int): The Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from a different source (dial-in or webcast). One ReportID can have multiple audioSource ids. 

        Keyword Args:
            sort (str): Enables to get the data in chronological or reverse chronological order. Results are in chronological order if this parameter is not used. [optional] if omitted the server will use the default value of "startDate"
            pagination_limit (int): Specifies the number of results to return per page.[ Min=0 ; Max=500 ]. [optional]
            pagination_offset (int): Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            NRTSpeakerids
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['audio_source_id'] = \
            audio_source_id
        return self.get_bulk_documents_nrt_v1_speakerids_endpoint.call_with_http_info(**kwargs)

