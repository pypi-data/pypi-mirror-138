"""
    FactSet Benchmarks API

    FactSet Benchmarks API gives access to Index Constituents, Prices, Returns, and Ratios. For a sample list of identifiers, use the /metrics endpoint. Equity Only - Fixed Income Benchmark support coming soon.   # noqa: E501

    The version of the OpenAPI document: 1.4.0
    Contact: api@factset.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from fds.sdk.FactSetBenchmarks.api_client import ApiClient, Endpoint as _Endpoint
from fds.sdk.FactSetBenchmarks.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from fds.sdk.FactSetBenchmarks.model.benchmark_constituents_request import BenchmarkConstituentsRequest
from fds.sdk.FactSetBenchmarks.model.benchmark_constituents_response import BenchmarkConstituentsResponse
from fds.sdk.FactSetBenchmarks.model.error_response import ErrorResponse
from fds.sdk.FactSetBenchmarks.model.fixed_income_benchmark_constituents_request import FixedIncomeBenchmarkConstituentsRequest
from fds.sdk.FactSetBenchmarks.model.fixed_income_benchmark_constituents_response import FixedIncomeBenchmarkConstituentsResponse


class BenchmarkConstituentsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.get_benchmark_constituents_endpoint = _Endpoint(
            settings={
                'response_type': (BenchmarkConstituentsResponse,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/factset-benchmarks/v1/constituents',
                'operation_id': 'get_benchmark_constituents',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'ids',
                    'date',
                    'currency',
                ],
                'required': [
                    'ids',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'ids',
                ]
            },
            root_map={
                'validations': {
                    ('ids',): {

                        'max_items': 1,
                        'min_items': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ids':
                        ([str],),
                    'date':
                        (str,),
                    'currency':
                        (str,),
                },
                'attribute_map': {
                    'ids': 'ids',
                    'date': 'date',
                    'currency': 'currency',
                },
                'location_map': {
                    'ids': 'query',
                    'date': 'query',
                    'currency': 'query',
                },
                'collection_format_map': {
                    'ids': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_benchmark_constituents_for_list_endpoint = _Endpoint(
            settings={
                'response_type': (BenchmarkConstituentsResponse,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/factset-benchmarks/v1/constituents',
                'operation_id': 'get_benchmark_constituents_for_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'benchmark_constituents_request',
                ],
                'required': [
                    'benchmark_constituents_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'benchmark_constituents_request':
                        (BenchmarkConstituentsRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'benchmark_constituents_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_fi_benchmark_constituents_endpoint = _Endpoint(
            settings={
                'response_type': (FixedIncomeBenchmarkConstituentsResponse,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/factset-benchmarks/v1/fixed-income-constituents',
                'operation_id': 'get_fi_benchmark_constituents',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'ids',
                    'date',
                    'currency',
                ],
                'required': [
                    'ids',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'ids',
                ]
            },
            root_map={
                'validations': {
                    ('ids',): {

                        'max_items': 1,
                        'min_items': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ids':
                        ([str],),
                    'date':
                        (str,),
                    'currency':
                        (str,),
                },
                'attribute_map': {
                    'ids': 'ids',
                    'date': 'date',
                    'currency': 'currency',
                },
                'location_map': {
                    'ids': 'query',
                    'date': 'query',
                    'currency': 'query',
                },
                'collection_format_map': {
                    'ids': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_fi_benchmark_constituents_for_list_endpoint = _Endpoint(
            settings={
                'response_type': (FixedIncomeBenchmarkConstituentsResponse,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/factset-benchmarks/v1/fixed-income-constituents',
                'operation_id': 'get_fi_benchmark_constituents_for_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'fixed_income_benchmark_constituents_request',
                ],
                'required': [
                    'fixed_income_benchmark_constituents_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fixed_income_benchmark_constituents_request':
                        (FixedIncomeBenchmarkConstituentsRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'fixed_income_benchmark_constituents_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def get_benchmark_constituents(
        self,
        ids,
        **kwargs
    ):
        """Returns the requested Benchmark Constituents and respective Weights, Price and Market Value.  # noqa: E501

        Returns the requested Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the `ids` requested. Use the helper endpoint **/id-list** for valid identifiers.     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_benchmark_constituents(ids, async_req=True)
        >>> result = thread.get()

        Args:
            ids ([str]): Benchmark Identifiers. Reference the helper endpoint **/id-list** to get a sample list of  valid identifiers. You must be authorized for the `ids` requested, otherwise you will receive an error. <p>***ids limit** =  1 per request*</p>

        Keyword Args:
            date (str): Date of holding expressed in YYYY-MM-DD format.. [optional]
            currency (str): Currency for response.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BenchmarkConstituentsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['ids'] = \
            ids
        return self.get_benchmark_constituents_endpoint.call_with_http_info(**kwargs)

    def get_benchmark_constituents_for_list(
        self,
        benchmark_constituents_request,
        **kwargs
    ):
        """Returns the requested Benchmark Constituents and respective Weights, Price and Market Value.  # noqa: E501

        Returns the requested Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the `ids` requested. Use the helper endpoint **/id-list** for valid identifiers.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_benchmark_constituents_for_list(benchmark_constituents_request, async_req=True)
        >>> result = thread.get()

        Args:
            benchmark_constituents_request (BenchmarkConstituentsRequest): Requests Benchmark Constituents for the given identifier and date.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BenchmarkConstituentsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['benchmark_constituents_request'] = \
            benchmark_constituents_request
        return self.get_benchmark_constituents_for_list_endpoint.call_with_http_info(**kwargs)

    def get_fi_benchmark_constituents(
        self,
        ids,
        **kwargs
    ):
        """Returns the requested Fixed Income Benchmark Constituents and respective Weights, Price and Market Value.  # noqa: E501

        Returns the requested Fixed Income Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the `ids` requested.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_fi_benchmark_constituents(ids, async_req=True)
        >>> result = thread.get()

        Args:
            ids ([str]): Fixed Income Benchmark Identifiers. You must be authorized for the `ids` requested, otherwise you will receive an error. <p>***ids limit** =  1 per request*</p>

        Keyword Args:
            date (str): Date of holding expressed in YYYY-MM-DD format.. [optional]
            currency (str): Currency for response.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            FixedIncomeBenchmarkConstituentsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['ids'] = \
            ids
        return self.get_fi_benchmark_constituents_endpoint.call_with_http_info(**kwargs)

    def get_fi_benchmark_constituents_for_list(
        self,
        fixed_income_benchmark_constituents_request,
        **kwargs
    ):
        """Returns the requested Benchmark Constituents and respective Weights, Price and Market Value.  # noqa: E501

        Returns the requested Fixed Income Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the `ids` requested.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_fi_benchmark_constituents_for_list(fixed_income_benchmark_constituents_request, async_req=True)
        >>> result = thread.get()

        Args:
            fixed_income_benchmark_constituents_request (FixedIncomeBenchmarkConstituentsRequest): Requests Fixed Income Benchmark Constituents for the given identifier and date.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            FixedIncomeBenchmarkConstituentsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['fixed_income_benchmark_constituents_request'] = \
            fixed_income_benchmark_constituents_request
        return self.get_fi_benchmark_constituents_for_list_endpoint.call_with_http_info(**kwargs)

