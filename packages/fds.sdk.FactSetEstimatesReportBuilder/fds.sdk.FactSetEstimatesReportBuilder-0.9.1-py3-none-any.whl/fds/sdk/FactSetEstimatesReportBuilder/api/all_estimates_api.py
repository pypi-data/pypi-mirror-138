"""
    FactSet Estimates Report Builder

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from fds.sdk.FactSetEstimatesReportBuilder.api_client import ApiClient, Endpoint as _Endpoint
from fds.sdk.FactSetEstimatesReportBuilder.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from fds.sdk.FactSetEstimatesReportBuilder.model.error_response import ErrorResponse
from fds.sdk.FactSetEstimatesReportBuilder.model.response import Response


class AllEstimatesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.get_estimates_balance_sheet_endpoint = _Endpoint(
            settings={
                'response_type': (Response,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/balance-sheet',
                'operation_id': 'get_estimates_balance_sheet',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'periodicity',
                    'schema',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                    'periodicity',
                    'schema',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('periodicity',): {

                        "ANN": "ANN",
                        "QTR": "QTR",
                        "SEMI": "SEMI",
                        "CAL": "CAL"
                    },
                    ('schema',): {

                        "GROUP_LEVEL": "table_group_level",
                        "PARENT_CHILD_COLUMNS": "table_parent_child_columns"
                    },
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'periodicity':
                        (str,),
                    'schema':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'periodicity': 'periodicity',
                    'schema': 'schema',
                },
                'location_map': {
                    'id': 'query',
                    'periodicity': 'query',
                    'schema': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_estimates_cash_flow_endpoint = _Endpoint(
            settings={
                'response_type': (Response,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/cash-flow',
                'operation_id': 'get_estimates_cash_flow',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'periodicity',
                    'schema',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                    'periodicity',
                    'schema',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('periodicity',): {

                        "ANN": "ANN",
                        "QTR": "QTR",
                        "SEMI": "SEMI",
                        "CAL": "CAL"
                    },
                    ('schema',): {

                        "GROUP_LEVEL": "table_group_level",
                        "PARENT_CHILD_COLUMNS": "table_parent_child_columns"
                    },
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'periodicity':
                        (str,),
                    'schema':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'periodicity': 'periodicity',
                    'schema': 'schema',
                },
                'location_map': {
                    'id': 'query',
                    'periodicity': 'query',
                    'schema': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_estimates_geographic_segments_endpoint = _Endpoint(
            settings={
                'response_type': (Response,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/geographic-segments',
                'operation_id': 'get_estimates_geographic_segments',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'periodicity',
                    'schema',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                    'periodicity',
                    'schema',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('periodicity',): {

                        "ANN": "ANN",
                        "QTR": "QTR",
                        "SEMI": "SEMI",
                        "CAL": "CAL"
                    },
                    ('schema',): {

                        "GROUP_LEVEL": "table_group_level",
                        "PARENT_CHILD_COLUMNS": "table_parent_child_columns"
                    },
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'periodicity':
                        (str,),
                    'schema':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'periodicity': 'periodicity',
                    'schema': 'schema',
                },
                'location_map': {
                    'id': 'query',
                    'periodicity': 'query',
                    'schema': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_estimates_income_statement_endpoint = _Endpoint(
            settings={
                'response_type': (Response,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/income-statement',
                'operation_id': 'get_estimates_income_statement',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'periodicity',
                    'schema',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                    'periodicity',
                    'schema',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('periodicity',): {

                        "ANN": "ANN",
                        "QTR": "QTR",
                        "SEMI": "SEMI",
                        "CAL": "CAL"
                    },
                    ('schema',): {

                        "GROUP_LEVEL": "table_group_level",
                        "PARENT_CHILD_COLUMNS": "table_parent_child_columns"
                    },
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'periodicity':
                        (str,),
                    'schema':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'periodicity': 'periodicity',
                    'schema': 'schema',
                },
                'location_map': {
                    'id': 'query',
                    'periodicity': 'query',
                    'schema': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_estimates_industry_metrics_endpoint = _Endpoint(
            settings={
                'response_type': (Response,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/industry-metrics',
                'operation_id': 'get_estimates_industry_metrics',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'periodicity',
                    'schema',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                    'periodicity',
                    'schema',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('periodicity',): {

                        "ANN": "ANN",
                        "QTR": "QTR",
                        "SEMI": "SEMI",
                        "CAL": "CAL"
                    },
                    ('schema',): {

                        "GROUP_LEVEL": "table_group_level",
                        "PARENT_CHILD_COLUMNS": "table_parent_child_columns"
                    },
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'periodicity':
                        (str,),
                    'schema':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'periodicity': 'periodicity',
                    'schema': 'schema',
                },
                'location_map': {
                    'id': 'query',
                    'periodicity': 'query',
                    'schema': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_estimates_per_share_endpoint = _Endpoint(
            settings={
                'response_type': (Response,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/per-share',
                'operation_id': 'get_estimates_per_share',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'periodicity',
                    'schema',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                    'periodicity',
                    'schema',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('periodicity',): {

                        "ANN": "ANN",
                        "QTR": "QTR",
                        "SEMI": "SEMI",
                        "CAL": "CAL"
                    },
                    ('schema',): {

                        "GROUP_LEVEL": "table_group_level",
                        "PARENT_CHILD_COLUMNS": "table_parent_child_columns"
                    },
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'periodicity':
                        (str,),
                    'schema':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'periodicity': 'periodicity',
                    'schema': 'schema',
                },
                'location_map': {
                    'id': 'query',
                    'periodicity': 'query',
                    'schema': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_estimates_product_segments_endpoint = _Endpoint(
            settings={
                'response_type': (Response,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/product-segments',
                'operation_id': 'get_estimates_product_segments',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'periodicity',
                    'schema',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                    'periodicity',
                    'schema',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('periodicity',): {

                        "ANN": "ANN",
                        "QTR": "QTR",
                        "SEMI": "SEMI",
                        "CAL": "CAL"
                    },
                    ('schema',): {

                        "GROUP_LEVEL": "table_group_level",
                        "PARENT_CHILD_COLUMNS": "table_parent_child_columns"
                    },
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'periodicity':
                        (str,),
                    'schema':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'periodicity': 'periodicity',
                    'schema': 'schema',
                },
                'location_map': {
                    'id': 'query',
                    'periodicity': 'query',
                    'schema': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_estimates_valuation_endpoint = _Endpoint(
            settings={
                'response_type': (Response,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/valuation',
                'operation_id': 'get_estimates_valuation',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'periodicity',
                    'schema',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                    'periodicity',
                    'schema',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('periodicity',): {

                        "ANN": "ANN",
                        "QTR": "QTR",
                        "SEMI": "SEMI",
                        "CAL": "CAL"
                    },
                    ('schema',): {

                        "GROUP_LEVEL": "table_group_level",
                        "PARENT_CHILD_COLUMNS": "table_parent_child_columns"
                    },
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'periodicity':
                        (str,),
                    'schema':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'periodicity': 'periodicity',
                    'schema': 'schema',
                },
                'location_map': {
                    'id': 'query',
                    'periodicity': 'query',
                    'schema': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def get_estimates_balance_sheet(
        self,
        id,
        **kwargs
    ):
        """Balance Sheet  # noqa: E501

        Returns historical and future period broker estimate consensus in a statement format for Balance Sheet line items.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_estimates_balance_sheet(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (str): Company Ticker

        Keyword Args:
            periodicity (str): Periodicity or frequency of the fiscal periods.. [optional] if omitted the server will use the default value of "ANN"
            schema (str): The schema that the data is returned as. The following are descriptions for the accepted values: - table_group_level - STACH 2.0 row organized package format with parent-child relationships represented using STACH group level cell metadata - table_parent_child_columns - STACH 2.0 row organized package format with parent-child relationships represented using STACH parent-child columns . [optional] if omitted the server will use the default value of "table_parent_child_columns"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        return self.get_estimates_balance_sheet_endpoint.call_with_http_info(**kwargs)

    def get_estimates_cash_flow(
        self,
        id,
        **kwargs
    ):
        """Cash Flow  # noqa: E501

        Returns historical and future period broker estimate consensus in a statement format for Cash Flow line items.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_estimates_cash_flow(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (str): Company Ticker

        Keyword Args:
            periodicity (str): Periodicity or frequency of the fiscal periods.. [optional] if omitted the server will use the default value of "ANN"
            schema (str): The schema that the data is returned as. The following are descriptions for the accepted values: - table_group_level - STACH 2.0 row organized package format with parent-child relationships represented using STACH group level cell metadata - table_parent_child_columns - STACH 2.0 row organized package format with parent-child relationships represented using STACH parent-child columns . [optional] if omitted the server will use the default value of "table_parent_child_columns"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        return self.get_estimates_cash_flow_endpoint.call_with_http_info(**kwargs)

    def get_estimates_geographic_segments(
        self,
        id,
        **kwargs
    ):
        """Geographic Segments  # noqa: E501

        Returns historical and future period broker estimate consensus in a statement format for line items broken down geographically.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_estimates_geographic_segments(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (str): Company Ticker

        Keyword Args:
            periodicity (str): Periodicity or frequency of the fiscal periods.. [optional] if omitted the server will use the default value of "ANN"
            schema (str): The schema that the data is returned as. The following are descriptions for the accepted values: - table_group_level - STACH 2.0 row organized package format with parent-child relationships represented using STACH group level cell metadata - table_parent_child_columns - STACH 2.0 row organized package format with parent-child relationships represented using STACH parent-child columns . [optional] if omitted the server will use the default value of "table_parent_child_columns"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        return self.get_estimates_geographic_segments_endpoint.call_with_http_info(**kwargs)

    def get_estimates_income_statement(
        self,
        id,
        **kwargs
    ):
        """Income Statement  # noqa: E501

        Returns historical and future period broker estimate consensus in a statement format for Income Statement line items.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_estimates_income_statement(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (str): Company Ticker

        Keyword Args:
            periodicity (str): Periodicity or frequency of the fiscal periods.. [optional] if omitted the server will use the default value of "ANN"
            schema (str): The schema that the data is returned as. The following are descriptions for the accepted values: - table_group_level - STACH 2.0 row organized package format with parent-child relationships represented using STACH group level cell metadata - table_parent_child_columns - STACH 2.0 row organized package format with parent-child relationships represented using STACH parent-child columns . [optional] if omitted the server will use the default value of "table_parent_child_columns"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        return self.get_estimates_income_statement_endpoint.call_with_http_info(**kwargs)

    def get_estimates_industry_metrics(
        self,
        id,
        **kwargs
    ):
        """Industry Metrics  # noqa: E501

        Returns historical and future period broker estimate consensus in a statement format for industry-specific metrics.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_estimates_industry_metrics(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (str): Company Ticker

        Keyword Args:
            periodicity (str): Periodicity or frequency of the fiscal periods.. [optional] if omitted the server will use the default value of "ANN"
            schema (str): The schema that the data is returned as. The following are descriptions for the accepted values: - table_group_level - STACH 2.0 row organized package format with parent-child relationships represented using STACH group level cell metadata - table_parent_child_columns - STACH 2.0 row organized package format with parent-child relationships represented using STACH parent-child columns . [optional] if omitted the server will use the default value of "table_parent_child_columns"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        return self.get_estimates_industry_metrics_endpoint.call_with_http_info(**kwargs)

    def get_estimates_per_share(
        self,
        id,
        **kwargs
    ):
        """Per Share  # noqa: E501

        Returns historical and future period broker estimate consensus in a statement format for Per Share line items.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_estimates_per_share(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (str): Company Ticker

        Keyword Args:
            periodicity (str): Periodicity or frequency of the fiscal periods.. [optional] if omitted the server will use the default value of "ANN"
            schema (str): The schema that the data is returned as. The following are descriptions for the accepted values: - table_group_level - STACH 2.0 row organized package format with parent-child relationships represented using STACH group level cell metadata - table_parent_child_columns - STACH 2.0 row organized package format with parent-child relationships represented using STACH parent-child columns . [optional] if omitted the server will use the default value of "table_parent_child_columns"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        return self.get_estimates_per_share_endpoint.call_with_http_info(**kwargs)

    def get_estimates_product_segments(
        self,
        id,
        **kwargs
    ):
        """Product Segments  # noqa: E501

        Returns historical and future period broker estimate consensus in a statement format for line items broken down by product and business.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_estimates_product_segments(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (str): Company Ticker

        Keyword Args:
            periodicity (str): Periodicity or frequency of the fiscal periods.. [optional] if omitted the server will use the default value of "ANN"
            schema (str): The schema that the data is returned as. The following are descriptions for the accepted values: - table_group_level - STACH 2.0 row organized package format with parent-child relationships represented using STACH group level cell metadata - table_parent_child_columns - STACH 2.0 row organized package format with parent-child relationships represented using STACH parent-child columns . [optional] if omitted the server will use the default value of "table_parent_child_columns"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        return self.get_estimates_product_segments_endpoint.call_with_http_info(**kwargs)

    def get_estimates_valuation(
        self,
        id,
        **kwargs
    ):
        """Valuation  # noqa: E501

        Returns valuation ratios in a statement format calculated from historical and future period broker estimate consensus.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_estimates_valuation(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (str): Company Ticker

        Keyword Args:
            periodicity (str): Periodicity or frequency of the fiscal periods.. [optional] if omitted the server will use the default value of "ANN"
            schema (str): The schema that the data is returned as. The following are descriptions for the accepted values: - table_group_level - STACH 2.0 row organized package format with parent-child relationships represented using STACH group level cell metadata - table_parent_child_columns - STACH 2.0 row organized package format with parent-child relationships represented using STACH parent-child columns . [optional] if omitted the server will use the default value of "table_parent_child_columns"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        return self.get_estimates_valuation_endpoint.call_with_http_info(**kwargs)

