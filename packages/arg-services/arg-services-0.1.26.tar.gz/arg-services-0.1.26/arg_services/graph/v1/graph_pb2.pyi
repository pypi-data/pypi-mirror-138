"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.struct_pb2
import google.protobuf.timestamp_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class Scheme(_Scheme, metaclass=_SchemeEnumTypeWrapper):
    pass
class _Scheme:
    V = typing.NewType('V', builtins.int)
class _SchemeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Scheme.V], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    SCHEME_UNSPECIFIED = Scheme.V(0)
    SCHEME_AD_HOMINEM = Scheme.V(1)
    SCHEME_ALTERNATIVE_MEANS = Scheme.V(2)
    SCHEME_ALTERNATIVES = Scheme.V(3)
    SCHEME_ANALOGY = Scheme.V(4)
    SCHEME_ARBITRARY_VERBAL_CLASSIFICATION = Scheme.V(5)
    SCHEME_AUTHORITY = Scheme.V(6)
    SCHEME_BIAS = Scheme.V(7)
    SCHEME_BIASED_CLASSIFICATION = Scheme.V(8)
    SCHEME_CALLING_OUT = Scheme.V(9)
    SCHEME_CAUSAL_SLIPPERY_SLOPE = Scheme.V(10)
    SCHEME_CAUSE_TO_EFFECT = Scheme.V(11)
    SCHEME_CIRCUMSTANTIAL_AD_HOMINEM = Scheme.V(12)
    SCHEME_COMMITMENT_EXCEPTION = Scheme.V(13)
    SCHEME_COMMITMENT = Scheme.V(14)
    SCHEME_COMPOSITION = Scheme.V(15)
    SCHEME_CONFLICTING_GOALS = Scheme.V(16)
    SCHEME_CONSEQUENCES = Scheme.V(17)
    SCHEME_CORRELATION_TO_CAUSE = Scheme.V(18)
    SCHEME_DANGER_APPEAL = Scheme.V(19)
    SCHEME_DEFINITION_TO_VERBAL_CLASSIFICATION = Scheme.V(20)
    SCHEME_DIFFERENCES_UNDERMINE_SIMILARITY = Scheme.V(21)
    SCHEME_DILEMMA = Scheme.V(22)
    SCHEME_DIRECT_AD_HOMINEM = Scheme.V(23)
    SCHEME_DIVISION = Scheme.V(24)
    SCHEME_ESTABLISHED_RULE = Scheme.V(25)
    SCHEME_ETHOTIC = Scheme.V(26)
    SCHEME_EVIDENCE_TO_HYPOTHESIS = Scheme.V(27)
    SCHEME_EXAMPLE = Scheme.V(28)
    SCHEME_EXCEPTION_SIMILARITY_CASE = Scheme.V(29)
    SCHEME_EXCEPTIONAL_CASE = Scheme.V(30)
    SCHEME_EXPERT_OPINION = Scheme.V(31)
    SCHEME_EXPERTISE_INCONSISTENCY = Scheme.V(32)
    SCHEME_FAIRNESS = Scheme.V(33)
    SCHEME_FALSIFICATION_OF_HYPOTHESIS = Scheme.V(34)
    SCHEME_FEAR_APPEAL = Scheme.V(35)
    SCHEME_FULL_SLIPPERY_SLOPE = Scheme.V(36)
    SCHEME_GENERAL_ACCEPTANCE_DOUBT = Scheme.V(37)
    SCHEME_GENERIC_AD_HOMINEM = Scheme.V(38)
    SCHEME_GOODWILL = Scheme.V(39)
    SCHEME_GRADUALISM = Scheme.V(40)
    SCHEME_IGNORANCE = Scheme.V(41)
    SCHEME_INCONSISTENT_COMMITMENT = Scheme.V(42)
    SCHEME_INFORMANT_REPORT = Scheme.V(43)
    SCHEME_INTERACTION_OF_ACT_AND_PERSON = Scheme.V(44)
    SCHEME_IRRATIONAL_FEAR_APPEAL = Scheme.V(45)
    SCHEME_LACK_OF_COMPLETE_KNOWLEDGE = Scheme.V(46)
    SCHEME_LACK_OF_EXPERT_RELIABILITY = Scheme.V(47)
    SCHEME_LOGICAL = Scheme.V(48)
    SCHEME_MISPLACED_PRIORITIES = Scheme.V(49)
    SCHEME_MODUS_PONENS = Scheme.V(50)
    SCHEME_MORAL_VIRTUE = Scheme.V(51)
    SCHEME_NEED_FOR_HELP = Scheme.V(52)
    SCHEME_NEGATIVE_CONSEQUENCES = Scheme.V(53)
    SCHEME_OPPOSED_COMMITMENT = Scheme.V(54)
    SCHEME_OPPOSITIONS = Scheme.V(55)
    SCHEME_CAUSAL_FACTORS_INVOLVED = Scheme.V(56)
    SCHEME_PARAPHRASE = Scheme.V(57)
    SCHEME_PERCEPTION = Scheme.V(58)
    SCHEME_POPULAR_OPINION = Scheme.V(59)
    SCHEME_POPULAR_PRACTICE = Scheme.V(60)
    SCHEME_POSITION_TO_KNOW = Scheme.V(61)
    SCHEME_POSITIVE_CONSEQUENCES = Scheme.V(62)
    SCHEME_PRACTICAL_REASONING_FROM_ANALOGY = Scheme.V(63)
    SCHEME_PRACTICAL_REASONING = Scheme.V(64)
    SCHEME_PRACTICAL_WISDOM = Scheme.V(65)
    SCHEME_PRAGMATIC_ALTERNATIVES = Scheme.V(66)
    SCHEME_PRAGMATIC_INCONSISTENCY = Scheme.V(67)
    SCHEME_PRECEDENT_SLIPPERY_SLOPE = Scheme.V(68)
    SCHEME_PROPERTY_NOT_EXISTANT = Scheme.V(69)
    SCHEME_REFRAMING = Scheme.V(70)
    SCHEME_REQUIRED_STEPS = Scheme.V(71)
    SCHEME_RESOLVING_INCONSISTENCY = Scheme.V(72)
    SCHEME_RULE = Scheme.V(73)
    SCHEME_RULES = Scheme.V(74)
    SCHEME_SIGN_FROM_OTHER_EVENTS = Scheme.V(75)
    SCHEME_SIGN = Scheme.V(76)
    SCHEME_TWO_PERSON_PRACTICAL_REASONING = Scheme.V(77)
    SCHEME_UNFAIRNESS = Scheme.V(78)
    SCHEME_VAGUE_VERBAL_CLASSIFICATION = Scheme.V(79)
    SCHEME_VAGUENESS_OF_VERBAL_CLASSIFICATION = Scheme.V(80)
    SCHEME_VALUE_BASED_PRACTICAL_REASONING = Scheme.V(81)
    SCHEME_VALUES = Scheme.V(82)
    SCHEME_VERBAL_CLASSIFICATION = Scheme.V(83)
    SCHEME_VERBAL_SLIPPERY_SLOPE = Scheme.V(84)
    SCHEME_VESTED_INTEREST = Scheme.V(85)
    SCHEME_VIRTUE_GOODWILL = Scheme.V(86)
    SCHEME_WASTE = Scheme.V(87)
    SCHEME_WEAKEST_LINK = Scheme.V(88)
    SCHEME_WISDOM_GOODWILL = Scheme.V(89)
    SCHEME_WISDOM_VIRTUE = Scheme.V(90)
    SCHEME_WISDOM_VIRTUE_GOODWILL = Scheme.V(91)
    SCHEME_WITNESS_TESTIMONY = Scheme.V(92)

SCHEME_UNSPECIFIED = Scheme.V(0)
SCHEME_AD_HOMINEM = Scheme.V(1)
SCHEME_ALTERNATIVE_MEANS = Scheme.V(2)
SCHEME_ALTERNATIVES = Scheme.V(3)
SCHEME_ANALOGY = Scheme.V(4)
SCHEME_ARBITRARY_VERBAL_CLASSIFICATION = Scheme.V(5)
SCHEME_AUTHORITY = Scheme.V(6)
SCHEME_BIAS = Scheme.V(7)
SCHEME_BIASED_CLASSIFICATION = Scheme.V(8)
SCHEME_CALLING_OUT = Scheme.V(9)
SCHEME_CAUSAL_SLIPPERY_SLOPE = Scheme.V(10)
SCHEME_CAUSE_TO_EFFECT = Scheme.V(11)
SCHEME_CIRCUMSTANTIAL_AD_HOMINEM = Scheme.V(12)
SCHEME_COMMITMENT_EXCEPTION = Scheme.V(13)
SCHEME_COMMITMENT = Scheme.V(14)
SCHEME_COMPOSITION = Scheme.V(15)
SCHEME_CONFLICTING_GOALS = Scheme.V(16)
SCHEME_CONSEQUENCES = Scheme.V(17)
SCHEME_CORRELATION_TO_CAUSE = Scheme.V(18)
SCHEME_DANGER_APPEAL = Scheme.V(19)
SCHEME_DEFINITION_TO_VERBAL_CLASSIFICATION = Scheme.V(20)
SCHEME_DIFFERENCES_UNDERMINE_SIMILARITY = Scheme.V(21)
SCHEME_DILEMMA = Scheme.V(22)
SCHEME_DIRECT_AD_HOMINEM = Scheme.V(23)
SCHEME_DIVISION = Scheme.V(24)
SCHEME_ESTABLISHED_RULE = Scheme.V(25)
SCHEME_ETHOTIC = Scheme.V(26)
SCHEME_EVIDENCE_TO_HYPOTHESIS = Scheme.V(27)
SCHEME_EXAMPLE = Scheme.V(28)
SCHEME_EXCEPTION_SIMILARITY_CASE = Scheme.V(29)
SCHEME_EXCEPTIONAL_CASE = Scheme.V(30)
SCHEME_EXPERT_OPINION = Scheme.V(31)
SCHEME_EXPERTISE_INCONSISTENCY = Scheme.V(32)
SCHEME_FAIRNESS = Scheme.V(33)
SCHEME_FALSIFICATION_OF_HYPOTHESIS = Scheme.V(34)
SCHEME_FEAR_APPEAL = Scheme.V(35)
SCHEME_FULL_SLIPPERY_SLOPE = Scheme.V(36)
SCHEME_GENERAL_ACCEPTANCE_DOUBT = Scheme.V(37)
SCHEME_GENERIC_AD_HOMINEM = Scheme.V(38)
SCHEME_GOODWILL = Scheme.V(39)
SCHEME_GRADUALISM = Scheme.V(40)
SCHEME_IGNORANCE = Scheme.V(41)
SCHEME_INCONSISTENT_COMMITMENT = Scheme.V(42)
SCHEME_INFORMANT_REPORT = Scheme.V(43)
SCHEME_INTERACTION_OF_ACT_AND_PERSON = Scheme.V(44)
SCHEME_IRRATIONAL_FEAR_APPEAL = Scheme.V(45)
SCHEME_LACK_OF_COMPLETE_KNOWLEDGE = Scheme.V(46)
SCHEME_LACK_OF_EXPERT_RELIABILITY = Scheme.V(47)
SCHEME_LOGICAL = Scheme.V(48)
SCHEME_MISPLACED_PRIORITIES = Scheme.V(49)
SCHEME_MODUS_PONENS = Scheme.V(50)
SCHEME_MORAL_VIRTUE = Scheme.V(51)
SCHEME_NEED_FOR_HELP = Scheme.V(52)
SCHEME_NEGATIVE_CONSEQUENCES = Scheme.V(53)
SCHEME_OPPOSED_COMMITMENT = Scheme.V(54)
SCHEME_OPPOSITIONS = Scheme.V(55)
SCHEME_CAUSAL_FACTORS_INVOLVED = Scheme.V(56)
SCHEME_PARAPHRASE = Scheme.V(57)
SCHEME_PERCEPTION = Scheme.V(58)
SCHEME_POPULAR_OPINION = Scheme.V(59)
SCHEME_POPULAR_PRACTICE = Scheme.V(60)
SCHEME_POSITION_TO_KNOW = Scheme.V(61)
SCHEME_POSITIVE_CONSEQUENCES = Scheme.V(62)
SCHEME_PRACTICAL_REASONING_FROM_ANALOGY = Scheme.V(63)
SCHEME_PRACTICAL_REASONING = Scheme.V(64)
SCHEME_PRACTICAL_WISDOM = Scheme.V(65)
SCHEME_PRAGMATIC_ALTERNATIVES = Scheme.V(66)
SCHEME_PRAGMATIC_INCONSISTENCY = Scheme.V(67)
SCHEME_PRECEDENT_SLIPPERY_SLOPE = Scheme.V(68)
SCHEME_PROPERTY_NOT_EXISTANT = Scheme.V(69)
SCHEME_REFRAMING = Scheme.V(70)
SCHEME_REQUIRED_STEPS = Scheme.V(71)
SCHEME_RESOLVING_INCONSISTENCY = Scheme.V(72)
SCHEME_RULE = Scheme.V(73)
SCHEME_RULES = Scheme.V(74)
SCHEME_SIGN_FROM_OTHER_EVENTS = Scheme.V(75)
SCHEME_SIGN = Scheme.V(76)
SCHEME_TWO_PERSON_PRACTICAL_REASONING = Scheme.V(77)
SCHEME_UNFAIRNESS = Scheme.V(78)
SCHEME_VAGUE_VERBAL_CLASSIFICATION = Scheme.V(79)
SCHEME_VAGUENESS_OF_VERBAL_CLASSIFICATION = Scheme.V(80)
SCHEME_VALUE_BASED_PRACTICAL_REASONING = Scheme.V(81)
SCHEME_VALUES = Scheme.V(82)
SCHEME_VERBAL_CLASSIFICATION = Scheme.V(83)
SCHEME_VERBAL_SLIPPERY_SLOPE = Scheme.V(84)
SCHEME_VESTED_INTEREST = Scheme.V(85)
SCHEME_VIRTUE_GOODWILL = Scheme.V(86)
SCHEME_WASTE = Scheme.V(87)
SCHEME_WEAKEST_LINK = Scheme.V(88)
SCHEME_WISDOM_GOODWILL = Scheme.V(89)
SCHEME_WISDOM_VIRTUE = Scheme.V(90)
SCHEME_WISDOM_VIRTUE_GOODWILL = Scheme.V(91)
SCHEME_WITNESS_TESTIMONY = Scheme.V(92)
global___Scheme = Scheme


class SchemeType(_SchemeType, metaclass=_SchemeTypeEnumTypeWrapper):
    pass
class _SchemeType:
    V = typing.NewType('V', builtins.int)
class _SchemeTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_SchemeType.V], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    SCHEME_TYPE_UNSPECIFIED = SchemeType.V(0)
    SCHEME_TYPE_SUPPORT = SchemeType.V(1)
    SCHEME_TYPE_ATTACK = SchemeType.V(2)
    SCHEME_TYPE_REPHRASE = SchemeType.V(3)
    SCHEME_TYPE_TRANSITION = SchemeType.V(4)
    SCHEME_TYPE_PREFERENCE = SchemeType.V(5)
    SCHEME_TYPE_ASSERTION = SchemeType.V(6)

SCHEME_TYPE_UNSPECIFIED = SchemeType.V(0)
SCHEME_TYPE_SUPPORT = SchemeType.V(1)
SCHEME_TYPE_ATTACK = SchemeType.V(2)
SCHEME_TYPE_REPHRASE = SchemeType.V(3)
SCHEME_TYPE_TRANSITION = SchemeType.V(4)
SCHEME_TYPE_PREFERENCE = SchemeType.V(5)
SCHEME_TYPE_ASSERTION = SchemeType.V(6)
global___SchemeType = SchemeType


class Graph(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class NodesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        @property
        def value(self) -> global___Node: ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Optional[global___Node] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal[u"value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    class EdgesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        @property
        def value(self) -> global___Edge: ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Optional[global___Edge] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal[u"value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    class ResourcesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        @property
        def value(self) -> global___Resource: ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Optional[global___Resource] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal[u"value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    class ParticipantsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        @property
        def value(self) -> global___Participant: ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Optional[global___Participant] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal[u"value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    NODES_FIELD_NUMBER: builtins.int
    EDGES_FIELD_NUMBER: builtins.int
    RESOURCES_FIELD_NUMBER: builtins.int
    PARTICIPANTS_FIELD_NUMBER: builtins.int
    MAJOR_CLAIM_FIELD_NUMBER: builtins.int
    ANALYSTS_FIELD_NUMBER: builtins.int
    VERSION_FIELD_NUMBER: builtins.int
    CREATED_FIELD_NUMBER: builtins.int
    UPDATED_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    @property
    def nodes(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, global___Node]:
        """string id = 1;"""
        pass
    @property
    def edges(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, global___Edge]: ...
    @property
    def resources(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, global___Resource]: ...
    @property
    def participants(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, global___Participant]: ...
    major_claim: typing.Text = ...
    @property
    def analysts(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Participant]: ...
    version: typing.Text = ...
    @property
    def created(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    @property
    def updated(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    @property
    def metadata(self) -> google.protobuf.struct_pb2.Struct: ...
    def __init__(self,
        *,
        nodes : typing.Optional[typing.Mapping[typing.Text, global___Node]] = ...,
        edges : typing.Optional[typing.Mapping[typing.Text, global___Edge]] = ...,
        resources : typing.Optional[typing.Mapping[typing.Text, global___Resource]] = ...,
        participants : typing.Optional[typing.Mapping[typing.Text, global___Participant]] = ...,
        major_claim : typing.Text = ...,
        analysts : typing.Optional[typing.Iterable[global___Participant]] = ...,
        version : typing.Text = ...,
        created : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        updated : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        metadata : typing.Optional[google.protobuf.struct_pb2.Struct] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal[u"created",b"created",u"metadata",b"metadata",u"updated",b"updated"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"analysts",b"analysts",u"created",b"created",u"edges",b"edges",u"major_claim",b"major_claim",u"metadata",b"metadata",u"nodes",b"nodes",u"participants",b"participants",u"resources",b"resources",u"updated",b"updated",u"version",b"version"]) -> None: ...
global___Graph = Graph

class Resource(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TEXT_FIELD_NUMBER: builtins.int
    TITLE_FIELD_NUMBER: builtins.int
    SOURCE_FIELD_NUMBER: builtins.int
    CREATED_FIELD_NUMBER: builtins.int
    UPDATED_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    text: typing.Text = ...
    """string id = 1;"""

    title: typing.Text = ...
    source: typing.Text = ...
    @property
    def created(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    @property
    def updated(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    @property
    def metadata(self) -> google.protobuf.struct_pb2.Struct: ...
    def __init__(self,
        *,
        text : typing.Text = ...,
        title : typing.Text = ...,
        source : typing.Text = ...,
        created : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        updated : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        metadata : typing.Optional[google.protobuf.struct_pb2.Struct] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal[u"created",b"created",u"metadata",b"metadata",u"updated",b"updated"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"created",b"created",u"metadata",b"metadata",u"source",b"source",u"text",b"text",u"title",b"title",u"updated",b"updated"]) -> None: ...
global___Resource = Resource

class Participant(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    USERNAME_FIELD_NUMBER: builtins.int
    EMAIL_FIELD_NUMBER: builtins.int
    URL_FIELD_NUMBER: builtins.int
    LOCATION_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    CREATED_FIELD_NUMBER: builtins.int
    UPDATED_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """string id = 1;"""

    username: typing.Text = ...
    email: typing.Text = ...
    url: typing.Text = ...
    location: typing.Text = ...
    description: typing.Text = ...
    @property
    def created(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    @property
    def updated(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    @property
    def metadata(self) -> google.protobuf.struct_pb2.Struct: ...
    def __init__(self,
        *,
        name : typing.Text = ...,
        username : typing.Text = ...,
        email : typing.Text = ...,
        url : typing.Text = ...,
        location : typing.Text = ...,
        description : typing.Text = ...,
        created : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        updated : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        metadata : typing.Optional[google.protobuf.struct_pb2.Struct] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal[u"created",b"created",u"metadata",b"metadata",u"updated",b"updated"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"created",b"created",u"description",b"description",u"email",b"email",u"location",b"location",u"metadata",b"metadata",u"name",b"name",u"updated",b"updated",u"url",b"url",u"username",b"username"]) -> None: ...
global___Participant = Participant

class Edge(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SOURCE_FIELD_NUMBER: builtins.int
    TARGET_FIELD_NUMBER: builtins.int
    CREATED_FIELD_NUMBER: builtins.int
    UPDATED_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    source: typing.Text = ...
    """string id = 1;"""

    target: typing.Text = ...
    @property
    def created(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    @property
    def updated(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    @property
    def metadata(self) -> google.protobuf.struct_pb2.Struct: ...
    def __init__(self,
        *,
        source : typing.Text = ...,
        target : typing.Text = ...,
        created : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        updated : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        metadata : typing.Optional[google.protobuf.struct_pb2.Struct] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal[u"created",b"created",u"metadata",b"metadata",u"updated",b"updated"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"created",b"created",u"metadata",b"metadata",u"source",b"source",u"target",b"target",u"updated",b"updated"]) -> None: ...
global___Edge = Edge

class Node(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ATOM_FIELD_NUMBER: builtins.int
    SCHEME_FIELD_NUMBER: builtins.int
    CREATED_FIELD_NUMBER: builtins.int
    UPDATED_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    @property
    def atom(self) -> global___AtomNode: ...
    @property
    def scheme(self) -> global___SchemeNode: ...
    @property
    def created(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    @property
    def updated(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    @property
    def metadata(self) -> google.protobuf.struct_pb2.Struct: ...
    def __init__(self,
        *,
        atom : typing.Optional[global___AtomNode] = ...,
        scheme : typing.Optional[global___SchemeNode] = ...,
        created : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        updated : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        metadata : typing.Optional[google.protobuf.struct_pb2.Struct] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal[u"atom",b"atom",u"created",b"created",u"metadata",b"metadata",u"node",b"node",u"scheme",b"scheme",u"updated",b"updated"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"atom",b"atom",u"created",b"created",u"metadata",b"metadata",u"node",b"node",u"scheme",b"scheme",u"updated",b"updated"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal[u"node",b"node"]) -> typing.Optional[typing_extensions.Literal["atom","scheme"]]: ...
global___Node = Node

class AtomNode(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TEXT_FIELD_NUMBER: builtins.int
    REFERENCE_FIELD_NUMBER: builtins.int
    PARTICIPANT_FIELD_NUMBER: builtins.int
    text: typing.Text = ...
    @property
    def reference(self) -> global___Reference: ...
    participant: typing.Text = ...
    def __init__(self,
        *,
        text : typing.Text = ...,
        reference : typing.Optional[global___Reference] = ...,
        participant : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal[u"reference",b"reference"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"participant",b"participant",u"reference",b"reference",u"text",b"text"]) -> None: ...
global___AtomNode = AtomNode

class SchemeNode(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TYPE_FIELD_NUMBER: builtins.int
    ARGUMENTATION_SCHEME_FIELD_NUMBER: builtins.int
    DESCRIPTORS_FIELD_NUMBER: builtins.int
    type: global___SchemeType.V = ...
    argumentation_scheme: global___Scheme.V = ...
    @property
    def descriptors(self) -> google.protobuf.struct_pb2.Struct: ...
    def __init__(self,
        *,
        type : global___SchemeType.V = ...,
        argumentation_scheme : global___Scheme.V = ...,
        descriptors : typing.Optional[google.protobuf.struct_pb2.Struct] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal[u"descriptors",b"descriptors"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"argumentation_scheme",b"argumentation_scheme",u"descriptors",b"descriptors",u"type",b"type"]) -> None: ...
global___SchemeNode = SchemeNode

class Reference(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    RESOURCE_FIELD_NUMBER: builtins.int
    OFFSET_FIELD_NUMBER: builtins.int
    TEXT_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    resource: typing.Text = ...
    """string id = 1;"""

    offset: builtins.int = ...
    text: typing.Text = ...
    @property
    def metadata(self) -> google.protobuf.struct_pb2.Struct: ...
    def __init__(self,
        *,
        resource : typing.Text = ...,
        offset : builtins.int = ...,
        text : typing.Text = ...,
        metadata : typing.Optional[google.protobuf.struct_pb2.Struct] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal[u"metadata",b"metadata"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"metadata",b"metadata",u"offset",b"offset",u"resource",b"resource",u"text",b"text"]) -> None: ...
global___Reference = Reference
