import typing
from typing import Any, Dict, Union

import ipyvue
import ipyvuetify
import ipywidgets

import react_ipywidgets as react
from react_ipywidgets.core import Element
from . import ipywidgets as w

from .ipyvue import use_event  # noqa: F401


if __name__ == "__main__":
    from .generate import generate

    ignore_traits = "".split()
    generate(__file__, [ipyvuetify], ignore_traits=ignore_traits)

# generated code:


def Alert(
    attributes: dict = {},
    border: str = None,
    children: list = [],
    class_: str = None,
    close_label: str = None,
    color: str = None,
    colored_border: bool = None,
    dark: bool = None,
    dense: bool = None,
    dismissible: bool = None,
    elevation: typing.Union[float, str] = None,
    height: typing.Union[float, str] = None,
    icon: typing.Union[bool, str] = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    max_height: typing.Union[float, str] = None,
    max_width: typing.Union[float, str] = None,
    min_height: typing.Union[float, str] = None,
    min_width: typing.Union[float, str] = None,
    mode: str = None,
    origin: str = None,
    outlined: bool = None,
    prominent: bool = None,
    slot: str = None,
    style_: str = None,
    tag: str = None,
    text: bool = None,
    tile: bool = None,
    transition: str = None,
    type: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: bool = None,
    width: typing.Union[float, str] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_border: typing.Callable[[str], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_close_label: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_colored_border: typing.Callable[[bool], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_dense: typing.Callable[[bool], Any] = None,
    on_dismissible: typing.Callable[[bool], Any] = None,
    on_elevation: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_icon: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_max_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_max_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_min_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_min_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_mode: typing.Callable[[str], Any] = None,
    on_origin: typing.Callable[[str], Any] = None,
    on_outlined: typing.Callable[[bool], Any] = None,
    on_prominent: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_tag: typing.Callable[[str], Any] = None,
    on_text: typing.Callable[[bool], Any] = None,
    on_tile: typing.Callable[[bool], Any] = None,
    on_transition: typing.Callable[[str], Any] = None,
    on_type: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[bool], Any] = None,
    on_width: typing.Callable[[typing.Union[float, str]], Any] = None,
) -> Element[ipyvuetify.generated.Alert]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        border=border,
        children=children,
        class_=class_,
        close_label=close_label,
        color=color,
        colored_border=colored_border,
        dark=dark,
        dense=dense,
        dismissible=dismissible,
        elevation=elevation,
        height=height,
        icon=icon,
        layout=layout,
        light=light,
        max_height=max_height,
        max_width=max_width,
        min_height=min_height,
        min_width=min_width,
        mode=mode,
        origin=origin,
        outlined=outlined,
        prominent=prominent,
        slot=slot,
        style_=style_,
        tag=tag,
        text=text,
        tile=tile,
        transition=transition,
        type=type,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        width=width,
        on_attributes=on_attributes,
        on_border=on_border,
        on_children=on_children,
        on_class_=on_class_,
        on_close_label=on_close_label,
        on_color=on_color,
        on_colored_border=on_colored_border,
        on_dark=on_dark,
        on_dense=on_dense,
        on_dismissible=on_dismissible,
        on_elevation=on_elevation,
        on_height=on_height,
        on_icon=on_icon,
        on_layout=on_layout,
        on_light=on_light,
        on_max_height=on_max_height,
        on_max_width=on_max_width,
        on_min_height=on_min_height,
        on_min_width=on_min_width,
        on_mode=on_mode,
        on_origin=on_origin,
        on_outlined=on_outlined,
        on_prominent=on_prominent,
        on_slot=on_slot,
        on_style_=on_style_,
        on_tag=on_tag,
        on_text=on_text,
        on_tile=on_tile,
        on_transition=on_transition,
        on_type=on_type,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
        on_width=on_width,
    )
    widget_cls = ipyvuetify.generated.Alert
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def App(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    dark: bool = None,
    id: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_id: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.App]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        dark=dark,
        id=id,
        layout=layout,
        light=light,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_dark=on_dark,
        on_id=on_id,
        on_layout=on_layout,
        on_light=on_light,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.App
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def AppBar(
    absolute: bool = None,
    app: bool = None,
    attributes: dict = {},
    bottom: bool = None,
    children: list = [],
    class_: str = None,
    clipped_left: bool = None,
    clipped_right: bool = None,
    collapse: bool = None,
    collapse_on_scroll: bool = None,
    color: str = None,
    dark: bool = None,
    dense: bool = None,
    elevate_on_scroll: bool = None,
    elevation: typing.Union[float, str] = None,
    extended: bool = None,
    extension_height: typing.Union[float, str] = None,
    fade_img_on_scroll: bool = None,
    fixed: bool = None,
    flat: bool = None,
    floating: bool = None,
    height: typing.Union[float, str] = None,
    hide_on_scroll: bool = None,
    inverted_scroll: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    max_height: typing.Union[float, str] = None,
    max_width: typing.Union[float, str] = None,
    min_height: typing.Union[float, str] = None,
    min_width: typing.Union[float, str] = None,
    prominent: bool = None,
    scroll_off_screen: bool = None,
    scroll_target: str = None,
    scroll_threshold: typing.Union[str, float] = None,
    short: bool = None,
    shrink_on_scroll: bool = None,
    slot: str = None,
    src: typing.Union[str, dict] = None,
    style_: str = None,
    tag: str = None,
    tile: bool = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: bool = None,
    width: typing.Union[float, str] = None,
    on_absolute: typing.Callable[[bool], Any] = None,
    on_app: typing.Callable[[bool], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_bottom: typing.Callable[[bool], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_clipped_left: typing.Callable[[bool], Any] = None,
    on_clipped_right: typing.Callable[[bool], Any] = None,
    on_collapse: typing.Callable[[bool], Any] = None,
    on_collapse_on_scroll: typing.Callable[[bool], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_dense: typing.Callable[[bool], Any] = None,
    on_elevate_on_scroll: typing.Callable[[bool], Any] = None,
    on_elevation: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_extended: typing.Callable[[bool], Any] = None,
    on_extension_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_fade_img_on_scroll: typing.Callable[[bool], Any] = None,
    on_fixed: typing.Callable[[bool], Any] = None,
    on_flat: typing.Callable[[bool], Any] = None,
    on_floating: typing.Callable[[bool], Any] = None,
    on_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_hide_on_scroll: typing.Callable[[bool], Any] = None,
    on_inverted_scroll: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_max_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_max_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_min_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_min_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_prominent: typing.Callable[[bool], Any] = None,
    on_scroll_off_screen: typing.Callable[[bool], Any] = None,
    on_scroll_target: typing.Callable[[str], Any] = None,
    on_scroll_threshold: typing.Callable[[typing.Union[str, float]], Any] = None,
    on_short: typing.Callable[[bool], Any] = None,
    on_shrink_on_scroll: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_src: typing.Callable[[typing.Union[str, dict]], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_tag: typing.Callable[[str], Any] = None,
    on_tile: typing.Callable[[bool], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[bool], Any] = None,
    on_width: typing.Callable[[typing.Union[float, str]], Any] = None,
) -> Element[ipyvuetify.generated.AppBar]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        absolute=absolute,
        app=app,
        attributes=attributes,
        bottom=bottom,
        children=children,
        class_=class_,
        clipped_left=clipped_left,
        clipped_right=clipped_right,
        collapse=collapse,
        collapse_on_scroll=collapse_on_scroll,
        color=color,
        dark=dark,
        dense=dense,
        elevate_on_scroll=elevate_on_scroll,
        elevation=elevation,
        extended=extended,
        extension_height=extension_height,
        fade_img_on_scroll=fade_img_on_scroll,
        fixed=fixed,
        flat=flat,
        floating=floating,
        height=height,
        hide_on_scroll=hide_on_scroll,
        inverted_scroll=inverted_scroll,
        layout=layout,
        light=light,
        max_height=max_height,
        max_width=max_width,
        min_height=min_height,
        min_width=min_width,
        prominent=prominent,
        scroll_off_screen=scroll_off_screen,
        scroll_target=scroll_target,
        scroll_threshold=scroll_threshold,
        short=short,
        shrink_on_scroll=shrink_on_scroll,
        slot=slot,
        src=src,
        style_=style_,
        tag=tag,
        tile=tile,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        width=width,
        on_absolute=on_absolute,
        on_app=on_app,
        on_attributes=on_attributes,
        on_bottom=on_bottom,
        on_children=on_children,
        on_class_=on_class_,
        on_clipped_left=on_clipped_left,
        on_clipped_right=on_clipped_right,
        on_collapse=on_collapse,
        on_collapse_on_scroll=on_collapse_on_scroll,
        on_color=on_color,
        on_dark=on_dark,
        on_dense=on_dense,
        on_elevate_on_scroll=on_elevate_on_scroll,
        on_elevation=on_elevation,
        on_extended=on_extended,
        on_extension_height=on_extension_height,
        on_fade_img_on_scroll=on_fade_img_on_scroll,
        on_fixed=on_fixed,
        on_flat=on_flat,
        on_floating=on_floating,
        on_height=on_height,
        on_hide_on_scroll=on_hide_on_scroll,
        on_inverted_scroll=on_inverted_scroll,
        on_layout=on_layout,
        on_light=on_light,
        on_max_height=on_max_height,
        on_max_width=on_max_width,
        on_min_height=on_min_height,
        on_min_width=on_min_width,
        on_prominent=on_prominent,
        on_scroll_off_screen=on_scroll_off_screen,
        on_scroll_target=on_scroll_target,
        on_scroll_threshold=on_scroll_threshold,
        on_short=on_short,
        on_shrink_on_scroll=on_shrink_on_scroll,
        on_slot=on_slot,
        on_src=on_src,
        on_style_=on_style_,
        on_tag=on_tag,
        on_tile=on_tile,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
        on_width=on_width,
    )
    widget_cls = ipyvuetify.generated.AppBar
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def AppBarNavIcon(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.AppBarNavIcon]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        layout=layout,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_layout=on_layout,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.AppBarNavIcon
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Autocomplete(
    allow_overflow: bool = None,
    append_icon: str = None,
    append_outer_icon: str = None,
    attach: Any = None,
    attributes: dict = {},
    auto_select_first: bool = None,
    autofocus: bool = None,
    background_color: str = None,
    cache_items: bool = None,
    children: list = [],
    chips: bool = None,
    class_: str = None,
    clear_icon: str = None,
    clearable: bool = None,
    color: str = None,
    counter: typing.Union[bool, float, str] = None,
    dark: bool = None,
    deletable_chips: bool = None,
    dense: bool = None,
    disable_lookup: bool = None,
    disabled: bool = None,
    eager: bool = None,
    error: bool = None,
    error_count: typing.Union[float, str] = None,
    error_messages: typing.Union[str, list] = None,
    filled: bool = None,
    flat: bool = None,
    full_width: bool = None,
    height: typing.Union[float, str] = None,
    hide_details: typing.Union[bool, str] = None,
    hide_no_data: bool = None,
    hide_selected: bool = None,
    hint: str = None,
    id: str = None,
    item_color: str = None,
    item_disabled: typing.Union[str, list] = None,
    item_text: typing.Union[str, list] = None,
    item_value: typing.Union[str, list] = None,
    items: list = [],
    label: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    loader_height: typing.Union[float, str] = None,
    loading: typing.Union[bool, str] = None,
    menu_props: typing.Union[str, list, dict] = None,
    messages: typing.Union[str, list] = None,
    multiple: bool = None,
    no_data_text: str = None,
    no_filter: bool = None,
    open_on_clear: bool = None,
    outlined: bool = None,
    persistent_hint: bool = None,
    placeholder: str = None,
    prefix: str = None,
    prepend_icon: str = None,
    prepend_inner_icon: str = None,
    readonly: bool = None,
    return_object: bool = None,
    reverse: bool = None,
    rounded: bool = None,
    rules: list = [],
    search_input: str = None,
    shaped: bool = None,
    single_line: bool = None,
    slot: str = None,
    small_chips: bool = None,
    solo: bool = None,
    solo_inverted: bool = None,
    style_: str = None,
    success: bool = None,
    success_messages: typing.Union[str, list] = None,
    suffix: str = None,
    type: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    validate_on_blur: bool = None,
    value: Any = None,
    on_allow_overflow: typing.Callable[[bool], Any] = None,
    on_append_icon: typing.Callable[[str], Any] = None,
    on_append_outer_icon: typing.Callable[[str], Any] = None,
    on_attach: typing.Callable[[Any], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_auto_select_first: typing.Callable[[bool], Any] = None,
    on_autofocus: typing.Callable[[bool], Any] = None,
    on_background_color: typing.Callable[[str], Any] = None,
    on_cache_items: typing.Callable[[bool], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_chips: typing.Callable[[bool], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_clear_icon: typing.Callable[[str], Any] = None,
    on_clearable: typing.Callable[[bool], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_counter: typing.Callable[[typing.Union[bool, float, str]], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_deletable_chips: typing.Callable[[bool], Any] = None,
    on_dense: typing.Callable[[bool], Any] = None,
    on_disable_lookup: typing.Callable[[bool], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_eager: typing.Callable[[bool], Any] = None,
    on_error: typing.Callable[[bool], Any] = None,
    on_error_count: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_error_messages: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_filled: typing.Callable[[bool], Any] = None,
    on_flat: typing.Callable[[bool], Any] = None,
    on_full_width: typing.Callable[[bool], Any] = None,
    on_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_hide_details: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_hide_no_data: typing.Callable[[bool], Any] = None,
    on_hide_selected: typing.Callable[[bool], Any] = None,
    on_hint: typing.Callable[[str], Any] = None,
    on_id: typing.Callable[[str], Any] = None,
    on_item_color: typing.Callable[[str], Any] = None,
    on_item_disabled: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_item_text: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_item_value: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_items: typing.Callable[[list], Any] = None,
    on_label: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_loader_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_loading: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_menu_props: typing.Callable[[typing.Union[str, list, dict]], Any] = None,
    on_messages: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_multiple: typing.Callable[[bool], Any] = None,
    on_no_data_text: typing.Callable[[str], Any] = None,
    on_no_filter: typing.Callable[[bool], Any] = None,
    on_open_on_clear: typing.Callable[[bool], Any] = None,
    on_outlined: typing.Callable[[bool], Any] = None,
    on_persistent_hint: typing.Callable[[bool], Any] = None,
    on_placeholder: typing.Callable[[str], Any] = None,
    on_prefix: typing.Callable[[str], Any] = None,
    on_prepend_icon: typing.Callable[[str], Any] = None,
    on_prepend_inner_icon: typing.Callable[[str], Any] = None,
    on_readonly: typing.Callable[[bool], Any] = None,
    on_return_object: typing.Callable[[bool], Any] = None,
    on_reverse: typing.Callable[[bool], Any] = None,
    on_rounded: typing.Callable[[bool], Any] = None,
    on_rules: typing.Callable[[list], Any] = None,
    on_search_input: typing.Callable[[str], Any] = None,
    on_shaped: typing.Callable[[bool], Any] = None,
    on_single_line: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_small_chips: typing.Callable[[bool], Any] = None,
    on_solo: typing.Callable[[bool], Any] = None,
    on_solo_inverted: typing.Callable[[bool], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_success: typing.Callable[[bool], Any] = None,
    on_success_messages: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_suffix: typing.Callable[[str], Any] = None,
    on_type: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_validate_on_blur: typing.Callable[[bool], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
) -> Element[ipyvuetify.generated.Autocomplete]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        allow_overflow=allow_overflow,
        append_icon=append_icon,
        append_outer_icon=append_outer_icon,
        attach=attach,
        attributes=attributes,
        auto_select_first=auto_select_first,
        autofocus=autofocus,
        background_color=background_color,
        cache_items=cache_items,
        children=children,
        chips=chips,
        class_=class_,
        clear_icon=clear_icon,
        clearable=clearable,
        color=color,
        counter=counter,
        dark=dark,
        deletable_chips=deletable_chips,
        dense=dense,
        disable_lookup=disable_lookup,
        disabled=disabled,
        eager=eager,
        error=error,
        error_count=error_count,
        error_messages=error_messages,
        filled=filled,
        flat=flat,
        full_width=full_width,
        height=height,
        hide_details=hide_details,
        hide_no_data=hide_no_data,
        hide_selected=hide_selected,
        hint=hint,
        id=id,
        item_color=item_color,
        item_disabled=item_disabled,
        item_text=item_text,
        item_value=item_value,
        items=items,
        label=label,
        layout=layout,
        light=light,
        loader_height=loader_height,
        loading=loading,
        menu_props=menu_props,
        messages=messages,
        multiple=multiple,
        no_data_text=no_data_text,
        no_filter=no_filter,
        open_on_clear=open_on_clear,
        outlined=outlined,
        persistent_hint=persistent_hint,
        placeholder=placeholder,
        prefix=prefix,
        prepend_icon=prepend_icon,
        prepend_inner_icon=prepend_inner_icon,
        readonly=readonly,
        return_object=return_object,
        reverse=reverse,
        rounded=rounded,
        rules=rules,
        search_input=search_input,
        shaped=shaped,
        single_line=single_line,
        slot=slot,
        small_chips=small_chips,
        solo=solo,
        solo_inverted=solo_inverted,
        style_=style_,
        success=success,
        success_messages=success_messages,
        suffix=suffix,
        type=type,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        validate_on_blur=validate_on_blur,
        value=value,
        on_allow_overflow=on_allow_overflow,
        on_append_icon=on_append_icon,
        on_append_outer_icon=on_append_outer_icon,
        on_attach=on_attach,
        on_attributes=on_attributes,
        on_auto_select_first=on_auto_select_first,
        on_autofocus=on_autofocus,
        on_background_color=on_background_color,
        on_cache_items=on_cache_items,
        on_children=on_children,
        on_chips=on_chips,
        on_class_=on_class_,
        on_clear_icon=on_clear_icon,
        on_clearable=on_clearable,
        on_color=on_color,
        on_counter=on_counter,
        on_dark=on_dark,
        on_deletable_chips=on_deletable_chips,
        on_dense=on_dense,
        on_disable_lookup=on_disable_lookup,
        on_disabled=on_disabled,
        on_eager=on_eager,
        on_error=on_error,
        on_error_count=on_error_count,
        on_error_messages=on_error_messages,
        on_filled=on_filled,
        on_flat=on_flat,
        on_full_width=on_full_width,
        on_height=on_height,
        on_hide_details=on_hide_details,
        on_hide_no_data=on_hide_no_data,
        on_hide_selected=on_hide_selected,
        on_hint=on_hint,
        on_id=on_id,
        on_item_color=on_item_color,
        on_item_disabled=on_item_disabled,
        on_item_text=on_item_text,
        on_item_value=on_item_value,
        on_items=on_items,
        on_label=on_label,
        on_layout=on_layout,
        on_light=on_light,
        on_loader_height=on_loader_height,
        on_loading=on_loading,
        on_menu_props=on_menu_props,
        on_messages=on_messages,
        on_multiple=on_multiple,
        on_no_data_text=on_no_data_text,
        on_no_filter=on_no_filter,
        on_open_on_clear=on_open_on_clear,
        on_outlined=on_outlined,
        on_persistent_hint=on_persistent_hint,
        on_placeholder=on_placeholder,
        on_prefix=on_prefix,
        on_prepend_icon=on_prepend_icon,
        on_prepend_inner_icon=on_prepend_inner_icon,
        on_readonly=on_readonly,
        on_return_object=on_return_object,
        on_reverse=on_reverse,
        on_rounded=on_rounded,
        on_rules=on_rules,
        on_search_input=on_search_input,
        on_shaped=on_shaped,
        on_single_line=on_single_line,
        on_slot=on_slot,
        on_small_chips=on_small_chips,
        on_solo=on_solo,
        on_solo_inverted=on_solo_inverted,
        on_style_=on_style_,
        on_success=on_success,
        on_success_messages=on_success_messages,
        on_suffix=on_suffix,
        on_type=on_type,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_validate_on_blur=on_validate_on_blur,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.Autocomplete
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Avatar(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    color: str = None,
    height: typing.Union[float, str] = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    left: bool = None,
    max_height: typing.Union[float, str] = None,
    max_width: typing.Union[float, str] = None,
    min_height: typing.Union[float, str] = None,
    min_width: typing.Union[float, str] = None,
    right: bool = None,
    size: typing.Union[float, str] = None,
    slot: str = None,
    style_: str = None,
    tile: bool = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    width: typing.Union[float, str] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_left: typing.Callable[[bool], Any] = None,
    on_max_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_max_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_min_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_min_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_right: typing.Callable[[bool], Any] = None,
    on_size: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_tile: typing.Callable[[bool], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_width: typing.Callable[[typing.Union[float, str]], Any] = None,
) -> Element[ipyvuetify.generated.Avatar]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        color=color,
        height=height,
        layout=layout,
        left=left,
        max_height=max_height,
        max_width=max_width,
        min_height=min_height,
        min_width=min_width,
        right=right,
        size=size,
        slot=slot,
        style_=style_,
        tile=tile,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        width=width,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_height=on_height,
        on_layout=on_layout,
        on_left=on_left,
        on_max_height=on_max_height,
        on_max_width=on_max_width,
        on_min_height=on_min_height,
        on_min_width=on_min_width,
        on_right=on_right,
        on_size=on_size,
        on_slot=on_slot,
        on_style_=on_style_,
        on_tile=on_tile,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_width=on_width,
    )
    widget_cls = ipyvuetify.generated.Avatar
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Badge(
    attributes: dict = {},
    avatar: bool = None,
    bordered: bool = None,
    bottom: bool = None,
    children: list = [],
    class_: str = None,
    color: str = None,
    content: Any = None,
    dark: bool = None,
    dot: bool = None,
    icon: str = None,
    inline: bool = None,
    label: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    left: bool = None,
    light: bool = None,
    mode: str = None,
    offset_x: typing.Union[float, str] = None,
    offset_y: typing.Union[float, str] = None,
    origin: str = None,
    overlap: bool = None,
    slot: str = None,
    style_: str = None,
    tile: bool = None,
    transition: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: Any = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_avatar: typing.Callable[[bool], Any] = None,
    on_bordered: typing.Callable[[bool], Any] = None,
    on_bottom: typing.Callable[[bool], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_content: typing.Callable[[Any], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_dot: typing.Callable[[bool], Any] = None,
    on_icon: typing.Callable[[str], Any] = None,
    on_inline: typing.Callable[[bool], Any] = None,
    on_label: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_left: typing.Callable[[bool], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_mode: typing.Callable[[str], Any] = None,
    on_offset_x: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_offset_y: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_origin: typing.Callable[[str], Any] = None,
    on_overlap: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_tile: typing.Callable[[bool], Any] = None,
    on_transition: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
) -> Element[ipyvuetify.generated.Badge]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        avatar=avatar,
        bordered=bordered,
        bottom=bottom,
        children=children,
        class_=class_,
        color=color,
        content=content,
        dark=dark,
        dot=dot,
        icon=icon,
        inline=inline,
        label=label,
        layout=layout,
        left=left,
        light=light,
        mode=mode,
        offset_x=offset_x,
        offset_y=offset_y,
        origin=origin,
        overlap=overlap,
        slot=slot,
        style_=style_,
        tile=tile,
        transition=transition,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        on_attributes=on_attributes,
        on_avatar=on_avatar,
        on_bordered=on_bordered,
        on_bottom=on_bottom,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_content=on_content,
        on_dark=on_dark,
        on_dot=on_dot,
        on_icon=on_icon,
        on_inline=on_inline,
        on_label=on_label,
        on_layout=on_layout,
        on_left=on_left,
        on_light=on_light,
        on_mode=on_mode,
        on_offset_x=on_offset_x,
        on_offset_y=on_offset_y,
        on_origin=on_origin,
        on_overlap=on_overlap,
        on_slot=on_slot,
        on_style_=on_style_,
        on_tile=on_tile,
        on_transition=on_transition,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.Badge
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Banner(
    app: bool = None,
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    color: str = None,
    dark: bool = None,
    elevation: typing.Union[float, str] = None,
    height: typing.Union[float, str] = None,
    icon: str = None,
    icon_color: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    max_height: typing.Union[float, str] = None,
    max_width: typing.Union[float, str] = None,
    min_height: typing.Union[float, str] = None,
    min_width: typing.Union[float, str] = None,
    mobile_break_point: typing.Union[float, str] = None,
    single_line: bool = None,
    slot: str = None,
    sticky: bool = None,
    style_: str = None,
    tag: str = None,
    tile: bool = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: bool = None,
    width: typing.Union[float, str] = None,
    on_app: typing.Callable[[bool], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_elevation: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_icon: typing.Callable[[str], Any] = None,
    on_icon_color: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_max_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_max_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_min_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_min_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_mobile_break_point: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_single_line: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_sticky: typing.Callable[[bool], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_tag: typing.Callable[[str], Any] = None,
    on_tile: typing.Callable[[bool], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[bool], Any] = None,
    on_width: typing.Callable[[typing.Union[float, str]], Any] = None,
) -> Element[ipyvuetify.generated.Banner]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        app=app,
        attributes=attributes,
        children=children,
        class_=class_,
        color=color,
        dark=dark,
        elevation=elevation,
        height=height,
        icon=icon,
        icon_color=icon_color,
        layout=layout,
        light=light,
        max_height=max_height,
        max_width=max_width,
        min_height=min_height,
        min_width=min_width,
        mobile_break_point=mobile_break_point,
        single_line=single_line,
        slot=slot,
        sticky=sticky,
        style_=style_,
        tag=tag,
        tile=tile,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        width=width,
        on_app=on_app,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_dark=on_dark,
        on_elevation=on_elevation,
        on_height=on_height,
        on_icon=on_icon,
        on_icon_color=on_icon_color,
        on_layout=on_layout,
        on_light=on_light,
        on_max_height=on_max_height,
        on_max_width=on_max_width,
        on_min_height=on_min_height,
        on_min_width=on_min_width,
        on_mobile_break_point=on_mobile_break_point,
        on_single_line=on_single_line,
        on_slot=on_slot,
        on_sticky=on_sticky,
        on_style_=on_style_,
        on_tag=on_tag,
        on_tile=on_tile,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
        on_width=on_width,
    )
    widget_cls = ipyvuetify.generated.Banner
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def BottomNavigation(
    absolute: bool = None,
    active_class: str = None,
    app: bool = None,
    attributes: dict = {},
    background_color: str = None,
    children: list = [],
    class_: str = None,
    color: str = None,
    dark: bool = None,
    fixed: bool = None,
    grow: bool = None,
    height: typing.Union[float, str] = None,
    hide_on_scroll: bool = None,
    horizontal: bool = None,
    input_value: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    mandatory: bool = None,
    max_height: typing.Union[float, str] = None,
    max_width: typing.Union[float, str] = None,
    min_height: typing.Union[float, str] = None,
    min_width: typing.Union[float, str] = None,
    scroll_target: str = None,
    scroll_threshold: typing.Union[str, float] = None,
    shift: bool = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: Any = None,
    width: typing.Union[float, str] = None,
    on_absolute: typing.Callable[[bool], Any] = None,
    on_active_class: typing.Callable[[str], Any] = None,
    on_app: typing.Callable[[bool], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_background_color: typing.Callable[[str], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_fixed: typing.Callable[[bool], Any] = None,
    on_grow: typing.Callable[[bool], Any] = None,
    on_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_hide_on_scroll: typing.Callable[[bool], Any] = None,
    on_horizontal: typing.Callable[[bool], Any] = None,
    on_input_value: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_mandatory: typing.Callable[[bool], Any] = None,
    on_max_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_max_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_min_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_min_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_scroll_target: typing.Callable[[str], Any] = None,
    on_scroll_threshold: typing.Callable[[typing.Union[str, float]], Any] = None,
    on_shift: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
    on_width: typing.Callable[[typing.Union[float, str]], Any] = None,
) -> Element[ipyvuetify.generated.BottomNavigation]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        absolute=absolute,
        active_class=active_class,
        app=app,
        attributes=attributes,
        background_color=background_color,
        children=children,
        class_=class_,
        color=color,
        dark=dark,
        fixed=fixed,
        grow=grow,
        height=height,
        hide_on_scroll=hide_on_scroll,
        horizontal=horizontal,
        input_value=input_value,
        layout=layout,
        light=light,
        mandatory=mandatory,
        max_height=max_height,
        max_width=max_width,
        min_height=min_height,
        min_width=min_width,
        scroll_target=scroll_target,
        scroll_threshold=scroll_threshold,
        shift=shift,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        width=width,
        on_absolute=on_absolute,
        on_active_class=on_active_class,
        on_app=on_app,
        on_attributes=on_attributes,
        on_background_color=on_background_color,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_dark=on_dark,
        on_fixed=on_fixed,
        on_grow=on_grow,
        on_height=on_height,
        on_hide_on_scroll=on_hide_on_scroll,
        on_horizontal=on_horizontal,
        on_input_value=on_input_value,
        on_layout=on_layout,
        on_light=on_light,
        on_mandatory=on_mandatory,
        on_max_height=on_max_height,
        on_max_width=on_max_width,
        on_min_height=on_min_height,
        on_min_width=on_min_width,
        on_scroll_target=on_scroll_target,
        on_scroll_threshold=on_scroll_threshold,
        on_shift=on_shift,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
        on_width=on_width,
    )
    widget_cls = ipyvuetify.generated.BottomNavigation
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def BottomSheet(
    activator: Any = None,
    attach: Any = None,
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    close_delay: typing.Union[float, str] = None,
    content_class: str = None,
    dark: bool = None,
    disabled: bool = None,
    eager: bool = None,
    fullscreen: bool = None,
    hide_overlay: bool = None,
    inset: bool = None,
    internal_activator: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    max_width: typing.Union[str, float] = None,
    no_click_animation: bool = None,
    open_delay: typing.Union[float, str] = None,
    open_on_hover: bool = None,
    origin: str = None,
    overlay_color: str = None,
    overlay_opacity: typing.Union[float, str] = None,
    persistent: bool = None,
    retain_focus: bool = None,
    return_value: Any = None,
    scrollable: bool = None,
    slot: str = None,
    style_: str = None,
    transition: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: Any = None,
    width: typing.Union[str, float] = None,
    on_activator: typing.Callable[[Any], Any] = None,
    on_attach: typing.Callable[[Any], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_close_delay: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_content_class: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_eager: typing.Callable[[bool], Any] = None,
    on_fullscreen: typing.Callable[[bool], Any] = None,
    on_hide_overlay: typing.Callable[[bool], Any] = None,
    on_inset: typing.Callable[[bool], Any] = None,
    on_internal_activator: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_max_width: typing.Callable[[typing.Union[str, float]], Any] = None,
    on_no_click_animation: typing.Callable[[bool], Any] = None,
    on_open_delay: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_open_on_hover: typing.Callable[[bool], Any] = None,
    on_origin: typing.Callable[[str], Any] = None,
    on_overlay_color: typing.Callable[[str], Any] = None,
    on_overlay_opacity: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_persistent: typing.Callable[[bool], Any] = None,
    on_retain_focus: typing.Callable[[bool], Any] = None,
    on_return_value: typing.Callable[[Any], Any] = None,
    on_scrollable: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_transition: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
    on_width: typing.Callable[[typing.Union[str, float]], Any] = None,
) -> Element[ipyvuetify.generated.BottomSheet]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        activator=activator,
        attach=attach,
        attributes=attributes,
        children=children,
        class_=class_,
        close_delay=close_delay,
        content_class=content_class,
        dark=dark,
        disabled=disabled,
        eager=eager,
        fullscreen=fullscreen,
        hide_overlay=hide_overlay,
        inset=inset,
        internal_activator=internal_activator,
        layout=layout,
        light=light,
        max_width=max_width,
        no_click_animation=no_click_animation,
        open_delay=open_delay,
        open_on_hover=open_on_hover,
        origin=origin,
        overlay_color=overlay_color,
        overlay_opacity=overlay_opacity,
        persistent=persistent,
        retain_focus=retain_focus,
        return_value=return_value,
        scrollable=scrollable,
        slot=slot,
        style_=style_,
        transition=transition,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        width=width,
        on_activator=on_activator,
        on_attach=on_attach,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_close_delay=on_close_delay,
        on_content_class=on_content_class,
        on_dark=on_dark,
        on_disabled=on_disabled,
        on_eager=on_eager,
        on_fullscreen=on_fullscreen,
        on_hide_overlay=on_hide_overlay,
        on_inset=on_inset,
        on_internal_activator=on_internal_activator,
        on_layout=on_layout,
        on_light=on_light,
        on_max_width=on_max_width,
        on_no_click_animation=on_no_click_animation,
        on_open_delay=on_open_delay,
        on_open_on_hover=on_open_on_hover,
        on_origin=on_origin,
        on_overlay_color=on_overlay_color,
        on_overlay_opacity=on_overlay_opacity,
        on_persistent=on_persistent,
        on_retain_focus=on_retain_focus,
        on_return_value=on_return_value,
        on_scrollable=on_scrollable,
        on_slot=on_slot,
        on_style_=on_style_,
        on_transition=on_transition,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
        on_width=on_width,
    )
    widget_cls = ipyvuetify.generated.BottomSheet
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Breadcrumbs(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    dark: bool = None,
    divider: str = None,
    items: list = [],
    large: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_divider: typing.Callable[[str], Any] = None,
    on_items: typing.Callable[[list], Any] = None,
    on_large: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.Breadcrumbs]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        dark=dark,
        divider=divider,
        items=items,
        large=large,
        layout=layout,
        light=light,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_dark=on_dark,
        on_divider=on_divider,
        on_items=on_items,
        on_large=on_large,
        on_layout=on_layout,
        on_light=on_light,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.Breadcrumbs
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def BreadcrumbsDivider(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.BreadcrumbsDivider]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        layout=layout,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_layout=on_layout,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.BreadcrumbsDivider
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def BreadcrumbsItem(
    active_class: str = None,
    append: bool = None,
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    disabled: bool = None,
    exact: bool = None,
    exact_active_class: str = None,
    href: typing.Union[str, dict] = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    link: bool = None,
    nuxt: bool = None,
    replace: bool = None,
    ripple: typing.Union[bool, dict] = None,
    slot: str = None,
    style_: str = None,
    tag: str = None,
    target: str = None,
    to: typing.Union[str, dict] = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_active_class: typing.Callable[[str], Any] = None,
    on_append: typing.Callable[[bool], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_exact: typing.Callable[[bool], Any] = None,
    on_exact_active_class: typing.Callable[[str], Any] = None,
    on_href: typing.Callable[[typing.Union[str, dict]], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_link: typing.Callable[[bool], Any] = None,
    on_nuxt: typing.Callable[[bool], Any] = None,
    on_replace: typing.Callable[[bool], Any] = None,
    on_ripple: typing.Callable[[typing.Union[bool, dict]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_tag: typing.Callable[[str], Any] = None,
    on_target: typing.Callable[[str], Any] = None,
    on_to: typing.Callable[[typing.Union[str, dict]], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.BreadcrumbsItem]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        active_class=active_class,
        append=append,
        attributes=attributes,
        children=children,
        class_=class_,
        disabled=disabled,
        exact=exact,
        exact_active_class=exact_active_class,
        href=href,
        layout=layout,
        link=link,
        nuxt=nuxt,
        replace=replace,
        ripple=ripple,
        slot=slot,
        style_=style_,
        tag=tag,
        target=target,
        to=to,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_active_class=on_active_class,
        on_append=on_append,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_disabled=on_disabled,
        on_exact=on_exact,
        on_exact_active_class=on_exact_active_class,
        on_href=on_href,
        on_layout=on_layout,
        on_link=on_link,
        on_nuxt=on_nuxt,
        on_replace=on_replace,
        on_ripple=on_ripple,
        on_slot=on_slot,
        on_style_=on_style_,
        on_tag=on_tag,
        on_target=on_target,
        on_to=on_to,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.BreadcrumbsItem
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Btn(
    absolute: bool = None,
    active_class: str = None,
    append: bool = None,
    attributes: dict = {},
    block: bool = None,
    bottom: bool = None,
    children: list = [],
    class_: str = None,
    color: str = None,
    dark: bool = None,
    depressed: bool = None,
    disabled: bool = None,
    elevation: typing.Union[float, str] = None,
    exact: bool = None,
    exact_active_class: str = None,
    fab: bool = None,
    fixed: bool = None,
    height: typing.Union[float, str] = None,
    href: typing.Union[str, dict] = None,
    icon: bool = None,
    input_value: Any = None,
    large: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    left: bool = None,
    light: bool = None,
    link: bool = None,
    loading: bool = None,
    max_height: typing.Union[float, str] = None,
    max_width: typing.Union[float, str] = None,
    min_height: typing.Union[float, str] = None,
    min_width: typing.Union[float, str] = None,
    nuxt: bool = None,
    outlined: bool = None,
    replace: bool = None,
    retain_focus_on_click: bool = None,
    right: bool = None,
    ripple: typing.Union[bool, dict] = None,
    rounded: bool = None,
    slot: str = None,
    small: bool = None,
    style_: str = None,
    tag: str = None,
    target: str = None,
    text: bool = None,
    tile: bool = None,
    to: typing.Union[str, dict] = None,
    top: bool = None,
    type: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: Any = None,
    width: typing.Union[float, str] = None,
    x_large: bool = None,
    x_small: bool = None,
    on_absolute: typing.Callable[[bool], Any] = None,
    on_active_class: typing.Callable[[str], Any] = None,
    on_append: typing.Callable[[bool], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_block: typing.Callable[[bool], Any] = None,
    on_bottom: typing.Callable[[bool], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_depressed: typing.Callable[[bool], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_elevation: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_exact: typing.Callable[[bool], Any] = None,
    on_exact_active_class: typing.Callable[[str], Any] = None,
    on_fab: typing.Callable[[bool], Any] = None,
    on_fixed: typing.Callable[[bool], Any] = None,
    on_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_href: typing.Callable[[typing.Union[str, dict]], Any] = None,
    on_icon: typing.Callable[[bool], Any] = None,
    on_input_value: typing.Callable[[Any], Any] = None,
    on_large: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_left: typing.Callable[[bool], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_link: typing.Callable[[bool], Any] = None,
    on_loading: typing.Callable[[bool], Any] = None,
    on_max_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_max_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_min_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_min_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_nuxt: typing.Callable[[bool], Any] = None,
    on_outlined: typing.Callable[[bool], Any] = None,
    on_replace: typing.Callable[[bool], Any] = None,
    on_retain_focus_on_click: typing.Callable[[bool], Any] = None,
    on_right: typing.Callable[[bool], Any] = None,
    on_ripple: typing.Callable[[typing.Union[bool, dict]], Any] = None,
    on_rounded: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_small: typing.Callable[[bool], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_tag: typing.Callable[[str], Any] = None,
    on_target: typing.Callable[[str], Any] = None,
    on_text: typing.Callable[[bool], Any] = None,
    on_tile: typing.Callable[[bool], Any] = None,
    on_to: typing.Callable[[typing.Union[str, dict]], Any] = None,
    on_top: typing.Callable[[bool], Any] = None,
    on_type: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
    on_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_x_large: typing.Callable[[bool], Any] = None,
    on_x_small: typing.Callable[[bool], Any] = None,
) -> Element[ipyvuetify.generated.Btn]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        absolute=absolute,
        active_class=active_class,
        append=append,
        attributes=attributes,
        block=block,
        bottom=bottom,
        children=children,
        class_=class_,
        color=color,
        dark=dark,
        depressed=depressed,
        disabled=disabled,
        elevation=elevation,
        exact=exact,
        exact_active_class=exact_active_class,
        fab=fab,
        fixed=fixed,
        height=height,
        href=href,
        icon=icon,
        input_value=input_value,
        large=large,
        layout=layout,
        left=left,
        light=light,
        link=link,
        loading=loading,
        max_height=max_height,
        max_width=max_width,
        min_height=min_height,
        min_width=min_width,
        nuxt=nuxt,
        outlined=outlined,
        replace=replace,
        retain_focus_on_click=retain_focus_on_click,
        right=right,
        ripple=ripple,
        rounded=rounded,
        slot=slot,
        small=small,
        style_=style_,
        tag=tag,
        target=target,
        text=text,
        tile=tile,
        to=to,
        top=top,
        type=type,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        width=width,
        x_large=x_large,
        x_small=x_small,
        on_absolute=on_absolute,
        on_active_class=on_active_class,
        on_append=on_append,
        on_attributes=on_attributes,
        on_block=on_block,
        on_bottom=on_bottom,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_dark=on_dark,
        on_depressed=on_depressed,
        on_disabled=on_disabled,
        on_elevation=on_elevation,
        on_exact=on_exact,
        on_exact_active_class=on_exact_active_class,
        on_fab=on_fab,
        on_fixed=on_fixed,
        on_height=on_height,
        on_href=on_href,
        on_icon=on_icon,
        on_input_value=on_input_value,
        on_large=on_large,
        on_layout=on_layout,
        on_left=on_left,
        on_light=on_light,
        on_link=on_link,
        on_loading=on_loading,
        on_max_height=on_max_height,
        on_max_width=on_max_width,
        on_min_height=on_min_height,
        on_min_width=on_min_width,
        on_nuxt=on_nuxt,
        on_outlined=on_outlined,
        on_replace=on_replace,
        on_retain_focus_on_click=on_retain_focus_on_click,
        on_right=on_right,
        on_ripple=on_ripple,
        on_rounded=on_rounded,
        on_slot=on_slot,
        on_small=on_small,
        on_style_=on_style_,
        on_tag=on_tag,
        on_target=on_target,
        on_text=on_text,
        on_tile=on_tile,
        on_to=on_to,
        on_top=on_top,
        on_type=on_type,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
        on_width=on_width,
        on_x_large=on_x_large,
        on_x_small=on_x_small,
    )
    widget_cls = ipyvuetify.generated.Btn
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def BtnToggle(
    active_class: str = None,
    attributes: dict = {},
    background_color: str = None,
    borderless: bool = None,
    children: list = [],
    class_: str = None,
    color: str = None,
    dark: bool = None,
    dense: bool = None,
    group: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    mandatory: bool = None,
    max: typing.Union[float, str] = None,
    multiple: bool = None,
    rounded: bool = None,
    shaped: bool = None,
    slot: str = None,
    style_: str = None,
    tile: bool = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: Any = None,
    on_active_class: typing.Callable[[str], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_background_color: typing.Callable[[str], Any] = None,
    on_borderless: typing.Callable[[bool], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_dense: typing.Callable[[bool], Any] = None,
    on_group: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_mandatory: typing.Callable[[bool], Any] = None,
    on_max: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_multiple: typing.Callable[[bool], Any] = None,
    on_rounded: typing.Callable[[bool], Any] = None,
    on_shaped: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_tile: typing.Callable[[bool], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
) -> Element[ipyvuetify.generated.BtnToggle]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        active_class=active_class,
        attributes=attributes,
        background_color=background_color,
        borderless=borderless,
        children=children,
        class_=class_,
        color=color,
        dark=dark,
        dense=dense,
        group=group,
        layout=layout,
        light=light,
        mandatory=mandatory,
        max=max,
        multiple=multiple,
        rounded=rounded,
        shaped=shaped,
        slot=slot,
        style_=style_,
        tile=tile,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        on_active_class=on_active_class,
        on_attributes=on_attributes,
        on_background_color=on_background_color,
        on_borderless=on_borderless,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_dark=on_dark,
        on_dense=on_dense,
        on_group=on_group,
        on_layout=on_layout,
        on_light=on_light,
        on_mandatory=on_mandatory,
        on_max=on_max,
        on_multiple=on_multiple,
        on_rounded=on_rounded,
        on_shaped=on_shaped,
        on_slot=on_slot,
        on_style_=on_style_,
        on_tile=on_tile,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.BtnToggle
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Calendar(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    color: str = None,
    dark: bool = None,
    end: str = None,
    event_color: str = None,
    event_end: str = None,
    event_height: float = None,
    event_margin_bottom: float = None,
    event_more: bool = None,
    event_more_text: str = None,
    event_name: str = None,
    event_overlap_mode: str = None,
    event_overlap_threshold: typing.Union[str, float] = None,
    event_ripple: typing.Union[bool, dict] = None,
    event_start: str = None,
    event_text_color: str = None,
    events: list = [],
    first_interval: typing.Union[float, str] = None,
    hide_header: bool = None,
    interval_count: typing.Union[float, str] = None,
    interval_height: typing.Union[float, str] = None,
    interval_minutes: typing.Union[float, str] = None,
    interval_width: typing.Union[float, str] = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    locale: str = None,
    max_days: float = None,
    min_weeks: Any = None,
    now: str = None,
    short_intervals: bool = None,
    short_months: bool = None,
    short_weekdays: bool = None,
    show_month_on_first: bool = None,
    slot: str = None,
    start: str = None,
    style_: str = None,
    type: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: str = None,
    weekdays: typing.Union[list, str] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_end: typing.Callable[[str], Any] = None,
    on_event_color: typing.Callable[[str], Any] = None,
    on_event_end: typing.Callable[[str], Any] = None,
    on_event_height: typing.Callable[[float], Any] = None,
    on_event_margin_bottom: typing.Callable[[float], Any] = None,
    on_event_more: typing.Callable[[bool], Any] = None,
    on_event_more_text: typing.Callable[[str], Any] = None,
    on_event_name: typing.Callable[[str], Any] = None,
    on_event_overlap_mode: typing.Callable[[str], Any] = None,
    on_event_overlap_threshold: typing.Callable[[typing.Union[str, float]], Any] = None,
    on_event_ripple: typing.Callable[[typing.Union[bool, dict]], Any] = None,
    on_event_start: typing.Callable[[str], Any] = None,
    on_event_text_color: typing.Callable[[str], Any] = None,
    on_events: typing.Callable[[list], Any] = None,
    on_first_interval: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_hide_header: typing.Callable[[bool], Any] = None,
    on_interval_count: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_interval_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_interval_minutes: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_interval_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_locale: typing.Callable[[str], Any] = None,
    on_max_days: typing.Callable[[float], Any] = None,
    on_min_weeks: typing.Callable[[Any], Any] = None,
    on_now: typing.Callable[[str], Any] = None,
    on_short_intervals: typing.Callable[[bool], Any] = None,
    on_short_months: typing.Callable[[bool], Any] = None,
    on_short_weekdays: typing.Callable[[bool], Any] = None,
    on_show_month_on_first: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_start: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_type: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[str], Any] = None,
    on_weekdays: typing.Callable[[typing.Union[list, str]], Any] = None,
) -> Element[ipyvuetify.generated.Calendar]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        color=color,
        dark=dark,
        end=end,
        event_color=event_color,
        event_end=event_end,
        event_height=event_height,
        event_margin_bottom=event_margin_bottom,
        event_more=event_more,
        event_more_text=event_more_text,
        event_name=event_name,
        event_overlap_mode=event_overlap_mode,
        event_overlap_threshold=event_overlap_threshold,
        event_ripple=event_ripple,
        event_start=event_start,
        event_text_color=event_text_color,
        events=events,
        first_interval=first_interval,
        hide_header=hide_header,
        interval_count=interval_count,
        interval_height=interval_height,
        interval_minutes=interval_minutes,
        interval_width=interval_width,
        layout=layout,
        light=light,
        locale=locale,
        max_days=max_days,
        min_weeks=min_weeks,
        now=now,
        short_intervals=short_intervals,
        short_months=short_months,
        short_weekdays=short_weekdays,
        show_month_on_first=show_month_on_first,
        slot=slot,
        start=start,
        style_=style_,
        type=type,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        weekdays=weekdays,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_dark=on_dark,
        on_end=on_end,
        on_event_color=on_event_color,
        on_event_end=on_event_end,
        on_event_height=on_event_height,
        on_event_margin_bottom=on_event_margin_bottom,
        on_event_more=on_event_more,
        on_event_more_text=on_event_more_text,
        on_event_name=on_event_name,
        on_event_overlap_mode=on_event_overlap_mode,
        on_event_overlap_threshold=on_event_overlap_threshold,
        on_event_ripple=on_event_ripple,
        on_event_start=on_event_start,
        on_event_text_color=on_event_text_color,
        on_events=on_events,
        on_first_interval=on_first_interval,
        on_hide_header=on_hide_header,
        on_interval_count=on_interval_count,
        on_interval_height=on_interval_height,
        on_interval_minutes=on_interval_minutes,
        on_interval_width=on_interval_width,
        on_layout=on_layout,
        on_light=on_light,
        on_locale=on_locale,
        on_max_days=on_max_days,
        on_min_weeks=on_min_weeks,
        on_now=on_now,
        on_short_intervals=on_short_intervals,
        on_short_months=on_short_months,
        on_short_weekdays=on_short_weekdays,
        on_show_month_on_first=on_show_month_on_first,
        on_slot=on_slot,
        on_start=on_start,
        on_style_=on_style_,
        on_type=on_type,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
        on_weekdays=on_weekdays,
    )
    widget_cls = ipyvuetify.generated.Calendar
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def CalendarDaily(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    color: str = None,
    dark: bool = None,
    end: str = None,
    first_interval: typing.Union[float, str] = None,
    hide_header: bool = None,
    interval_count: typing.Union[float, str] = None,
    interval_height: typing.Union[float, str] = None,
    interval_minutes: typing.Union[float, str] = None,
    interval_width: typing.Union[float, str] = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    locale: str = None,
    max_days: float = None,
    now: str = None,
    short_intervals: bool = None,
    short_weekdays: bool = None,
    slot: str = None,
    start: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    weekdays: typing.Union[list, str] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_end: typing.Callable[[str], Any] = None,
    on_first_interval: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_hide_header: typing.Callable[[bool], Any] = None,
    on_interval_count: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_interval_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_interval_minutes: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_interval_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_locale: typing.Callable[[str], Any] = None,
    on_max_days: typing.Callable[[float], Any] = None,
    on_now: typing.Callable[[str], Any] = None,
    on_short_intervals: typing.Callable[[bool], Any] = None,
    on_short_weekdays: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_start: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_weekdays: typing.Callable[[typing.Union[list, str]], Any] = None,
) -> Element[ipyvuetify.generated.CalendarDaily]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        color=color,
        dark=dark,
        end=end,
        first_interval=first_interval,
        hide_header=hide_header,
        interval_count=interval_count,
        interval_height=interval_height,
        interval_minutes=interval_minutes,
        interval_width=interval_width,
        layout=layout,
        light=light,
        locale=locale,
        max_days=max_days,
        now=now,
        short_intervals=short_intervals,
        short_weekdays=short_weekdays,
        slot=slot,
        start=start,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        weekdays=weekdays,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_dark=on_dark,
        on_end=on_end,
        on_first_interval=on_first_interval,
        on_hide_header=on_hide_header,
        on_interval_count=on_interval_count,
        on_interval_height=on_interval_height,
        on_interval_minutes=on_interval_minutes,
        on_interval_width=on_interval_width,
        on_layout=on_layout,
        on_light=on_light,
        on_locale=on_locale,
        on_max_days=on_max_days,
        on_now=on_now,
        on_short_intervals=on_short_intervals,
        on_short_weekdays=on_short_weekdays,
        on_slot=on_slot,
        on_start=on_start,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_weekdays=on_weekdays,
    )
    widget_cls = ipyvuetify.generated.CalendarDaily
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def CalendarMonthly(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    color: str = None,
    dark: bool = None,
    end: str = None,
    hide_header: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    locale: str = None,
    min_weeks: Any = None,
    now: str = None,
    short_months: bool = None,
    short_weekdays: bool = None,
    show_month_on_first: bool = None,
    slot: str = None,
    start: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    weekdays: typing.Union[list, str] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_end: typing.Callable[[str], Any] = None,
    on_hide_header: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_locale: typing.Callable[[str], Any] = None,
    on_min_weeks: typing.Callable[[Any], Any] = None,
    on_now: typing.Callable[[str], Any] = None,
    on_short_months: typing.Callable[[bool], Any] = None,
    on_short_weekdays: typing.Callable[[bool], Any] = None,
    on_show_month_on_first: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_start: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_weekdays: typing.Callable[[typing.Union[list, str]], Any] = None,
) -> Element[ipyvuetify.generated.CalendarMonthly]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        color=color,
        dark=dark,
        end=end,
        hide_header=hide_header,
        layout=layout,
        light=light,
        locale=locale,
        min_weeks=min_weeks,
        now=now,
        short_months=short_months,
        short_weekdays=short_weekdays,
        show_month_on_first=show_month_on_first,
        slot=slot,
        start=start,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        weekdays=weekdays,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_dark=on_dark,
        on_end=on_end,
        on_hide_header=on_hide_header,
        on_layout=on_layout,
        on_light=on_light,
        on_locale=on_locale,
        on_min_weeks=on_min_weeks,
        on_now=on_now,
        on_short_months=on_short_months,
        on_short_weekdays=on_short_weekdays,
        on_show_month_on_first=on_show_month_on_first,
        on_slot=on_slot,
        on_start=on_start,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_weekdays=on_weekdays,
    )
    widget_cls = ipyvuetify.generated.CalendarMonthly
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def CalendarWeekly(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    color: str = None,
    dark: bool = None,
    end: str = None,
    hide_header: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    locale: str = None,
    min_weeks: Any = None,
    now: str = None,
    short_months: bool = None,
    short_weekdays: bool = None,
    show_month_on_first: bool = None,
    slot: str = None,
    start: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    weekdays: typing.Union[list, str] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_end: typing.Callable[[str], Any] = None,
    on_hide_header: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_locale: typing.Callable[[str], Any] = None,
    on_min_weeks: typing.Callable[[Any], Any] = None,
    on_now: typing.Callable[[str], Any] = None,
    on_short_months: typing.Callable[[bool], Any] = None,
    on_short_weekdays: typing.Callable[[bool], Any] = None,
    on_show_month_on_first: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_start: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_weekdays: typing.Callable[[typing.Union[list, str]], Any] = None,
) -> Element[ipyvuetify.generated.CalendarWeekly]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        color=color,
        dark=dark,
        end=end,
        hide_header=hide_header,
        layout=layout,
        light=light,
        locale=locale,
        min_weeks=min_weeks,
        now=now,
        short_months=short_months,
        short_weekdays=short_weekdays,
        show_month_on_first=show_month_on_first,
        slot=slot,
        start=start,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        weekdays=weekdays,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_dark=on_dark,
        on_end=on_end,
        on_hide_header=on_hide_header,
        on_layout=on_layout,
        on_light=on_light,
        on_locale=on_locale,
        on_min_weeks=on_min_weeks,
        on_now=on_now,
        on_short_months=on_short_months,
        on_short_weekdays=on_short_weekdays,
        on_show_month_on_first=on_show_month_on_first,
        on_slot=on_slot,
        on_start=on_start,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_weekdays=on_weekdays,
    )
    widget_cls = ipyvuetify.generated.CalendarWeekly
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Card(
    active_class: str = None,
    append: bool = None,
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    color: str = None,
    dark: bool = None,
    disabled: bool = None,
    elevation: typing.Union[float, str] = None,
    exact: bool = None,
    exact_active_class: str = None,
    flat: bool = None,
    height: typing.Union[float, str] = None,
    hover: bool = None,
    href: typing.Union[str, dict] = None,
    img: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    link: bool = None,
    loader_height: typing.Union[float, str] = None,
    loading: typing.Union[bool, str] = None,
    max_height: typing.Union[float, str] = None,
    max_width: typing.Union[float, str] = None,
    min_height: typing.Union[float, str] = None,
    min_width: typing.Union[float, str] = None,
    nuxt: bool = None,
    outlined: bool = None,
    raised: bool = None,
    replace: bool = None,
    ripple: typing.Union[bool, dict] = None,
    shaped: bool = None,
    slot: str = None,
    style_: str = None,
    tag: str = None,
    target: str = None,
    tile: bool = None,
    to: typing.Union[str, dict] = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    width: typing.Union[float, str] = None,
    on_active_class: typing.Callable[[str], Any] = None,
    on_append: typing.Callable[[bool], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_elevation: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_exact: typing.Callable[[bool], Any] = None,
    on_exact_active_class: typing.Callable[[str], Any] = None,
    on_flat: typing.Callable[[bool], Any] = None,
    on_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_hover: typing.Callable[[bool], Any] = None,
    on_href: typing.Callable[[typing.Union[str, dict]], Any] = None,
    on_img: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_link: typing.Callable[[bool], Any] = None,
    on_loader_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_loading: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_max_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_max_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_min_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_min_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_nuxt: typing.Callable[[bool], Any] = None,
    on_outlined: typing.Callable[[bool], Any] = None,
    on_raised: typing.Callable[[bool], Any] = None,
    on_replace: typing.Callable[[bool], Any] = None,
    on_ripple: typing.Callable[[typing.Union[bool, dict]], Any] = None,
    on_shaped: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_tag: typing.Callable[[str], Any] = None,
    on_target: typing.Callable[[str], Any] = None,
    on_tile: typing.Callable[[bool], Any] = None,
    on_to: typing.Callable[[typing.Union[str, dict]], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_width: typing.Callable[[typing.Union[float, str]], Any] = None,
) -> Element[ipyvuetify.generated.Card]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        active_class=active_class,
        append=append,
        attributes=attributes,
        children=children,
        class_=class_,
        color=color,
        dark=dark,
        disabled=disabled,
        elevation=elevation,
        exact=exact,
        exact_active_class=exact_active_class,
        flat=flat,
        height=height,
        hover=hover,
        href=href,
        img=img,
        layout=layout,
        light=light,
        link=link,
        loader_height=loader_height,
        loading=loading,
        max_height=max_height,
        max_width=max_width,
        min_height=min_height,
        min_width=min_width,
        nuxt=nuxt,
        outlined=outlined,
        raised=raised,
        replace=replace,
        ripple=ripple,
        shaped=shaped,
        slot=slot,
        style_=style_,
        tag=tag,
        target=target,
        tile=tile,
        to=to,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        width=width,
        on_active_class=on_active_class,
        on_append=on_append,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_dark=on_dark,
        on_disabled=on_disabled,
        on_elevation=on_elevation,
        on_exact=on_exact,
        on_exact_active_class=on_exact_active_class,
        on_flat=on_flat,
        on_height=on_height,
        on_hover=on_hover,
        on_href=on_href,
        on_img=on_img,
        on_layout=on_layout,
        on_light=on_light,
        on_link=on_link,
        on_loader_height=on_loader_height,
        on_loading=on_loading,
        on_max_height=on_max_height,
        on_max_width=on_max_width,
        on_min_height=on_min_height,
        on_min_width=on_min_width,
        on_nuxt=on_nuxt,
        on_outlined=on_outlined,
        on_raised=on_raised,
        on_replace=on_replace,
        on_ripple=on_ripple,
        on_shaped=on_shaped,
        on_slot=on_slot,
        on_style_=on_style_,
        on_tag=on_tag,
        on_target=on_target,
        on_tile=on_tile,
        on_to=on_to,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_width=on_width,
    )
    widget_cls = ipyvuetify.generated.Card
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def CardActions(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.CardActions]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        layout=layout,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_layout=on_layout,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.CardActions
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def CardSubtitle(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.CardSubtitle]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        layout=layout,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_layout=on_layout,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.CardSubtitle
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def CardText(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.CardText]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        layout=layout,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_layout=on_layout,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.CardText
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def CardTitle(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.CardTitle]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        layout=layout,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_layout=on_layout,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.CardTitle
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Carousel(
    active_class: str = None,
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    continuous: bool = None,
    cycle: bool = None,
    dark: bool = None,
    delimiter_icon: str = None,
    height: typing.Union[float, str] = None,
    hide_delimiter_background: bool = None,
    hide_delimiters: bool = None,
    interval: typing.Union[float, str] = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    mandatory: bool = None,
    max: typing.Union[float, str] = None,
    multiple: bool = None,
    next_icon: typing.Union[bool, str] = None,
    prev_icon: typing.Union[bool, str] = None,
    progress: bool = None,
    progress_color: str = None,
    reverse: bool = None,
    show_arrows: bool = None,
    show_arrows_on_hover: bool = None,
    slot: str = None,
    style_: str = None,
    touch: dict = None,
    touchless: bool = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: Any = None,
    vertical: bool = None,
    vertical_delimiters: str = None,
    on_active_class: typing.Callable[[str], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_continuous: typing.Callable[[bool], Any] = None,
    on_cycle: typing.Callable[[bool], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_delimiter_icon: typing.Callable[[str], Any] = None,
    on_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_hide_delimiter_background: typing.Callable[[bool], Any] = None,
    on_hide_delimiters: typing.Callable[[bool], Any] = None,
    on_interval: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_mandatory: typing.Callable[[bool], Any] = None,
    on_max: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_multiple: typing.Callable[[bool], Any] = None,
    on_next_icon: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_prev_icon: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_progress: typing.Callable[[bool], Any] = None,
    on_progress_color: typing.Callable[[str], Any] = None,
    on_reverse: typing.Callable[[bool], Any] = None,
    on_show_arrows: typing.Callable[[bool], Any] = None,
    on_show_arrows_on_hover: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_touch: typing.Callable[[dict], Any] = None,
    on_touchless: typing.Callable[[bool], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
    on_vertical: typing.Callable[[bool], Any] = None,
    on_vertical_delimiters: typing.Callable[[str], Any] = None,
) -> Element[ipyvuetify.generated.Carousel]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        active_class=active_class,
        attributes=attributes,
        children=children,
        class_=class_,
        continuous=continuous,
        cycle=cycle,
        dark=dark,
        delimiter_icon=delimiter_icon,
        height=height,
        hide_delimiter_background=hide_delimiter_background,
        hide_delimiters=hide_delimiters,
        interval=interval,
        layout=layout,
        light=light,
        mandatory=mandatory,
        max=max,
        multiple=multiple,
        next_icon=next_icon,
        prev_icon=prev_icon,
        progress=progress,
        progress_color=progress_color,
        reverse=reverse,
        show_arrows=show_arrows,
        show_arrows_on_hover=show_arrows_on_hover,
        slot=slot,
        style_=style_,
        touch=touch,
        touchless=touchless,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        vertical=vertical,
        vertical_delimiters=vertical_delimiters,
        on_active_class=on_active_class,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_continuous=on_continuous,
        on_cycle=on_cycle,
        on_dark=on_dark,
        on_delimiter_icon=on_delimiter_icon,
        on_height=on_height,
        on_hide_delimiter_background=on_hide_delimiter_background,
        on_hide_delimiters=on_hide_delimiters,
        on_interval=on_interval,
        on_layout=on_layout,
        on_light=on_light,
        on_mandatory=on_mandatory,
        on_max=on_max,
        on_multiple=on_multiple,
        on_next_icon=on_next_icon,
        on_prev_icon=on_prev_icon,
        on_progress=on_progress,
        on_progress_color=on_progress_color,
        on_reverse=on_reverse,
        on_show_arrows=on_show_arrows,
        on_show_arrows_on_hover=on_show_arrows_on_hover,
        on_slot=on_slot,
        on_style_=on_style_,
        on_touch=on_touch,
        on_touchless=on_touchless,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
        on_vertical=on_vertical,
        on_vertical_delimiters=on_vertical_delimiters,
    )
    widget_cls = ipyvuetify.generated.Carousel
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def CarouselItem(
    active_class: str = None,
    append: bool = None,
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    disabled: bool = None,
    eager: bool = None,
    exact: bool = None,
    exact_active_class: str = None,
    href: typing.Union[str, dict] = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    link: bool = None,
    nuxt: bool = None,
    replace: bool = None,
    reverse_transition: typing.Union[bool, str] = None,
    ripple: typing.Union[bool, dict] = None,
    slot: str = None,
    style_: str = None,
    tag: str = None,
    target: str = None,
    to: typing.Union[str, dict] = None,
    transition: typing.Union[bool, str] = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: Any = None,
    on_active_class: typing.Callable[[str], Any] = None,
    on_append: typing.Callable[[bool], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_eager: typing.Callable[[bool], Any] = None,
    on_exact: typing.Callable[[bool], Any] = None,
    on_exact_active_class: typing.Callable[[str], Any] = None,
    on_href: typing.Callable[[typing.Union[str, dict]], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_link: typing.Callable[[bool], Any] = None,
    on_nuxt: typing.Callable[[bool], Any] = None,
    on_replace: typing.Callable[[bool], Any] = None,
    on_reverse_transition: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_ripple: typing.Callable[[typing.Union[bool, dict]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_tag: typing.Callable[[str], Any] = None,
    on_target: typing.Callable[[str], Any] = None,
    on_to: typing.Callable[[typing.Union[str, dict]], Any] = None,
    on_transition: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
) -> Element[ipyvuetify.generated.CarouselItem]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        active_class=active_class,
        append=append,
        attributes=attributes,
        children=children,
        class_=class_,
        disabled=disabled,
        eager=eager,
        exact=exact,
        exact_active_class=exact_active_class,
        href=href,
        layout=layout,
        link=link,
        nuxt=nuxt,
        replace=replace,
        reverse_transition=reverse_transition,
        ripple=ripple,
        slot=slot,
        style_=style_,
        tag=tag,
        target=target,
        to=to,
        transition=transition,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        on_active_class=on_active_class,
        on_append=on_append,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_disabled=on_disabled,
        on_eager=on_eager,
        on_exact=on_exact,
        on_exact_active_class=on_exact_active_class,
        on_href=on_href,
        on_layout=on_layout,
        on_link=on_link,
        on_nuxt=on_nuxt,
        on_replace=on_replace,
        on_reverse_transition=on_reverse_transition,
        on_ripple=on_ripple,
        on_slot=on_slot,
        on_style_=on_style_,
        on_tag=on_tag,
        on_target=on_target,
        on_to=on_to,
        on_transition=on_transition,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.CarouselItem
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def CarouselReverseTransition(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    group: bool = None,
    hide_on_leave: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    leave_absolute: bool = None,
    mode: str = None,
    origin: str = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_group: typing.Callable[[bool], Any] = None,
    on_hide_on_leave: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_leave_absolute: typing.Callable[[bool], Any] = None,
    on_mode: typing.Callable[[str], Any] = None,
    on_origin: typing.Callable[[str], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.CarouselReverseTransition]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        group=group,
        hide_on_leave=hide_on_leave,
        layout=layout,
        leave_absolute=leave_absolute,
        mode=mode,
        origin=origin,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_group=on_group,
        on_hide_on_leave=on_hide_on_leave,
        on_layout=on_layout,
        on_leave_absolute=on_leave_absolute,
        on_mode=on_mode,
        on_origin=on_origin,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.CarouselReverseTransition
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def CarouselTransition(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    group: bool = None,
    hide_on_leave: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    leave_absolute: bool = None,
    mode: str = None,
    origin: str = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_group: typing.Callable[[bool], Any] = None,
    on_hide_on_leave: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_leave_absolute: typing.Callable[[bool], Any] = None,
    on_mode: typing.Callable[[str], Any] = None,
    on_origin: typing.Callable[[str], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.CarouselTransition]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        group=group,
        hide_on_leave=hide_on_leave,
        layout=layout,
        leave_absolute=leave_absolute,
        mode=mode,
        origin=origin,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_group=on_group,
        on_hide_on_leave=on_hide_on_leave,
        on_layout=on_layout,
        on_leave_absolute=on_leave_absolute,
        on_mode=on_mode,
        on_origin=on_origin,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.CarouselTransition
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Checkbox(
    append_icon: str = None,
    attributes: dict = {},
    background_color: str = None,
    children: list = [],
    class_: str = None,
    color: str = None,
    dark: bool = None,
    dense: bool = None,
    disabled: bool = None,
    error: bool = None,
    error_count: typing.Union[float, str] = None,
    error_messages: typing.Union[str, list] = None,
    false_value: Any = None,
    height: typing.Union[float, str] = None,
    hide_details: typing.Union[bool, str] = None,
    hint: str = None,
    id: str = None,
    indeterminate: bool = None,
    indeterminate_icon: str = None,
    input_value: Any = None,
    label: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    loading: bool = None,
    messages: typing.Union[str, list] = None,
    multiple: bool = None,
    off_icon: str = None,
    on_icon: str = None,
    persistent_hint: bool = None,
    prepend_icon: str = None,
    readonly: bool = None,
    ripple: typing.Union[bool, dict] = None,
    rules: list = [],
    slot: str = None,
    style_: str = None,
    success: bool = None,
    success_messages: typing.Union[str, list] = None,
    true_value: Any = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    validate_on_blur: bool = None,
    value: Any = None,
    on_append_icon: typing.Callable[[str], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_background_color: typing.Callable[[str], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_dense: typing.Callable[[bool], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_error: typing.Callable[[bool], Any] = None,
    on_error_count: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_error_messages: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_false_value: typing.Callable[[Any], Any] = None,
    on_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_hide_details: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_hint: typing.Callable[[str], Any] = None,
    on_id: typing.Callable[[str], Any] = None,
    on_indeterminate: typing.Callable[[bool], Any] = None,
    on_indeterminate_icon: typing.Callable[[str], Any] = None,
    on_input_value: typing.Callable[[Any], Any] = None,
    on_label: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_loading: typing.Callable[[bool], Any] = None,
    on_messages: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_multiple: typing.Callable[[bool], Any] = None,
    on_off_icon: typing.Callable[[str], Any] = None,
    on_on_icon: typing.Callable[[str], Any] = None,
    on_persistent_hint: typing.Callable[[bool], Any] = None,
    on_prepend_icon: typing.Callable[[str], Any] = None,
    on_readonly: typing.Callable[[bool], Any] = None,
    on_ripple: typing.Callable[[typing.Union[bool, dict]], Any] = None,
    on_rules: typing.Callable[[list], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_success: typing.Callable[[bool], Any] = None,
    on_success_messages: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_true_value: typing.Callable[[Any], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_validate_on_blur: typing.Callable[[bool], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
) -> Element[ipyvuetify.generated.Checkbox]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        append_icon=append_icon,
        attributes=attributes,
        background_color=background_color,
        children=children,
        class_=class_,
        color=color,
        dark=dark,
        dense=dense,
        disabled=disabled,
        error=error,
        error_count=error_count,
        error_messages=error_messages,
        false_value=false_value,
        height=height,
        hide_details=hide_details,
        hint=hint,
        id=id,
        indeterminate=indeterminate,
        indeterminate_icon=indeterminate_icon,
        input_value=input_value,
        label=label,
        layout=layout,
        light=light,
        loading=loading,
        messages=messages,
        multiple=multiple,
        off_icon=off_icon,
        on_icon=on_icon,
        persistent_hint=persistent_hint,
        prepend_icon=prepend_icon,
        readonly=readonly,
        ripple=ripple,
        rules=rules,
        slot=slot,
        style_=style_,
        success=success,
        success_messages=success_messages,
        true_value=true_value,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        validate_on_blur=validate_on_blur,
        value=value,
        on_append_icon=on_append_icon,
        on_attributes=on_attributes,
        on_background_color=on_background_color,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_dark=on_dark,
        on_dense=on_dense,
        on_disabled=on_disabled,
        on_error=on_error,
        on_error_count=on_error_count,
        on_error_messages=on_error_messages,
        on_false_value=on_false_value,
        on_height=on_height,
        on_hide_details=on_hide_details,
        on_hint=on_hint,
        on_id=on_id,
        on_indeterminate=on_indeterminate,
        on_indeterminate_icon=on_indeterminate_icon,
        on_input_value=on_input_value,
        on_label=on_label,
        on_layout=on_layout,
        on_light=on_light,
        on_loading=on_loading,
        on_messages=on_messages,
        on_multiple=on_multiple,
        on_off_icon=on_off_icon,
        on_on_icon=on_on_icon,
        on_persistent_hint=on_persistent_hint,
        on_prepend_icon=on_prepend_icon,
        on_readonly=on_readonly,
        on_ripple=on_ripple,
        on_rules=on_rules,
        on_slot=on_slot,
        on_style_=on_style_,
        on_success=on_success,
        on_success_messages=on_success_messages,
        on_true_value=on_true_value,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_validate_on_blur=on_validate_on_blur,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.Checkbox
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Chip(
    active: bool = None,
    active_class: str = None,
    append: bool = None,
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    close: bool = None,
    close_icon: str = None,
    color: str = None,
    dark: bool = None,
    disabled: bool = None,
    draggable: bool = None,
    exact: bool = None,
    exact_active_class: str = None,
    filter: bool = None,
    filter_icon: str = None,
    href: typing.Union[str, dict] = None,
    input_value: Any = None,
    label: bool = None,
    large: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    link: bool = None,
    nuxt: bool = None,
    outlined: bool = None,
    pill: bool = None,
    replace: bool = None,
    ripple: typing.Union[bool, dict] = None,
    slot: str = None,
    small: bool = None,
    style_: str = None,
    tag: str = None,
    target: str = None,
    text_color: str = None,
    to: typing.Union[str, dict] = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: Any = None,
    x_large: bool = None,
    x_small: bool = None,
    on_active: typing.Callable[[bool], Any] = None,
    on_active_class: typing.Callable[[str], Any] = None,
    on_append: typing.Callable[[bool], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_close: typing.Callable[[bool], Any] = None,
    on_close_icon: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_draggable: typing.Callable[[bool], Any] = None,
    on_exact: typing.Callable[[bool], Any] = None,
    on_exact_active_class: typing.Callable[[str], Any] = None,
    on_filter: typing.Callable[[bool], Any] = None,
    on_filter_icon: typing.Callable[[str], Any] = None,
    on_href: typing.Callable[[typing.Union[str, dict]], Any] = None,
    on_input_value: typing.Callable[[Any], Any] = None,
    on_label: typing.Callable[[bool], Any] = None,
    on_large: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_link: typing.Callable[[bool], Any] = None,
    on_nuxt: typing.Callable[[bool], Any] = None,
    on_outlined: typing.Callable[[bool], Any] = None,
    on_pill: typing.Callable[[bool], Any] = None,
    on_replace: typing.Callable[[bool], Any] = None,
    on_ripple: typing.Callable[[typing.Union[bool, dict]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_small: typing.Callable[[bool], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_tag: typing.Callable[[str], Any] = None,
    on_target: typing.Callable[[str], Any] = None,
    on_text_color: typing.Callable[[str], Any] = None,
    on_to: typing.Callable[[typing.Union[str, dict]], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
    on_x_large: typing.Callable[[bool], Any] = None,
    on_x_small: typing.Callable[[bool], Any] = None,
) -> Element[ipyvuetify.generated.Chip]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        active=active,
        active_class=active_class,
        append=append,
        attributes=attributes,
        children=children,
        class_=class_,
        close=close,
        close_icon=close_icon,
        color=color,
        dark=dark,
        disabled=disabled,
        draggable=draggable,
        exact=exact,
        exact_active_class=exact_active_class,
        filter=filter,
        filter_icon=filter_icon,
        href=href,
        input_value=input_value,
        label=label,
        large=large,
        layout=layout,
        light=light,
        link=link,
        nuxt=nuxt,
        outlined=outlined,
        pill=pill,
        replace=replace,
        ripple=ripple,
        slot=slot,
        small=small,
        style_=style_,
        tag=tag,
        target=target,
        text_color=text_color,
        to=to,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        x_large=x_large,
        x_small=x_small,
        on_active=on_active,
        on_active_class=on_active_class,
        on_append=on_append,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_close=on_close,
        on_close_icon=on_close_icon,
        on_color=on_color,
        on_dark=on_dark,
        on_disabled=on_disabled,
        on_draggable=on_draggable,
        on_exact=on_exact,
        on_exact_active_class=on_exact_active_class,
        on_filter=on_filter,
        on_filter_icon=on_filter_icon,
        on_href=on_href,
        on_input_value=on_input_value,
        on_label=on_label,
        on_large=on_large,
        on_layout=on_layout,
        on_light=on_light,
        on_link=on_link,
        on_nuxt=on_nuxt,
        on_outlined=on_outlined,
        on_pill=on_pill,
        on_replace=on_replace,
        on_ripple=on_ripple,
        on_slot=on_slot,
        on_small=on_small,
        on_style_=on_style_,
        on_tag=on_tag,
        on_target=on_target,
        on_text_color=on_text_color,
        on_to=on_to,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
        on_x_large=on_x_large,
        on_x_small=on_x_small,
    )
    widget_cls = ipyvuetify.generated.Chip
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def ChipGroup(
    active_class: str = None,
    attributes: dict = {},
    center_active: bool = None,
    children: list = [],
    class_: str = None,
    color: str = None,
    column: bool = None,
    dark: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    mandatory: bool = None,
    max: typing.Union[float, str] = None,
    mobile_break_point: typing.Union[float, str] = None,
    multiple: bool = None,
    next_icon: str = None,
    prev_icon: str = None,
    show_arrows: bool = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: Any = None,
    on_active_class: typing.Callable[[str], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_center_active: typing.Callable[[bool], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_column: typing.Callable[[bool], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_mandatory: typing.Callable[[bool], Any] = None,
    on_max: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_mobile_break_point: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_multiple: typing.Callable[[bool], Any] = None,
    on_next_icon: typing.Callable[[str], Any] = None,
    on_prev_icon: typing.Callable[[str], Any] = None,
    on_show_arrows: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
) -> Element[ipyvuetify.generated.ChipGroup]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        active_class=active_class,
        attributes=attributes,
        center_active=center_active,
        children=children,
        class_=class_,
        color=color,
        column=column,
        dark=dark,
        layout=layout,
        light=light,
        mandatory=mandatory,
        max=max,
        mobile_break_point=mobile_break_point,
        multiple=multiple,
        next_icon=next_icon,
        prev_icon=prev_icon,
        show_arrows=show_arrows,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        on_active_class=on_active_class,
        on_attributes=on_attributes,
        on_center_active=on_center_active,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_column=on_column,
        on_dark=on_dark,
        on_layout=on_layout,
        on_light=on_light,
        on_mandatory=on_mandatory,
        on_max=on_max,
        on_mobile_break_point=on_mobile_break_point,
        on_multiple=on_multiple,
        on_next_icon=on_next_icon,
        on_prev_icon=on_prev_icon,
        on_show_arrows=on_show_arrows,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.ChipGroup
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Col(
    align_self: str = None,
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    cols: typing.Union[bool, str, float] = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    lg: typing.Union[bool, str, float] = None,
    md: typing.Union[bool, str, float] = None,
    offset: typing.Union[str, float] = None,
    offset_lg: typing.Union[str, float] = None,
    offset_md: typing.Union[str, float] = None,
    offset_sm: typing.Union[str, float] = None,
    offset_xl: typing.Union[str, float] = None,
    order: typing.Union[str, float] = None,
    order_lg: typing.Union[str, float] = None,
    order_md: typing.Union[str, float] = None,
    order_sm: typing.Union[str, float] = None,
    order_xl: typing.Union[str, float] = None,
    slot: str = None,
    sm: typing.Union[bool, str, float] = None,
    style_: str = None,
    tag: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    xl: typing.Union[bool, str, float] = None,
    on_align_self: typing.Callable[[str], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_cols: typing.Callable[[typing.Union[bool, str, float]], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_lg: typing.Callable[[typing.Union[bool, str, float]], Any] = None,
    on_md: typing.Callable[[typing.Union[bool, str, float]], Any] = None,
    on_offset: typing.Callable[[typing.Union[str, float]], Any] = None,
    on_offset_lg: typing.Callable[[typing.Union[str, float]], Any] = None,
    on_offset_md: typing.Callable[[typing.Union[str, float]], Any] = None,
    on_offset_sm: typing.Callable[[typing.Union[str, float]], Any] = None,
    on_offset_xl: typing.Callable[[typing.Union[str, float]], Any] = None,
    on_order: typing.Callable[[typing.Union[str, float]], Any] = None,
    on_order_lg: typing.Callable[[typing.Union[str, float]], Any] = None,
    on_order_md: typing.Callable[[typing.Union[str, float]], Any] = None,
    on_order_sm: typing.Callable[[typing.Union[str, float]], Any] = None,
    on_order_xl: typing.Callable[[typing.Union[str, float]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_sm: typing.Callable[[typing.Union[bool, str, float]], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_tag: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_xl: typing.Callable[[typing.Union[bool, str, float]], Any] = None,
) -> Element[ipyvuetify.generated.Col]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        align_self=align_self,
        attributes=attributes,
        children=children,
        class_=class_,
        cols=cols,
        layout=layout,
        lg=lg,
        md=md,
        offset=offset,
        offset_lg=offset_lg,
        offset_md=offset_md,
        offset_sm=offset_sm,
        offset_xl=offset_xl,
        order=order,
        order_lg=order_lg,
        order_md=order_md,
        order_sm=order_sm,
        order_xl=order_xl,
        slot=slot,
        sm=sm,
        style_=style_,
        tag=tag,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        xl=xl,
        on_align_self=on_align_self,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_cols=on_cols,
        on_layout=on_layout,
        on_lg=on_lg,
        on_md=on_md,
        on_offset=on_offset,
        on_offset_lg=on_offset_lg,
        on_offset_md=on_offset_md,
        on_offset_sm=on_offset_sm,
        on_offset_xl=on_offset_xl,
        on_order=on_order,
        on_order_lg=on_order_lg,
        on_order_md=on_order_md,
        on_order_sm=on_order_sm,
        on_order_xl=on_order_xl,
        on_slot=on_slot,
        on_sm=on_sm,
        on_style_=on_style_,
        on_tag=on_tag,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_xl=on_xl,
    )
    widget_cls = ipyvuetify.generated.Col
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def ColorPicker(
    attributes: dict = {},
    canvas_height: typing.Union[str, float] = None,
    children: list = [],
    class_: str = None,
    dark: bool = None,
    disabled: bool = None,
    dot_size: typing.Union[float, str] = None,
    flat: bool = None,
    hide_canvas: bool = None,
    hide_inputs: bool = None,
    hide_mode_switch: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    mode: str = None,
    show_swatches: bool = None,
    slot: str = None,
    style_: str = None,
    swatches: list = [],
    swatches_max_height: typing.Union[float, str] = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: typing.Union[dict, str] = None,
    width: typing.Union[float, str] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_canvas_height: typing.Callable[[typing.Union[str, float]], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_dot_size: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_flat: typing.Callable[[bool], Any] = None,
    on_hide_canvas: typing.Callable[[bool], Any] = None,
    on_hide_inputs: typing.Callable[[bool], Any] = None,
    on_hide_mode_switch: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_mode: typing.Callable[[str], Any] = None,
    on_show_swatches: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_swatches: typing.Callable[[list], Any] = None,
    on_swatches_max_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[typing.Union[dict, str]], Any] = None,
    on_width: typing.Callable[[typing.Union[float, str]], Any] = None,
) -> Element[ipyvuetify.generated.ColorPicker]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        canvas_height=canvas_height,
        children=children,
        class_=class_,
        dark=dark,
        disabled=disabled,
        dot_size=dot_size,
        flat=flat,
        hide_canvas=hide_canvas,
        hide_inputs=hide_inputs,
        hide_mode_switch=hide_mode_switch,
        layout=layout,
        light=light,
        mode=mode,
        show_swatches=show_swatches,
        slot=slot,
        style_=style_,
        swatches=swatches,
        swatches_max_height=swatches_max_height,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        width=width,
        on_attributes=on_attributes,
        on_canvas_height=on_canvas_height,
        on_children=on_children,
        on_class_=on_class_,
        on_dark=on_dark,
        on_disabled=on_disabled,
        on_dot_size=on_dot_size,
        on_flat=on_flat,
        on_hide_canvas=on_hide_canvas,
        on_hide_inputs=on_hide_inputs,
        on_hide_mode_switch=on_hide_mode_switch,
        on_layout=on_layout,
        on_light=on_light,
        on_mode=on_mode,
        on_show_swatches=on_show_swatches,
        on_slot=on_slot,
        on_style_=on_style_,
        on_swatches=on_swatches,
        on_swatches_max_height=on_swatches_max_height,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
        on_width=on_width,
    )
    widget_cls = ipyvuetify.generated.ColorPicker
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def ColorPickerCanvas(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    color: dict = None,
    disabled: bool = None,
    dot_size: typing.Union[float, str] = None,
    height: typing.Union[float, str] = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    width: typing.Union[float, str] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[dict], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_dot_size: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_width: typing.Callable[[typing.Union[float, str]], Any] = None,
) -> Element[ipyvuetify.generated.ColorPickerCanvas]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        color=color,
        disabled=disabled,
        dot_size=dot_size,
        height=height,
        layout=layout,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        width=width,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_disabled=on_disabled,
        on_dot_size=on_dot_size,
        on_height=on_height,
        on_layout=on_layout,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_width=on_width,
    )
    widget_cls = ipyvuetify.generated.ColorPickerCanvas
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def ColorPickerSwatches(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    color: dict = None,
    dark: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    max_height: typing.Union[float, str] = None,
    max_width: typing.Union[float, str] = None,
    slot: str = None,
    style_: str = None,
    swatches: list = [],
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[dict], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_max_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_max_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_swatches: typing.Callable[[list], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.ColorPickerSwatches]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        color=color,
        dark=dark,
        layout=layout,
        light=light,
        max_height=max_height,
        max_width=max_width,
        slot=slot,
        style_=style_,
        swatches=swatches,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_dark=on_dark,
        on_layout=on_layout,
        on_light=on_light,
        on_max_height=on_max_height,
        on_max_width=on_max_width,
        on_slot=on_slot,
        on_style_=on_style_,
        on_swatches=on_swatches,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.ColorPickerSwatches
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Combobox(
    allow_overflow: bool = None,
    append_icon: str = None,
    append_outer_icon: str = None,
    attach: Any = None,
    attributes: dict = {},
    auto_select_first: bool = None,
    autofocus: bool = None,
    background_color: str = None,
    cache_items: bool = None,
    children: list = [],
    chips: bool = None,
    class_: str = None,
    clear_icon: str = None,
    clearable: bool = None,
    color: str = None,
    counter: typing.Union[bool, float, str] = None,
    dark: bool = None,
    deletable_chips: bool = None,
    delimiters: list = [],
    dense: bool = None,
    disable_lookup: bool = None,
    disabled: bool = None,
    eager: bool = None,
    error: bool = None,
    error_count: typing.Union[float, str] = None,
    error_messages: typing.Union[str, list] = None,
    filled: bool = None,
    flat: bool = None,
    full_width: bool = None,
    height: typing.Union[float, str] = None,
    hide_details: typing.Union[bool, str] = None,
    hide_no_data: bool = None,
    hide_selected: bool = None,
    hint: str = None,
    id: str = None,
    item_color: str = None,
    item_disabled: typing.Union[str, list] = None,
    item_text: typing.Union[str, list] = None,
    item_value: typing.Union[str, list] = None,
    items: list = [],
    label: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    loader_height: typing.Union[float, str] = None,
    loading: typing.Union[bool, str] = None,
    menu_props: typing.Union[str, list, dict] = None,
    messages: typing.Union[str, list] = None,
    multiple: bool = None,
    no_data_text: str = None,
    no_filter: bool = None,
    open_on_clear: bool = None,
    outlined: bool = None,
    persistent_hint: bool = None,
    placeholder: str = None,
    prefix: str = None,
    prepend_icon: str = None,
    prepend_inner_icon: str = None,
    readonly: bool = None,
    return_object: bool = None,
    reverse: bool = None,
    rounded: bool = None,
    rules: list = [],
    search_input: str = None,
    shaped: bool = None,
    single_line: bool = None,
    slot: str = None,
    small_chips: bool = None,
    solo: bool = None,
    solo_inverted: bool = None,
    style_: str = None,
    success: bool = None,
    success_messages: typing.Union[str, list] = None,
    suffix: str = None,
    type: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    validate_on_blur: bool = None,
    value: Any = None,
    on_allow_overflow: typing.Callable[[bool], Any] = None,
    on_append_icon: typing.Callable[[str], Any] = None,
    on_append_outer_icon: typing.Callable[[str], Any] = None,
    on_attach: typing.Callable[[Any], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_auto_select_first: typing.Callable[[bool], Any] = None,
    on_autofocus: typing.Callable[[bool], Any] = None,
    on_background_color: typing.Callable[[str], Any] = None,
    on_cache_items: typing.Callable[[bool], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_chips: typing.Callable[[bool], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_clear_icon: typing.Callable[[str], Any] = None,
    on_clearable: typing.Callable[[bool], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_counter: typing.Callable[[typing.Union[bool, float, str]], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_deletable_chips: typing.Callable[[bool], Any] = None,
    on_delimiters: typing.Callable[[list], Any] = None,
    on_dense: typing.Callable[[bool], Any] = None,
    on_disable_lookup: typing.Callable[[bool], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_eager: typing.Callable[[bool], Any] = None,
    on_error: typing.Callable[[bool], Any] = None,
    on_error_count: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_error_messages: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_filled: typing.Callable[[bool], Any] = None,
    on_flat: typing.Callable[[bool], Any] = None,
    on_full_width: typing.Callable[[bool], Any] = None,
    on_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_hide_details: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_hide_no_data: typing.Callable[[bool], Any] = None,
    on_hide_selected: typing.Callable[[bool], Any] = None,
    on_hint: typing.Callable[[str], Any] = None,
    on_id: typing.Callable[[str], Any] = None,
    on_item_color: typing.Callable[[str], Any] = None,
    on_item_disabled: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_item_text: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_item_value: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_items: typing.Callable[[list], Any] = None,
    on_label: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_loader_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_loading: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_menu_props: typing.Callable[[typing.Union[str, list, dict]], Any] = None,
    on_messages: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_multiple: typing.Callable[[bool], Any] = None,
    on_no_data_text: typing.Callable[[str], Any] = None,
    on_no_filter: typing.Callable[[bool], Any] = None,
    on_open_on_clear: typing.Callable[[bool], Any] = None,
    on_outlined: typing.Callable[[bool], Any] = None,
    on_persistent_hint: typing.Callable[[bool], Any] = None,
    on_placeholder: typing.Callable[[str], Any] = None,
    on_prefix: typing.Callable[[str], Any] = None,
    on_prepend_icon: typing.Callable[[str], Any] = None,
    on_prepend_inner_icon: typing.Callable[[str], Any] = None,
    on_readonly: typing.Callable[[bool], Any] = None,
    on_return_object: typing.Callable[[bool], Any] = None,
    on_reverse: typing.Callable[[bool], Any] = None,
    on_rounded: typing.Callable[[bool], Any] = None,
    on_rules: typing.Callable[[list], Any] = None,
    on_search_input: typing.Callable[[str], Any] = None,
    on_shaped: typing.Callable[[bool], Any] = None,
    on_single_line: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_small_chips: typing.Callable[[bool], Any] = None,
    on_solo: typing.Callable[[bool], Any] = None,
    on_solo_inverted: typing.Callable[[bool], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_success: typing.Callable[[bool], Any] = None,
    on_success_messages: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_suffix: typing.Callable[[str], Any] = None,
    on_type: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_validate_on_blur: typing.Callable[[bool], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
) -> Element[ipyvuetify.generated.Combobox]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        allow_overflow=allow_overflow,
        append_icon=append_icon,
        append_outer_icon=append_outer_icon,
        attach=attach,
        attributes=attributes,
        auto_select_first=auto_select_first,
        autofocus=autofocus,
        background_color=background_color,
        cache_items=cache_items,
        children=children,
        chips=chips,
        class_=class_,
        clear_icon=clear_icon,
        clearable=clearable,
        color=color,
        counter=counter,
        dark=dark,
        deletable_chips=deletable_chips,
        delimiters=delimiters,
        dense=dense,
        disable_lookup=disable_lookup,
        disabled=disabled,
        eager=eager,
        error=error,
        error_count=error_count,
        error_messages=error_messages,
        filled=filled,
        flat=flat,
        full_width=full_width,
        height=height,
        hide_details=hide_details,
        hide_no_data=hide_no_data,
        hide_selected=hide_selected,
        hint=hint,
        id=id,
        item_color=item_color,
        item_disabled=item_disabled,
        item_text=item_text,
        item_value=item_value,
        items=items,
        label=label,
        layout=layout,
        light=light,
        loader_height=loader_height,
        loading=loading,
        menu_props=menu_props,
        messages=messages,
        multiple=multiple,
        no_data_text=no_data_text,
        no_filter=no_filter,
        open_on_clear=open_on_clear,
        outlined=outlined,
        persistent_hint=persistent_hint,
        placeholder=placeholder,
        prefix=prefix,
        prepend_icon=prepend_icon,
        prepend_inner_icon=prepend_inner_icon,
        readonly=readonly,
        return_object=return_object,
        reverse=reverse,
        rounded=rounded,
        rules=rules,
        search_input=search_input,
        shaped=shaped,
        single_line=single_line,
        slot=slot,
        small_chips=small_chips,
        solo=solo,
        solo_inverted=solo_inverted,
        style_=style_,
        success=success,
        success_messages=success_messages,
        suffix=suffix,
        type=type,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        validate_on_blur=validate_on_blur,
        value=value,
        on_allow_overflow=on_allow_overflow,
        on_append_icon=on_append_icon,
        on_append_outer_icon=on_append_outer_icon,
        on_attach=on_attach,
        on_attributes=on_attributes,
        on_auto_select_first=on_auto_select_first,
        on_autofocus=on_autofocus,
        on_background_color=on_background_color,
        on_cache_items=on_cache_items,
        on_children=on_children,
        on_chips=on_chips,
        on_class_=on_class_,
        on_clear_icon=on_clear_icon,
        on_clearable=on_clearable,
        on_color=on_color,
        on_counter=on_counter,
        on_dark=on_dark,
        on_deletable_chips=on_deletable_chips,
        on_delimiters=on_delimiters,
        on_dense=on_dense,
        on_disable_lookup=on_disable_lookup,
        on_disabled=on_disabled,
        on_eager=on_eager,
        on_error=on_error,
        on_error_count=on_error_count,
        on_error_messages=on_error_messages,
        on_filled=on_filled,
        on_flat=on_flat,
        on_full_width=on_full_width,
        on_height=on_height,
        on_hide_details=on_hide_details,
        on_hide_no_data=on_hide_no_data,
        on_hide_selected=on_hide_selected,
        on_hint=on_hint,
        on_id=on_id,
        on_item_color=on_item_color,
        on_item_disabled=on_item_disabled,
        on_item_text=on_item_text,
        on_item_value=on_item_value,
        on_items=on_items,
        on_label=on_label,
        on_layout=on_layout,
        on_light=on_light,
        on_loader_height=on_loader_height,
        on_loading=on_loading,
        on_menu_props=on_menu_props,
        on_messages=on_messages,
        on_multiple=on_multiple,
        on_no_data_text=on_no_data_text,
        on_no_filter=on_no_filter,
        on_open_on_clear=on_open_on_clear,
        on_outlined=on_outlined,
        on_persistent_hint=on_persistent_hint,
        on_placeholder=on_placeholder,
        on_prefix=on_prefix,
        on_prepend_icon=on_prepend_icon,
        on_prepend_inner_icon=on_prepend_inner_icon,
        on_readonly=on_readonly,
        on_return_object=on_return_object,
        on_reverse=on_reverse,
        on_rounded=on_rounded,
        on_rules=on_rules,
        on_search_input=on_search_input,
        on_shaped=on_shaped,
        on_single_line=on_single_line,
        on_slot=on_slot,
        on_small_chips=on_small_chips,
        on_solo=on_solo,
        on_solo_inverted=on_solo_inverted,
        on_style_=on_style_,
        on_success=on_success,
        on_success_messages=on_success_messages,
        on_suffix=on_suffix,
        on_type=on_type,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_validate_on_blur=on_validate_on_blur,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.Combobox
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Container(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    fluid: bool = None,
    id: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    ma_0: bool = None,
    ma_1: bool = None,
    ma_2: bool = None,
    ma_3: bool = None,
    ma_4: bool = None,
    ma_5: bool = None,
    ma_auto: bool = None,
    mb_0: bool = None,
    mb_1: bool = None,
    mb_2: bool = None,
    mb_3: bool = None,
    mb_4: bool = None,
    mb_5: bool = None,
    mb_auto: bool = None,
    ml_0: bool = None,
    ml_1: bool = None,
    ml_2: bool = None,
    ml_3: bool = None,
    ml_4: bool = None,
    ml_5: bool = None,
    ml_auto: bool = None,
    mr_0: bool = None,
    mr_1: bool = None,
    mr_2: bool = None,
    mr_3: bool = None,
    mr_4: bool = None,
    mr_5: bool = None,
    mr_auto: bool = None,
    mt_0: bool = None,
    mt_1: bool = None,
    mt_2: bool = None,
    mt_3: bool = None,
    mt_4: bool = None,
    mt_5: bool = None,
    mt_auto: bool = None,
    mx_0: bool = None,
    mx_1: bool = None,
    mx_2: bool = None,
    mx_3: bool = None,
    mx_4: bool = None,
    mx_5: bool = None,
    mx_auto: bool = None,
    my_0: bool = None,
    my_1: bool = None,
    my_2: bool = None,
    my_3: bool = None,
    my_4: bool = None,
    my_5: bool = None,
    my_auto: bool = None,
    pa_0: bool = None,
    pa_1: bool = None,
    pa_2: bool = None,
    pa_3: bool = None,
    pa_4: bool = None,
    pa_5: bool = None,
    pa_auto: bool = None,
    pb_0: bool = None,
    pb_1: bool = None,
    pb_2: bool = None,
    pb_3: bool = None,
    pb_4: bool = None,
    pb_5: bool = None,
    pb_auto: bool = None,
    pl_0: bool = None,
    pl_1: bool = None,
    pl_2: bool = None,
    pl_3: bool = None,
    pl_4: bool = None,
    pl_5: bool = None,
    pl_auto: bool = None,
    pr_0: bool = None,
    pr_1: bool = None,
    pr_2: bool = None,
    pr_3: bool = None,
    pr_4: bool = None,
    pr_5: bool = None,
    pr_auto: bool = None,
    pt_0: bool = None,
    pt_1: bool = None,
    pt_2: bool = None,
    pt_3: bool = None,
    pt_4: bool = None,
    pt_5: bool = None,
    pt_auto: bool = None,
    px_0: bool = None,
    px_1: bool = None,
    px_2: bool = None,
    px_3: bool = None,
    px_4: bool = None,
    px_5: bool = None,
    px_auto: bool = None,
    py_0: bool = None,
    py_1: bool = None,
    py_2: bool = None,
    py_3: bool = None,
    py_4: bool = None,
    py_5: bool = None,
    py_auto: bool = None,
    slot: str = None,
    style_: str = None,
    tag: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_fluid: typing.Callable[[bool], Any] = None,
    on_id: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_ma_0: typing.Callable[[bool], Any] = None,
    on_ma_1: typing.Callable[[bool], Any] = None,
    on_ma_2: typing.Callable[[bool], Any] = None,
    on_ma_3: typing.Callable[[bool], Any] = None,
    on_ma_4: typing.Callable[[bool], Any] = None,
    on_ma_5: typing.Callable[[bool], Any] = None,
    on_ma_auto: typing.Callable[[bool], Any] = None,
    on_mb_0: typing.Callable[[bool], Any] = None,
    on_mb_1: typing.Callable[[bool], Any] = None,
    on_mb_2: typing.Callable[[bool], Any] = None,
    on_mb_3: typing.Callable[[bool], Any] = None,
    on_mb_4: typing.Callable[[bool], Any] = None,
    on_mb_5: typing.Callable[[bool], Any] = None,
    on_mb_auto: typing.Callable[[bool], Any] = None,
    on_ml_0: typing.Callable[[bool], Any] = None,
    on_ml_1: typing.Callable[[bool], Any] = None,
    on_ml_2: typing.Callable[[bool], Any] = None,
    on_ml_3: typing.Callable[[bool], Any] = None,
    on_ml_4: typing.Callable[[bool], Any] = None,
    on_ml_5: typing.Callable[[bool], Any] = None,
    on_ml_auto: typing.Callable[[bool], Any] = None,
    on_mr_0: typing.Callable[[bool], Any] = None,
    on_mr_1: typing.Callable[[bool], Any] = None,
    on_mr_2: typing.Callable[[bool], Any] = None,
    on_mr_3: typing.Callable[[bool], Any] = None,
    on_mr_4: typing.Callable[[bool], Any] = None,
    on_mr_5: typing.Callable[[bool], Any] = None,
    on_mr_auto: typing.Callable[[bool], Any] = None,
    on_mt_0: typing.Callable[[bool], Any] = None,
    on_mt_1: typing.Callable[[bool], Any] = None,
    on_mt_2: typing.Callable[[bool], Any] = None,
    on_mt_3: typing.Callable[[bool], Any] = None,
    on_mt_4: typing.Callable[[bool], Any] = None,
    on_mt_5: typing.Callable[[bool], Any] = None,
    on_mt_auto: typing.Callable[[bool], Any] = None,
    on_mx_0: typing.Callable[[bool], Any] = None,
    on_mx_1: typing.Callable[[bool], Any] = None,
    on_mx_2: typing.Callable[[bool], Any] = None,
    on_mx_3: typing.Callable[[bool], Any] = None,
    on_mx_4: typing.Callable[[bool], Any] = None,
    on_mx_5: typing.Callable[[bool], Any] = None,
    on_mx_auto: typing.Callable[[bool], Any] = None,
    on_my_0: typing.Callable[[bool], Any] = None,
    on_my_1: typing.Callable[[bool], Any] = None,
    on_my_2: typing.Callable[[bool], Any] = None,
    on_my_3: typing.Callable[[bool], Any] = None,
    on_my_4: typing.Callable[[bool], Any] = None,
    on_my_5: typing.Callable[[bool], Any] = None,
    on_my_auto: typing.Callable[[bool], Any] = None,
    on_pa_0: typing.Callable[[bool], Any] = None,
    on_pa_1: typing.Callable[[bool], Any] = None,
    on_pa_2: typing.Callable[[bool], Any] = None,
    on_pa_3: typing.Callable[[bool], Any] = None,
    on_pa_4: typing.Callable[[bool], Any] = None,
    on_pa_5: typing.Callable[[bool], Any] = None,
    on_pa_auto: typing.Callable[[bool], Any] = None,
    on_pb_0: typing.Callable[[bool], Any] = None,
    on_pb_1: typing.Callable[[bool], Any] = None,
    on_pb_2: typing.Callable[[bool], Any] = None,
    on_pb_3: typing.Callable[[bool], Any] = None,
    on_pb_4: typing.Callable[[bool], Any] = None,
    on_pb_5: typing.Callable[[bool], Any] = None,
    on_pb_auto: typing.Callable[[bool], Any] = None,
    on_pl_0: typing.Callable[[bool], Any] = None,
    on_pl_1: typing.Callable[[bool], Any] = None,
    on_pl_2: typing.Callable[[bool], Any] = None,
    on_pl_3: typing.Callable[[bool], Any] = None,
    on_pl_4: typing.Callable[[bool], Any] = None,
    on_pl_5: typing.Callable[[bool], Any] = None,
    on_pl_auto: typing.Callable[[bool], Any] = None,
    on_pr_0: typing.Callable[[bool], Any] = None,
    on_pr_1: typing.Callable[[bool], Any] = None,
    on_pr_2: typing.Callable[[bool], Any] = None,
    on_pr_3: typing.Callable[[bool], Any] = None,
    on_pr_4: typing.Callable[[bool], Any] = None,
    on_pr_5: typing.Callable[[bool], Any] = None,
    on_pr_auto: typing.Callable[[bool], Any] = None,
    on_pt_0: typing.Callable[[bool], Any] = None,
    on_pt_1: typing.Callable[[bool], Any] = None,
    on_pt_2: typing.Callable[[bool], Any] = None,
    on_pt_3: typing.Callable[[bool], Any] = None,
    on_pt_4: typing.Callable[[bool], Any] = None,
    on_pt_5: typing.Callable[[bool], Any] = None,
    on_pt_auto: typing.Callable[[bool], Any] = None,
    on_px_0: typing.Callable[[bool], Any] = None,
    on_px_1: typing.Callable[[bool], Any] = None,
    on_px_2: typing.Callable[[bool], Any] = None,
    on_px_3: typing.Callable[[bool], Any] = None,
    on_px_4: typing.Callable[[bool], Any] = None,
    on_px_5: typing.Callable[[bool], Any] = None,
    on_px_auto: typing.Callable[[bool], Any] = None,
    on_py_0: typing.Callable[[bool], Any] = None,
    on_py_1: typing.Callable[[bool], Any] = None,
    on_py_2: typing.Callable[[bool], Any] = None,
    on_py_3: typing.Callable[[bool], Any] = None,
    on_py_4: typing.Callable[[bool], Any] = None,
    on_py_5: typing.Callable[[bool], Any] = None,
    on_py_auto: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_tag: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.Container]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        fluid=fluid,
        id=id,
        layout=layout,
        ma_0=ma_0,
        ma_1=ma_1,
        ma_2=ma_2,
        ma_3=ma_3,
        ma_4=ma_4,
        ma_5=ma_5,
        ma_auto=ma_auto,
        mb_0=mb_0,
        mb_1=mb_1,
        mb_2=mb_2,
        mb_3=mb_3,
        mb_4=mb_4,
        mb_5=mb_5,
        mb_auto=mb_auto,
        ml_0=ml_0,
        ml_1=ml_1,
        ml_2=ml_2,
        ml_3=ml_3,
        ml_4=ml_4,
        ml_5=ml_5,
        ml_auto=ml_auto,
        mr_0=mr_0,
        mr_1=mr_1,
        mr_2=mr_2,
        mr_3=mr_3,
        mr_4=mr_4,
        mr_5=mr_5,
        mr_auto=mr_auto,
        mt_0=mt_0,
        mt_1=mt_1,
        mt_2=mt_2,
        mt_3=mt_3,
        mt_4=mt_4,
        mt_5=mt_5,
        mt_auto=mt_auto,
        mx_0=mx_0,
        mx_1=mx_1,
        mx_2=mx_2,
        mx_3=mx_3,
        mx_4=mx_4,
        mx_5=mx_5,
        mx_auto=mx_auto,
        my_0=my_0,
        my_1=my_1,
        my_2=my_2,
        my_3=my_3,
        my_4=my_4,
        my_5=my_5,
        my_auto=my_auto,
        pa_0=pa_0,
        pa_1=pa_1,
        pa_2=pa_2,
        pa_3=pa_3,
        pa_4=pa_4,
        pa_5=pa_5,
        pa_auto=pa_auto,
        pb_0=pb_0,
        pb_1=pb_1,
        pb_2=pb_2,
        pb_3=pb_3,
        pb_4=pb_4,
        pb_5=pb_5,
        pb_auto=pb_auto,
        pl_0=pl_0,
        pl_1=pl_1,
        pl_2=pl_2,
        pl_3=pl_3,
        pl_4=pl_4,
        pl_5=pl_5,
        pl_auto=pl_auto,
        pr_0=pr_0,
        pr_1=pr_1,
        pr_2=pr_2,
        pr_3=pr_3,
        pr_4=pr_4,
        pr_5=pr_5,
        pr_auto=pr_auto,
        pt_0=pt_0,
        pt_1=pt_1,
        pt_2=pt_2,
        pt_3=pt_3,
        pt_4=pt_4,
        pt_5=pt_5,
        pt_auto=pt_auto,
        px_0=px_0,
        px_1=px_1,
        px_2=px_2,
        px_3=px_3,
        px_4=px_4,
        px_5=px_5,
        px_auto=px_auto,
        py_0=py_0,
        py_1=py_1,
        py_2=py_2,
        py_3=py_3,
        py_4=py_4,
        py_5=py_5,
        py_auto=py_auto,
        slot=slot,
        style_=style_,
        tag=tag,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_fluid=on_fluid,
        on_id=on_id,
        on_layout=on_layout,
        on_ma_0=on_ma_0,
        on_ma_1=on_ma_1,
        on_ma_2=on_ma_2,
        on_ma_3=on_ma_3,
        on_ma_4=on_ma_4,
        on_ma_5=on_ma_5,
        on_ma_auto=on_ma_auto,
        on_mb_0=on_mb_0,
        on_mb_1=on_mb_1,
        on_mb_2=on_mb_2,
        on_mb_3=on_mb_3,
        on_mb_4=on_mb_4,
        on_mb_5=on_mb_5,
        on_mb_auto=on_mb_auto,
        on_ml_0=on_ml_0,
        on_ml_1=on_ml_1,
        on_ml_2=on_ml_2,
        on_ml_3=on_ml_3,
        on_ml_4=on_ml_4,
        on_ml_5=on_ml_5,
        on_ml_auto=on_ml_auto,
        on_mr_0=on_mr_0,
        on_mr_1=on_mr_1,
        on_mr_2=on_mr_2,
        on_mr_3=on_mr_3,
        on_mr_4=on_mr_4,
        on_mr_5=on_mr_5,
        on_mr_auto=on_mr_auto,
        on_mt_0=on_mt_0,
        on_mt_1=on_mt_1,
        on_mt_2=on_mt_2,
        on_mt_3=on_mt_3,
        on_mt_4=on_mt_4,
        on_mt_5=on_mt_5,
        on_mt_auto=on_mt_auto,
        on_mx_0=on_mx_0,
        on_mx_1=on_mx_1,
        on_mx_2=on_mx_2,
        on_mx_3=on_mx_3,
        on_mx_4=on_mx_4,
        on_mx_5=on_mx_5,
        on_mx_auto=on_mx_auto,
        on_my_0=on_my_0,
        on_my_1=on_my_1,
        on_my_2=on_my_2,
        on_my_3=on_my_3,
        on_my_4=on_my_4,
        on_my_5=on_my_5,
        on_my_auto=on_my_auto,
        on_pa_0=on_pa_0,
        on_pa_1=on_pa_1,
        on_pa_2=on_pa_2,
        on_pa_3=on_pa_3,
        on_pa_4=on_pa_4,
        on_pa_5=on_pa_5,
        on_pa_auto=on_pa_auto,
        on_pb_0=on_pb_0,
        on_pb_1=on_pb_1,
        on_pb_2=on_pb_2,
        on_pb_3=on_pb_3,
        on_pb_4=on_pb_4,
        on_pb_5=on_pb_5,
        on_pb_auto=on_pb_auto,
        on_pl_0=on_pl_0,
        on_pl_1=on_pl_1,
        on_pl_2=on_pl_2,
        on_pl_3=on_pl_3,
        on_pl_4=on_pl_4,
        on_pl_5=on_pl_5,
        on_pl_auto=on_pl_auto,
        on_pr_0=on_pr_0,
        on_pr_1=on_pr_1,
        on_pr_2=on_pr_2,
        on_pr_3=on_pr_3,
        on_pr_4=on_pr_4,
        on_pr_5=on_pr_5,
        on_pr_auto=on_pr_auto,
        on_pt_0=on_pt_0,
        on_pt_1=on_pt_1,
        on_pt_2=on_pt_2,
        on_pt_3=on_pt_3,
        on_pt_4=on_pt_4,
        on_pt_5=on_pt_5,
        on_pt_auto=on_pt_auto,
        on_px_0=on_px_0,
        on_px_1=on_px_1,
        on_px_2=on_px_2,
        on_px_3=on_px_3,
        on_px_4=on_px_4,
        on_px_5=on_px_5,
        on_px_auto=on_px_auto,
        on_py_0=on_py_0,
        on_py_1=on_py_1,
        on_py_2=on_py_2,
        on_py_3=on_py_3,
        on_py_4=on_py_4,
        on_py_5=on_py_5,
        on_py_auto=on_py_auto,
        on_slot=on_slot,
        on_style_=on_style_,
        on_tag=on_tag,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.Container
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Content(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    ma_0: bool = None,
    ma_1: bool = None,
    ma_2: bool = None,
    ma_3: bool = None,
    ma_4: bool = None,
    ma_5: bool = None,
    ma_auto: bool = None,
    mb_0: bool = None,
    mb_1: bool = None,
    mb_2: bool = None,
    mb_3: bool = None,
    mb_4: bool = None,
    mb_5: bool = None,
    mb_auto: bool = None,
    ml_0: bool = None,
    ml_1: bool = None,
    ml_2: bool = None,
    ml_3: bool = None,
    ml_4: bool = None,
    ml_5: bool = None,
    ml_auto: bool = None,
    mr_0: bool = None,
    mr_1: bool = None,
    mr_2: bool = None,
    mr_3: bool = None,
    mr_4: bool = None,
    mr_5: bool = None,
    mr_auto: bool = None,
    mt_0: bool = None,
    mt_1: bool = None,
    mt_2: bool = None,
    mt_3: bool = None,
    mt_4: bool = None,
    mt_5: bool = None,
    mt_auto: bool = None,
    mx_0: bool = None,
    mx_1: bool = None,
    mx_2: bool = None,
    mx_3: bool = None,
    mx_4: bool = None,
    mx_5: bool = None,
    mx_auto: bool = None,
    my_0: bool = None,
    my_1: bool = None,
    my_2: bool = None,
    my_3: bool = None,
    my_4: bool = None,
    my_5: bool = None,
    my_auto: bool = None,
    pa_0: bool = None,
    pa_1: bool = None,
    pa_2: bool = None,
    pa_3: bool = None,
    pa_4: bool = None,
    pa_5: bool = None,
    pa_auto: bool = None,
    pb_0: bool = None,
    pb_1: bool = None,
    pb_2: bool = None,
    pb_3: bool = None,
    pb_4: bool = None,
    pb_5: bool = None,
    pb_auto: bool = None,
    pl_0: bool = None,
    pl_1: bool = None,
    pl_2: bool = None,
    pl_3: bool = None,
    pl_4: bool = None,
    pl_5: bool = None,
    pl_auto: bool = None,
    pr_0: bool = None,
    pr_1: bool = None,
    pr_2: bool = None,
    pr_3: bool = None,
    pr_4: bool = None,
    pr_5: bool = None,
    pr_auto: bool = None,
    pt_0: bool = None,
    pt_1: bool = None,
    pt_2: bool = None,
    pt_3: bool = None,
    pt_4: bool = None,
    pt_5: bool = None,
    pt_auto: bool = None,
    px_0: bool = None,
    px_1: bool = None,
    px_2: bool = None,
    px_3: bool = None,
    px_4: bool = None,
    px_5: bool = None,
    px_auto: bool = None,
    py_0: bool = None,
    py_1: bool = None,
    py_2: bool = None,
    py_3: bool = None,
    py_4: bool = None,
    py_5: bool = None,
    py_auto: bool = None,
    slot: str = None,
    style_: str = None,
    tag: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_ma_0: typing.Callable[[bool], Any] = None,
    on_ma_1: typing.Callable[[bool], Any] = None,
    on_ma_2: typing.Callable[[bool], Any] = None,
    on_ma_3: typing.Callable[[bool], Any] = None,
    on_ma_4: typing.Callable[[bool], Any] = None,
    on_ma_5: typing.Callable[[bool], Any] = None,
    on_ma_auto: typing.Callable[[bool], Any] = None,
    on_mb_0: typing.Callable[[bool], Any] = None,
    on_mb_1: typing.Callable[[bool], Any] = None,
    on_mb_2: typing.Callable[[bool], Any] = None,
    on_mb_3: typing.Callable[[bool], Any] = None,
    on_mb_4: typing.Callable[[bool], Any] = None,
    on_mb_5: typing.Callable[[bool], Any] = None,
    on_mb_auto: typing.Callable[[bool], Any] = None,
    on_ml_0: typing.Callable[[bool], Any] = None,
    on_ml_1: typing.Callable[[bool], Any] = None,
    on_ml_2: typing.Callable[[bool], Any] = None,
    on_ml_3: typing.Callable[[bool], Any] = None,
    on_ml_4: typing.Callable[[bool], Any] = None,
    on_ml_5: typing.Callable[[bool], Any] = None,
    on_ml_auto: typing.Callable[[bool], Any] = None,
    on_mr_0: typing.Callable[[bool], Any] = None,
    on_mr_1: typing.Callable[[bool], Any] = None,
    on_mr_2: typing.Callable[[bool], Any] = None,
    on_mr_3: typing.Callable[[bool], Any] = None,
    on_mr_4: typing.Callable[[bool], Any] = None,
    on_mr_5: typing.Callable[[bool], Any] = None,
    on_mr_auto: typing.Callable[[bool], Any] = None,
    on_mt_0: typing.Callable[[bool], Any] = None,
    on_mt_1: typing.Callable[[bool], Any] = None,
    on_mt_2: typing.Callable[[bool], Any] = None,
    on_mt_3: typing.Callable[[bool], Any] = None,
    on_mt_4: typing.Callable[[bool], Any] = None,
    on_mt_5: typing.Callable[[bool], Any] = None,
    on_mt_auto: typing.Callable[[bool], Any] = None,
    on_mx_0: typing.Callable[[bool], Any] = None,
    on_mx_1: typing.Callable[[bool], Any] = None,
    on_mx_2: typing.Callable[[bool], Any] = None,
    on_mx_3: typing.Callable[[bool], Any] = None,
    on_mx_4: typing.Callable[[bool], Any] = None,
    on_mx_5: typing.Callable[[bool], Any] = None,
    on_mx_auto: typing.Callable[[bool], Any] = None,
    on_my_0: typing.Callable[[bool], Any] = None,
    on_my_1: typing.Callable[[bool], Any] = None,
    on_my_2: typing.Callable[[bool], Any] = None,
    on_my_3: typing.Callable[[bool], Any] = None,
    on_my_4: typing.Callable[[bool], Any] = None,
    on_my_5: typing.Callable[[bool], Any] = None,
    on_my_auto: typing.Callable[[bool], Any] = None,
    on_pa_0: typing.Callable[[bool], Any] = None,
    on_pa_1: typing.Callable[[bool], Any] = None,
    on_pa_2: typing.Callable[[bool], Any] = None,
    on_pa_3: typing.Callable[[bool], Any] = None,
    on_pa_4: typing.Callable[[bool], Any] = None,
    on_pa_5: typing.Callable[[bool], Any] = None,
    on_pa_auto: typing.Callable[[bool], Any] = None,
    on_pb_0: typing.Callable[[bool], Any] = None,
    on_pb_1: typing.Callable[[bool], Any] = None,
    on_pb_2: typing.Callable[[bool], Any] = None,
    on_pb_3: typing.Callable[[bool], Any] = None,
    on_pb_4: typing.Callable[[bool], Any] = None,
    on_pb_5: typing.Callable[[bool], Any] = None,
    on_pb_auto: typing.Callable[[bool], Any] = None,
    on_pl_0: typing.Callable[[bool], Any] = None,
    on_pl_1: typing.Callable[[bool], Any] = None,
    on_pl_2: typing.Callable[[bool], Any] = None,
    on_pl_3: typing.Callable[[bool], Any] = None,
    on_pl_4: typing.Callable[[bool], Any] = None,
    on_pl_5: typing.Callable[[bool], Any] = None,
    on_pl_auto: typing.Callable[[bool], Any] = None,
    on_pr_0: typing.Callable[[bool], Any] = None,
    on_pr_1: typing.Callable[[bool], Any] = None,
    on_pr_2: typing.Callable[[bool], Any] = None,
    on_pr_3: typing.Callable[[bool], Any] = None,
    on_pr_4: typing.Callable[[bool], Any] = None,
    on_pr_5: typing.Callable[[bool], Any] = None,
    on_pr_auto: typing.Callable[[bool], Any] = None,
    on_pt_0: typing.Callable[[bool], Any] = None,
    on_pt_1: typing.Callable[[bool], Any] = None,
    on_pt_2: typing.Callable[[bool], Any] = None,
    on_pt_3: typing.Callable[[bool], Any] = None,
    on_pt_4: typing.Callable[[bool], Any] = None,
    on_pt_5: typing.Callable[[bool], Any] = None,
    on_pt_auto: typing.Callable[[bool], Any] = None,
    on_px_0: typing.Callable[[bool], Any] = None,
    on_px_1: typing.Callable[[bool], Any] = None,
    on_px_2: typing.Callable[[bool], Any] = None,
    on_px_3: typing.Callable[[bool], Any] = None,
    on_px_4: typing.Callable[[bool], Any] = None,
    on_px_5: typing.Callable[[bool], Any] = None,
    on_px_auto: typing.Callable[[bool], Any] = None,
    on_py_0: typing.Callable[[bool], Any] = None,
    on_py_1: typing.Callable[[bool], Any] = None,
    on_py_2: typing.Callable[[bool], Any] = None,
    on_py_3: typing.Callable[[bool], Any] = None,
    on_py_4: typing.Callable[[bool], Any] = None,
    on_py_5: typing.Callable[[bool], Any] = None,
    on_py_auto: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_tag: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.Content]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        layout=layout,
        ma_0=ma_0,
        ma_1=ma_1,
        ma_2=ma_2,
        ma_3=ma_3,
        ma_4=ma_4,
        ma_5=ma_5,
        ma_auto=ma_auto,
        mb_0=mb_0,
        mb_1=mb_1,
        mb_2=mb_2,
        mb_3=mb_3,
        mb_4=mb_4,
        mb_5=mb_5,
        mb_auto=mb_auto,
        ml_0=ml_0,
        ml_1=ml_1,
        ml_2=ml_2,
        ml_3=ml_3,
        ml_4=ml_4,
        ml_5=ml_5,
        ml_auto=ml_auto,
        mr_0=mr_0,
        mr_1=mr_1,
        mr_2=mr_2,
        mr_3=mr_3,
        mr_4=mr_4,
        mr_5=mr_5,
        mr_auto=mr_auto,
        mt_0=mt_0,
        mt_1=mt_1,
        mt_2=mt_2,
        mt_3=mt_3,
        mt_4=mt_4,
        mt_5=mt_5,
        mt_auto=mt_auto,
        mx_0=mx_0,
        mx_1=mx_1,
        mx_2=mx_2,
        mx_3=mx_3,
        mx_4=mx_4,
        mx_5=mx_5,
        mx_auto=mx_auto,
        my_0=my_0,
        my_1=my_1,
        my_2=my_2,
        my_3=my_3,
        my_4=my_4,
        my_5=my_5,
        my_auto=my_auto,
        pa_0=pa_0,
        pa_1=pa_1,
        pa_2=pa_2,
        pa_3=pa_3,
        pa_4=pa_4,
        pa_5=pa_5,
        pa_auto=pa_auto,
        pb_0=pb_0,
        pb_1=pb_1,
        pb_2=pb_2,
        pb_3=pb_3,
        pb_4=pb_4,
        pb_5=pb_5,
        pb_auto=pb_auto,
        pl_0=pl_0,
        pl_1=pl_1,
        pl_2=pl_2,
        pl_3=pl_3,
        pl_4=pl_4,
        pl_5=pl_5,
        pl_auto=pl_auto,
        pr_0=pr_0,
        pr_1=pr_1,
        pr_2=pr_2,
        pr_3=pr_3,
        pr_4=pr_4,
        pr_5=pr_5,
        pr_auto=pr_auto,
        pt_0=pt_0,
        pt_1=pt_1,
        pt_2=pt_2,
        pt_3=pt_3,
        pt_4=pt_4,
        pt_5=pt_5,
        pt_auto=pt_auto,
        px_0=px_0,
        px_1=px_1,
        px_2=px_2,
        px_3=px_3,
        px_4=px_4,
        px_5=px_5,
        px_auto=px_auto,
        py_0=py_0,
        py_1=py_1,
        py_2=py_2,
        py_3=py_3,
        py_4=py_4,
        py_5=py_5,
        py_auto=py_auto,
        slot=slot,
        style_=style_,
        tag=tag,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_layout=on_layout,
        on_ma_0=on_ma_0,
        on_ma_1=on_ma_1,
        on_ma_2=on_ma_2,
        on_ma_3=on_ma_3,
        on_ma_4=on_ma_4,
        on_ma_5=on_ma_5,
        on_ma_auto=on_ma_auto,
        on_mb_0=on_mb_0,
        on_mb_1=on_mb_1,
        on_mb_2=on_mb_2,
        on_mb_3=on_mb_3,
        on_mb_4=on_mb_4,
        on_mb_5=on_mb_5,
        on_mb_auto=on_mb_auto,
        on_ml_0=on_ml_0,
        on_ml_1=on_ml_1,
        on_ml_2=on_ml_2,
        on_ml_3=on_ml_3,
        on_ml_4=on_ml_4,
        on_ml_5=on_ml_5,
        on_ml_auto=on_ml_auto,
        on_mr_0=on_mr_0,
        on_mr_1=on_mr_1,
        on_mr_2=on_mr_2,
        on_mr_3=on_mr_3,
        on_mr_4=on_mr_4,
        on_mr_5=on_mr_5,
        on_mr_auto=on_mr_auto,
        on_mt_0=on_mt_0,
        on_mt_1=on_mt_1,
        on_mt_2=on_mt_2,
        on_mt_3=on_mt_3,
        on_mt_4=on_mt_4,
        on_mt_5=on_mt_5,
        on_mt_auto=on_mt_auto,
        on_mx_0=on_mx_0,
        on_mx_1=on_mx_1,
        on_mx_2=on_mx_2,
        on_mx_3=on_mx_3,
        on_mx_4=on_mx_4,
        on_mx_5=on_mx_5,
        on_mx_auto=on_mx_auto,
        on_my_0=on_my_0,
        on_my_1=on_my_1,
        on_my_2=on_my_2,
        on_my_3=on_my_3,
        on_my_4=on_my_4,
        on_my_5=on_my_5,
        on_my_auto=on_my_auto,
        on_pa_0=on_pa_0,
        on_pa_1=on_pa_1,
        on_pa_2=on_pa_2,
        on_pa_3=on_pa_3,
        on_pa_4=on_pa_4,
        on_pa_5=on_pa_5,
        on_pa_auto=on_pa_auto,
        on_pb_0=on_pb_0,
        on_pb_1=on_pb_1,
        on_pb_2=on_pb_2,
        on_pb_3=on_pb_3,
        on_pb_4=on_pb_4,
        on_pb_5=on_pb_5,
        on_pb_auto=on_pb_auto,
        on_pl_0=on_pl_0,
        on_pl_1=on_pl_1,
        on_pl_2=on_pl_2,
        on_pl_3=on_pl_3,
        on_pl_4=on_pl_4,
        on_pl_5=on_pl_5,
        on_pl_auto=on_pl_auto,
        on_pr_0=on_pr_0,
        on_pr_1=on_pr_1,
        on_pr_2=on_pr_2,
        on_pr_3=on_pr_3,
        on_pr_4=on_pr_4,
        on_pr_5=on_pr_5,
        on_pr_auto=on_pr_auto,
        on_pt_0=on_pt_0,
        on_pt_1=on_pt_1,
        on_pt_2=on_pt_2,
        on_pt_3=on_pt_3,
        on_pt_4=on_pt_4,
        on_pt_5=on_pt_5,
        on_pt_auto=on_pt_auto,
        on_px_0=on_px_0,
        on_px_1=on_px_1,
        on_px_2=on_px_2,
        on_px_3=on_px_3,
        on_px_4=on_px_4,
        on_px_5=on_px_5,
        on_px_auto=on_px_auto,
        on_py_0=on_py_0,
        on_py_1=on_py_1,
        on_py_2=on_py_2,
        on_py_3=on_py_3,
        on_py_4=on_py_4,
        on_py_5=on_py_5,
        on_py_auto=on_py_auto,
        on_slot=on_slot,
        on_style_=on_style_,
        on_tag=on_tag,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.Content
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Counter(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    dark: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    max: typing.Union[float, str] = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: typing.Union[float, str] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_max: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[typing.Union[float, str]], Any] = None,
) -> Element[ipyvuetify.generated.Counter]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        dark=dark,
        layout=layout,
        light=light,
        max=max,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_dark=on_dark,
        on_layout=on_layout,
        on_light=on_light,
        on_max=on_max,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.Counter
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Data(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    disable_filtering: bool = None,
    disable_pagination: bool = None,
    disable_sort: bool = None,
    group_by: typing.Union[str, list] = None,
    group_desc: typing.Union[bool, list] = None,
    items: list = [],
    items_per_page: float = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    locale: str = None,
    multi_sort: bool = None,
    must_sort: bool = None,
    options: dict = None,
    page: float = None,
    search: str = None,
    server_items_length: float = None,
    slot: str = None,
    sort_by: typing.Union[str, list] = None,
    sort_desc: typing.Union[bool, list] = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_disable_filtering: typing.Callable[[bool], Any] = None,
    on_disable_pagination: typing.Callable[[bool], Any] = None,
    on_disable_sort: typing.Callable[[bool], Any] = None,
    on_group_by: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_group_desc: typing.Callable[[typing.Union[bool, list]], Any] = None,
    on_items: typing.Callable[[list], Any] = None,
    on_items_per_page: typing.Callable[[float], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_locale: typing.Callable[[str], Any] = None,
    on_multi_sort: typing.Callable[[bool], Any] = None,
    on_must_sort: typing.Callable[[bool], Any] = None,
    on_options: typing.Callable[[dict], Any] = None,
    on_page: typing.Callable[[float], Any] = None,
    on_search: typing.Callable[[str], Any] = None,
    on_server_items_length: typing.Callable[[float], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_sort_by: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_sort_desc: typing.Callable[[typing.Union[bool, list]], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.Data]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        disable_filtering=disable_filtering,
        disable_pagination=disable_pagination,
        disable_sort=disable_sort,
        group_by=group_by,
        group_desc=group_desc,
        items=items,
        items_per_page=items_per_page,
        layout=layout,
        locale=locale,
        multi_sort=multi_sort,
        must_sort=must_sort,
        options=options,
        page=page,
        search=search,
        server_items_length=server_items_length,
        slot=slot,
        sort_by=sort_by,
        sort_desc=sort_desc,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_disable_filtering=on_disable_filtering,
        on_disable_pagination=on_disable_pagination,
        on_disable_sort=on_disable_sort,
        on_group_by=on_group_by,
        on_group_desc=on_group_desc,
        on_items=on_items,
        on_items_per_page=on_items_per_page,
        on_layout=on_layout,
        on_locale=on_locale,
        on_multi_sort=on_multi_sort,
        on_must_sort=on_must_sort,
        on_options=on_options,
        on_page=on_page,
        on_search=on_search,
        on_server_items_length=on_server_items_length,
        on_slot=on_slot,
        on_sort_by=on_sort_by,
        on_sort_desc=on_sort_desc,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.Data
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def DataFooter(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    disable_items_per_page: bool = None,
    disable_pagination: bool = None,
    first_icon: str = None,
    items_per_page_all_text: str = None,
    items_per_page_options: list = [],
    items_per_page_text: str = None,
    last_icon: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    next_icon: str = None,
    options: dict = None,
    page_text: str = None,
    pagination: dict = None,
    prev_icon: str = None,
    show_current_page: bool = None,
    show_first_last_page: bool = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_disable_items_per_page: typing.Callable[[bool], Any] = None,
    on_disable_pagination: typing.Callable[[bool], Any] = None,
    on_first_icon: typing.Callable[[str], Any] = None,
    on_items_per_page_all_text: typing.Callable[[str], Any] = None,
    on_items_per_page_options: typing.Callable[[list], Any] = None,
    on_items_per_page_text: typing.Callable[[str], Any] = None,
    on_last_icon: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_next_icon: typing.Callable[[str], Any] = None,
    on_options: typing.Callable[[dict], Any] = None,
    on_page_text: typing.Callable[[str], Any] = None,
    on_pagination: typing.Callable[[dict], Any] = None,
    on_prev_icon: typing.Callable[[str], Any] = None,
    on_show_current_page: typing.Callable[[bool], Any] = None,
    on_show_first_last_page: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.DataFooter]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        disable_items_per_page=disable_items_per_page,
        disable_pagination=disable_pagination,
        first_icon=first_icon,
        items_per_page_all_text=items_per_page_all_text,
        items_per_page_options=items_per_page_options,
        items_per_page_text=items_per_page_text,
        last_icon=last_icon,
        layout=layout,
        next_icon=next_icon,
        options=options,
        page_text=page_text,
        pagination=pagination,
        prev_icon=prev_icon,
        show_current_page=show_current_page,
        show_first_last_page=show_first_last_page,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_disable_items_per_page=on_disable_items_per_page,
        on_disable_pagination=on_disable_pagination,
        on_first_icon=on_first_icon,
        on_items_per_page_all_text=on_items_per_page_all_text,
        on_items_per_page_options=on_items_per_page_options,
        on_items_per_page_text=on_items_per_page_text,
        on_last_icon=on_last_icon,
        on_layout=on_layout,
        on_next_icon=on_next_icon,
        on_options=on_options,
        on_page_text=on_page_text,
        on_pagination=on_pagination,
        on_prev_icon=on_prev_icon,
        on_show_current_page=on_show_current_page,
        on_show_first_last_page=on_show_first_last_page,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.DataFooter
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def DataIterator(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    dark: bool = None,
    disable_filtering: bool = None,
    disable_pagination: bool = None,
    disable_sort: bool = None,
    expanded: list = [],
    footer_props: dict = None,
    group_by: typing.Union[str, list] = None,
    group_desc: typing.Union[bool, list] = None,
    hide_default_footer: bool = None,
    item_key: str = None,
    items: list = [],
    items_per_page: float = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    loading: typing.Union[bool, str] = None,
    loading_text: str = None,
    locale: str = None,
    mobile_breakpoint: typing.Union[float, str] = None,
    multi_sort: bool = None,
    must_sort: bool = None,
    no_data_text: str = None,
    no_results_text: str = None,
    options: dict = None,
    page: float = None,
    search: str = None,
    selectable_key: str = None,
    server_items_length: float = None,
    single_expand: bool = None,
    single_select: bool = None,
    slot: str = None,
    sort_by: typing.Union[str, list] = None,
    sort_desc: typing.Union[bool, list] = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_disable_filtering: typing.Callable[[bool], Any] = None,
    on_disable_pagination: typing.Callable[[bool], Any] = None,
    on_disable_sort: typing.Callable[[bool], Any] = None,
    on_expanded: typing.Callable[[list], Any] = None,
    on_footer_props: typing.Callable[[dict], Any] = None,
    on_group_by: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_group_desc: typing.Callable[[typing.Union[bool, list]], Any] = None,
    on_hide_default_footer: typing.Callable[[bool], Any] = None,
    on_item_key: typing.Callable[[str], Any] = None,
    on_items: typing.Callable[[list], Any] = None,
    on_items_per_page: typing.Callable[[float], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_loading: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_loading_text: typing.Callable[[str], Any] = None,
    on_locale: typing.Callable[[str], Any] = None,
    on_mobile_breakpoint: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_multi_sort: typing.Callable[[bool], Any] = None,
    on_must_sort: typing.Callable[[bool], Any] = None,
    on_no_data_text: typing.Callable[[str], Any] = None,
    on_no_results_text: typing.Callable[[str], Any] = None,
    on_options: typing.Callable[[dict], Any] = None,
    on_page: typing.Callable[[float], Any] = None,
    on_search: typing.Callable[[str], Any] = None,
    on_selectable_key: typing.Callable[[str], Any] = None,
    on_server_items_length: typing.Callable[[float], Any] = None,
    on_single_expand: typing.Callable[[bool], Any] = None,
    on_single_select: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_sort_by: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_sort_desc: typing.Callable[[typing.Union[bool, list]], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.DataIterator]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        dark=dark,
        disable_filtering=disable_filtering,
        disable_pagination=disable_pagination,
        disable_sort=disable_sort,
        expanded=expanded,
        footer_props=footer_props,
        group_by=group_by,
        group_desc=group_desc,
        hide_default_footer=hide_default_footer,
        item_key=item_key,
        items=items,
        items_per_page=items_per_page,
        layout=layout,
        light=light,
        loading=loading,
        loading_text=loading_text,
        locale=locale,
        mobile_breakpoint=mobile_breakpoint,
        multi_sort=multi_sort,
        must_sort=must_sort,
        no_data_text=no_data_text,
        no_results_text=no_results_text,
        options=options,
        page=page,
        search=search,
        selectable_key=selectable_key,
        server_items_length=server_items_length,
        single_expand=single_expand,
        single_select=single_select,
        slot=slot,
        sort_by=sort_by,
        sort_desc=sort_desc,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_dark=on_dark,
        on_disable_filtering=on_disable_filtering,
        on_disable_pagination=on_disable_pagination,
        on_disable_sort=on_disable_sort,
        on_expanded=on_expanded,
        on_footer_props=on_footer_props,
        on_group_by=on_group_by,
        on_group_desc=on_group_desc,
        on_hide_default_footer=on_hide_default_footer,
        on_item_key=on_item_key,
        on_items=on_items,
        on_items_per_page=on_items_per_page,
        on_layout=on_layout,
        on_light=on_light,
        on_loading=on_loading,
        on_loading_text=on_loading_text,
        on_locale=on_locale,
        on_mobile_breakpoint=on_mobile_breakpoint,
        on_multi_sort=on_multi_sort,
        on_must_sort=on_must_sort,
        on_no_data_text=on_no_data_text,
        on_no_results_text=on_no_results_text,
        on_options=on_options,
        on_page=on_page,
        on_search=on_search,
        on_selectable_key=on_selectable_key,
        on_server_items_length=on_server_items_length,
        on_single_expand=on_single_expand,
        on_single_select=on_single_select,
        on_slot=on_slot,
        on_sort_by=on_sort_by,
        on_sort_desc=on_sort_desc,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.DataIterator
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def DataTable(
    attributes: dict = {},
    calculate_widths: bool = None,
    caption: str = None,
    children: list = [],
    class_: str = None,
    dark: bool = None,
    dense: bool = None,
    disable_filtering: bool = None,
    disable_pagination: bool = None,
    disable_sort: bool = None,
    expand_icon: str = None,
    expanded: list = [],
    fixed_header: bool = None,
    footer_props: dict = None,
    group_by: typing.Union[str, list] = None,
    group_desc: typing.Union[bool, list] = None,
    header_props: dict = None,
    headers: list = [],
    headers_length: float = None,
    height: typing.Union[float, str] = None,
    hide_default_footer: bool = None,
    hide_default_header: bool = None,
    item_key: str = None,
    items: list = [],
    items_per_page: float = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    loading: typing.Union[bool, str] = None,
    loading_text: str = None,
    locale: str = None,
    mobile_breakpoint: typing.Union[float, str] = None,
    multi_sort: bool = None,
    must_sort: bool = None,
    no_data_text: str = None,
    no_results_text: str = None,
    options: dict = None,
    page: float = None,
    search: str = None,
    selectable_key: str = None,
    server_items_length: float = None,
    show_expand: bool = None,
    show_group_by: bool = None,
    show_select: bool = None,
    single_expand: bool = None,
    single_select: bool = None,
    slot: str = None,
    sort_by: typing.Union[str, list] = None,
    sort_desc: typing.Union[bool, list] = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_calculate_widths: typing.Callable[[bool], Any] = None,
    on_caption: typing.Callable[[str], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_dense: typing.Callable[[bool], Any] = None,
    on_disable_filtering: typing.Callable[[bool], Any] = None,
    on_disable_pagination: typing.Callable[[bool], Any] = None,
    on_disable_sort: typing.Callable[[bool], Any] = None,
    on_expand_icon: typing.Callable[[str], Any] = None,
    on_expanded: typing.Callable[[list], Any] = None,
    on_fixed_header: typing.Callable[[bool], Any] = None,
    on_footer_props: typing.Callable[[dict], Any] = None,
    on_group_by: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_group_desc: typing.Callable[[typing.Union[bool, list]], Any] = None,
    on_header_props: typing.Callable[[dict], Any] = None,
    on_headers: typing.Callable[[list], Any] = None,
    on_headers_length: typing.Callable[[float], Any] = None,
    on_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_hide_default_footer: typing.Callable[[bool], Any] = None,
    on_hide_default_header: typing.Callable[[bool], Any] = None,
    on_item_key: typing.Callable[[str], Any] = None,
    on_items: typing.Callable[[list], Any] = None,
    on_items_per_page: typing.Callable[[float], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_loading: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_loading_text: typing.Callable[[str], Any] = None,
    on_locale: typing.Callable[[str], Any] = None,
    on_mobile_breakpoint: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_multi_sort: typing.Callable[[bool], Any] = None,
    on_must_sort: typing.Callable[[bool], Any] = None,
    on_no_data_text: typing.Callable[[str], Any] = None,
    on_no_results_text: typing.Callable[[str], Any] = None,
    on_options: typing.Callable[[dict], Any] = None,
    on_page: typing.Callable[[float], Any] = None,
    on_search: typing.Callable[[str], Any] = None,
    on_selectable_key: typing.Callable[[str], Any] = None,
    on_server_items_length: typing.Callable[[float], Any] = None,
    on_show_expand: typing.Callable[[bool], Any] = None,
    on_show_group_by: typing.Callable[[bool], Any] = None,
    on_show_select: typing.Callable[[bool], Any] = None,
    on_single_expand: typing.Callable[[bool], Any] = None,
    on_single_select: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_sort_by: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_sort_desc: typing.Callable[[typing.Union[bool, list]], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.DataTable]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        calculate_widths=calculate_widths,
        caption=caption,
        children=children,
        class_=class_,
        dark=dark,
        dense=dense,
        disable_filtering=disable_filtering,
        disable_pagination=disable_pagination,
        disable_sort=disable_sort,
        expand_icon=expand_icon,
        expanded=expanded,
        fixed_header=fixed_header,
        footer_props=footer_props,
        group_by=group_by,
        group_desc=group_desc,
        header_props=header_props,
        headers=headers,
        headers_length=headers_length,
        height=height,
        hide_default_footer=hide_default_footer,
        hide_default_header=hide_default_header,
        item_key=item_key,
        items=items,
        items_per_page=items_per_page,
        layout=layout,
        light=light,
        loading=loading,
        loading_text=loading_text,
        locale=locale,
        mobile_breakpoint=mobile_breakpoint,
        multi_sort=multi_sort,
        must_sort=must_sort,
        no_data_text=no_data_text,
        no_results_text=no_results_text,
        options=options,
        page=page,
        search=search,
        selectable_key=selectable_key,
        server_items_length=server_items_length,
        show_expand=show_expand,
        show_group_by=show_group_by,
        show_select=show_select,
        single_expand=single_expand,
        single_select=single_select,
        slot=slot,
        sort_by=sort_by,
        sort_desc=sort_desc,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        on_attributes=on_attributes,
        on_calculate_widths=on_calculate_widths,
        on_caption=on_caption,
        on_children=on_children,
        on_class_=on_class_,
        on_dark=on_dark,
        on_dense=on_dense,
        on_disable_filtering=on_disable_filtering,
        on_disable_pagination=on_disable_pagination,
        on_disable_sort=on_disable_sort,
        on_expand_icon=on_expand_icon,
        on_expanded=on_expanded,
        on_fixed_header=on_fixed_header,
        on_footer_props=on_footer_props,
        on_group_by=on_group_by,
        on_group_desc=on_group_desc,
        on_header_props=on_header_props,
        on_headers=on_headers,
        on_headers_length=on_headers_length,
        on_height=on_height,
        on_hide_default_footer=on_hide_default_footer,
        on_hide_default_header=on_hide_default_header,
        on_item_key=on_item_key,
        on_items=on_items,
        on_items_per_page=on_items_per_page,
        on_layout=on_layout,
        on_light=on_light,
        on_loading=on_loading,
        on_loading_text=on_loading_text,
        on_locale=on_locale,
        on_mobile_breakpoint=on_mobile_breakpoint,
        on_multi_sort=on_multi_sort,
        on_must_sort=on_must_sort,
        on_no_data_text=on_no_data_text,
        on_no_results_text=on_no_results_text,
        on_options=on_options,
        on_page=on_page,
        on_search=on_search,
        on_selectable_key=on_selectable_key,
        on_server_items_length=on_server_items_length,
        on_show_expand=on_show_expand,
        on_show_group_by=on_show_group_by,
        on_show_select=on_show_select,
        on_single_expand=on_single_expand,
        on_single_select=on_single_select,
        on_slot=on_slot,
        on_sort_by=on_sort_by,
        on_sort_desc=on_sort_desc,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.DataTable
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def DataTableHeader(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    mobile: bool = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_mobile: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.DataTableHeader]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        layout=layout,
        mobile=mobile,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_layout=on_layout,
        on_mobile=on_mobile,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.DataTableHeader
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def DatePicker(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    color: str = None,
    dark: bool = None,
    disabled: bool = None,
    event_color: typing.Union[list, dict, str] = None,
    events: typing.Union[list, dict] = None,
    first_day_of_week: typing.Union[str, float] = None,
    full_width: bool = None,
    header_color: str = None,
    landscape: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    locale: str = None,
    locale_first_day_of_year: typing.Union[str, float] = None,
    max: str = None,
    min: str = None,
    multiple: bool = None,
    next_icon: str = None,
    no_title: bool = None,
    picker_date: str = None,
    prev_icon: str = None,
    range: bool = None,
    reactive: bool = None,
    readonly: bool = None,
    scrollable: bool = None,
    selected_items_text: str = None,
    show_current: typing.Union[bool, str] = None,
    show_week: bool = None,
    slot: str = None,
    style_: str = None,
    type: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: typing.Union[list, str] = None,
    width: typing.Union[float, str] = None,
    year_icon: str = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_event_color: typing.Callable[[typing.Union[list, dict, str]], Any] = None,
    on_events: typing.Callable[[typing.Union[list, dict]], Any] = None,
    on_first_day_of_week: typing.Callable[[typing.Union[str, float]], Any] = None,
    on_full_width: typing.Callable[[bool], Any] = None,
    on_header_color: typing.Callable[[str], Any] = None,
    on_landscape: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_locale: typing.Callable[[str], Any] = None,
    on_locale_first_day_of_year: typing.Callable[[typing.Union[str, float]], Any] = None,
    on_max: typing.Callable[[str], Any] = None,
    on_min: typing.Callable[[str], Any] = None,
    on_multiple: typing.Callable[[bool], Any] = None,
    on_next_icon: typing.Callable[[str], Any] = None,
    on_no_title: typing.Callable[[bool], Any] = None,
    on_picker_date: typing.Callable[[str], Any] = None,
    on_prev_icon: typing.Callable[[str], Any] = None,
    on_range: typing.Callable[[bool], Any] = None,
    on_reactive: typing.Callable[[bool], Any] = None,
    on_readonly: typing.Callable[[bool], Any] = None,
    on_scrollable: typing.Callable[[bool], Any] = None,
    on_selected_items_text: typing.Callable[[str], Any] = None,
    on_show_current: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_show_week: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_type: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[typing.Union[list, str]], Any] = None,
    on_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_year_icon: typing.Callable[[str], Any] = None,
) -> Element[ipyvuetify.generated.DatePicker]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        color=color,
        dark=dark,
        disabled=disabled,
        event_color=event_color,
        events=events,
        first_day_of_week=first_day_of_week,
        full_width=full_width,
        header_color=header_color,
        landscape=landscape,
        layout=layout,
        light=light,
        locale=locale,
        locale_first_day_of_year=locale_first_day_of_year,
        max=max,
        min=min,
        multiple=multiple,
        next_icon=next_icon,
        no_title=no_title,
        picker_date=picker_date,
        prev_icon=prev_icon,
        range=range,
        reactive=reactive,
        readonly=readonly,
        scrollable=scrollable,
        selected_items_text=selected_items_text,
        show_current=show_current,
        show_week=show_week,
        slot=slot,
        style_=style_,
        type=type,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        width=width,
        year_icon=year_icon,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_dark=on_dark,
        on_disabled=on_disabled,
        on_event_color=on_event_color,
        on_events=on_events,
        on_first_day_of_week=on_first_day_of_week,
        on_full_width=on_full_width,
        on_header_color=on_header_color,
        on_landscape=on_landscape,
        on_layout=on_layout,
        on_light=on_light,
        on_locale=on_locale,
        on_locale_first_day_of_year=on_locale_first_day_of_year,
        on_max=on_max,
        on_min=on_min,
        on_multiple=on_multiple,
        on_next_icon=on_next_icon,
        on_no_title=on_no_title,
        on_picker_date=on_picker_date,
        on_prev_icon=on_prev_icon,
        on_range=on_range,
        on_reactive=on_reactive,
        on_readonly=on_readonly,
        on_scrollable=on_scrollable,
        on_selected_items_text=on_selected_items_text,
        on_show_current=on_show_current,
        on_show_week=on_show_week,
        on_slot=on_slot,
        on_style_=on_style_,
        on_type=on_type,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
        on_width=on_width,
        on_year_icon=on_year_icon,
    )
    widget_cls = ipyvuetify.generated.DatePicker
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def DatePickerDateTable(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    color: str = None,
    current: str = None,
    dark: bool = None,
    disabled: bool = None,
    event_color: typing.Union[list, dict, str] = None,
    events: typing.Union[list, dict] = None,
    first_day_of_week: typing.Union[str, float] = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    locale: str = None,
    locale_first_day_of_year: typing.Union[str, float] = None,
    max: str = None,
    min: str = None,
    range: bool = None,
    readonly: bool = None,
    scrollable: bool = None,
    show_week: bool = None,
    slot: str = None,
    style_: str = None,
    table_date: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: typing.Union[str, list] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_current: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_event_color: typing.Callable[[typing.Union[list, dict, str]], Any] = None,
    on_events: typing.Callable[[typing.Union[list, dict]], Any] = None,
    on_first_day_of_week: typing.Callable[[typing.Union[str, float]], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_locale: typing.Callable[[str], Any] = None,
    on_locale_first_day_of_year: typing.Callable[[typing.Union[str, float]], Any] = None,
    on_max: typing.Callable[[str], Any] = None,
    on_min: typing.Callable[[str], Any] = None,
    on_range: typing.Callable[[bool], Any] = None,
    on_readonly: typing.Callable[[bool], Any] = None,
    on_scrollable: typing.Callable[[bool], Any] = None,
    on_show_week: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_table_date: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[typing.Union[str, list]], Any] = None,
) -> Element[ipyvuetify.generated.DatePickerDateTable]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        color=color,
        current=current,
        dark=dark,
        disabled=disabled,
        event_color=event_color,
        events=events,
        first_day_of_week=first_day_of_week,
        layout=layout,
        light=light,
        locale=locale,
        locale_first_day_of_year=locale_first_day_of_year,
        max=max,
        min=min,
        range=range,
        readonly=readonly,
        scrollable=scrollable,
        show_week=show_week,
        slot=slot,
        style_=style_,
        table_date=table_date,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_current=on_current,
        on_dark=on_dark,
        on_disabled=on_disabled,
        on_event_color=on_event_color,
        on_events=on_events,
        on_first_day_of_week=on_first_day_of_week,
        on_layout=on_layout,
        on_light=on_light,
        on_locale=on_locale,
        on_locale_first_day_of_year=on_locale_first_day_of_year,
        on_max=on_max,
        on_min=on_min,
        on_range=on_range,
        on_readonly=on_readonly,
        on_scrollable=on_scrollable,
        on_show_week=on_show_week,
        on_slot=on_slot,
        on_style_=on_style_,
        on_table_date=on_table_date,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.DatePickerDateTable
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def DatePickerHeader(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    color: str = None,
    dark: bool = None,
    disabled: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    locale: str = None,
    max: str = None,
    min: str = None,
    next_icon: str = None,
    prev_icon: str = None,
    readonly: bool = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: typing.Union[float, str] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_locale: typing.Callable[[str], Any] = None,
    on_max: typing.Callable[[str], Any] = None,
    on_min: typing.Callable[[str], Any] = None,
    on_next_icon: typing.Callable[[str], Any] = None,
    on_prev_icon: typing.Callable[[str], Any] = None,
    on_readonly: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[typing.Union[float, str]], Any] = None,
) -> Element[ipyvuetify.generated.DatePickerHeader]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        color=color,
        dark=dark,
        disabled=disabled,
        layout=layout,
        light=light,
        locale=locale,
        max=max,
        min=min,
        next_icon=next_icon,
        prev_icon=prev_icon,
        readonly=readonly,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_dark=on_dark,
        on_disabled=on_disabled,
        on_layout=on_layout,
        on_light=on_light,
        on_locale=on_locale,
        on_max=on_max,
        on_min=on_min,
        on_next_icon=on_next_icon,
        on_prev_icon=on_prev_icon,
        on_readonly=on_readonly,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.DatePickerHeader
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def DatePickerMonthTable(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    color: str = None,
    current: str = None,
    dark: bool = None,
    disabled: bool = None,
    event_color: typing.Union[list, dict, str] = None,
    events: typing.Union[list, dict] = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    locale: str = None,
    max: str = None,
    min: str = None,
    range: bool = None,
    readonly: bool = None,
    scrollable: bool = None,
    slot: str = None,
    style_: str = None,
    table_date: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: typing.Union[str, list] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_current: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_event_color: typing.Callable[[typing.Union[list, dict, str]], Any] = None,
    on_events: typing.Callable[[typing.Union[list, dict]], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_locale: typing.Callable[[str], Any] = None,
    on_max: typing.Callable[[str], Any] = None,
    on_min: typing.Callable[[str], Any] = None,
    on_range: typing.Callable[[bool], Any] = None,
    on_readonly: typing.Callable[[bool], Any] = None,
    on_scrollable: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_table_date: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[typing.Union[str, list]], Any] = None,
) -> Element[ipyvuetify.generated.DatePickerMonthTable]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        color=color,
        current=current,
        dark=dark,
        disabled=disabled,
        event_color=event_color,
        events=events,
        layout=layout,
        light=light,
        locale=locale,
        max=max,
        min=min,
        range=range,
        readonly=readonly,
        scrollable=scrollable,
        slot=slot,
        style_=style_,
        table_date=table_date,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_current=on_current,
        on_dark=on_dark,
        on_disabled=on_disabled,
        on_event_color=on_event_color,
        on_events=on_events,
        on_layout=on_layout,
        on_light=on_light,
        on_locale=on_locale,
        on_max=on_max,
        on_min=on_min,
        on_range=on_range,
        on_readonly=on_readonly,
        on_scrollable=on_scrollable,
        on_slot=on_slot,
        on_style_=on_style_,
        on_table_date=on_table_date,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.DatePickerMonthTable
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def DatePickerTitle(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    color: str = None,
    date: str = None,
    disabled: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    readonly: bool = None,
    selecting_year: bool = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: str = None,
    year: typing.Union[float, str] = None,
    year_icon: str = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_date: typing.Callable[[str], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_readonly: typing.Callable[[bool], Any] = None,
    on_selecting_year: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[str], Any] = None,
    on_year: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_year_icon: typing.Callable[[str], Any] = None,
) -> Element[ipyvuetify.generated.DatePickerTitle]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        color=color,
        date=date,
        disabled=disabled,
        layout=layout,
        readonly=readonly,
        selecting_year=selecting_year,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        year=year,
        year_icon=year_icon,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_date=on_date,
        on_disabled=on_disabled,
        on_layout=on_layout,
        on_readonly=on_readonly,
        on_selecting_year=on_selecting_year,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
        on_year=on_year,
        on_year_icon=on_year_icon,
    )
    widget_cls = ipyvuetify.generated.DatePickerTitle
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def DatePickerYears(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    color: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    locale: str = None,
    max: typing.Union[float, str] = None,
    min: typing.Union[float, str] = None,
    readonly: bool = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: typing.Union[float, str] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_locale: typing.Callable[[str], Any] = None,
    on_max: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_min: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_readonly: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[typing.Union[float, str]], Any] = None,
) -> Element[ipyvuetify.generated.DatePickerYears]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        color=color,
        layout=layout,
        locale=locale,
        max=max,
        min=min,
        readonly=readonly,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_layout=on_layout,
        on_locale=on_locale,
        on_max=on_max,
        on_min=on_min,
        on_readonly=on_readonly,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.DatePickerYears
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Dialog(
    activator: Any = None,
    attach: Any = None,
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    close_delay: typing.Union[float, str] = None,
    content_class: str = None,
    dark: bool = None,
    disabled: bool = None,
    eager: bool = None,
    fullscreen: bool = None,
    hide_overlay: bool = None,
    internal_activator: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    max_width: typing.Union[str, float] = None,
    no_click_animation: bool = None,
    open_delay: typing.Union[float, str] = None,
    open_on_hover: bool = None,
    origin: str = None,
    overlay_color: str = None,
    overlay_opacity: typing.Union[float, str] = None,
    persistent: bool = None,
    retain_focus: bool = None,
    return_value: Any = None,
    scrollable: bool = None,
    slot: str = None,
    style_: str = None,
    transition: typing.Union[str, bool] = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: Any = None,
    width: typing.Union[str, float] = None,
    on_activator: typing.Callable[[Any], Any] = None,
    on_attach: typing.Callable[[Any], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_close_delay: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_content_class: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_eager: typing.Callable[[bool], Any] = None,
    on_fullscreen: typing.Callable[[bool], Any] = None,
    on_hide_overlay: typing.Callable[[bool], Any] = None,
    on_internal_activator: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_max_width: typing.Callable[[typing.Union[str, float]], Any] = None,
    on_no_click_animation: typing.Callable[[bool], Any] = None,
    on_open_delay: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_open_on_hover: typing.Callable[[bool], Any] = None,
    on_origin: typing.Callable[[str], Any] = None,
    on_overlay_color: typing.Callable[[str], Any] = None,
    on_overlay_opacity: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_persistent: typing.Callable[[bool], Any] = None,
    on_retain_focus: typing.Callable[[bool], Any] = None,
    on_return_value: typing.Callable[[Any], Any] = None,
    on_scrollable: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_transition: typing.Callable[[typing.Union[str, bool]], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
    on_width: typing.Callable[[typing.Union[str, float]], Any] = None,
) -> Element[ipyvuetify.generated.Dialog]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        activator=activator,
        attach=attach,
        attributes=attributes,
        children=children,
        class_=class_,
        close_delay=close_delay,
        content_class=content_class,
        dark=dark,
        disabled=disabled,
        eager=eager,
        fullscreen=fullscreen,
        hide_overlay=hide_overlay,
        internal_activator=internal_activator,
        layout=layout,
        light=light,
        max_width=max_width,
        no_click_animation=no_click_animation,
        open_delay=open_delay,
        open_on_hover=open_on_hover,
        origin=origin,
        overlay_color=overlay_color,
        overlay_opacity=overlay_opacity,
        persistent=persistent,
        retain_focus=retain_focus,
        return_value=return_value,
        scrollable=scrollable,
        slot=slot,
        style_=style_,
        transition=transition,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        width=width,
        on_activator=on_activator,
        on_attach=on_attach,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_close_delay=on_close_delay,
        on_content_class=on_content_class,
        on_dark=on_dark,
        on_disabled=on_disabled,
        on_eager=on_eager,
        on_fullscreen=on_fullscreen,
        on_hide_overlay=on_hide_overlay,
        on_internal_activator=on_internal_activator,
        on_layout=on_layout,
        on_light=on_light,
        on_max_width=on_max_width,
        on_no_click_animation=on_no_click_animation,
        on_open_delay=on_open_delay,
        on_open_on_hover=on_open_on_hover,
        on_origin=on_origin,
        on_overlay_color=on_overlay_color,
        on_overlay_opacity=on_overlay_opacity,
        on_persistent=on_persistent,
        on_retain_focus=on_retain_focus,
        on_return_value=on_return_value,
        on_scrollable=on_scrollable,
        on_slot=on_slot,
        on_style_=on_style_,
        on_transition=on_transition,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
        on_width=on_width,
    )
    widget_cls = ipyvuetify.generated.Dialog
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def DialogBottomTransition(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    group: bool = None,
    hide_on_leave: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    leave_absolute: bool = None,
    mode: str = None,
    origin: str = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_group: typing.Callable[[bool], Any] = None,
    on_hide_on_leave: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_leave_absolute: typing.Callable[[bool], Any] = None,
    on_mode: typing.Callable[[str], Any] = None,
    on_origin: typing.Callable[[str], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.DialogBottomTransition]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        group=group,
        hide_on_leave=hide_on_leave,
        layout=layout,
        leave_absolute=leave_absolute,
        mode=mode,
        origin=origin,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_group=on_group,
        on_hide_on_leave=on_hide_on_leave,
        on_layout=on_layout,
        on_leave_absolute=on_leave_absolute,
        on_mode=on_mode,
        on_origin=on_origin,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.DialogBottomTransition
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def DialogTransition(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    group: bool = None,
    hide_on_leave: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    leave_absolute: bool = None,
    mode: str = None,
    origin: str = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_group: typing.Callable[[bool], Any] = None,
    on_hide_on_leave: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_leave_absolute: typing.Callable[[bool], Any] = None,
    on_mode: typing.Callable[[str], Any] = None,
    on_origin: typing.Callable[[str], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.DialogTransition]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        group=group,
        hide_on_leave=hide_on_leave,
        layout=layout,
        leave_absolute=leave_absolute,
        mode=mode,
        origin=origin,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_group=on_group,
        on_hide_on_leave=on_hide_on_leave,
        on_layout=on_layout,
        on_leave_absolute=on_leave_absolute,
        on_mode=on_mode,
        on_origin=on_origin,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.DialogTransition
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Divider(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    dark: bool = None,
    inset: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    vertical: bool = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_inset: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_vertical: typing.Callable[[bool], Any] = None,
) -> Element[ipyvuetify.generated.Divider]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        dark=dark,
        inset=inset,
        layout=layout,
        light=light,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        vertical=vertical,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_dark=on_dark,
        on_inset=on_inset,
        on_layout=on_layout,
        on_light=on_light,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_vertical=on_vertical,
    )
    widget_cls = ipyvuetify.generated.Divider
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def EditDialog(
    attributes: dict = {},
    cancel_text: Any = None,
    children: list = [],
    class_: str = None,
    dark: bool = None,
    eager: bool = None,
    large: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    persistent: bool = None,
    return_value: Any = None,
    save_text: Any = None,
    slot: str = None,
    style_: str = None,
    transition: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_cancel_text: typing.Callable[[Any], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_eager: typing.Callable[[bool], Any] = None,
    on_large: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_persistent: typing.Callable[[bool], Any] = None,
    on_return_value: typing.Callable[[Any], Any] = None,
    on_save_text: typing.Callable[[Any], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_transition: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.EditDialog]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        cancel_text=cancel_text,
        children=children,
        class_=class_,
        dark=dark,
        eager=eager,
        large=large,
        layout=layout,
        light=light,
        persistent=persistent,
        return_value=return_value,
        save_text=save_text,
        slot=slot,
        style_=style_,
        transition=transition,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_cancel_text=on_cancel_text,
        on_children=on_children,
        on_class_=on_class_,
        on_dark=on_dark,
        on_eager=on_eager,
        on_large=on_large,
        on_layout=on_layout,
        on_light=on_light,
        on_persistent=on_persistent,
        on_return_value=on_return_value,
        on_save_text=on_save_text,
        on_slot=on_slot,
        on_style_=on_style_,
        on_transition=on_transition,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.EditDialog
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def ExpandTransition(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    mode: str = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_mode: typing.Callable[[str], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.ExpandTransition]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        layout=layout,
        mode=mode,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_layout=on_layout,
        on_mode=on_mode,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.ExpandTransition
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def ExpandXTransition(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    mode: str = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_mode: typing.Callable[[str], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.ExpandXTransition]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        layout=layout,
        mode=mode,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_layout=on_layout,
        on_mode=on_mode,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.ExpandXTransition
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def ExpansionPanel(
    active_class: str = None,
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    disabled: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    readonly: bool = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_active_class: typing.Callable[[str], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_readonly: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.ExpansionPanel]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        active_class=active_class,
        attributes=attributes,
        children=children,
        class_=class_,
        disabled=disabled,
        layout=layout,
        readonly=readonly,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_active_class=on_active_class,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_disabled=on_disabled,
        on_layout=on_layout,
        on_readonly=on_readonly,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.ExpansionPanel
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def ExpansionPanelContent(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    color: str = None,
    eager: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_eager: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.ExpansionPanelContent]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        color=color,
        eager=eager,
        layout=layout,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_eager=on_eager,
        on_layout=on_layout,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.ExpansionPanelContent
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def ExpansionPanelHeader(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    color: str = None,
    disable_icon_rotate: bool = None,
    expand_icon: str = None,
    hide_actions: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    ripple: typing.Union[bool, dict] = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_disable_icon_rotate: typing.Callable[[bool], Any] = None,
    on_expand_icon: typing.Callable[[str], Any] = None,
    on_hide_actions: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_ripple: typing.Callable[[typing.Union[bool, dict]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.ExpansionPanelHeader]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        color=color,
        disable_icon_rotate=disable_icon_rotate,
        expand_icon=expand_icon,
        hide_actions=hide_actions,
        layout=layout,
        ripple=ripple,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_disable_icon_rotate=on_disable_icon_rotate,
        on_expand_icon=on_expand_icon,
        on_hide_actions=on_hide_actions,
        on_layout=on_layout,
        on_ripple=on_ripple,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.ExpansionPanelHeader
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def ExpansionPanels(
    accordion: bool = None,
    active_class: str = None,
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    dark: bool = None,
    disabled: bool = None,
    flat: bool = None,
    focusable: bool = None,
    hover: bool = None,
    inset: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    mandatory: bool = None,
    max: typing.Union[float, str] = None,
    multiple: bool = None,
    popout: bool = None,
    readonly: bool = None,
    slot: str = None,
    style_: str = None,
    tile: bool = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: Any = None,
    on_accordion: typing.Callable[[bool], Any] = None,
    on_active_class: typing.Callable[[str], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_flat: typing.Callable[[bool], Any] = None,
    on_focusable: typing.Callable[[bool], Any] = None,
    on_hover: typing.Callable[[bool], Any] = None,
    on_inset: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_mandatory: typing.Callable[[bool], Any] = None,
    on_max: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_multiple: typing.Callable[[bool], Any] = None,
    on_popout: typing.Callable[[bool], Any] = None,
    on_readonly: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_tile: typing.Callable[[bool], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
) -> Element[ipyvuetify.generated.ExpansionPanels]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        accordion=accordion,
        active_class=active_class,
        attributes=attributes,
        children=children,
        class_=class_,
        dark=dark,
        disabled=disabled,
        flat=flat,
        focusable=focusable,
        hover=hover,
        inset=inset,
        layout=layout,
        light=light,
        mandatory=mandatory,
        max=max,
        multiple=multiple,
        popout=popout,
        readonly=readonly,
        slot=slot,
        style_=style_,
        tile=tile,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        on_accordion=on_accordion,
        on_active_class=on_active_class,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_dark=on_dark,
        on_disabled=on_disabled,
        on_flat=on_flat,
        on_focusable=on_focusable,
        on_hover=on_hover,
        on_inset=on_inset,
        on_layout=on_layout,
        on_light=on_light,
        on_mandatory=on_mandatory,
        on_max=on_max,
        on_multiple=on_multiple,
        on_popout=on_popout,
        on_readonly=on_readonly,
        on_slot=on_slot,
        on_style_=on_style_,
        on_tile=on_tile,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.ExpansionPanels
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def FabTransition(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    group: bool = None,
    hide_on_leave: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    leave_absolute: bool = None,
    mode: str = None,
    origin: str = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_group: typing.Callable[[bool], Any] = None,
    on_hide_on_leave: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_leave_absolute: typing.Callable[[bool], Any] = None,
    on_mode: typing.Callable[[str], Any] = None,
    on_origin: typing.Callable[[str], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.FabTransition]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        group=group,
        hide_on_leave=hide_on_leave,
        layout=layout,
        leave_absolute=leave_absolute,
        mode=mode,
        origin=origin,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_group=on_group,
        on_hide_on_leave=on_hide_on_leave,
        on_layout=on_layout,
        on_leave_absolute=on_leave_absolute,
        on_mode=on_mode,
        on_origin=on_origin,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.FabTransition
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def FadeTransition(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    group: bool = None,
    hide_on_leave: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    leave_absolute: bool = None,
    mode: str = None,
    origin: str = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_group: typing.Callable[[bool], Any] = None,
    on_hide_on_leave: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_leave_absolute: typing.Callable[[bool], Any] = None,
    on_mode: typing.Callable[[str], Any] = None,
    on_origin: typing.Callable[[str], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.FadeTransition]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        group=group,
        hide_on_leave=hide_on_leave,
        layout=layout,
        leave_absolute=leave_absolute,
        mode=mode,
        origin=origin,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_group=on_group,
        on_hide_on_leave=on_hide_on_leave,
        on_layout=on_layout,
        on_leave_absolute=on_leave_absolute,
        on_mode=on_mode,
        on_origin=on_origin,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.FadeTransition
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def FileInput(
    append_icon: str = None,
    append_outer_icon: str = None,
    attributes: dict = {},
    autofocus: bool = None,
    background_color: str = None,
    children: list = [],
    chips: bool = None,
    class_: str = None,
    clear_icon: str = None,
    clearable: bool = None,
    color: str = None,
    counter: typing.Union[bool, float, str] = None,
    counter_size_string: str = None,
    counter_string: str = None,
    dark: bool = None,
    dense: bool = None,
    disabled: bool = None,
    error: bool = None,
    error_count: typing.Union[float, str] = None,
    error_messages: typing.Union[str, list] = None,
    filled: bool = None,
    flat: bool = None,
    full_width: bool = None,
    height: typing.Union[float, str] = None,
    hide_details: typing.Union[bool, str] = None,
    hint: str = None,
    id: str = None,
    label: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    loader_height: typing.Union[float, str] = None,
    loading: typing.Union[bool, str] = None,
    messages: typing.Union[str, list] = None,
    multiple: bool = None,
    outlined: bool = None,
    persistent_hint: bool = None,
    placeholder: str = None,
    prefix: str = None,
    prepend_icon: str = None,
    prepend_inner_icon: str = None,
    readonly: bool = None,
    reverse: bool = None,
    rounded: bool = None,
    rules: list = [],
    shaped: bool = None,
    show_size: typing.Union[bool, float] = None,
    single_line: bool = None,
    slot: str = None,
    small_chips: bool = None,
    solo: bool = None,
    solo_inverted: bool = None,
    style_: str = None,
    success: bool = None,
    success_messages: typing.Union[str, list] = None,
    suffix: str = None,
    truncate_length: typing.Union[float, str] = None,
    type: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    validate_on_blur: bool = None,
    value: Any = None,
    on_append_icon: typing.Callable[[str], Any] = None,
    on_append_outer_icon: typing.Callable[[str], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_autofocus: typing.Callable[[bool], Any] = None,
    on_background_color: typing.Callable[[str], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_chips: typing.Callable[[bool], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_clear_icon: typing.Callable[[str], Any] = None,
    on_clearable: typing.Callable[[bool], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_counter: typing.Callable[[typing.Union[bool, float, str]], Any] = None,
    on_counter_size_string: typing.Callable[[str], Any] = None,
    on_counter_string: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_dense: typing.Callable[[bool], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_error: typing.Callable[[bool], Any] = None,
    on_error_count: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_error_messages: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_filled: typing.Callable[[bool], Any] = None,
    on_flat: typing.Callable[[bool], Any] = None,
    on_full_width: typing.Callable[[bool], Any] = None,
    on_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_hide_details: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_hint: typing.Callable[[str], Any] = None,
    on_id: typing.Callable[[str], Any] = None,
    on_label: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_loader_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_loading: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_messages: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_multiple: typing.Callable[[bool], Any] = None,
    on_outlined: typing.Callable[[bool], Any] = None,
    on_persistent_hint: typing.Callable[[bool], Any] = None,
    on_placeholder: typing.Callable[[str], Any] = None,
    on_prefix: typing.Callable[[str], Any] = None,
    on_prepend_icon: typing.Callable[[str], Any] = None,
    on_prepend_inner_icon: typing.Callable[[str], Any] = None,
    on_readonly: typing.Callable[[bool], Any] = None,
    on_reverse: typing.Callable[[bool], Any] = None,
    on_rounded: typing.Callable[[bool], Any] = None,
    on_rules: typing.Callable[[list], Any] = None,
    on_shaped: typing.Callable[[bool], Any] = None,
    on_show_size: typing.Callable[[typing.Union[bool, float]], Any] = None,
    on_single_line: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_small_chips: typing.Callable[[bool], Any] = None,
    on_solo: typing.Callable[[bool], Any] = None,
    on_solo_inverted: typing.Callable[[bool], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_success: typing.Callable[[bool], Any] = None,
    on_success_messages: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_suffix: typing.Callable[[str], Any] = None,
    on_truncate_length: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_type: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_validate_on_blur: typing.Callable[[bool], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
) -> Element[ipyvuetify.generated.FileInput]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        append_icon=append_icon,
        append_outer_icon=append_outer_icon,
        attributes=attributes,
        autofocus=autofocus,
        background_color=background_color,
        children=children,
        chips=chips,
        class_=class_,
        clear_icon=clear_icon,
        clearable=clearable,
        color=color,
        counter=counter,
        counter_size_string=counter_size_string,
        counter_string=counter_string,
        dark=dark,
        dense=dense,
        disabled=disabled,
        error=error,
        error_count=error_count,
        error_messages=error_messages,
        filled=filled,
        flat=flat,
        full_width=full_width,
        height=height,
        hide_details=hide_details,
        hint=hint,
        id=id,
        label=label,
        layout=layout,
        light=light,
        loader_height=loader_height,
        loading=loading,
        messages=messages,
        multiple=multiple,
        outlined=outlined,
        persistent_hint=persistent_hint,
        placeholder=placeholder,
        prefix=prefix,
        prepend_icon=prepend_icon,
        prepend_inner_icon=prepend_inner_icon,
        readonly=readonly,
        reverse=reverse,
        rounded=rounded,
        rules=rules,
        shaped=shaped,
        show_size=show_size,
        single_line=single_line,
        slot=slot,
        small_chips=small_chips,
        solo=solo,
        solo_inverted=solo_inverted,
        style_=style_,
        success=success,
        success_messages=success_messages,
        suffix=suffix,
        truncate_length=truncate_length,
        type=type,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        validate_on_blur=validate_on_blur,
        value=value,
        on_append_icon=on_append_icon,
        on_append_outer_icon=on_append_outer_icon,
        on_attributes=on_attributes,
        on_autofocus=on_autofocus,
        on_background_color=on_background_color,
        on_children=on_children,
        on_chips=on_chips,
        on_class_=on_class_,
        on_clear_icon=on_clear_icon,
        on_clearable=on_clearable,
        on_color=on_color,
        on_counter=on_counter,
        on_counter_size_string=on_counter_size_string,
        on_counter_string=on_counter_string,
        on_dark=on_dark,
        on_dense=on_dense,
        on_disabled=on_disabled,
        on_error=on_error,
        on_error_count=on_error_count,
        on_error_messages=on_error_messages,
        on_filled=on_filled,
        on_flat=on_flat,
        on_full_width=on_full_width,
        on_height=on_height,
        on_hide_details=on_hide_details,
        on_hint=on_hint,
        on_id=on_id,
        on_label=on_label,
        on_layout=on_layout,
        on_light=on_light,
        on_loader_height=on_loader_height,
        on_loading=on_loading,
        on_messages=on_messages,
        on_multiple=on_multiple,
        on_outlined=on_outlined,
        on_persistent_hint=on_persistent_hint,
        on_placeholder=on_placeholder,
        on_prefix=on_prefix,
        on_prepend_icon=on_prepend_icon,
        on_prepend_inner_icon=on_prepend_inner_icon,
        on_readonly=on_readonly,
        on_reverse=on_reverse,
        on_rounded=on_rounded,
        on_rules=on_rules,
        on_shaped=on_shaped,
        on_show_size=on_show_size,
        on_single_line=on_single_line,
        on_slot=on_slot,
        on_small_chips=on_small_chips,
        on_solo=on_solo,
        on_solo_inverted=on_solo_inverted,
        on_style_=on_style_,
        on_success=on_success,
        on_success_messages=on_success_messages,
        on_suffix=on_suffix,
        on_truncate_length=on_truncate_length,
        on_type=on_type,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_validate_on_blur=on_validate_on_blur,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.FileInput
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Flex(
    align_self_baseline: bool = None,
    align_self_center: bool = None,
    align_self_end: bool = None,
    align_self_start: bool = None,
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    grow: bool = None,
    id: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    lg1: bool = None,
    lg10: bool = None,
    lg11: bool = None,
    lg12: bool = None,
    lg2: bool = None,
    lg3: bool = None,
    lg4: bool = None,
    lg5: bool = None,
    lg6: bool = None,
    lg7: bool = None,
    lg8: bool = None,
    lg9: bool = None,
    ma_0: bool = None,
    ma_1: bool = None,
    ma_2: bool = None,
    ma_3: bool = None,
    ma_4: bool = None,
    ma_5: bool = None,
    ma_auto: bool = None,
    mb_0: bool = None,
    mb_1: bool = None,
    mb_2: bool = None,
    mb_3: bool = None,
    mb_4: bool = None,
    mb_5: bool = None,
    mb_auto: bool = None,
    md1: bool = None,
    md10: bool = None,
    md11: bool = None,
    md12: bool = None,
    md2: bool = None,
    md3: bool = None,
    md4: bool = None,
    md5: bool = None,
    md6: bool = None,
    md7: bool = None,
    md8: bool = None,
    md9: bool = None,
    ml_0: bool = None,
    ml_1: bool = None,
    ml_2: bool = None,
    ml_3: bool = None,
    ml_4: bool = None,
    ml_5: bool = None,
    ml_auto: bool = None,
    mr_0: bool = None,
    mr_1: bool = None,
    mr_2: bool = None,
    mr_3: bool = None,
    mr_4: bool = None,
    mr_5: bool = None,
    mr_auto: bool = None,
    mt_0: bool = None,
    mt_1: bool = None,
    mt_2: bool = None,
    mt_3: bool = None,
    mt_4: bool = None,
    mt_5: bool = None,
    mt_auto: bool = None,
    mx_0: bool = None,
    mx_1: bool = None,
    mx_2: bool = None,
    mx_3: bool = None,
    mx_4: bool = None,
    mx_5: bool = None,
    mx_auto: bool = None,
    my_0: bool = None,
    my_1: bool = None,
    my_2: bool = None,
    my_3: bool = None,
    my_4: bool = None,
    my_5: bool = None,
    my_auto: bool = None,
    offset_lg0: bool = None,
    offset_lg1: bool = None,
    offset_lg10: bool = None,
    offset_lg11: bool = None,
    offset_lg12: bool = None,
    offset_lg2: bool = None,
    offset_lg3: bool = None,
    offset_lg4: bool = None,
    offset_lg5: bool = None,
    offset_lg6: bool = None,
    offset_lg7: bool = None,
    offset_lg8: bool = None,
    offset_lg9: bool = None,
    offset_md0: bool = None,
    offset_md1: bool = None,
    offset_md10: bool = None,
    offset_md11: bool = None,
    offset_md12: bool = None,
    offset_md2: bool = None,
    offset_md3: bool = None,
    offset_md4: bool = None,
    offset_md5: bool = None,
    offset_md6: bool = None,
    offset_md7: bool = None,
    offset_md8: bool = None,
    offset_md9: bool = None,
    offset_sm0: bool = None,
    offset_sm1: bool = None,
    offset_sm10: bool = None,
    offset_sm11: bool = None,
    offset_sm12: bool = None,
    offset_sm2: bool = None,
    offset_sm3: bool = None,
    offset_sm4: bool = None,
    offset_sm5: bool = None,
    offset_sm6: bool = None,
    offset_sm7: bool = None,
    offset_sm8: bool = None,
    offset_sm9: bool = None,
    offset_xl0: bool = None,
    offset_xl1: bool = None,
    offset_xl10: bool = None,
    offset_xl11: bool = None,
    offset_xl12: bool = None,
    offset_xl2: bool = None,
    offset_xl3: bool = None,
    offset_xl4: bool = None,
    offset_xl5: bool = None,
    offset_xl6: bool = None,
    offset_xl7: bool = None,
    offset_xl8: bool = None,
    offset_xl9: bool = None,
    offset_xs0: bool = None,
    offset_xs1: bool = None,
    offset_xs10: bool = None,
    offset_xs11: bool = None,
    offset_xs12: bool = None,
    offset_xs2: bool = None,
    offset_xs3: bool = None,
    offset_xs4: bool = None,
    offset_xs5: bool = None,
    offset_xs6: bool = None,
    offset_xs7: bool = None,
    offset_xs8: bool = None,
    offset_xs9: bool = None,
    order_lg1: bool = None,
    order_lg10: bool = None,
    order_lg11: bool = None,
    order_lg12: bool = None,
    order_lg2: bool = None,
    order_lg3: bool = None,
    order_lg4: bool = None,
    order_lg5: bool = None,
    order_lg6: bool = None,
    order_lg7: bool = None,
    order_lg8: bool = None,
    order_lg9: bool = None,
    order_md1: bool = None,
    order_md10: bool = None,
    order_md11: bool = None,
    order_md12: bool = None,
    order_md2: bool = None,
    order_md3: bool = None,
    order_md4: bool = None,
    order_md5: bool = None,
    order_md6: bool = None,
    order_md7: bool = None,
    order_md8: bool = None,
    order_md9: bool = None,
    order_sm1: bool = None,
    order_sm10: bool = None,
    order_sm11: bool = None,
    order_sm12: bool = None,
    order_sm2: bool = None,
    order_sm3: bool = None,
    order_sm4: bool = None,
    order_sm5: bool = None,
    order_sm6: bool = None,
    order_sm7: bool = None,
    order_sm8: bool = None,
    order_sm9: bool = None,
    order_xl1: bool = None,
    order_xl10: bool = None,
    order_xl11: bool = None,
    order_xl12: bool = None,
    order_xl2: bool = None,
    order_xl3: bool = None,
    order_xl4: bool = None,
    order_xl5: bool = None,
    order_xl6: bool = None,
    order_xl7: bool = None,
    order_xl8: bool = None,
    order_xl9: bool = None,
    order_xs1: bool = None,
    order_xs10: bool = None,
    order_xs11: bool = None,
    order_xs12: bool = None,
    order_xs2: bool = None,
    order_xs3: bool = None,
    order_xs4: bool = None,
    order_xs5: bool = None,
    order_xs6: bool = None,
    order_xs7: bool = None,
    order_xs8: bool = None,
    order_xs9: bool = None,
    pa_0: bool = None,
    pa_1: bool = None,
    pa_2: bool = None,
    pa_3: bool = None,
    pa_4: bool = None,
    pa_5: bool = None,
    pa_auto: bool = None,
    pb_0: bool = None,
    pb_1: bool = None,
    pb_2: bool = None,
    pb_3: bool = None,
    pb_4: bool = None,
    pb_5: bool = None,
    pb_auto: bool = None,
    pl_0: bool = None,
    pl_1: bool = None,
    pl_2: bool = None,
    pl_3: bool = None,
    pl_4: bool = None,
    pl_5: bool = None,
    pl_auto: bool = None,
    pr_0: bool = None,
    pr_1: bool = None,
    pr_2: bool = None,
    pr_3: bool = None,
    pr_4: bool = None,
    pr_5: bool = None,
    pr_auto: bool = None,
    pt_0: bool = None,
    pt_1: bool = None,
    pt_2: bool = None,
    pt_3: bool = None,
    pt_4: bool = None,
    pt_5: bool = None,
    pt_auto: bool = None,
    px_0: bool = None,
    px_1: bool = None,
    px_2: bool = None,
    px_3: bool = None,
    px_4: bool = None,
    px_5: bool = None,
    px_auto: bool = None,
    py_0: bool = None,
    py_1: bool = None,
    py_2: bool = None,
    py_3: bool = None,
    py_4: bool = None,
    py_5: bool = None,
    py_auto: bool = None,
    shrink: bool = None,
    slot: str = None,
    sm1: bool = None,
    sm10: bool = None,
    sm11: bool = None,
    sm12: bool = None,
    sm2: bool = None,
    sm3: bool = None,
    sm4: bool = None,
    sm5: bool = None,
    sm6: bool = None,
    sm7: bool = None,
    sm8: bool = None,
    sm9: bool = None,
    style_: str = None,
    tag: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    xl1: bool = None,
    xl10: bool = None,
    xl11: bool = None,
    xl12: bool = None,
    xl2: bool = None,
    xl3: bool = None,
    xl4: bool = None,
    xl5: bool = None,
    xl6: bool = None,
    xl7: bool = None,
    xl8: bool = None,
    xl9: bool = None,
    xs1: bool = None,
    xs10: bool = None,
    xs11: bool = None,
    xs12: bool = None,
    xs2: bool = None,
    xs3: bool = None,
    xs4: bool = None,
    xs5: bool = None,
    xs6: bool = None,
    xs7: bool = None,
    xs8: bool = None,
    xs9: bool = None,
    on_align_self_baseline: typing.Callable[[bool], Any] = None,
    on_align_self_center: typing.Callable[[bool], Any] = None,
    on_align_self_end: typing.Callable[[bool], Any] = None,
    on_align_self_start: typing.Callable[[bool], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_grow: typing.Callable[[bool], Any] = None,
    on_id: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_lg1: typing.Callable[[bool], Any] = None,
    on_lg10: typing.Callable[[bool], Any] = None,
    on_lg11: typing.Callable[[bool], Any] = None,
    on_lg12: typing.Callable[[bool], Any] = None,
    on_lg2: typing.Callable[[bool], Any] = None,
    on_lg3: typing.Callable[[bool], Any] = None,
    on_lg4: typing.Callable[[bool], Any] = None,
    on_lg5: typing.Callable[[bool], Any] = None,
    on_lg6: typing.Callable[[bool], Any] = None,
    on_lg7: typing.Callable[[bool], Any] = None,
    on_lg8: typing.Callable[[bool], Any] = None,
    on_lg9: typing.Callable[[bool], Any] = None,
    on_ma_0: typing.Callable[[bool], Any] = None,
    on_ma_1: typing.Callable[[bool], Any] = None,
    on_ma_2: typing.Callable[[bool], Any] = None,
    on_ma_3: typing.Callable[[bool], Any] = None,
    on_ma_4: typing.Callable[[bool], Any] = None,
    on_ma_5: typing.Callable[[bool], Any] = None,
    on_ma_auto: typing.Callable[[bool], Any] = None,
    on_mb_0: typing.Callable[[bool], Any] = None,
    on_mb_1: typing.Callable[[bool], Any] = None,
    on_mb_2: typing.Callable[[bool], Any] = None,
    on_mb_3: typing.Callable[[bool], Any] = None,
    on_mb_4: typing.Callable[[bool], Any] = None,
    on_mb_5: typing.Callable[[bool], Any] = None,
    on_mb_auto: typing.Callable[[bool], Any] = None,
    on_md1: typing.Callable[[bool], Any] = None,
    on_md10: typing.Callable[[bool], Any] = None,
    on_md11: typing.Callable[[bool], Any] = None,
    on_md12: typing.Callable[[bool], Any] = None,
    on_md2: typing.Callable[[bool], Any] = None,
    on_md3: typing.Callable[[bool], Any] = None,
    on_md4: typing.Callable[[bool], Any] = None,
    on_md5: typing.Callable[[bool], Any] = None,
    on_md6: typing.Callable[[bool], Any] = None,
    on_md7: typing.Callable[[bool], Any] = None,
    on_md8: typing.Callable[[bool], Any] = None,
    on_md9: typing.Callable[[bool], Any] = None,
    on_ml_0: typing.Callable[[bool], Any] = None,
    on_ml_1: typing.Callable[[bool], Any] = None,
    on_ml_2: typing.Callable[[bool], Any] = None,
    on_ml_3: typing.Callable[[bool], Any] = None,
    on_ml_4: typing.Callable[[bool], Any] = None,
    on_ml_5: typing.Callable[[bool], Any] = None,
    on_ml_auto: typing.Callable[[bool], Any] = None,
    on_mr_0: typing.Callable[[bool], Any] = None,
    on_mr_1: typing.Callable[[bool], Any] = None,
    on_mr_2: typing.Callable[[bool], Any] = None,
    on_mr_3: typing.Callable[[bool], Any] = None,
    on_mr_4: typing.Callable[[bool], Any] = None,
    on_mr_5: typing.Callable[[bool], Any] = None,
    on_mr_auto: typing.Callable[[bool], Any] = None,
    on_mt_0: typing.Callable[[bool], Any] = None,
    on_mt_1: typing.Callable[[bool], Any] = None,
    on_mt_2: typing.Callable[[bool], Any] = None,
    on_mt_3: typing.Callable[[bool], Any] = None,
    on_mt_4: typing.Callable[[bool], Any] = None,
    on_mt_5: typing.Callable[[bool], Any] = None,
    on_mt_auto: typing.Callable[[bool], Any] = None,
    on_mx_0: typing.Callable[[bool], Any] = None,
    on_mx_1: typing.Callable[[bool], Any] = None,
    on_mx_2: typing.Callable[[bool], Any] = None,
    on_mx_3: typing.Callable[[bool], Any] = None,
    on_mx_4: typing.Callable[[bool], Any] = None,
    on_mx_5: typing.Callable[[bool], Any] = None,
    on_mx_auto: typing.Callable[[bool], Any] = None,
    on_my_0: typing.Callable[[bool], Any] = None,
    on_my_1: typing.Callable[[bool], Any] = None,
    on_my_2: typing.Callable[[bool], Any] = None,
    on_my_3: typing.Callable[[bool], Any] = None,
    on_my_4: typing.Callable[[bool], Any] = None,
    on_my_5: typing.Callable[[bool], Any] = None,
    on_my_auto: typing.Callable[[bool], Any] = None,
    on_offset_lg0: typing.Callable[[bool], Any] = None,
    on_offset_lg1: typing.Callable[[bool], Any] = None,
    on_offset_lg10: typing.Callable[[bool], Any] = None,
    on_offset_lg11: typing.Callable[[bool], Any] = None,
    on_offset_lg12: typing.Callable[[bool], Any] = None,
    on_offset_lg2: typing.Callable[[bool], Any] = None,
    on_offset_lg3: typing.Callable[[bool], Any] = None,
    on_offset_lg4: typing.Callable[[bool], Any] = None,
    on_offset_lg5: typing.Callable[[bool], Any] = None,
    on_offset_lg6: typing.Callable[[bool], Any] = None,
    on_offset_lg7: typing.Callable[[bool], Any] = None,
    on_offset_lg8: typing.Callable[[bool], Any] = None,
    on_offset_lg9: typing.Callable[[bool], Any] = None,
    on_offset_md0: typing.Callable[[bool], Any] = None,
    on_offset_md1: typing.Callable[[bool], Any] = None,
    on_offset_md10: typing.Callable[[bool], Any] = None,
    on_offset_md11: typing.Callable[[bool], Any] = None,
    on_offset_md12: typing.Callable[[bool], Any] = None,
    on_offset_md2: typing.Callable[[bool], Any] = None,
    on_offset_md3: typing.Callable[[bool], Any] = None,
    on_offset_md4: typing.Callable[[bool], Any] = None,
    on_offset_md5: typing.Callable[[bool], Any] = None,
    on_offset_md6: typing.Callable[[bool], Any] = None,
    on_offset_md7: typing.Callable[[bool], Any] = None,
    on_offset_md8: typing.Callable[[bool], Any] = None,
    on_offset_md9: typing.Callable[[bool], Any] = None,
    on_offset_sm0: typing.Callable[[bool], Any] = None,
    on_offset_sm1: typing.Callable[[bool], Any] = None,
    on_offset_sm10: typing.Callable[[bool], Any] = None,
    on_offset_sm11: typing.Callable[[bool], Any] = None,
    on_offset_sm12: typing.Callable[[bool], Any] = None,
    on_offset_sm2: typing.Callable[[bool], Any] = None,
    on_offset_sm3: typing.Callable[[bool], Any] = None,
    on_offset_sm4: typing.Callable[[bool], Any] = None,
    on_offset_sm5: typing.Callable[[bool], Any] = None,
    on_offset_sm6: typing.Callable[[bool], Any] = None,
    on_offset_sm7: typing.Callable[[bool], Any] = None,
    on_offset_sm8: typing.Callable[[bool], Any] = None,
    on_offset_sm9: typing.Callable[[bool], Any] = None,
    on_offset_xl0: typing.Callable[[bool], Any] = None,
    on_offset_xl1: typing.Callable[[bool], Any] = None,
    on_offset_xl10: typing.Callable[[bool], Any] = None,
    on_offset_xl11: typing.Callable[[bool], Any] = None,
    on_offset_xl12: typing.Callable[[bool], Any] = None,
    on_offset_xl2: typing.Callable[[bool], Any] = None,
    on_offset_xl3: typing.Callable[[bool], Any] = None,
    on_offset_xl4: typing.Callable[[bool], Any] = None,
    on_offset_xl5: typing.Callable[[bool], Any] = None,
    on_offset_xl6: typing.Callable[[bool], Any] = None,
    on_offset_xl7: typing.Callable[[bool], Any] = None,
    on_offset_xl8: typing.Callable[[bool], Any] = None,
    on_offset_xl9: typing.Callable[[bool], Any] = None,
    on_offset_xs0: typing.Callable[[bool], Any] = None,
    on_offset_xs1: typing.Callable[[bool], Any] = None,
    on_offset_xs10: typing.Callable[[bool], Any] = None,
    on_offset_xs11: typing.Callable[[bool], Any] = None,
    on_offset_xs12: typing.Callable[[bool], Any] = None,
    on_offset_xs2: typing.Callable[[bool], Any] = None,
    on_offset_xs3: typing.Callable[[bool], Any] = None,
    on_offset_xs4: typing.Callable[[bool], Any] = None,
    on_offset_xs5: typing.Callable[[bool], Any] = None,
    on_offset_xs6: typing.Callable[[bool], Any] = None,
    on_offset_xs7: typing.Callable[[bool], Any] = None,
    on_offset_xs8: typing.Callable[[bool], Any] = None,
    on_offset_xs9: typing.Callable[[bool], Any] = None,
    on_order_lg1: typing.Callable[[bool], Any] = None,
    on_order_lg10: typing.Callable[[bool], Any] = None,
    on_order_lg11: typing.Callable[[bool], Any] = None,
    on_order_lg12: typing.Callable[[bool], Any] = None,
    on_order_lg2: typing.Callable[[bool], Any] = None,
    on_order_lg3: typing.Callable[[bool], Any] = None,
    on_order_lg4: typing.Callable[[bool], Any] = None,
    on_order_lg5: typing.Callable[[bool], Any] = None,
    on_order_lg6: typing.Callable[[bool], Any] = None,
    on_order_lg7: typing.Callable[[bool], Any] = None,
    on_order_lg8: typing.Callable[[bool], Any] = None,
    on_order_lg9: typing.Callable[[bool], Any] = None,
    on_order_md1: typing.Callable[[bool], Any] = None,
    on_order_md10: typing.Callable[[bool], Any] = None,
    on_order_md11: typing.Callable[[bool], Any] = None,
    on_order_md12: typing.Callable[[bool], Any] = None,
    on_order_md2: typing.Callable[[bool], Any] = None,
    on_order_md3: typing.Callable[[bool], Any] = None,
    on_order_md4: typing.Callable[[bool], Any] = None,
    on_order_md5: typing.Callable[[bool], Any] = None,
    on_order_md6: typing.Callable[[bool], Any] = None,
    on_order_md7: typing.Callable[[bool], Any] = None,
    on_order_md8: typing.Callable[[bool], Any] = None,
    on_order_md9: typing.Callable[[bool], Any] = None,
    on_order_sm1: typing.Callable[[bool], Any] = None,
    on_order_sm10: typing.Callable[[bool], Any] = None,
    on_order_sm11: typing.Callable[[bool], Any] = None,
    on_order_sm12: typing.Callable[[bool], Any] = None,
    on_order_sm2: typing.Callable[[bool], Any] = None,
    on_order_sm3: typing.Callable[[bool], Any] = None,
    on_order_sm4: typing.Callable[[bool], Any] = None,
    on_order_sm5: typing.Callable[[bool], Any] = None,
    on_order_sm6: typing.Callable[[bool], Any] = None,
    on_order_sm7: typing.Callable[[bool], Any] = None,
    on_order_sm8: typing.Callable[[bool], Any] = None,
    on_order_sm9: typing.Callable[[bool], Any] = None,
    on_order_xl1: typing.Callable[[bool], Any] = None,
    on_order_xl10: typing.Callable[[bool], Any] = None,
    on_order_xl11: typing.Callable[[bool], Any] = None,
    on_order_xl12: typing.Callable[[bool], Any] = None,
    on_order_xl2: typing.Callable[[bool], Any] = None,
    on_order_xl3: typing.Callable[[bool], Any] = None,
    on_order_xl4: typing.Callable[[bool], Any] = None,
    on_order_xl5: typing.Callable[[bool], Any] = None,
    on_order_xl6: typing.Callable[[bool], Any] = None,
    on_order_xl7: typing.Callable[[bool], Any] = None,
    on_order_xl8: typing.Callable[[bool], Any] = None,
    on_order_xl9: typing.Callable[[bool], Any] = None,
    on_order_xs1: typing.Callable[[bool], Any] = None,
    on_order_xs10: typing.Callable[[bool], Any] = None,
    on_order_xs11: typing.Callable[[bool], Any] = None,
    on_order_xs12: typing.Callable[[bool], Any] = None,
    on_order_xs2: typing.Callable[[bool], Any] = None,
    on_order_xs3: typing.Callable[[bool], Any] = None,
    on_order_xs4: typing.Callable[[bool], Any] = None,
    on_order_xs5: typing.Callable[[bool], Any] = None,
    on_order_xs6: typing.Callable[[bool], Any] = None,
    on_order_xs7: typing.Callable[[bool], Any] = None,
    on_order_xs8: typing.Callable[[bool], Any] = None,
    on_order_xs9: typing.Callable[[bool], Any] = None,
    on_pa_0: typing.Callable[[bool], Any] = None,
    on_pa_1: typing.Callable[[bool], Any] = None,
    on_pa_2: typing.Callable[[bool], Any] = None,
    on_pa_3: typing.Callable[[bool], Any] = None,
    on_pa_4: typing.Callable[[bool], Any] = None,
    on_pa_5: typing.Callable[[bool], Any] = None,
    on_pa_auto: typing.Callable[[bool], Any] = None,
    on_pb_0: typing.Callable[[bool], Any] = None,
    on_pb_1: typing.Callable[[bool], Any] = None,
    on_pb_2: typing.Callable[[bool], Any] = None,
    on_pb_3: typing.Callable[[bool], Any] = None,
    on_pb_4: typing.Callable[[bool], Any] = None,
    on_pb_5: typing.Callable[[bool], Any] = None,
    on_pb_auto: typing.Callable[[bool], Any] = None,
    on_pl_0: typing.Callable[[bool], Any] = None,
    on_pl_1: typing.Callable[[bool], Any] = None,
    on_pl_2: typing.Callable[[bool], Any] = None,
    on_pl_3: typing.Callable[[bool], Any] = None,
    on_pl_4: typing.Callable[[bool], Any] = None,
    on_pl_5: typing.Callable[[bool], Any] = None,
    on_pl_auto: typing.Callable[[bool], Any] = None,
    on_pr_0: typing.Callable[[bool], Any] = None,
    on_pr_1: typing.Callable[[bool], Any] = None,
    on_pr_2: typing.Callable[[bool], Any] = None,
    on_pr_3: typing.Callable[[bool], Any] = None,
    on_pr_4: typing.Callable[[bool], Any] = None,
    on_pr_5: typing.Callable[[bool], Any] = None,
    on_pr_auto: typing.Callable[[bool], Any] = None,
    on_pt_0: typing.Callable[[bool], Any] = None,
    on_pt_1: typing.Callable[[bool], Any] = None,
    on_pt_2: typing.Callable[[bool], Any] = None,
    on_pt_3: typing.Callable[[bool], Any] = None,
    on_pt_4: typing.Callable[[bool], Any] = None,
    on_pt_5: typing.Callable[[bool], Any] = None,
    on_pt_auto: typing.Callable[[bool], Any] = None,
    on_px_0: typing.Callable[[bool], Any] = None,
    on_px_1: typing.Callable[[bool], Any] = None,
    on_px_2: typing.Callable[[bool], Any] = None,
    on_px_3: typing.Callable[[bool], Any] = None,
    on_px_4: typing.Callable[[bool], Any] = None,
    on_px_5: typing.Callable[[bool], Any] = None,
    on_px_auto: typing.Callable[[bool], Any] = None,
    on_py_0: typing.Callable[[bool], Any] = None,
    on_py_1: typing.Callable[[bool], Any] = None,
    on_py_2: typing.Callable[[bool], Any] = None,
    on_py_3: typing.Callable[[bool], Any] = None,
    on_py_4: typing.Callable[[bool], Any] = None,
    on_py_5: typing.Callable[[bool], Any] = None,
    on_py_auto: typing.Callable[[bool], Any] = None,
    on_shrink: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_sm1: typing.Callable[[bool], Any] = None,
    on_sm10: typing.Callable[[bool], Any] = None,
    on_sm11: typing.Callable[[bool], Any] = None,
    on_sm12: typing.Callable[[bool], Any] = None,
    on_sm2: typing.Callable[[bool], Any] = None,
    on_sm3: typing.Callable[[bool], Any] = None,
    on_sm4: typing.Callable[[bool], Any] = None,
    on_sm5: typing.Callable[[bool], Any] = None,
    on_sm6: typing.Callable[[bool], Any] = None,
    on_sm7: typing.Callable[[bool], Any] = None,
    on_sm8: typing.Callable[[bool], Any] = None,
    on_sm9: typing.Callable[[bool], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_tag: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_xl1: typing.Callable[[bool], Any] = None,
    on_xl10: typing.Callable[[bool], Any] = None,
    on_xl11: typing.Callable[[bool], Any] = None,
    on_xl12: typing.Callable[[bool], Any] = None,
    on_xl2: typing.Callable[[bool], Any] = None,
    on_xl3: typing.Callable[[bool], Any] = None,
    on_xl4: typing.Callable[[bool], Any] = None,
    on_xl5: typing.Callable[[bool], Any] = None,
    on_xl6: typing.Callable[[bool], Any] = None,
    on_xl7: typing.Callable[[bool], Any] = None,
    on_xl8: typing.Callable[[bool], Any] = None,
    on_xl9: typing.Callable[[bool], Any] = None,
    on_xs1: typing.Callable[[bool], Any] = None,
    on_xs10: typing.Callable[[bool], Any] = None,
    on_xs11: typing.Callable[[bool], Any] = None,
    on_xs12: typing.Callable[[bool], Any] = None,
    on_xs2: typing.Callable[[bool], Any] = None,
    on_xs3: typing.Callable[[bool], Any] = None,
    on_xs4: typing.Callable[[bool], Any] = None,
    on_xs5: typing.Callable[[bool], Any] = None,
    on_xs6: typing.Callable[[bool], Any] = None,
    on_xs7: typing.Callable[[bool], Any] = None,
    on_xs8: typing.Callable[[bool], Any] = None,
    on_xs9: typing.Callable[[bool], Any] = None,
) -> Element[ipyvuetify.generated.Flex]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        align_self_baseline=align_self_baseline,
        align_self_center=align_self_center,
        align_self_end=align_self_end,
        align_self_start=align_self_start,
        attributes=attributes,
        children=children,
        class_=class_,
        grow=grow,
        id=id,
        layout=layout,
        lg1=lg1,
        lg10=lg10,
        lg11=lg11,
        lg12=lg12,
        lg2=lg2,
        lg3=lg3,
        lg4=lg4,
        lg5=lg5,
        lg6=lg6,
        lg7=lg7,
        lg8=lg8,
        lg9=lg9,
        ma_0=ma_0,
        ma_1=ma_1,
        ma_2=ma_2,
        ma_3=ma_3,
        ma_4=ma_4,
        ma_5=ma_5,
        ma_auto=ma_auto,
        mb_0=mb_0,
        mb_1=mb_1,
        mb_2=mb_2,
        mb_3=mb_3,
        mb_4=mb_4,
        mb_5=mb_5,
        mb_auto=mb_auto,
        md1=md1,
        md10=md10,
        md11=md11,
        md12=md12,
        md2=md2,
        md3=md3,
        md4=md4,
        md5=md5,
        md6=md6,
        md7=md7,
        md8=md8,
        md9=md9,
        ml_0=ml_0,
        ml_1=ml_1,
        ml_2=ml_2,
        ml_3=ml_3,
        ml_4=ml_4,
        ml_5=ml_5,
        ml_auto=ml_auto,
        mr_0=mr_0,
        mr_1=mr_1,
        mr_2=mr_2,
        mr_3=mr_3,
        mr_4=mr_4,
        mr_5=mr_5,
        mr_auto=mr_auto,
        mt_0=mt_0,
        mt_1=mt_1,
        mt_2=mt_2,
        mt_3=mt_3,
        mt_4=mt_4,
        mt_5=mt_5,
        mt_auto=mt_auto,
        mx_0=mx_0,
        mx_1=mx_1,
        mx_2=mx_2,
        mx_3=mx_3,
        mx_4=mx_4,
        mx_5=mx_5,
        mx_auto=mx_auto,
        my_0=my_0,
        my_1=my_1,
        my_2=my_2,
        my_3=my_3,
        my_4=my_4,
        my_5=my_5,
        my_auto=my_auto,
        offset_lg0=offset_lg0,
        offset_lg1=offset_lg1,
        offset_lg10=offset_lg10,
        offset_lg11=offset_lg11,
        offset_lg12=offset_lg12,
        offset_lg2=offset_lg2,
        offset_lg3=offset_lg3,
        offset_lg4=offset_lg4,
        offset_lg5=offset_lg5,
        offset_lg6=offset_lg6,
        offset_lg7=offset_lg7,
        offset_lg8=offset_lg8,
        offset_lg9=offset_lg9,
        offset_md0=offset_md0,
        offset_md1=offset_md1,
        offset_md10=offset_md10,
        offset_md11=offset_md11,
        offset_md12=offset_md12,
        offset_md2=offset_md2,
        offset_md3=offset_md3,
        offset_md4=offset_md4,
        offset_md5=offset_md5,
        offset_md6=offset_md6,
        offset_md7=offset_md7,
        offset_md8=offset_md8,
        offset_md9=offset_md9,
        offset_sm0=offset_sm0,
        offset_sm1=offset_sm1,
        offset_sm10=offset_sm10,
        offset_sm11=offset_sm11,
        offset_sm12=offset_sm12,
        offset_sm2=offset_sm2,
        offset_sm3=offset_sm3,
        offset_sm4=offset_sm4,
        offset_sm5=offset_sm5,
        offset_sm6=offset_sm6,
        offset_sm7=offset_sm7,
        offset_sm8=offset_sm8,
        offset_sm9=offset_sm9,
        offset_xl0=offset_xl0,
        offset_xl1=offset_xl1,
        offset_xl10=offset_xl10,
        offset_xl11=offset_xl11,
        offset_xl12=offset_xl12,
        offset_xl2=offset_xl2,
        offset_xl3=offset_xl3,
        offset_xl4=offset_xl4,
        offset_xl5=offset_xl5,
        offset_xl6=offset_xl6,
        offset_xl7=offset_xl7,
        offset_xl8=offset_xl8,
        offset_xl9=offset_xl9,
        offset_xs0=offset_xs0,
        offset_xs1=offset_xs1,
        offset_xs10=offset_xs10,
        offset_xs11=offset_xs11,
        offset_xs12=offset_xs12,
        offset_xs2=offset_xs2,
        offset_xs3=offset_xs3,
        offset_xs4=offset_xs4,
        offset_xs5=offset_xs5,
        offset_xs6=offset_xs6,
        offset_xs7=offset_xs7,
        offset_xs8=offset_xs8,
        offset_xs9=offset_xs9,
        order_lg1=order_lg1,
        order_lg10=order_lg10,
        order_lg11=order_lg11,
        order_lg12=order_lg12,
        order_lg2=order_lg2,
        order_lg3=order_lg3,
        order_lg4=order_lg4,
        order_lg5=order_lg5,
        order_lg6=order_lg6,
        order_lg7=order_lg7,
        order_lg8=order_lg8,
        order_lg9=order_lg9,
        order_md1=order_md1,
        order_md10=order_md10,
        order_md11=order_md11,
        order_md12=order_md12,
        order_md2=order_md2,
        order_md3=order_md3,
        order_md4=order_md4,
        order_md5=order_md5,
        order_md6=order_md6,
        order_md7=order_md7,
        order_md8=order_md8,
        order_md9=order_md9,
        order_sm1=order_sm1,
        order_sm10=order_sm10,
        order_sm11=order_sm11,
        order_sm12=order_sm12,
        order_sm2=order_sm2,
        order_sm3=order_sm3,
        order_sm4=order_sm4,
        order_sm5=order_sm5,
        order_sm6=order_sm6,
        order_sm7=order_sm7,
        order_sm8=order_sm8,
        order_sm9=order_sm9,
        order_xl1=order_xl1,
        order_xl10=order_xl10,
        order_xl11=order_xl11,
        order_xl12=order_xl12,
        order_xl2=order_xl2,
        order_xl3=order_xl3,
        order_xl4=order_xl4,
        order_xl5=order_xl5,
        order_xl6=order_xl6,
        order_xl7=order_xl7,
        order_xl8=order_xl8,
        order_xl9=order_xl9,
        order_xs1=order_xs1,
        order_xs10=order_xs10,
        order_xs11=order_xs11,
        order_xs12=order_xs12,
        order_xs2=order_xs2,
        order_xs3=order_xs3,
        order_xs4=order_xs4,
        order_xs5=order_xs5,
        order_xs6=order_xs6,
        order_xs7=order_xs7,
        order_xs8=order_xs8,
        order_xs9=order_xs9,
        pa_0=pa_0,
        pa_1=pa_1,
        pa_2=pa_2,
        pa_3=pa_3,
        pa_4=pa_4,
        pa_5=pa_5,
        pa_auto=pa_auto,
        pb_0=pb_0,
        pb_1=pb_1,
        pb_2=pb_2,
        pb_3=pb_3,
        pb_4=pb_4,
        pb_5=pb_5,
        pb_auto=pb_auto,
        pl_0=pl_0,
        pl_1=pl_1,
        pl_2=pl_2,
        pl_3=pl_3,
        pl_4=pl_4,
        pl_5=pl_5,
        pl_auto=pl_auto,
        pr_0=pr_0,
        pr_1=pr_1,
        pr_2=pr_2,
        pr_3=pr_3,
        pr_4=pr_4,
        pr_5=pr_5,
        pr_auto=pr_auto,
        pt_0=pt_0,
        pt_1=pt_1,
        pt_2=pt_2,
        pt_3=pt_3,
        pt_4=pt_4,
        pt_5=pt_5,
        pt_auto=pt_auto,
        px_0=px_0,
        px_1=px_1,
        px_2=px_2,
        px_3=px_3,
        px_4=px_4,
        px_5=px_5,
        px_auto=px_auto,
        py_0=py_0,
        py_1=py_1,
        py_2=py_2,
        py_3=py_3,
        py_4=py_4,
        py_5=py_5,
        py_auto=py_auto,
        shrink=shrink,
        slot=slot,
        sm1=sm1,
        sm10=sm10,
        sm11=sm11,
        sm12=sm12,
        sm2=sm2,
        sm3=sm3,
        sm4=sm4,
        sm5=sm5,
        sm6=sm6,
        sm7=sm7,
        sm8=sm8,
        sm9=sm9,
        style_=style_,
        tag=tag,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        xl1=xl1,
        xl10=xl10,
        xl11=xl11,
        xl12=xl12,
        xl2=xl2,
        xl3=xl3,
        xl4=xl4,
        xl5=xl5,
        xl6=xl6,
        xl7=xl7,
        xl8=xl8,
        xl9=xl9,
        xs1=xs1,
        xs10=xs10,
        xs11=xs11,
        xs12=xs12,
        xs2=xs2,
        xs3=xs3,
        xs4=xs4,
        xs5=xs5,
        xs6=xs6,
        xs7=xs7,
        xs8=xs8,
        xs9=xs9,
        on_align_self_baseline=on_align_self_baseline,
        on_align_self_center=on_align_self_center,
        on_align_self_end=on_align_self_end,
        on_align_self_start=on_align_self_start,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_grow=on_grow,
        on_id=on_id,
        on_layout=on_layout,
        on_lg1=on_lg1,
        on_lg10=on_lg10,
        on_lg11=on_lg11,
        on_lg12=on_lg12,
        on_lg2=on_lg2,
        on_lg3=on_lg3,
        on_lg4=on_lg4,
        on_lg5=on_lg5,
        on_lg6=on_lg6,
        on_lg7=on_lg7,
        on_lg8=on_lg8,
        on_lg9=on_lg9,
        on_ma_0=on_ma_0,
        on_ma_1=on_ma_1,
        on_ma_2=on_ma_2,
        on_ma_3=on_ma_3,
        on_ma_4=on_ma_4,
        on_ma_5=on_ma_5,
        on_ma_auto=on_ma_auto,
        on_mb_0=on_mb_0,
        on_mb_1=on_mb_1,
        on_mb_2=on_mb_2,
        on_mb_3=on_mb_3,
        on_mb_4=on_mb_4,
        on_mb_5=on_mb_5,
        on_mb_auto=on_mb_auto,
        on_md1=on_md1,
        on_md10=on_md10,
        on_md11=on_md11,
        on_md12=on_md12,
        on_md2=on_md2,
        on_md3=on_md3,
        on_md4=on_md4,
        on_md5=on_md5,
        on_md6=on_md6,
        on_md7=on_md7,
        on_md8=on_md8,
        on_md9=on_md9,
        on_ml_0=on_ml_0,
        on_ml_1=on_ml_1,
        on_ml_2=on_ml_2,
        on_ml_3=on_ml_3,
        on_ml_4=on_ml_4,
        on_ml_5=on_ml_5,
        on_ml_auto=on_ml_auto,
        on_mr_0=on_mr_0,
        on_mr_1=on_mr_1,
        on_mr_2=on_mr_2,
        on_mr_3=on_mr_3,
        on_mr_4=on_mr_4,
        on_mr_5=on_mr_5,
        on_mr_auto=on_mr_auto,
        on_mt_0=on_mt_0,
        on_mt_1=on_mt_1,
        on_mt_2=on_mt_2,
        on_mt_3=on_mt_3,
        on_mt_4=on_mt_4,
        on_mt_5=on_mt_5,
        on_mt_auto=on_mt_auto,
        on_mx_0=on_mx_0,
        on_mx_1=on_mx_1,
        on_mx_2=on_mx_2,
        on_mx_3=on_mx_3,
        on_mx_4=on_mx_4,
        on_mx_5=on_mx_5,
        on_mx_auto=on_mx_auto,
        on_my_0=on_my_0,
        on_my_1=on_my_1,
        on_my_2=on_my_2,
        on_my_3=on_my_3,
        on_my_4=on_my_4,
        on_my_5=on_my_5,
        on_my_auto=on_my_auto,
        on_offset_lg0=on_offset_lg0,
        on_offset_lg1=on_offset_lg1,
        on_offset_lg10=on_offset_lg10,
        on_offset_lg11=on_offset_lg11,
        on_offset_lg12=on_offset_lg12,
        on_offset_lg2=on_offset_lg2,
        on_offset_lg3=on_offset_lg3,
        on_offset_lg4=on_offset_lg4,
        on_offset_lg5=on_offset_lg5,
        on_offset_lg6=on_offset_lg6,
        on_offset_lg7=on_offset_lg7,
        on_offset_lg8=on_offset_lg8,
        on_offset_lg9=on_offset_lg9,
        on_offset_md0=on_offset_md0,
        on_offset_md1=on_offset_md1,
        on_offset_md10=on_offset_md10,
        on_offset_md11=on_offset_md11,
        on_offset_md12=on_offset_md12,
        on_offset_md2=on_offset_md2,
        on_offset_md3=on_offset_md3,
        on_offset_md4=on_offset_md4,
        on_offset_md5=on_offset_md5,
        on_offset_md6=on_offset_md6,
        on_offset_md7=on_offset_md7,
        on_offset_md8=on_offset_md8,
        on_offset_md9=on_offset_md9,
        on_offset_sm0=on_offset_sm0,
        on_offset_sm1=on_offset_sm1,
        on_offset_sm10=on_offset_sm10,
        on_offset_sm11=on_offset_sm11,
        on_offset_sm12=on_offset_sm12,
        on_offset_sm2=on_offset_sm2,
        on_offset_sm3=on_offset_sm3,
        on_offset_sm4=on_offset_sm4,
        on_offset_sm5=on_offset_sm5,
        on_offset_sm6=on_offset_sm6,
        on_offset_sm7=on_offset_sm7,
        on_offset_sm8=on_offset_sm8,
        on_offset_sm9=on_offset_sm9,
        on_offset_xl0=on_offset_xl0,
        on_offset_xl1=on_offset_xl1,
        on_offset_xl10=on_offset_xl10,
        on_offset_xl11=on_offset_xl11,
        on_offset_xl12=on_offset_xl12,
        on_offset_xl2=on_offset_xl2,
        on_offset_xl3=on_offset_xl3,
        on_offset_xl4=on_offset_xl4,
        on_offset_xl5=on_offset_xl5,
        on_offset_xl6=on_offset_xl6,
        on_offset_xl7=on_offset_xl7,
        on_offset_xl8=on_offset_xl8,
        on_offset_xl9=on_offset_xl9,
        on_offset_xs0=on_offset_xs0,
        on_offset_xs1=on_offset_xs1,
        on_offset_xs10=on_offset_xs10,
        on_offset_xs11=on_offset_xs11,
        on_offset_xs12=on_offset_xs12,
        on_offset_xs2=on_offset_xs2,
        on_offset_xs3=on_offset_xs3,
        on_offset_xs4=on_offset_xs4,
        on_offset_xs5=on_offset_xs5,
        on_offset_xs6=on_offset_xs6,
        on_offset_xs7=on_offset_xs7,
        on_offset_xs8=on_offset_xs8,
        on_offset_xs9=on_offset_xs9,
        on_order_lg1=on_order_lg1,
        on_order_lg10=on_order_lg10,
        on_order_lg11=on_order_lg11,
        on_order_lg12=on_order_lg12,
        on_order_lg2=on_order_lg2,
        on_order_lg3=on_order_lg3,
        on_order_lg4=on_order_lg4,
        on_order_lg5=on_order_lg5,
        on_order_lg6=on_order_lg6,
        on_order_lg7=on_order_lg7,
        on_order_lg8=on_order_lg8,
        on_order_lg9=on_order_lg9,
        on_order_md1=on_order_md1,
        on_order_md10=on_order_md10,
        on_order_md11=on_order_md11,
        on_order_md12=on_order_md12,
        on_order_md2=on_order_md2,
        on_order_md3=on_order_md3,
        on_order_md4=on_order_md4,
        on_order_md5=on_order_md5,
        on_order_md6=on_order_md6,
        on_order_md7=on_order_md7,
        on_order_md8=on_order_md8,
        on_order_md9=on_order_md9,
        on_order_sm1=on_order_sm1,
        on_order_sm10=on_order_sm10,
        on_order_sm11=on_order_sm11,
        on_order_sm12=on_order_sm12,
        on_order_sm2=on_order_sm2,
        on_order_sm3=on_order_sm3,
        on_order_sm4=on_order_sm4,
        on_order_sm5=on_order_sm5,
        on_order_sm6=on_order_sm6,
        on_order_sm7=on_order_sm7,
        on_order_sm8=on_order_sm8,
        on_order_sm9=on_order_sm9,
        on_order_xl1=on_order_xl1,
        on_order_xl10=on_order_xl10,
        on_order_xl11=on_order_xl11,
        on_order_xl12=on_order_xl12,
        on_order_xl2=on_order_xl2,
        on_order_xl3=on_order_xl3,
        on_order_xl4=on_order_xl4,
        on_order_xl5=on_order_xl5,
        on_order_xl6=on_order_xl6,
        on_order_xl7=on_order_xl7,
        on_order_xl8=on_order_xl8,
        on_order_xl9=on_order_xl9,
        on_order_xs1=on_order_xs1,
        on_order_xs10=on_order_xs10,
        on_order_xs11=on_order_xs11,
        on_order_xs12=on_order_xs12,
        on_order_xs2=on_order_xs2,
        on_order_xs3=on_order_xs3,
        on_order_xs4=on_order_xs4,
        on_order_xs5=on_order_xs5,
        on_order_xs6=on_order_xs6,
        on_order_xs7=on_order_xs7,
        on_order_xs8=on_order_xs8,
        on_order_xs9=on_order_xs9,
        on_pa_0=on_pa_0,
        on_pa_1=on_pa_1,
        on_pa_2=on_pa_2,
        on_pa_3=on_pa_3,
        on_pa_4=on_pa_4,
        on_pa_5=on_pa_5,
        on_pa_auto=on_pa_auto,
        on_pb_0=on_pb_0,
        on_pb_1=on_pb_1,
        on_pb_2=on_pb_2,
        on_pb_3=on_pb_3,
        on_pb_4=on_pb_4,
        on_pb_5=on_pb_5,
        on_pb_auto=on_pb_auto,
        on_pl_0=on_pl_0,
        on_pl_1=on_pl_1,
        on_pl_2=on_pl_2,
        on_pl_3=on_pl_3,
        on_pl_4=on_pl_4,
        on_pl_5=on_pl_5,
        on_pl_auto=on_pl_auto,
        on_pr_0=on_pr_0,
        on_pr_1=on_pr_1,
        on_pr_2=on_pr_2,
        on_pr_3=on_pr_3,
        on_pr_4=on_pr_4,
        on_pr_5=on_pr_5,
        on_pr_auto=on_pr_auto,
        on_pt_0=on_pt_0,
        on_pt_1=on_pt_1,
        on_pt_2=on_pt_2,
        on_pt_3=on_pt_3,
        on_pt_4=on_pt_4,
        on_pt_5=on_pt_5,
        on_pt_auto=on_pt_auto,
        on_px_0=on_px_0,
        on_px_1=on_px_1,
        on_px_2=on_px_2,
        on_px_3=on_px_3,
        on_px_4=on_px_4,
        on_px_5=on_px_5,
        on_px_auto=on_px_auto,
        on_py_0=on_py_0,
        on_py_1=on_py_1,
        on_py_2=on_py_2,
        on_py_3=on_py_3,
        on_py_4=on_py_4,
        on_py_5=on_py_5,
        on_py_auto=on_py_auto,
        on_shrink=on_shrink,
        on_slot=on_slot,
        on_sm1=on_sm1,
        on_sm10=on_sm10,
        on_sm11=on_sm11,
        on_sm12=on_sm12,
        on_sm2=on_sm2,
        on_sm3=on_sm3,
        on_sm4=on_sm4,
        on_sm5=on_sm5,
        on_sm6=on_sm6,
        on_sm7=on_sm7,
        on_sm8=on_sm8,
        on_sm9=on_sm9,
        on_style_=on_style_,
        on_tag=on_tag,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_xl1=on_xl1,
        on_xl10=on_xl10,
        on_xl11=on_xl11,
        on_xl12=on_xl12,
        on_xl2=on_xl2,
        on_xl3=on_xl3,
        on_xl4=on_xl4,
        on_xl5=on_xl5,
        on_xl6=on_xl6,
        on_xl7=on_xl7,
        on_xl8=on_xl8,
        on_xl9=on_xl9,
        on_xs1=on_xs1,
        on_xs10=on_xs10,
        on_xs11=on_xs11,
        on_xs12=on_xs12,
        on_xs2=on_xs2,
        on_xs3=on_xs3,
        on_xs4=on_xs4,
        on_xs5=on_xs5,
        on_xs6=on_xs6,
        on_xs7=on_xs7,
        on_xs8=on_xs8,
        on_xs9=on_xs9,
    )
    widget_cls = ipyvuetify.generated.Flex
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Footer(
    absolute: bool = None,
    app: bool = None,
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    color: str = None,
    dark: bool = None,
    elevation: typing.Union[float, str] = None,
    fixed: bool = None,
    height: typing.Union[float, str] = None,
    inset: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    max_height: typing.Union[float, str] = None,
    max_width: typing.Union[float, str] = None,
    min_height: typing.Union[float, str] = None,
    min_width: typing.Union[float, str] = None,
    padless: bool = None,
    slot: str = None,
    style_: str = None,
    tag: str = None,
    tile: bool = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    width: typing.Union[float, str] = None,
    on_absolute: typing.Callable[[bool], Any] = None,
    on_app: typing.Callable[[bool], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_elevation: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_fixed: typing.Callable[[bool], Any] = None,
    on_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_inset: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_max_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_max_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_min_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_min_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_padless: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_tag: typing.Callable[[str], Any] = None,
    on_tile: typing.Callable[[bool], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_width: typing.Callable[[typing.Union[float, str]], Any] = None,
) -> Element[ipyvuetify.generated.Footer]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        absolute=absolute,
        app=app,
        attributes=attributes,
        children=children,
        class_=class_,
        color=color,
        dark=dark,
        elevation=elevation,
        fixed=fixed,
        height=height,
        inset=inset,
        layout=layout,
        light=light,
        max_height=max_height,
        max_width=max_width,
        min_height=min_height,
        min_width=min_width,
        padless=padless,
        slot=slot,
        style_=style_,
        tag=tag,
        tile=tile,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        width=width,
        on_absolute=on_absolute,
        on_app=on_app,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_dark=on_dark,
        on_elevation=on_elevation,
        on_fixed=on_fixed,
        on_height=on_height,
        on_inset=on_inset,
        on_layout=on_layout,
        on_light=on_light,
        on_max_height=on_max_height,
        on_max_width=on_max_width,
        on_min_height=on_min_height,
        on_min_width=on_min_width,
        on_padless=on_padless,
        on_slot=on_slot,
        on_style_=on_style_,
        on_tag=on_tag,
        on_tile=on_tile,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_width=on_width,
    )
    widget_cls = ipyvuetify.generated.Footer
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Form(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    lazy_validation: bool = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: bool = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_lazy_validation: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[bool], Any] = None,
) -> Element[ipyvuetify.generated.Form]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        layout=layout,
        lazy_validation=lazy_validation,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_layout=on_layout,
        on_lazy_validation=on_lazy_validation,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.Form
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Hover(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    close_delay: typing.Union[float, str] = None,
    disabled: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    open_delay: typing.Union[float, str] = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: bool = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_close_delay: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_open_delay: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[bool], Any] = None,
) -> Element[ipyvuetify.generated.Hover]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        close_delay=close_delay,
        disabled=disabled,
        layout=layout,
        open_delay=open_delay,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_close_delay=on_close_delay,
        on_disabled=on_disabled,
        on_layout=on_layout,
        on_open_delay=on_open_delay,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.Hover
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Html(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    slot: str = None,
    style_: str = None,
    tag: str = "",
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_tag: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.Html]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        layout=layout,
        slot=slot,
        style_=style_,
        tag=tag,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_layout=on_layout,
        on_slot=on_slot,
        on_style_=on_style_,
        on_tag=on_tag,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.Html
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Icon(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    color: str = None,
    dark: bool = None,
    dense: bool = None,
    disabled: bool = None,
    large: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    left: bool = None,
    light: bool = None,
    right: bool = None,
    size: typing.Union[float, str] = None,
    slot: str = None,
    small: bool = None,
    style_: str = None,
    tag: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    x_large: bool = None,
    x_small: bool = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_dense: typing.Callable[[bool], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_large: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_left: typing.Callable[[bool], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_right: typing.Callable[[bool], Any] = None,
    on_size: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_small: typing.Callable[[bool], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_tag: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_x_large: typing.Callable[[bool], Any] = None,
    on_x_small: typing.Callable[[bool], Any] = None,
) -> Element[ipyvuetify.generated.Icon]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        color=color,
        dark=dark,
        dense=dense,
        disabled=disabled,
        large=large,
        layout=layout,
        left=left,
        light=light,
        right=right,
        size=size,
        slot=slot,
        small=small,
        style_=style_,
        tag=tag,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        x_large=x_large,
        x_small=x_small,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_dark=on_dark,
        on_dense=on_dense,
        on_disabled=on_disabled,
        on_large=on_large,
        on_layout=on_layout,
        on_left=on_left,
        on_light=on_light,
        on_right=on_right,
        on_size=on_size,
        on_slot=on_slot,
        on_small=on_small,
        on_style_=on_style_,
        on_tag=on_tag,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_x_large=on_x_large,
        on_x_small=on_x_small,
    )
    widget_cls = ipyvuetify.generated.Icon
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Img(
    alt: str = None,
    aspect_ratio: typing.Union[str, float] = None,
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    contain: bool = None,
    eager: bool = None,
    gradient: str = None,
    height: typing.Union[float, str] = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    lazy_src: str = None,
    max_height: typing.Union[float, str] = None,
    max_width: typing.Union[float, str] = None,
    min_height: typing.Union[float, str] = None,
    min_width: typing.Union[float, str] = None,
    options: dict = None,
    position: str = None,
    sizes: str = None,
    slot: str = None,
    src: typing.Union[str, dict] = None,
    srcset: str = None,
    style_: str = None,
    transition: typing.Union[bool, str] = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    width: typing.Union[float, str] = None,
    on_alt: typing.Callable[[str], Any] = None,
    on_aspect_ratio: typing.Callable[[typing.Union[str, float]], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_contain: typing.Callable[[bool], Any] = None,
    on_eager: typing.Callable[[bool], Any] = None,
    on_gradient: typing.Callable[[str], Any] = None,
    on_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_lazy_src: typing.Callable[[str], Any] = None,
    on_max_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_max_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_min_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_min_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_options: typing.Callable[[dict], Any] = None,
    on_position: typing.Callable[[str], Any] = None,
    on_sizes: typing.Callable[[str], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_src: typing.Callable[[typing.Union[str, dict]], Any] = None,
    on_srcset: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_transition: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_width: typing.Callable[[typing.Union[float, str]], Any] = None,
) -> Element[ipyvuetify.generated.Img]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        alt=alt,
        aspect_ratio=aspect_ratio,
        attributes=attributes,
        children=children,
        class_=class_,
        contain=contain,
        eager=eager,
        gradient=gradient,
        height=height,
        layout=layout,
        lazy_src=lazy_src,
        max_height=max_height,
        max_width=max_width,
        min_height=min_height,
        min_width=min_width,
        options=options,
        position=position,
        sizes=sizes,
        slot=slot,
        src=src,
        srcset=srcset,
        style_=style_,
        transition=transition,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        width=width,
        on_alt=on_alt,
        on_aspect_ratio=on_aspect_ratio,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_contain=on_contain,
        on_eager=on_eager,
        on_gradient=on_gradient,
        on_height=on_height,
        on_layout=on_layout,
        on_lazy_src=on_lazy_src,
        on_max_height=on_max_height,
        on_max_width=on_max_width,
        on_min_height=on_min_height,
        on_min_width=on_min_width,
        on_options=on_options,
        on_position=on_position,
        on_sizes=on_sizes,
        on_slot=on_slot,
        on_src=on_src,
        on_srcset=on_srcset,
        on_style_=on_style_,
        on_transition=on_transition,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_width=on_width,
    )
    widget_cls = ipyvuetify.generated.Img
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Input(
    append_icon: str = None,
    attributes: dict = {},
    background_color: str = None,
    children: list = [],
    class_: str = None,
    color: str = None,
    dark: bool = None,
    dense: bool = None,
    disabled: bool = None,
    error: bool = None,
    error_count: typing.Union[float, str] = None,
    error_messages: typing.Union[str, list] = None,
    height: typing.Union[float, str] = None,
    hide_details: typing.Union[bool, str] = None,
    hint: str = None,
    id: str = None,
    label: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    loading: bool = None,
    messages: typing.Union[str, list] = None,
    persistent_hint: bool = None,
    prepend_icon: str = None,
    readonly: bool = None,
    rules: list = [],
    slot: str = None,
    style_: str = None,
    success: bool = None,
    success_messages: typing.Union[str, list] = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    validate_on_blur: bool = None,
    value: Any = None,
    on_append_icon: typing.Callable[[str], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_background_color: typing.Callable[[str], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_dense: typing.Callable[[bool], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_error: typing.Callable[[bool], Any] = None,
    on_error_count: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_error_messages: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_hide_details: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_hint: typing.Callable[[str], Any] = None,
    on_id: typing.Callable[[str], Any] = None,
    on_label: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_loading: typing.Callable[[bool], Any] = None,
    on_messages: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_persistent_hint: typing.Callable[[bool], Any] = None,
    on_prepend_icon: typing.Callable[[str], Any] = None,
    on_readonly: typing.Callable[[bool], Any] = None,
    on_rules: typing.Callable[[list], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_success: typing.Callable[[bool], Any] = None,
    on_success_messages: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_validate_on_blur: typing.Callable[[bool], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
) -> Element[ipyvuetify.generated.Input]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        append_icon=append_icon,
        attributes=attributes,
        background_color=background_color,
        children=children,
        class_=class_,
        color=color,
        dark=dark,
        dense=dense,
        disabled=disabled,
        error=error,
        error_count=error_count,
        error_messages=error_messages,
        height=height,
        hide_details=hide_details,
        hint=hint,
        id=id,
        label=label,
        layout=layout,
        light=light,
        loading=loading,
        messages=messages,
        persistent_hint=persistent_hint,
        prepend_icon=prepend_icon,
        readonly=readonly,
        rules=rules,
        slot=slot,
        style_=style_,
        success=success,
        success_messages=success_messages,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        validate_on_blur=validate_on_blur,
        value=value,
        on_append_icon=on_append_icon,
        on_attributes=on_attributes,
        on_background_color=on_background_color,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_dark=on_dark,
        on_dense=on_dense,
        on_disabled=on_disabled,
        on_error=on_error,
        on_error_count=on_error_count,
        on_error_messages=on_error_messages,
        on_height=on_height,
        on_hide_details=on_hide_details,
        on_hint=on_hint,
        on_id=on_id,
        on_label=on_label,
        on_layout=on_layout,
        on_light=on_light,
        on_loading=on_loading,
        on_messages=on_messages,
        on_persistent_hint=on_persistent_hint,
        on_prepend_icon=on_prepend_icon,
        on_readonly=on_readonly,
        on_rules=on_rules,
        on_slot=on_slot,
        on_style_=on_style_,
        on_success=on_success,
        on_success_messages=on_success_messages,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_validate_on_blur=on_validate_on_blur,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.Input
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Item(
    active_class: str = None,
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    disabled: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: Any = None,
    on_active_class: typing.Callable[[str], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
) -> Element[ipyvuetify.generated.Item]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        active_class=active_class,
        attributes=attributes,
        children=children,
        class_=class_,
        disabled=disabled,
        layout=layout,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        on_active_class=on_active_class,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_disabled=on_disabled,
        on_layout=on_layout,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.Item
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def ItemGroup(
    active_class: str = None,
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    dark: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    mandatory: bool = None,
    max: typing.Union[float, str] = None,
    multiple: bool = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: Any = None,
    on_active_class: typing.Callable[[str], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_mandatory: typing.Callable[[bool], Any] = None,
    on_max: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_multiple: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
) -> Element[ipyvuetify.generated.ItemGroup]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        active_class=active_class,
        attributes=attributes,
        children=children,
        class_=class_,
        dark=dark,
        layout=layout,
        light=light,
        mandatory=mandatory,
        max=max,
        multiple=multiple,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        on_active_class=on_active_class,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_dark=on_dark,
        on_layout=on_layout,
        on_light=on_light,
        on_mandatory=on_mandatory,
        on_max=on_max,
        on_multiple=on_multiple,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.ItemGroup
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Label(
    absolute: bool = None,
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    color: str = None,
    dark: bool = None,
    disabled: bool = None,
    focused: bool = None,
    for_: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    left: typing.Union[float, str] = None,
    light: bool = None,
    right: typing.Union[float, str] = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: bool = None,
    on_absolute: typing.Callable[[bool], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_focused: typing.Callable[[bool], Any] = None,
    on_for_: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_left: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_right: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[bool], Any] = None,
) -> Element[ipyvuetify.generated.Label]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        absolute=absolute,
        attributes=attributes,
        children=children,
        class_=class_,
        color=color,
        dark=dark,
        disabled=disabled,
        focused=focused,
        for_=for_,
        layout=layout,
        left=left,
        light=light,
        right=right,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        on_absolute=on_absolute,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_dark=on_dark,
        on_disabled=on_disabled,
        on_focused=on_focused,
        on_for_=on_for_,
        on_layout=on_layout,
        on_left=on_left,
        on_light=on_light,
        on_right=on_right,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.Label
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Layout(
    align_baseline: bool = None,
    align_center: bool = None,
    align_content_center: bool = None,
    align_content_end: bool = None,
    align_content_space_around: bool = None,
    align_content_space_between: bool = None,
    align_content_start: bool = None,
    align_end: bool = None,
    align_start: bool = None,
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    column: bool = None,
    d_block: bool = None,
    d_contents: bool = None,
    d_flex: bool = None,
    d_grid: bool = None,
    d_inherit: bool = None,
    d_initial: bool = None,
    d_inline: bool = None,
    d_inline_block: bool = None,
    d_inline_flex: bool = None,
    d_inline_grid: bool = None,
    d_inline_table: bool = None,
    d_list_item: bool = None,
    d_none: bool = None,
    d_run_in: bool = None,
    d_table: bool = None,
    d_table_caption: bool = None,
    d_table_cell: bool = None,
    d_table_column: bool = None,
    d_table_column_group: bool = None,
    d_table_footer_group: bool = None,
    d_table_header_group: bool = None,
    d_table_row: bool = None,
    d_table_row_group: bool = None,
    fill_height: bool = None,
    id: str = None,
    justify_center: bool = None,
    justify_end: bool = None,
    justify_space_around: bool = None,
    justify_space_between: bool = None,
    justify_start: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    ma_0: bool = None,
    ma_1: bool = None,
    ma_2: bool = None,
    ma_3: bool = None,
    ma_4: bool = None,
    ma_5: bool = None,
    ma_auto: bool = None,
    mb_0: bool = None,
    mb_1: bool = None,
    mb_2: bool = None,
    mb_3: bool = None,
    mb_4: bool = None,
    mb_5: bool = None,
    mb_auto: bool = None,
    ml_0: bool = None,
    ml_1: bool = None,
    ml_2: bool = None,
    ml_3: bool = None,
    ml_4: bool = None,
    ml_5: bool = None,
    ml_auto: bool = None,
    mr_0: bool = None,
    mr_1: bool = None,
    mr_2: bool = None,
    mr_3: bool = None,
    mr_4: bool = None,
    mr_5: bool = None,
    mr_auto: bool = None,
    mt_0: bool = None,
    mt_1: bool = None,
    mt_2: bool = None,
    mt_3: bool = None,
    mt_4: bool = None,
    mt_5: bool = None,
    mt_auto: bool = None,
    mx_0: bool = None,
    mx_1: bool = None,
    mx_2: bool = None,
    mx_3: bool = None,
    mx_4: bool = None,
    mx_5: bool = None,
    mx_auto: bool = None,
    my_0: bool = None,
    my_1: bool = None,
    my_2: bool = None,
    my_3: bool = None,
    my_4: bool = None,
    my_5: bool = None,
    my_auto: bool = None,
    pa_0: bool = None,
    pa_1: bool = None,
    pa_2: bool = None,
    pa_3: bool = None,
    pa_4: bool = None,
    pa_5: bool = None,
    pa_auto: bool = None,
    pb_0: bool = None,
    pb_1: bool = None,
    pb_2: bool = None,
    pb_3: bool = None,
    pb_4: bool = None,
    pb_5: bool = None,
    pb_auto: bool = None,
    pl_0: bool = None,
    pl_1: bool = None,
    pl_2: bool = None,
    pl_3: bool = None,
    pl_4: bool = None,
    pl_5: bool = None,
    pl_auto: bool = None,
    pr_0: bool = None,
    pr_1: bool = None,
    pr_2: bool = None,
    pr_3: bool = None,
    pr_4: bool = None,
    pr_5: bool = None,
    pr_auto: bool = None,
    pt_0: bool = None,
    pt_1: bool = None,
    pt_2: bool = None,
    pt_3: bool = None,
    pt_4: bool = None,
    pt_5: bool = None,
    pt_auto: bool = None,
    px_0: bool = None,
    px_1: bool = None,
    px_2: bool = None,
    px_3: bool = None,
    px_4: bool = None,
    px_5: bool = None,
    px_auto: bool = None,
    py_0: bool = None,
    py_1: bool = None,
    py_2: bool = None,
    py_3: bool = None,
    py_4: bool = None,
    py_5: bool = None,
    py_auto: bool = None,
    reverse: bool = None,
    row: bool = None,
    slot: str = None,
    style_: str = None,
    tag: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    wrap: bool = None,
    on_align_baseline: typing.Callable[[bool], Any] = None,
    on_align_center: typing.Callable[[bool], Any] = None,
    on_align_content_center: typing.Callable[[bool], Any] = None,
    on_align_content_end: typing.Callable[[bool], Any] = None,
    on_align_content_space_around: typing.Callable[[bool], Any] = None,
    on_align_content_space_between: typing.Callable[[bool], Any] = None,
    on_align_content_start: typing.Callable[[bool], Any] = None,
    on_align_end: typing.Callable[[bool], Any] = None,
    on_align_start: typing.Callable[[bool], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_column: typing.Callable[[bool], Any] = None,
    on_d_block: typing.Callable[[bool], Any] = None,
    on_d_contents: typing.Callable[[bool], Any] = None,
    on_d_flex: typing.Callable[[bool], Any] = None,
    on_d_grid: typing.Callable[[bool], Any] = None,
    on_d_inherit: typing.Callable[[bool], Any] = None,
    on_d_initial: typing.Callable[[bool], Any] = None,
    on_d_inline: typing.Callable[[bool], Any] = None,
    on_d_inline_block: typing.Callable[[bool], Any] = None,
    on_d_inline_flex: typing.Callable[[bool], Any] = None,
    on_d_inline_grid: typing.Callable[[bool], Any] = None,
    on_d_inline_table: typing.Callable[[bool], Any] = None,
    on_d_list_item: typing.Callable[[bool], Any] = None,
    on_d_none: typing.Callable[[bool], Any] = None,
    on_d_run_in: typing.Callable[[bool], Any] = None,
    on_d_table: typing.Callable[[bool], Any] = None,
    on_d_table_caption: typing.Callable[[bool], Any] = None,
    on_d_table_cell: typing.Callable[[bool], Any] = None,
    on_d_table_column: typing.Callable[[bool], Any] = None,
    on_d_table_column_group: typing.Callable[[bool], Any] = None,
    on_d_table_footer_group: typing.Callable[[bool], Any] = None,
    on_d_table_header_group: typing.Callable[[bool], Any] = None,
    on_d_table_row: typing.Callable[[bool], Any] = None,
    on_d_table_row_group: typing.Callable[[bool], Any] = None,
    on_fill_height: typing.Callable[[bool], Any] = None,
    on_id: typing.Callable[[str], Any] = None,
    on_justify_center: typing.Callable[[bool], Any] = None,
    on_justify_end: typing.Callable[[bool], Any] = None,
    on_justify_space_around: typing.Callable[[bool], Any] = None,
    on_justify_space_between: typing.Callable[[bool], Any] = None,
    on_justify_start: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_ma_0: typing.Callable[[bool], Any] = None,
    on_ma_1: typing.Callable[[bool], Any] = None,
    on_ma_2: typing.Callable[[bool], Any] = None,
    on_ma_3: typing.Callable[[bool], Any] = None,
    on_ma_4: typing.Callable[[bool], Any] = None,
    on_ma_5: typing.Callable[[bool], Any] = None,
    on_ma_auto: typing.Callable[[bool], Any] = None,
    on_mb_0: typing.Callable[[bool], Any] = None,
    on_mb_1: typing.Callable[[bool], Any] = None,
    on_mb_2: typing.Callable[[bool], Any] = None,
    on_mb_3: typing.Callable[[bool], Any] = None,
    on_mb_4: typing.Callable[[bool], Any] = None,
    on_mb_5: typing.Callable[[bool], Any] = None,
    on_mb_auto: typing.Callable[[bool], Any] = None,
    on_ml_0: typing.Callable[[bool], Any] = None,
    on_ml_1: typing.Callable[[bool], Any] = None,
    on_ml_2: typing.Callable[[bool], Any] = None,
    on_ml_3: typing.Callable[[bool], Any] = None,
    on_ml_4: typing.Callable[[bool], Any] = None,
    on_ml_5: typing.Callable[[bool], Any] = None,
    on_ml_auto: typing.Callable[[bool], Any] = None,
    on_mr_0: typing.Callable[[bool], Any] = None,
    on_mr_1: typing.Callable[[bool], Any] = None,
    on_mr_2: typing.Callable[[bool], Any] = None,
    on_mr_3: typing.Callable[[bool], Any] = None,
    on_mr_4: typing.Callable[[bool], Any] = None,
    on_mr_5: typing.Callable[[bool], Any] = None,
    on_mr_auto: typing.Callable[[bool], Any] = None,
    on_mt_0: typing.Callable[[bool], Any] = None,
    on_mt_1: typing.Callable[[bool], Any] = None,
    on_mt_2: typing.Callable[[bool], Any] = None,
    on_mt_3: typing.Callable[[bool], Any] = None,
    on_mt_4: typing.Callable[[bool], Any] = None,
    on_mt_5: typing.Callable[[bool], Any] = None,
    on_mt_auto: typing.Callable[[bool], Any] = None,
    on_mx_0: typing.Callable[[bool], Any] = None,
    on_mx_1: typing.Callable[[bool], Any] = None,
    on_mx_2: typing.Callable[[bool], Any] = None,
    on_mx_3: typing.Callable[[bool], Any] = None,
    on_mx_4: typing.Callable[[bool], Any] = None,
    on_mx_5: typing.Callable[[bool], Any] = None,
    on_mx_auto: typing.Callable[[bool], Any] = None,
    on_my_0: typing.Callable[[bool], Any] = None,
    on_my_1: typing.Callable[[bool], Any] = None,
    on_my_2: typing.Callable[[bool], Any] = None,
    on_my_3: typing.Callable[[bool], Any] = None,
    on_my_4: typing.Callable[[bool], Any] = None,
    on_my_5: typing.Callable[[bool], Any] = None,
    on_my_auto: typing.Callable[[bool], Any] = None,
    on_pa_0: typing.Callable[[bool], Any] = None,
    on_pa_1: typing.Callable[[bool], Any] = None,
    on_pa_2: typing.Callable[[bool], Any] = None,
    on_pa_3: typing.Callable[[bool], Any] = None,
    on_pa_4: typing.Callable[[bool], Any] = None,
    on_pa_5: typing.Callable[[bool], Any] = None,
    on_pa_auto: typing.Callable[[bool], Any] = None,
    on_pb_0: typing.Callable[[bool], Any] = None,
    on_pb_1: typing.Callable[[bool], Any] = None,
    on_pb_2: typing.Callable[[bool], Any] = None,
    on_pb_3: typing.Callable[[bool], Any] = None,
    on_pb_4: typing.Callable[[bool], Any] = None,
    on_pb_5: typing.Callable[[bool], Any] = None,
    on_pb_auto: typing.Callable[[bool], Any] = None,
    on_pl_0: typing.Callable[[bool], Any] = None,
    on_pl_1: typing.Callable[[bool], Any] = None,
    on_pl_2: typing.Callable[[bool], Any] = None,
    on_pl_3: typing.Callable[[bool], Any] = None,
    on_pl_4: typing.Callable[[bool], Any] = None,
    on_pl_5: typing.Callable[[bool], Any] = None,
    on_pl_auto: typing.Callable[[bool], Any] = None,
    on_pr_0: typing.Callable[[bool], Any] = None,
    on_pr_1: typing.Callable[[bool], Any] = None,
    on_pr_2: typing.Callable[[bool], Any] = None,
    on_pr_3: typing.Callable[[bool], Any] = None,
    on_pr_4: typing.Callable[[bool], Any] = None,
    on_pr_5: typing.Callable[[bool], Any] = None,
    on_pr_auto: typing.Callable[[bool], Any] = None,
    on_pt_0: typing.Callable[[bool], Any] = None,
    on_pt_1: typing.Callable[[bool], Any] = None,
    on_pt_2: typing.Callable[[bool], Any] = None,
    on_pt_3: typing.Callable[[bool], Any] = None,
    on_pt_4: typing.Callable[[bool], Any] = None,
    on_pt_5: typing.Callable[[bool], Any] = None,
    on_pt_auto: typing.Callable[[bool], Any] = None,
    on_px_0: typing.Callable[[bool], Any] = None,
    on_px_1: typing.Callable[[bool], Any] = None,
    on_px_2: typing.Callable[[bool], Any] = None,
    on_px_3: typing.Callable[[bool], Any] = None,
    on_px_4: typing.Callable[[bool], Any] = None,
    on_px_5: typing.Callable[[bool], Any] = None,
    on_px_auto: typing.Callable[[bool], Any] = None,
    on_py_0: typing.Callable[[bool], Any] = None,
    on_py_1: typing.Callable[[bool], Any] = None,
    on_py_2: typing.Callable[[bool], Any] = None,
    on_py_3: typing.Callable[[bool], Any] = None,
    on_py_4: typing.Callable[[bool], Any] = None,
    on_py_5: typing.Callable[[bool], Any] = None,
    on_py_auto: typing.Callable[[bool], Any] = None,
    on_reverse: typing.Callable[[bool], Any] = None,
    on_row: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_tag: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_wrap: typing.Callable[[bool], Any] = None,
) -> Element[ipyvuetify.generated.Layout]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        align_baseline=align_baseline,
        align_center=align_center,
        align_content_center=align_content_center,
        align_content_end=align_content_end,
        align_content_space_around=align_content_space_around,
        align_content_space_between=align_content_space_between,
        align_content_start=align_content_start,
        align_end=align_end,
        align_start=align_start,
        attributes=attributes,
        children=children,
        class_=class_,
        column=column,
        d_block=d_block,
        d_contents=d_contents,
        d_flex=d_flex,
        d_grid=d_grid,
        d_inherit=d_inherit,
        d_initial=d_initial,
        d_inline=d_inline,
        d_inline_block=d_inline_block,
        d_inline_flex=d_inline_flex,
        d_inline_grid=d_inline_grid,
        d_inline_table=d_inline_table,
        d_list_item=d_list_item,
        d_none=d_none,
        d_run_in=d_run_in,
        d_table=d_table,
        d_table_caption=d_table_caption,
        d_table_cell=d_table_cell,
        d_table_column=d_table_column,
        d_table_column_group=d_table_column_group,
        d_table_footer_group=d_table_footer_group,
        d_table_header_group=d_table_header_group,
        d_table_row=d_table_row,
        d_table_row_group=d_table_row_group,
        fill_height=fill_height,
        id=id,
        justify_center=justify_center,
        justify_end=justify_end,
        justify_space_around=justify_space_around,
        justify_space_between=justify_space_between,
        justify_start=justify_start,
        layout=layout,
        ma_0=ma_0,
        ma_1=ma_1,
        ma_2=ma_2,
        ma_3=ma_3,
        ma_4=ma_4,
        ma_5=ma_5,
        ma_auto=ma_auto,
        mb_0=mb_0,
        mb_1=mb_1,
        mb_2=mb_2,
        mb_3=mb_3,
        mb_4=mb_4,
        mb_5=mb_5,
        mb_auto=mb_auto,
        ml_0=ml_0,
        ml_1=ml_1,
        ml_2=ml_2,
        ml_3=ml_3,
        ml_4=ml_4,
        ml_5=ml_5,
        ml_auto=ml_auto,
        mr_0=mr_0,
        mr_1=mr_1,
        mr_2=mr_2,
        mr_3=mr_3,
        mr_4=mr_4,
        mr_5=mr_5,
        mr_auto=mr_auto,
        mt_0=mt_0,
        mt_1=mt_1,
        mt_2=mt_2,
        mt_3=mt_3,
        mt_4=mt_4,
        mt_5=mt_5,
        mt_auto=mt_auto,
        mx_0=mx_0,
        mx_1=mx_1,
        mx_2=mx_2,
        mx_3=mx_3,
        mx_4=mx_4,
        mx_5=mx_5,
        mx_auto=mx_auto,
        my_0=my_0,
        my_1=my_1,
        my_2=my_2,
        my_3=my_3,
        my_4=my_4,
        my_5=my_5,
        my_auto=my_auto,
        pa_0=pa_0,
        pa_1=pa_1,
        pa_2=pa_2,
        pa_3=pa_3,
        pa_4=pa_4,
        pa_5=pa_5,
        pa_auto=pa_auto,
        pb_0=pb_0,
        pb_1=pb_1,
        pb_2=pb_2,
        pb_3=pb_3,
        pb_4=pb_4,
        pb_5=pb_5,
        pb_auto=pb_auto,
        pl_0=pl_0,
        pl_1=pl_1,
        pl_2=pl_2,
        pl_3=pl_3,
        pl_4=pl_4,
        pl_5=pl_5,
        pl_auto=pl_auto,
        pr_0=pr_0,
        pr_1=pr_1,
        pr_2=pr_2,
        pr_3=pr_3,
        pr_4=pr_4,
        pr_5=pr_5,
        pr_auto=pr_auto,
        pt_0=pt_0,
        pt_1=pt_1,
        pt_2=pt_2,
        pt_3=pt_3,
        pt_4=pt_4,
        pt_5=pt_5,
        pt_auto=pt_auto,
        px_0=px_0,
        px_1=px_1,
        px_2=px_2,
        px_3=px_3,
        px_4=px_4,
        px_5=px_5,
        px_auto=px_auto,
        py_0=py_0,
        py_1=py_1,
        py_2=py_2,
        py_3=py_3,
        py_4=py_4,
        py_5=py_5,
        py_auto=py_auto,
        reverse=reverse,
        row=row,
        slot=slot,
        style_=style_,
        tag=tag,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        wrap=wrap,
        on_align_baseline=on_align_baseline,
        on_align_center=on_align_center,
        on_align_content_center=on_align_content_center,
        on_align_content_end=on_align_content_end,
        on_align_content_space_around=on_align_content_space_around,
        on_align_content_space_between=on_align_content_space_between,
        on_align_content_start=on_align_content_start,
        on_align_end=on_align_end,
        on_align_start=on_align_start,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_column=on_column,
        on_d_block=on_d_block,
        on_d_contents=on_d_contents,
        on_d_flex=on_d_flex,
        on_d_grid=on_d_grid,
        on_d_inherit=on_d_inherit,
        on_d_initial=on_d_initial,
        on_d_inline=on_d_inline,
        on_d_inline_block=on_d_inline_block,
        on_d_inline_flex=on_d_inline_flex,
        on_d_inline_grid=on_d_inline_grid,
        on_d_inline_table=on_d_inline_table,
        on_d_list_item=on_d_list_item,
        on_d_none=on_d_none,
        on_d_run_in=on_d_run_in,
        on_d_table=on_d_table,
        on_d_table_caption=on_d_table_caption,
        on_d_table_cell=on_d_table_cell,
        on_d_table_column=on_d_table_column,
        on_d_table_column_group=on_d_table_column_group,
        on_d_table_footer_group=on_d_table_footer_group,
        on_d_table_header_group=on_d_table_header_group,
        on_d_table_row=on_d_table_row,
        on_d_table_row_group=on_d_table_row_group,
        on_fill_height=on_fill_height,
        on_id=on_id,
        on_justify_center=on_justify_center,
        on_justify_end=on_justify_end,
        on_justify_space_around=on_justify_space_around,
        on_justify_space_between=on_justify_space_between,
        on_justify_start=on_justify_start,
        on_layout=on_layout,
        on_ma_0=on_ma_0,
        on_ma_1=on_ma_1,
        on_ma_2=on_ma_2,
        on_ma_3=on_ma_3,
        on_ma_4=on_ma_4,
        on_ma_5=on_ma_5,
        on_ma_auto=on_ma_auto,
        on_mb_0=on_mb_0,
        on_mb_1=on_mb_1,
        on_mb_2=on_mb_2,
        on_mb_3=on_mb_3,
        on_mb_4=on_mb_4,
        on_mb_5=on_mb_5,
        on_mb_auto=on_mb_auto,
        on_ml_0=on_ml_0,
        on_ml_1=on_ml_1,
        on_ml_2=on_ml_2,
        on_ml_3=on_ml_3,
        on_ml_4=on_ml_4,
        on_ml_5=on_ml_5,
        on_ml_auto=on_ml_auto,
        on_mr_0=on_mr_0,
        on_mr_1=on_mr_1,
        on_mr_2=on_mr_2,
        on_mr_3=on_mr_3,
        on_mr_4=on_mr_4,
        on_mr_5=on_mr_5,
        on_mr_auto=on_mr_auto,
        on_mt_0=on_mt_0,
        on_mt_1=on_mt_1,
        on_mt_2=on_mt_2,
        on_mt_3=on_mt_3,
        on_mt_4=on_mt_4,
        on_mt_5=on_mt_5,
        on_mt_auto=on_mt_auto,
        on_mx_0=on_mx_0,
        on_mx_1=on_mx_1,
        on_mx_2=on_mx_2,
        on_mx_3=on_mx_3,
        on_mx_4=on_mx_4,
        on_mx_5=on_mx_5,
        on_mx_auto=on_mx_auto,
        on_my_0=on_my_0,
        on_my_1=on_my_1,
        on_my_2=on_my_2,
        on_my_3=on_my_3,
        on_my_4=on_my_4,
        on_my_5=on_my_5,
        on_my_auto=on_my_auto,
        on_pa_0=on_pa_0,
        on_pa_1=on_pa_1,
        on_pa_2=on_pa_2,
        on_pa_3=on_pa_3,
        on_pa_4=on_pa_4,
        on_pa_5=on_pa_5,
        on_pa_auto=on_pa_auto,
        on_pb_0=on_pb_0,
        on_pb_1=on_pb_1,
        on_pb_2=on_pb_2,
        on_pb_3=on_pb_3,
        on_pb_4=on_pb_4,
        on_pb_5=on_pb_5,
        on_pb_auto=on_pb_auto,
        on_pl_0=on_pl_0,
        on_pl_1=on_pl_1,
        on_pl_2=on_pl_2,
        on_pl_3=on_pl_3,
        on_pl_4=on_pl_4,
        on_pl_5=on_pl_5,
        on_pl_auto=on_pl_auto,
        on_pr_0=on_pr_0,
        on_pr_1=on_pr_1,
        on_pr_2=on_pr_2,
        on_pr_3=on_pr_3,
        on_pr_4=on_pr_4,
        on_pr_5=on_pr_5,
        on_pr_auto=on_pr_auto,
        on_pt_0=on_pt_0,
        on_pt_1=on_pt_1,
        on_pt_2=on_pt_2,
        on_pt_3=on_pt_3,
        on_pt_4=on_pt_4,
        on_pt_5=on_pt_5,
        on_pt_auto=on_pt_auto,
        on_px_0=on_px_0,
        on_px_1=on_px_1,
        on_px_2=on_px_2,
        on_px_3=on_px_3,
        on_px_4=on_px_4,
        on_px_5=on_px_5,
        on_px_auto=on_px_auto,
        on_py_0=on_py_0,
        on_py_1=on_py_1,
        on_py_2=on_py_2,
        on_py_3=on_py_3,
        on_py_4=on_py_4,
        on_py_5=on_py_5,
        on_py_auto=on_py_auto,
        on_reverse=on_reverse,
        on_row=on_row,
        on_slot=on_slot,
        on_style_=on_style_,
        on_tag=on_tag,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_wrap=on_wrap,
    )
    widget_cls = ipyvuetify.generated.Layout
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Lazy(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    min_height: typing.Union[float, str] = None,
    options: dict = None,
    slot: str = None,
    style_: str = None,
    tag: str = None,
    transition: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: Any = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_min_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_options: typing.Callable[[dict], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_tag: typing.Callable[[str], Any] = None,
    on_transition: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
) -> Element[ipyvuetify.generated.Lazy]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        layout=layout,
        min_height=min_height,
        options=options,
        slot=slot,
        style_=style_,
        tag=tag,
        transition=transition,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_layout=on_layout,
        on_min_height=on_min_height,
        on_options=on_options,
        on_slot=on_slot,
        on_style_=on_style_,
        on_tag=on_tag,
        on_transition=on_transition,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.Lazy
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def List(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    color: str = None,
    dark: bool = None,
    dense: bool = None,
    disabled: bool = None,
    elevation: typing.Union[float, str] = None,
    expand: bool = None,
    flat: bool = None,
    height: typing.Union[float, str] = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    max_height: typing.Union[float, str] = None,
    max_width: typing.Union[float, str] = None,
    min_height: typing.Union[float, str] = None,
    min_width: typing.Union[float, str] = None,
    nav: bool = None,
    rounded: bool = None,
    shaped: bool = None,
    slot: str = None,
    style_: str = None,
    subheader: bool = None,
    tag: str = None,
    three_line: bool = None,
    tile: bool = None,
    two_line: bool = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    width: typing.Union[float, str] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_dense: typing.Callable[[bool], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_elevation: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_expand: typing.Callable[[bool], Any] = None,
    on_flat: typing.Callable[[bool], Any] = None,
    on_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_max_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_max_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_min_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_min_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_nav: typing.Callable[[bool], Any] = None,
    on_rounded: typing.Callable[[bool], Any] = None,
    on_shaped: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_subheader: typing.Callable[[bool], Any] = None,
    on_tag: typing.Callable[[str], Any] = None,
    on_three_line: typing.Callable[[bool], Any] = None,
    on_tile: typing.Callable[[bool], Any] = None,
    on_two_line: typing.Callable[[bool], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_width: typing.Callable[[typing.Union[float, str]], Any] = None,
) -> Element[ipyvuetify.generated.List]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        color=color,
        dark=dark,
        dense=dense,
        disabled=disabled,
        elevation=elevation,
        expand=expand,
        flat=flat,
        height=height,
        layout=layout,
        light=light,
        max_height=max_height,
        max_width=max_width,
        min_height=min_height,
        min_width=min_width,
        nav=nav,
        rounded=rounded,
        shaped=shaped,
        slot=slot,
        style_=style_,
        subheader=subheader,
        tag=tag,
        three_line=three_line,
        tile=tile,
        two_line=two_line,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        width=width,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_dark=on_dark,
        on_dense=on_dense,
        on_disabled=on_disabled,
        on_elevation=on_elevation,
        on_expand=on_expand,
        on_flat=on_flat,
        on_height=on_height,
        on_layout=on_layout,
        on_light=on_light,
        on_max_height=on_max_height,
        on_max_width=on_max_width,
        on_min_height=on_min_height,
        on_min_width=on_min_width,
        on_nav=on_nav,
        on_rounded=on_rounded,
        on_shaped=on_shaped,
        on_slot=on_slot,
        on_style_=on_style_,
        on_subheader=on_subheader,
        on_tag=on_tag,
        on_three_line=on_three_line,
        on_tile=on_tile,
        on_two_line=on_two_line,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_width=on_width,
    )
    widget_cls = ipyvuetify.generated.List
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def ListGroup(
    active_class: str = None,
    append_icon: str = None,
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    color: str = None,
    disabled: bool = None,
    eager: bool = None,
    group: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    no_action: bool = None,
    prepend_icon: str = None,
    ripple: typing.Union[bool, dict] = None,
    slot: str = None,
    style_: str = None,
    sub_group: bool = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: Any = None,
    on_active_class: typing.Callable[[str], Any] = None,
    on_append_icon: typing.Callable[[str], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_eager: typing.Callable[[bool], Any] = None,
    on_group: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_no_action: typing.Callable[[bool], Any] = None,
    on_prepend_icon: typing.Callable[[str], Any] = None,
    on_ripple: typing.Callable[[typing.Union[bool, dict]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_sub_group: typing.Callable[[bool], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
) -> Element[ipyvuetify.generated.ListGroup]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        active_class=active_class,
        append_icon=append_icon,
        attributes=attributes,
        children=children,
        class_=class_,
        color=color,
        disabled=disabled,
        eager=eager,
        group=group,
        layout=layout,
        no_action=no_action,
        prepend_icon=prepend_icon,
        ripple=ripple,
        slot=slot,
        style_=style_,
        sub_group=sub_group,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        on_active_class=on_active_class,
        on_append_icon=on_append_icon,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_disabled=on_disabled,
        on_eager=on_eager,
        on_group=on_group,
        on_layout=on_layout,
        on_no_action=on_no_action,
        on_prepend_icon=on_prepend_icon,
        on_ripple=on_ripple,
        on_slot=on_slot,
        on_style_=on_style_,
        on_sub_group=on_sub_group,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.ListGroup
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def ListItem(
    active_class: str = None,
    append: bool = None,
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    color: str = None,
    dark: bool = None,
    dense: bool = None,
    disabled: bool = None,
    exact: bool = None,
    exact_active_class: str = None,
    href: typing.Union[str, dict] = None,
    inactive: bool = None,
    input_value: Any = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    link: bool = None,
    nuxt: bool = None,
    replace: bool = None,
    ripple: typing.Union[bool, dict] = None,
    selectable: bool = None,
    slot: str = None,
    style_: str = None,
    tag: str = None,
    target: str = None,
    three_line: bool = None,
    to: typing.Union[str, dict] = None,
    two_line: bool = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: Any = None,
    on_active_class: typing.Callable[[str], Any] = None,
    on_append: typing.Callable[[bool], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_dense: typing.Callable[[bool], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_exact: typing.Callable[[bool], Any] = None,
    on_exact_active_class: typing.Callable[[str], Any] = None,
    on_href: typing.Callable[[typing.Union[str, dict]], Any] = None,
    on_inactive: typing.Callable[[bool], Any] = None,
    on_input_value: typing.Callable[[Any], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_link: typing.Callable[[bool], Any] = None,
    on_nuxt: typing.Callable[[bool], Any] = None,
    on_replace: typing.Callable[[bool], Any] = None,
    on_ripple: typing.Callable[[typing.Union[bool, dict]], Any] = None,
    on_selectable: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_tag: typing.Callable[[str], Any] = None,
    on_target: typing.Callable[[str], Any] = None,
    on_three_line: typing.Callable[[bool], Any] = None,
    on_to: typing.Callable[[typing.Union[str, dict]], Any] = None,
    on_two_line: typing.Callable[[bool], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
) -> Element[ipyvuetify.generated.ListItem]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        active_class=active_class,
        append=append,
        attributes=attributes,
        children=children,
        class_=class_,
        color=color,
        dark=dark,
        dense=dense,
        disabled=disabled,
        exact=exact,
        exact_active_class=exact_active_class,
        href=href,
        inactive=inactive,
        input_value=input_value,
        layout=layout,
        light=light,
        link=link,
        nuxt=nuxt,
        replace=replace,
        ripple=ripple,
        selectable=selectable,
        slot=slot,
        style_=style_,
        tag=tag,
        target=target,
        three_line=three_line,
        to=to,
        two_line=two_line,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        on_active_class=on_active_class,
        on_append=on_append,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_dark=on_dark,
        on_dense=on_dense,
        on_disabled=on_disabled,
        on_exact=on_exact,
        on_exact_active_class=on_exact_active_class,
        on_href=on_href,
        on_inactive=on_inactive,
        on_input_value=on_input_value,
        on_layout=on_layout,
        on_light=on_light,
        on_link=on_link,
        on_nuxt=on_nuxt,
        on_replace=on_replace,
        on_ripple=on_ripple,
        on_selectable=on_selectable,
        on_slot=on_slot,
        on_style_=on_style_,
        on_tag=on_tag,
        on_target=on_target,
        on_three_line=on_three_line,
        on_to=on_to,
        on_two_line=on_two_line,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.ListItem
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def ListItemAction(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.ListItemAction]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        layout=layout,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_layout=on_layout,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.ListItemAction
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def ListItemActionText(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.ListItemActionText]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        layout=layout,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_layout=on_layout,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.ListItemActionText
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def ListItemAvatar(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    color: str = None,
    height: typing.Union[float, str] = None,
    horizontal: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    left: bool = None,
    max_height: typing.Union[float, str] = None,
    max_width: typing.Union[float, str] = None,
    min_height: typing.Union[float, str] = None,
    min_width: typing.Union[float, str] = None,
    right: bool = None,
    size: typing.Union[float, str] = None,
    slot: str = None,
    style_: str = None,
    tile: bool = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    width: typing.Union[float, str] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_horizontal: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_left: typing.Callable[[bool], Any] = None,
    on_max_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_max_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_min_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_min_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_right: typing.Callable[[bool], Any] = None,
    on_size: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_tile: typing.Callable[[bool], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_width: typing.Callable[[typing.Union[float, str]], Any] = None,
) -> Element[ipyvuetify.generated.ListItemAvatar]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        color=color,
        height=height,
        horizontal=horizontal,
        layout=layout,
        left=left,
        max_height=max_height,
        max_width=max_width,
        min_height=min_height,
        min_width=min_width,
        right=right,
        size=size,
        slot=slot,
        style_=style_,
        tile=tile,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        width=width,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_height=on_height,
        on_horizontal=on_horizontal,
        on_layout=on_layout,
        on_left=on_left,
        on_max_height=on_max_height,
        on_max_width=on_max_width,
        on_min_height=on_min_height,
        on_min_width=on_min_width,
        on_right=on_right,
        on_size=on_size,
        on_slot=on_slot,
        on_style_=on_style_,
        on_tile=on_tile,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_width=on_width,
    )
    widget_cls = ipyvuetify.generated.ListItemAvatar
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def ListItemContent(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.ListItemContent]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        layout=layout,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_layout=on_layout,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.ListItemContent
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def ListItemGroup(
    active_class: str = None,
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    color: str = None,
    dark: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    mandatory: bool = None,
    max: typing.Union[float, str] = None,
    multiple: bool = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: Any = None,
    on_active_class: typing.Callable[[str], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_mandatory: typing.Callable[[bool], Any] = None,
    on_max: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_multiple: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
) -> Element[ipyvuetify.generated.ListItemGroup]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        active_class=active_class,
        attributes=attributes,
        children=children,
        class_=class_,
        color=color,
        dark=dark,
        layout=layout,
        light=light,
        mandatory=mandatory,
        max=max,
        multiple=multiple,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        on_active_class=on_active_class,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_dark=on_dark,
        on_layout=on_layout,
        on_light=on_light,
        on_mandatory=on_mandatory,
        on_max=on_max,
        on_multiple=on_multiple,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.ListItemGroup
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def ListItemIcon(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.ListItemIcon]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        layout=layout,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_layout=on_layout,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.ListItemIcon
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def ListItemSubtitle(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.ListItemSubtitle]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        layout=layout,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_layout=on_layout,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.ListItemSubtitle
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def ListItemTitle(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.ListItemTitle]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        layout=layout,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_layout=on_layout,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.ListItemTitle
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Menu(
    absolute: bool = None,
    activator: Any = None,
    allow_overflow: bool = None,
    attach: Any = None,
    attributes: dict = {},
    auto: bool = None,
    bottom: bool = None,
    children: list = [],
    class_: str = None,
    close_delay: typing.Union[float, str] = None,
    close_on_click: bool = None,
    close_on_content_click: bool = None,
    content_class: str = None,
    dark: bool = None,
    disable_keys: bool = None,
    disabled: bool = None,
    eager: bool = None,
    fixed: bool = None,
    internal_activator: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    left: bool = None,
    light: bool = None,
    max_height: typing.Union[float, str] = None,
    max_width: typing.Union[float, str] = None,
    min_width: typing.Union[float, str] = None,
    nudge_bottom: typing.Union[float, str] = None,
    nudge_left: typing.Union[float, str] = None,
    nudge_right: typing.Union[float, str] = None,
    nudge_top: typing.Union[float, str] = None,
    nudge_width: typing.Union[float, str] = None,
    offset_overflow: bool = None,
    offset_x: bool = None,
    offset_y: bool = None,
    open_delay: typing.Union[float, str] = None,
    open_on_click: bool = None,
    open_on_hover: bool = None,
    origin: str = None,
    position_x: float = None,
    position_y: float = None,
    return_value: Any = None,
    right: bool = None,
    slot: str = None,
    style_: str = None,
    top: bool = None,
    transition: typing.Union[bool, str] = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: Any = None,
    z_index: typing.Union[float, str] = None,
    on_absolute: typing.Callable[[bool], Any] = None,
    on_activator: typing.Callable[[Any], Any] = None,
    on_allow_overflow: typing.Callable[[bool], Any] = None,
    on_attach: typing.Callable[[Any], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_auto: typing.Callable[[bool], Any] = None,
    on_bottom: typing.Callable[[bool], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_close_delay: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_close_on_click: typing.Callable[[bool], Any] = None,
    on_close_on_content_click: typing.Callable[[bool], Any] = None,
    on_content_class: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_disable_keys: typing.Callable[[bool], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_eager: typing.Callable[[bool], Any] = None,
    on_fixed: typing.Callable[[bool], Any] = None,
    on_internal_activator: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_left: typing.Callable[[bool], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_max_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_max_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_min_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_nudge_bottom: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_nudge_left: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_nudge_right: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_nudge_top: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_nudge_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_offset_overflow: typing.Callable[[bool], Any] = None,
    on_offset_x: typing.Callable[[bool], Any] = None,
    on_offset_y: typing.Callable[[bool], Any] = None,
    on_open_delay: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_open_on_click: typing.Callable[[bool], Any] = None,
    on_open_on_hover: typing.Callable[[bool], Any] = None,
    on_origin: typing.Callable[[str], Any] = None,
    on_position_x: typing.Callable[[float], Any] = None,
    on_position_y: typing.Callable[[float], Any] = None,
    on_return_value: typing.Callable[[Any], Any] = None,
    on_right: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_top: typing.Callable[[bool], Any] = None,
    on_transition: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
    on_z_index: typing.Callable[[typing.Union[float, str]], Any] = None,
) -> Element[ipyvuetify.generated.Menu]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        absolute=absolute,
        activator=activator,
        allow_overflow=allow_overflow,
        attach=attach,
        attributes=attributes,
        auto=auto,
        bottom=bottom,
        children=children,
        class_=class_,
        close_delay=close_delay,
        close_on_click=close_on_click,
        close_on_content_click=close_on_content_click,
        content_class=content_class,
        dark=dark,
        disable_keys=disable_keys,
        disabled=disabled,
        eager=eager,
        fixed=fixed,
        internal_activator=internal_activator,
        layout=layout,
        left=left,
        light=light,
        max_height=max_height,
        max_width=max_width,
        min_width=min_width,
        nudge_bottom=nudge_bottom,
        nudge_left=nudge_left,
        nudge_right=nudge_right,
        nudge_top=nudge_top,
        nudge_width=nudge_width,
        offset_overflow=offset_overflow,
        offset_x=offset_x,
        offset_y=offset_y,
        open_delay=open_delay,
        open_on_click=open_on_click,
        open_on_hover=open_on_hover,
        origin=origin,
        position_x=position_x,
        position_y=position_y,
        return_value=return_value,
        right=right,
        slot=slot,
        style_=style_,
        top=top,
        transition=transition,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        z_index=z_index,
        on_absolute=on_absolute,
        on_activator=on_activator,
        on_allow_overflow=on_allow_overflow,
        on_attach=on_attach,
        on_attributes=on_attributes,
        on_auto=on_auto,
        on_bottom=on_bottom,
        on_children=on_children,
        on_class_=on_class_,
        on_close_delay=on_close_delay,
        on_close_on_click=on_close_on_click,
        on_close_on_content_click=on_close_on_content_click,
        on_content_class=on_content_class,
        on_dark=on_dark,
        on_disable_keys=on_disable_keys,
        on_disabled=on_disabled,
        on_eager=on_eager,
        on_fixed=on_fixed,
        on_internal_activator=on_internal_activator,
        on_layout=on_layout,
        on_left=on_left,
        on_light=on_light,
        on_max_height=on_max_height,
        on_max_width=on_max_width,
        on_min_width=on_min_width,
        on_nudge_bottom=on_nudge_bottom,
        on_nudge_left=on_nudge_left,
        on_nudge_right=on_nudge_right,
        on_nudge_top=on_nudge_top,
        on_nudge_width=on_nudge_width,
        on_offset_overflow=on_offset_overflow,
        on_offset_x=on_offset_x,
        on_offset_y=on_offset_y,
        on_open_delay=on_open_delay,
        on_open_on_click=on_open_on_click,
        on_open_on_hover=on_open_on_hover,
        on_origin=on_origin,
        on_position_x=on_position_x,
        on_position_y=on_position_y,
        on_return_value=on_return_value,
        on_right=on_right,
        on_slot=on_slot,
        on_style_=on_style_,
        on_top=on_top,
        on_transition=on_transition,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
        on_z_index=on_z_index,
    )
    widget_cls = ipyvuetify.generated.Menu
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def MenuTransition(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    group: bool = None,
    hide_on_leave: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    leave_absolute: bool = None,
    mode: str = None,
    origin: str = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_group: typing.Callable[[bool], Any] = None,
    on_hide_on_leave: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_leave_absolute: typing.Callable[[bool], Any] = None,
    on_mode: typing.Callable[[str], Any] = None,
    on_origin: typing.Callable[[str], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.MenuTransition]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        group=group,
        hide_on_leave=hide_on_leave,
        layout=layout,
        leave_absolute=leave_absolute,
        mode=mode,
        origin=origin,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_group=on_group,
        on_hide_on_leave=on_hide_on_leave,
        on_layout=on_layout,
        on_leave_absolute=on_leave_absolute,
        on_mode=on_mode,
        on_origin=on_origin,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.MenuTransition
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Messages(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    color: str = None,
    dark: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.Messages]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        color=color,
        dark=dark,
        layout=layout,
        light=light,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_dark=on_dark,
        on_layout=on_layout,
        on_light=on_light,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.Messages
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def NavigationDrawer(
    absolute: bool = None,
    app: bool = None,
    attributes: dict = {},
    bottom: bool = None,
    children: list = [],
    class_: str = None,
    clipped: bool = None,
    color: str = None,
    dark: bool = None,
    disable_resize_watcher: bool = None,
    disable_route_watcher: bool = None,
    expand_on_hover: bool = None,
    fixed: bool = None,
    floating: bool = None,
    height: typing.Union[float, str] = None,
    hide_overlay: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    mini_variant: bool = None,
    mini_variant_width: typing.Union[float, str] = None,
    mobile_break_point: typing.Union[float, str] = None,
    overlay_color: str = None,
    overlay_opacity: typing.Union[float, str] = None,
    permanent: bool = None,
    right: bool = None,
    slot: str = None,
    src: typing.Union[str, dict] = None,
    stateless: bool = None,
    style_: str = None,
    tag: str = None,
    temporary: bool = None,
    touchless: bool = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: Any = None,
    width: typing.Union[float, str] = None,
    on_absolute: typing.Callable[[bool], Any] = None,
    on_app: typing.Callable[[bool], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_bottom: typing.Callable[[bool], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_clipped: typing.Callable[[bool], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_disable_resize_watcher: typing.Callable[[bool], Any] = None,
    on_disable_route_watcher: typing.Callable[[bool], Any] = None,
    on_expand_on_hover: typing.Callable[[bool], Any] = None,
    on_fixed: typing.Callable[[bool], Any] = None,
    on_floating: typing.Callable[[bool], Any] = None,
    on_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_hide_overlay: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_mini_variant: typing.Callable[[bool], Any] = None,
    on_mini_variant_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_mobile_break_point: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_overlay_color: typing.Callable[[str], Any] = None,
    on_overlay_opacity: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_permanent: typing.Callable[[bool], Any] = None,
    on_right: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_src: typing.Callable[[typing.Union[str, dict]], Any] = None,
    on_stateless: typing.Callable[[bool], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_tag: typing.Callable[[str], Any] = None,
    on_temporary: typing.Callable[[bool], Any] = None,
    on_touchless: typing.Callable[[bool], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
    on_width: typing.Callable[[typing.Union[float, str]], Any] = None,
) -> Element[ipyvuetify.generated.NavigationDrawer]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        absolute=absolute,
        app=app,
        attributes=attributes,
        bottom=bottom,
        children=children,
        class_=class_,
        clipped=clipped,
        color=color,
        dark=dark,
        disable_resize_watcher=disable_resize_watcher,
        disable_route_watcher=disable_route_watcher,
        expand_on_hover=expand_on_hover,
        fixed=fixed,
        floating=floating,
        height=height,
        hide_overlay=hide_overlay,
        layout=layout,
        light=light,
        mini_variant=mini_variant,
        mini_variant_width=mini_variant_width,
        mobile_break_point=mobile_break_point,
        overlay_color=overlay_color,
        overlay_opacity=overlay_opacity,
        permanent=permanent,
        right=right,
        slot=slot,
        src=src,
        stateless=stateless,
        style_=style_,
        tag=tag,
        temporary=temporary,
        touchless=touchless,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        width=width,
        on_absolute=on_absolute,
        on_app=on_app,
        on_attributes=on_attributes,
        on_bottom=on_bottom,
        on_children=on_children,
        on_class_=on_class_,
        on_clipped=on_clipped,
        on_color=on_color,
        on_dark=on_dark,
        on_disable_resize_watcher=on_disable_resize_watcher,
        on_disable_route_watcher=on_disable_route_watcher,
        on_expand_on_hover=on_expand_on_hover,
        on_fixed=on_fixed,
        on_floating=on_floating,
        on_height=on_height,
        on_hide_overlay=on_hide_overlay,
        on_layout=on_layout,
        on_light=on_light,
        on_mini_variant=on_mini_variant,
        on_mini_variant_width=on_mini_variant_width,
        on_mobile_break_point=on_mobile_break_point,
        on_overlay_color=on_overlay_color,
        on_overlay_opacity=on_overlay_opacity,
        on_permanent=on_permanent,
        on_right=on_right,
        on_slot=on_slot,
        on_src=on_src,
        on_stateless=on_stateless,
        on_style_=on_style_,
        on_tag=on_tag,
        on_temporary=on_temporary,
        on_touchless=on_touchless,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
        on_width=on_width,
    )
    widget_cls = ipyvuetify.generated.NavigationDrawer
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def OverflowBtn(
    allow_overflow: bool = None,
    append_icon: str = None,
    append_outer_icon: str = None,
    attach: Any = None,
    attributes: dict = {},
    auto_select_first: bool = None,
    autofocus: bool = None,
    background_color: str = None,
    cache_items: bool = None,
    children: list = [],
    chips: bool = None,
    class_: str = None,
    clear_icon: str = None,
    clearable: bool = None,
    color: str = None,
    counter: typing.Union[bool, float, str] = None,
    dark: bool = None,
    deletable_chips: bool = None,
    dense: bool = None,
    disable_lookup: bool = None,
    disabled: bool = None,
    eager: bool = None,
    editable: bool = None,
    error: bool = None,
    error_count: typing.Union[float, str] = None,
    error_messages: typing.Union[str, list] = None,
    filled: bool = None,
    flat: bool = None,
    full_width: bool = None,
    height: typing.Union[float, str] = None,
    hide_details: typing.Union[bool, str] = None,
    hide_no_data: bool = None,
    hide_selected: bool = None,
    hint: str = None,
    id: str = None,
    item_color: str = None,
    item_disabled: typing.Union[str, list] = None,
    item_text: typing.Union[str, list] = None,
    item_value: typing.Union[str, list] = None,
    items: list = [],
    label: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    loader_height: typing.Union[float, str] = None,
    loading: typing.Union[bool, str] = None,
    menu_props: typing.Union[str, list, dict] = None,
    messages: typing.Union[str, list] = None,
    multiple: bool = None,
    no_data_text: str = None,
    no_filter: bool = None,
    open_on_clear: bool = None,
    outlined: bool = None,
    persistent_hint: bool = None,
    placeholder: str = None,
    prefix: str = None,
    prepend_icon: str = None,
    prepend_inner_icon: str = None,
    readonly: bool = None,
    return_object: bool = None,
    reverse: bool = None,
    rounded: bool = None,
    rules: list = [],
    search_input: str = None,
    segmented: bool = None,
    shaped: bool = None,
    single_line: bool = None,
    slot: str = None,
    small_chips: bool = None,
    solo: bool = None,
    solo_inverted: bool = None,
    style_: str = None,
    success: bool = None,
    success_messages: typing.Union[str, list] = None,
    suffix: str = None,
    type: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    validate_on_blur: bool = None,
    value: Any = None,
    on_allow_overflow: typing.Callable[[bool], Any] = None,
    on_append_icon: typing.Callable[[str], Any] = None,
    on_append_outer_icon: typing.Callable[[str], Any] = None,
    on_attach: typing.Callable[[Any], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_auto_select_first: typing.Callable[[bool], Any] = None,
    on_autofocus: typing.Callable[[bool], Any] = None,
    on_background_color: typing.Callable[[str], Any] = None,
    on_cache_items: typing.Callable[[bool], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_chips: typing.Callable[[bool], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_clear_icon: typing.Callable[[str], Any] = None,
    on_clearable: typing.Callable[[bool], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_counter: typing.Callable[[typing.Union[bool, float, str]], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_deletable_chips: typing.Callable[[bool], Any] = None,
    on_dense: typing.Callable[[bool], Any] = None,
    on_disable_lookup: typing.Callable[[bool], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_eager: typing.Callable[[bool], Any] = None,
    on_editable: typing.Callable[[bool], Any] = None,
    on_error: typing.Callable[[bool], Any] = None,
    on_error_count: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_error_messages: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_filled: typing.Callable[[bool], Any] = None,
    on_flat: typing.Callable[[bool], Any] = None,
    on_full_width: typing.Callable[[bool], Any] = None,
    on_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_hide_details: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_hide_no_data: typing.Callable[[bool], Any] = None,
    on_hide_selected: typing.Callable[[bool], Any] = None,
    on_hint: typing.Callable[[str], Any] = None,
    on_id: typing.Callable[[str], Any] = None,
    on_item_color: typing.Callable[[str], Any] = None,
    on_item_disabled: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_item_text: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_item_value: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_items: typing.Callable[[list], Any] = None,
    on_label: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_loader_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_loading: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_menu_props: typing.Callable[[typing.Union[str, list, dict]], Any] = None,
    on_messages: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_multiple: typing.Callable[[bool], Any] = None,
    on_no_data_text: typing.Callable[[str], Any] = None,
    on_no_filter: typing.Callable[[bool], Any] = None,
    on_open_on_clear: typing.Callable[[bool], Any] = None,
    on_outlined: typing.Callable[[bool], Any] = None,
    on_persistent_hint: typing.Callable[[bool], Any] = None,
    on_placeholder: typing.Callable[[str], Any] = None,
    on_prefix: typing.Callable[[str], Any] = None,
    on_prepend_icon: typing.Callable[[str], Any] = None,
    on_prepend_inner_icon: typing.Callable[[str], Any] = None,
    on_readonly: typing.Callable[[bool], Any] = None,
    on_return_object: typing.Callable[[bool], Any] = None,
    on_reverse: typing.Callable[[bool], Any] = None,
    on_rounded: typing.Callable[[bool], Any] = None,
    on_rules: typing.Callable[[list], Any] = None,
    on_search_input: typing.Callable[[str], Any] = None,
    on_segmented: typing.Callable[[bool], Any] = None,
    on_shaped: typing.Callable[[bool], Any] = None,
    on_single_line: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_small_chips: typing.Callable[[bool], Any] = None,
    on_solo: typing.Callable[[bool], Any] = None,
    on_solo_inverted: typing.Callable[[bool], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_success: typing.Callable[[bool], Any] = None,
    on_success_messages: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_suffix: typing.Callable[[str], Any] = None,
    on_type: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_validate_on_blur: typing.Callable[[bool], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
) -> Element[ipyvuetify.generated.OverflowBtn]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        allow_overflow=allow_overflow,
        append_icon=append_icon,
        append_outer_icon=append_outer_icon,
        attach=attach,
        attributes=attributes,
        auto_select_first=auto_select_first,
        autofocus=autofocus,
        background_color=background_color,
        cache_items=cache_items,
        children=children,
        chips=chips,
        class_=class_,
        clear_icon=clear_icon,
        clearable=clearable,
        color=color,
        counter=counter,
        dark=dark,
        deletable_chips=deletable_chips,
        dense=dense,
        disable_lookup=disable_lookup,
        disabled=disabled,
        eager=eager,
        editable=editable,
        error=error,
        error_count=error_count,
        error_messages=error_messages,
        filled=filled,
        flat=flat,
        full_width=full_width,
        height=height,
        hide_details=hide_details,
        hide_no_data=hide_no_data,
        hide_selected=hide_selected,
        hint=hint,
        id=id,
        item_color=item_color,
        item_disabled=item_disabled,
        item_text=item_text,
        item_value=item_value,
        items=items,
        label=label,
        layout=layout,
        light=light,
        loader_height=loader_height,
        loading=loading,
        menu_props=menu_props,
        messages=messages,
        multiple=multiple,
        no_data_text=no_data_text,
        no_filter=no_filter,
        open_on_clear=open_on_clear,
        outlined=outlined,
        persistent_hint=persistent_hint,
        placeholder=placeholder,
        prefix=prefix,
        prepend_icon=prepend_icon,
        prepend_inner_icon=prepend_inner_icon,
        readonly=readonly,
        return_object=return_object,
        reverse=reverse,
        rounded=rounded,
        rules=rules,
        search_input=search_input,
        segmented=segmented,
        shaped=shaped,
        single_line=single_line,
        slot=slot,
        small_chips=small_chips,
        solo=solo,
        solo_inverted=solo_inverted,
        style_=style_,
        success=success,
        success_messages=success_messages,
        suffix=suffix,
        type=type,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        validate_on_blur=validate_on_blur,
        value=value,
        on_allow_overflow=on_allow_overflow,
        on_append_icon=on_append_icon,
        on_append_outer_icon=on_append_outer_icon,
        on_attach=on_attach,
        on_attributes=on_attributes,
        on_auto_select_first=on_auto_select_first,
        on_autofocus=on_autofocus,
        on_background_color=on_background_color,
        on_cache_items=on_cache_items,
        on_children=on_children,
        on_chips=on_chips,
        on_class_=on_class_,
        on_clear_icon=on_clear_icon,
        on_clearable=on_clearable,
        on_color=on_color,
        on_counter=on_counter,
        on_dark=on_dark,
        on_deletable_chips=on_deletable_chips,
        on_dense=on_dense,
        on_disable_lookup=on_disable_lookup,
        on_disabled=on_disabled,
        on_eager=on_eager,
        on_editable=on_editable,
        on_error=on_error,
        on_error_count=on_error_count,
        on_error_messages=on_error_messages,
        on_filled=on_filled,
        on_flat=on_flat,
        on_full_width=on_full_width,
        on_height=on_height,
        on_hide_details=on_hide_details,
        on_hide_no_data=on_hide_no_data,
        on_hide_selected=on_hide_selected,
        on_hint=on_hint,
        on_id=on_id,
        on_item_color=on_item_color,
        on_item_disabled=on_item_disabled,
        on_item_text=on_item_text,
        on_item_value=on_item_value,
        on_items=on_items,
        on_label=on_label,
        on_layout=on_layout,
        on_light=on_light,
        on_loader_height=on_loader_height,
        on_loading=on_loading,
        on_menu_props=on_menu_props,
        on_messages=on_messages,
        on_multiple=on_multiple,
        on_no_data_text=on_no_data_text,
        on_no_filter=on_no_filter,
        on_open_on_clear=on_open_on_clear,
        on_outlined=on_outlined,
        on_persistent_hint=on_persistent_hint,
        on_placeholder=on_placeholder,
        on_prefix=on_prefix,
        on_prepend_icon=on_prepend_icon,
        on_prepend_inner_icon=on_prepend_inner_icon,
        on_readonly=on_readonly,
        on_return_object=on_return_object,
        on_reverse=on_reverse,
        on_rounded=on_rounded,
        on_rules=on_rules,
        on_search_input=on_search_input,
        on_segmented=on_segmented,
        on_shaped=on_shaped,
        on_single_line=on_single_line,
        on_slot=on_slot,
        on_small_chips=on_small_chips,
        on_solo=on_solo,
        on_solo_inverted=on_solo_inverted,
        on_style_=on_style_,
        on_success=on_success,
        on_success_messages=on_success_messages,
        on_suffix=on_suffix,
        on_type=on_type,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_validate_on_blur=on_validate_on_blur,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.OverflowBtn
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Overlay(
    absolute: bool = None,
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    color: str = None,
    dark: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    opacity: typing.Union[float, str] = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: Any = None,
    z_index: typing.Union[float, str] = None,
    on_absolute: typing.Callable[[bool], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_opacity: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
    on_z_index: typing.Callable[[typing.Union[float, str]], Any] = None,
) -> Element[ipyvuetify.generated.Overlay]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        absolute=absolute,
        attributes=attributes,
        children=children,
        class_=class_,
        color=color,
        dark=dark,
        layout=layout,
        light=light,
        opacity=opacity,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        z_index=z_index,
        on_absolute=on_absolute,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_dark=on_dark,
        on_layout=on_layout,
        on_light=on_light,
        on_opacity=on_opacity,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
        on_z_index=on_z_index,
    )
    widget_cls = ipyvuetify.generated.Overlay
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Pagination(
    attributes: dict = {},
    children: list = [],
    circle: bool = None,
    class_: str = None,
    color: str = None,
    dark: bool = None,
    disabled: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    length: float = None,
    light: bool = None,
    next_icon: str = None,
    prev_icon: str = None,
    slot: str = None,
    style_: str = None,
    total_visible: typing.Union[float, str] = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: float = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_circle: typing.Callable[[bool], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_length: typing.Callable[[float], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_next_icon: typing.Callable[[str], Any] = None,
    on_prev_icon: typing.Callable[[str], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_total_visible: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[float], Any] = None,
) -> Element[ipyvuetify.generated.Pagination]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        circle=circle,
        class_=class_,
        color=color,
        dark=dark,
        disabled=disabled,
        layout=layout,
        length=length,
        light=light,
        next_icon=next_icon,
        prev_icon=prev_icon,
        slot=slot,
        style_=style_,
        total_visible=total_visible,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        on_attributes=on_attributes,
        on_children=on_children,
        on_circle=on_circle,
        on_class_=on_class_,
        on_color=on_color,
        on_dark=on_dark,
        on_disabled=on_disabled,
        on_layout=on_layout,
        on_length=on_length,
        on_light=on_light,
        on_next_icon=on_next_icon,
        on_prev_icon=on_prev_icon,
        on_slot=on_slot,
        on_style_=on_style_,
        on_total_visible=on_total_visible,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.Pagination
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Parallax(
    alt: str = None,
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    height: typing.Union[str, float] = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    slot: str = None,
    src: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_alt: typing.Callable[[str], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_height: typing.Callable[[typing.Union[str, float]], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_src: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.Parallax]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        alt=alt,
        attributes=attributes,
        children=children,
        class_=class_,
        height=height,
        layout=layout,
        slot=slot,
        src=src,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_alt=on_alt,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_height=on_height,
        on_layout=on_layout,
        on_slot=on_slot,
        on_src=on_src,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.Parallax
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Picker(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    color: str = None,
    dark: bool = None,
    full_width: bool = None,
    landscape: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    no_title: bool = None,
    slot: str = None,
    style_: str = None,
    transition: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    width: typing.Union[float, str] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_full_width: typing.Callable[[bool], Any] = None,
    on_landscape: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_no_title: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_transition: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_width: typing.Callable[[typing.Union[float, str]], Any] = None,
) -> Element[ipyvuetify.generated.Picker]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        color=color,
        dark=dark,
        full_width=full_width,
        landscape=landscape,
        layout=layout,
        light=light,
        no_title=no_title,
        slot=slot,
        style_=style_,
        transition=transition,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        width=width,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_dark=on_dark,
        on_full_width=on_full_width,
        on_landscape=on_landscape,
        on_layout=on_layout,
        on_light=on_light,
        on_no_title=on_no_title,
        on_slot=on_slot,
        on_style_=on_style_,
        on_transition=on_transition,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_width=on_width,
    )
    widget_cls = ipyvuetify.generated.Picker
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def ProgressCircular(
    attributes: dict = {},
    button: bool = None,
    children: list = [],
    class_: str = None,
    color: str = None,
    indeterminate: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    rotate: typing.Union[float, str] = None,
    size: typing.Union[float, str] = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: typing.Union[float, str] = None,
    width: typing.Union[float, str] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_button: typing.Callable[[bool], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_indeterminate: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_rotate: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_size: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_width: typing.Callable[[typing.Union[float, str]], Any] = None,
) -> Element[ipyvuetify.generated.ProgressCircular]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        button=button,
        children=children,
        class_=class_,
        color=color,
        indeterminate=indeterminate,
        layout=layout,
        rotate=rotate,
        size=size,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        width=width,
        on_attributes=on_attributes,
        on_button=on_button,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_indeterminate=on_indeterminate,
        on_layout=on_layout,
        on_rotate=on_rotate,
        on_size=on_size,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
        on_width=on_width,
    )
    widget_cls = ipyvuetify.generated.ProgressCircular
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def ProgressLinear(
    absolute: bool = None,
    active: bool = None,
    attributes: dict = {},
    background_color: str = None,
    background_opacity: typing.Union[float, str] = None,
    bottom: bool = None,
    buffer_value: typing.Union[float, str] = None,
    children: list = [],
    class_: str = None,
    color: str = None,
    dark: bool = None,
    fixed: bool = None,
    height: typing.Union[float, str] = None,
    indeterminate: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    query: bool = None,
    rounded: bool = None,
    slot: str = None,
    stream: bool = None,
    striped: bool = None,
    style_: str = None,
    top: bool = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: typing.Union[float, str] = None,
    on_absolute: typing.Callable[[bool], Any] = None,
    on_active: typing.Callable[[bool], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_background_color: typing.Callable[[str], Any] = None,
    on_background_opacity: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_bottom: typing.Callable[[bool], Any] = None,
    on_buffer_value: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_fixed: typing.Callable[[bool], Any] = None,
    on_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_indeterminate: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_query: typing.Callable[[bool], Any] = None,
    on_rounded: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_stream: typing.Callable[[bool], Any] = None,
    on_striped: typing.Callable[[bool], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_top: typing.Callable[[bool], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[typing.Union[float, str]], Any] = None,
) -> Element[ipyvuetify.generated.ProgressLinear]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        absolute=absolute,
        active=active,
        attributes=attributes,
        background_color=background_color,
        background_opacity=background_opacity,
        bottom=bottom,
        buffer_value=buffer_value,
        children=children,
        class_=class_,
        color=color,
        dark=dark,
        fixed=fixed,
        height=height,
        indeterminate=indeterminate,
        layout=layout,
        light=light,
        query=query,
        rounded=rounded,
        slot=slot,
        stream=stream,
        striped=striped,
        style_=style_,
        top=top,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        on_absolute=on_absolute,
        on_active=on_active,
        on_attributes=on_attributes,
        on_background_color=on_background_color,
        on_background_opacity=on_background_opacity,
        on_bottom=on_bottom,
        on_buffer_value=on_buffer_value,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_dark=on_dark,
        on_fixed=on_fixed,
        on_height=on_height,
        on_indeterminate=on_indeterminate,
        on_layout=on_layout,
        on_light=on_light,
        on_query=on_query,
        on_rounded=on_rounded,
        on_slot=on_slot,
        on_stream=on_stream,
        on_striped=on_striped,
        on_style_=on_style_,
        on_top=on_top,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.ProgressLinear
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Radio(
    active_class: str = None,
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    color: str = None,
    dark: bool = None,
    disabled: bool = None,
    id: str = None,
    label: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    name: str = None,
    off_icon: str = None,
    on_icon: str = None,
    readonly: bool = None,
    ripple: typing.Union[bool, dict] = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: Any = None,
    on_active_class: typing.Callable[[str], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_id: typing.Callable[[str], Any] = None,
    on_label: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_name: typing.Callable[[str], Any] = None,
    on_off_icon: typing.Callable[[str], Any] = None,
    on_on_icon: typing.Callable[[str], Any] = None,
    on_readonly: typing.Callable[[bool], Any] = None,
    on_ripple: typing.Callable[[typing.Union[bool, dict]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
) -> Element[ipyvuetify.generated.Radio]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        active_class=active_class,
        attributes=attributes,
        children=children,
        class_=class_,
        color=color,
        dark=dark,
        disabled=disabled,
        id=id,
        label=label,
        layout=layout,
        light=light,
        name=name,
        off_icon=off_icon,
        on_icon=on_icon,
        readonly=readonly,
        ripple=ripple,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        on_active_class=on_active_class,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_dark=on_dark,
        on_disabled=on_disabled,
        on_id=on_id,
        on_label=on_label,
        on_layout=on_layout,
        on_light=on_light,
        on_name=on_name,
        on_off_icon=on_off_icon,
        on_on_icon=on_on_icon,
        on_readonly=on_readonly,
        on_ripple=on_ripple,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.Radio
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def RadioGroup(
    active_class: str = None,
    append_icon: str = None,
    attributes: dict = {},
    background_color: str = None,
    children: list = [],
    class_: str = None,
    color: str = None,
    column: bool = None,
    dark: bool = None,
    dense: bool = None,
    disabled: bool = None,
    error: bool = None,
    error_count: typing.Union[float, str] = None,
    error_messages: typing.Union[str, list] = None,
    height: typing.Union[float, str] = None,
    hide_details: typing.Union[bool, str] = None,
    hint: str = None,
    id: str = None,
    label: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    loading: bool = None,
    mandatory: bool = None,
    max: typing.Union[float, str] = None,
    messages: typing.Union[str, list] = None,
    multiple: bool = None,
    name: str = None,
    persistent_hint: bool = None,
    prepend_icon: str = None,
    readonly: bool = None,
    row: bool = None,
    rules: list = [],
    slot: str = None,
    style_: str = None,
    success: bool = None,
    success_messages: typing.Union[str, list] = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    validate_on_blur: bool = None,
    value: Any = None,
    on_active_class: typing.Callable[[str], Any] = None,
    on_append_icon: typing.Callable[[str], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_background_color: typing.Callable[[str], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_column: typing.Callable[[bool], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_dense: typing.Callable[[bool], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_error: typing.Callable[[bool], Any] = None,
    on_error_count: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_error_messages: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_hide_details: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_hint: typing.Callable[[str], Any] = None,
    on_id: typing.Callable[[str], Any] = None,
    on_label: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_loading: typing.Callable[[bool], Any] = None,
    on_mandatory: typing.Callable[[bool], Any] = None,
    on_max: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_messages: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_multiple: typing.Callable[[bool], Any] = None,
    on_name: typing.Callable[[str], Any] = None,
    on_persistent_hint: typing.Callable[[bool], Any] = None,
    on_prepend_icon: typing.Callable[[str], Any] = None,
    on_readonly: typing.Callable[[bool], Any] = None,
    on_row: typing.Callable[[bool], Any] = None,
    on_rules: typing.Callable[[list], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_success: typing.Callable[[bool], Any] = None,
    on_success_messages: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_validate_on_blur: typing.Callable[[bool], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
) -> Element[ipyvuetify.generated.RadioGroup]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        active_class=active_class,
        append_icon=append_icon,
        attributes=attributes,
        background_color=background_color,
        children=children,
        class_=class_,
        color=color,
        column=column,
        dark=dark,
        dense=dense,
        disabled=disabled,
        error=error,
        error_count=error_count,
        error_messages=error_messages,
        height=height,
        hide_details=hide_details,
        hint=hint,
        id=id,
        label=label,
        layout=layout,
        light=light,
        loading=loading,
        mandatory=mandatory,
        max=max,
        messages=messages,
        multiple=multiple,
        name=name,
        persistent_hint=persistent_hint,
        prepend_icon=prepend_icon,
        readonly=readonly,
        row=row,
        rules=rules,
        slot=slot,
        style_=style_,
        success=success,
        success_messages=success_messages,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        validate_on_blur=validate_on_blur,
        value=value,
        on_active_class=on_active_class,
        on_append_icon=on_append_icon,
        on_attributes=on_attributes,
        on_background_color=on_background_color,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_column=on_column,
        on_dark=on_dark,
        on_dense=on_dense,
        on_disabled=on_disabled,
        on_error=on_error,
        on_error_count=on_error_count,
        on_error_messages=on_error_messages,
        on_height=on_height,
        on_hide_details=on_hide_details,
        on_hint=on_hint,
        on_id=on_id,
        on_label=on_label,
        on_layout=on_layout,
        on_light=on_light,
        on_loading=on_loading,
        on_mandatory=on_mandatory,
        on_max=on_max,
        on_messages=on_messages,
        on_multiple=on_multiple,
        on_name=on_name,
        on_persistent_hint=on_persistent_hint,
        on_prepend_icon=on_prepend_icon,
        on_readonly=on_readonly,
        on_row=on_row,
        on_rules=on_rules,
        on_slot=on_slot,
        on_style_=on_style_,
        on_success=on_success,
        on_success_messages=on_success_messages,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_validate_on_blur=on_validate_on_blur,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.RadioGroup
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def RangeSlider(
    append_icon: str = None,
    attributes: dict = {},
    background_color: str = None,
    children: list = [],
    class_: str = None,
    color: str = None,
    dark: bool = None,
    dense: bool = None,
    disabled: bool = None,
    error: bool = None,
    error_count: typing.Union[float, str] = None,
    error_messages: typing.Union[str, list] = None,
    height: typing.Union[float, str] = None,
    hide_details: typing.Union[bool, str] = None,
    hint: str = None,
    id: str = None,
    inverse_label: bool = None,
    label: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    loader_height: typing.Union[float, str] = None,
    loading: typing.Union[bool, str] = None,
    max: typing.Union[float, str] = None,
    messages: typing.Union[str, list] = None,
    min: typing.Union[float, str] = None,
    persistent_hint: bool = None,
    prepend_icon: str = None,
    readonly: bool = None,
    rules: list = [],
    slot: str = None,
    step: typing.Union[float, str] = None,
    style_: str = None,
    success: bool = None,
    success_messages: typing.Union[str, list] = None,
    thumb_color: str = None,
    thumb_label: typing.Union[bool, str] = None,
    thumb_size: typing.Union[float, str] = None,
    tick_labels: list = [],
    tick_size: typing.Union[float, str] = None,
    ticks: typing.Union[bool, str] = None,
    track_color: str = None,
    track_fill_color: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    validate_on_blur: bool = None,
    value: Any = None,
    vertical: bool = None,
    on_append_icon: typing.Callable[[str], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_background_color: typing.Callable[[str], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_dense: typing.Callable[[bool], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_error: typing.Callable[[bool], Any] = None,
    on_error_count: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_error_messages: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_hide_details: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_hint: typing.Callable[[str], Any] = None,
    on_id: typing.Callable[[str], Any] = None,
    on_inverse_label: typing.Callable[[bool], Any] = None,
    on_label: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_loader_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_loading: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_max: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_messages: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_min: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_persistent_hint: typing.Callable[[bool], Any] = None,
    on_prepend_icon: typing.Callable[[str], Any] = None,
    on_readonly: typing.Callable[[bool], Any] = None,
    on_rules: typing.Callable[[list], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_step: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_success: typing.Callable[[bool], Any] = None,
    on_success_messages: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_thumb_color: typing.Callable[[str], Any] = None,
    on_thumb_label: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_thumb_size: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_tick_labels: typing.Callable[[list], Any] = None,
    on_tick_size: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_ticks: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_track_color: typing.Callable[[str], Any] = None,
    on_track_fill_color: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_validate_on_blur: typing.Callable[[bool], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
    on_vertical: typing.Callable[[bool], Any] = None,
) -> Element[ipyvuetify.generated.RangeSlider]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        append_icon=append_icon,
        attributes=attributes,
        background_color=background_color,
        children=children,
        class_=class_,
        color=color,
        dark=dark,
        dense=dense,
        disabled=disabled,
        error=error,
        error_count=error_count,
        error_messages=error_messages,
        height=height,
        hide_details=hide_details,
        hint=hint,
        id=id,
        inverse_label=inverse_label,
        label=label,
        layout=layout,
        light=light,
        loader_height=loader_height,
        loading=loading,
        max=max,
        messages=messages,
        min=min,
        persistent_hint=persistent_hint,
        prepend_icon=prepend_icon,
        readonly=readonly,
        rules=rules,
        slot=slot,
        step=step,
        style_=style_,
        success=success,
        success_messages=success_messages,
        thumb_color=thumb_color,
        thumb_label=thumb_label,
        thumb_size=thumb_size,
        tick_labels=tick_labels,
        tick_size=tick_size,
        ticks=ticks,
        track_color=track_color,
        track_fill_color=track_fill_color,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        validate_on_blur=validate_on_blur,
        value=value,
        vertical=vertical,
        on_append_icon=on_append_icon,
        on_attributes=on_attributes,
        on_background_color=on_background_color,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_dark=on_dark,
        on_dense=on_dense,
        on_disabled=on_disabled,
        on_error=on_error,
        on_error_count=on_error_count,
        on_error_messages=on_error_messages,
        on_height=on_height,
        on_hide_details=on_hide_details,
        on_hint=on_hint,
        on_id=on_id,
        on_inverse_label=on_inverse_label,
        on_label=on_label,
        on_layout=on_layout,
        on_light=on_light,
        on_loader_height=on_loader_height,
        on_loading=on_loading,
        on_max=on_max,
        on_messages=on_messages,
        on_min=on_min,
        on_persistent_hint=on_persistent_hint,
        on_prepend_icon=on_prepend_icon,
        on_readonly=on_readonly,
        on_rules=on_rules,
        on_slot=on_slot,
        on_step=on_step,
        on_style_=on_style_,
        on_success=on_success,
        on_success_messages=on_success_messages,
        on_thumb_color=on_thumb_color,
        on_thumb_label=on_thumb_label,
        on_thumb_size=on_thumb_size,
        on_tick_labels=on_tick_labels,
        on_tick_size=on_tick_size,
        on_ticks=on_ticks,
        on_track_color=on_track_color,
        on_track_fill_color=on_track_fill_color,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_validate_on_blur=on_validate_on_blur,
        on_value=on_value,
        on_vertical=on_vertical,
    )
    widget_cls = ipyvuetify.generated.RangeSlider
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Rating(
    attributes: dict = {},
    background_color: str = None,
    children: list = [],
    class_: str = None,
    clearable: bool = None,
    close_delay: typing.Union[float, str] = None,
    color: str = None,
    dark: bool = None,
    dense: bool = None,
    empty_icon: str = None,
    full_icon: str = None,
    half_icon: str = None,
    half_increments: bool = None,
    hover: bool = None,
    large: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    length: typing.Union[float, str] = None,
    light: bool = None,
    open_delay: typing.Union[float, str] = None,
    readonly: bool = None,
    ripple: typing.Union[bool, dict] = None,
    size: typing.Union[float, str] = None,
    slot: str = None,
    small: bool = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: float = None,
    x_large: bool = None,
    x_small: bool = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_background_color: typing.Callable[[str], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_clearable: typing.Callable[[bool], Any] = None,
    on_close_delay: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_dense: typing.Callable[[bool], Any] = None,
    on_empty_icon: typing.Callable[[str], Any] = None,
    on_full_icon: typing.Callable[[str], Any] = None,
    on_half_icon: typing.Callable[[str], Any] = None,
    on_half_increments: typing.Callable[[bool], Any] = None,
    on_hover: typing.Callable[[bool], Any] = None,
    on_large: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_length: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_open_delay: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_readonly: typing.Callable[[bool], Any] = None,
    on_ripple: typing.Callable[[typing.Union[bool, dict]], Any] = None,
    on_size: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_small: typing.Callable[[bool], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[float], Any] = None,
    on_x_large: typing.Callable[[bool], Any] = None,
    on_x_small: typing.Callable[[bool], Any] = None,
) -> Element[ipyvuetify.generated.Rating]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        background_color=background_color,
        children=children,
        class_=class_,
        clearable=clearable,
        close_delay=close_delay,
        color=color,
        dark=dark,
        dense=dense,
        empty_icon=empty_icon,
        full_icon=full_icon,
        half_icon=half_icon,
        half_increments=half_increments,
        hover=hover,
        large=large,
        layout=layout,
        length=length,
        light=light,
        open_delay=open_delay,
        readonly=readonly,
        ripple=ripple,
        size=size,
        slot=slot,
        small=small,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        x_large=x_large,
        x_small=x_small,
        on_attributes=on_attributes,
        on_background_color=on_background_color,
        on_children=on_children,
        on_class_=on_class_,
        on_clearable=on_clearable,
        on_close_delay=on_close_delay,
        on_color=on_color,
        on_dark=on_dark,
        on_dense=on_dense,
        on_empty_icon=on_empty_icon,
        on_full_icon=on_full_icon,
        on_half_icon=on_half_icon,
        on_half_increments=on_half_increments,
        on_hover=on_hover,
        on_large=on_large,
        on_layout=on_layout,
        on_length=on_length,
        on_light=on_light,
        on_open_delay=on_open_delay,
        on_readonly=on_readonly,
        on_ripple=on_ripple,
        on_size=on_size,
        on_slot=on_slot,
        on_small=on_small,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
        on_x_large=on_x_large,
        on_x_small=on_x_small,
    )
    widget_cls = ipyvuetify.generated.Rating
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Responsive(
    aspect_ratio: typing.Union[str, float] = None,
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    height: typing.Union[float, str] = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    max_height: typing.Union[float, str] = None,
    max_width: typing.Union[float, str] = None,
    min_height: typing.Union[float, str] = None,
    min_width: typing.Union[float, str] = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    width: typing.Union[float, str] = None,
    on_aspect_ratio: typing.Callable[[typing.Union[str, float]], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_max_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_max_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_min_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_min_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_width: typing.Callable[[typing.Union[float, str]], Any] = None,
) -> Element[ipyvuetify.generated.Responsive]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        aspect_ratio=aspect_ratio,
        attributes=attributes,
        children=children,
        class_=class_,
        height=height,
        layout=layout,
        max_height=max_height,
        max_width=max_width,
        min_height=min_height,
        min_width=min_width,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        width=width,
        on_aspect_ratio=on_aspect_ratio,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_height=on_height,
        on_layout=on_layout,
        on_max_height=on_max_height,
        on_max_width=on_max_width,
        on_min_height=on_min_height,
        on_min_width=on_min_width,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_width=on_width,
    )
    widget_cls = ipyvuetify.generated.Responsive
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Row(
    align: str = None,
    align_content: str = None,
    align_content_lg: str = None,
    align_content_md: str = None,
    align_content_sm: str = None,
    align_content_xl: str = None,
    align_lg: str = None,
    align_md: str = None,
    align_sm: str = None,
    align_xl: str = None,
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    dense: bool = None,
    justify: str = None,
    justify_lg: str = None,
    justify_md: str = None,
    justify_sm: str = None,
    justify_xl: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    no_gutters: bool = None,
    slot: str = None,
    style_: str = None,
    tag: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_align: typing.Callable[[str], Any] = None,
    on_align_content: typing.Callable[[str], Any] = None,
    on_align_content_lg: typing.Callable[[str], Any] = None,
    on_align_content_md: typing.Callable[[str], Any] = None,
    on_align_content_sm: typing.Callable[[str], Any] = None,
    on_align_content_xl: typing.Callable[[str], Any] = None,
    on_align_lg: typing.Callable[[str], Any] = None,
    on_align_md: typing.Callable[[str], Any] = None,
    on_align_sm: typing.Callable[[str], Any] = None,
    on_align_xl: typing.Callable[[str], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_dense: typing.Callable[[bool], Any] = None,
    on_justify: typing.Callable[[str], Any] = None,
    on_justify_lg: typing.Callable[[str], Any] = None,
    on_justify_md: typing.Callable[[str], Any] = None,
    on_justify_sm: typing.Callable[[str], Any] = None,
    on_justify_xl: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_no_gutters: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_tag: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.Row]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        align=align,
        align_content=align_content,
        align_content_lg=align_content_lg,
        align_content_md=align_content_md,
        align_content_sm=align_content_sm,
        align_content_xl=align_content_xl,
        align_lg=align_lg,
        align_md=align_md,
        align_sm=align_sm,
        align_xl=align_xl,
        attributes=attributes,
        children=children,
        class_=class_,
        dense=dense,
        justify=justify,
        justify_lg=justify_lg,
        justify_md=justify_md,
        justify_sm=justify_sm,
        justify_xl=justify_xl,
        layout=layout,
        no_gutters=no_gutters,
        slot=slot,
        style_=style_,
        tag=tag,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_align=on_align,
        on_align_content=on_align_content,
        on_align_content_lg=on_align_content_lg,
        on_align_content_md=on_align_content_md,
        on_align_content_sm=on_align_content_sm,
        on_align_content_xl=on_align_content_xl,
        on_align_lg=on_align_lg,
        on_align_md=on_align_md,
        on_align_sm=on_align_sm,
        on_align_xl=on_align_xl,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_dense=on_dense,
        on_justify=on_justify,
        on_justify_lg=on_justify_lg,
        on_justify_md=on_justify_md,
        on_justify_sm=on_justify_sm,
        on_justify_xl=on_justify_xl,
        on_layout=on_layout,
        on_no_gutters=on_no_gutters,
        on_slot=on_slot,
        on_style_=on_style_,
        on_tag=on_tag,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.Row
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def ScaleTransition(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    group: bool = None,
    hide_on_leave: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    leave_absolute: bool = None,
    mode: str = None,
    origin: str = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_group: typing.Callable[[bool], Any] = None,
    on_hide_on_leave: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_leave_absolute: typing.Callable[[bool], Any] = None,
    on_mode: typing.Callable[[str], Any] = None,
    on_origin: typing.Callable[[str], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.ScaleTransition]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        group=group,
        hide_on_leave=hide_on_leave,
        layout=layout,
        leave_absolute=leave_absolute,
        mode=mode,
        origin=origin,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_group=on_group,
        on_hide_on_leave=on_hide_on_leave,
        on_layout=on_layout,
        on_leave_absolute=on_leave_absolute,
        on_mode=on_mode,
        on_origin=on_origin,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.ScaleTransition
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def ScrollXReverseTransition(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    group: bool = None,
    hide_on_leave: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    leave_absolute: bool = None,
    mode: str = None,
    origin: str = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_group: typing.Callable[[bool], Any] = None,
    on_hide_on_leave: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_leave_absolute: typing.Callable[[bool], Any] = None,
    on_mode: typing.Callable[[str], Any] = None,
    on_origin: typing.Callable[[str], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.ScrollXReverseTransition]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        group=group,
        hide_on_leave=hide_on_leave,
        layout=layout,
        leave_absolute=leave_absolute,
        mode=mode,
        origin=origin,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_group=on_group,
        on_hide_on_leave=on_hide_on_leave,
        on_layout=on_layout,
        on_leave_absolute=on_leave_absolute,
        on_mode=on_mode,
        on_origin=on_origin,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.ScrollXReverseTransition
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def ScrollXTransition(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    group: bool = None,
    hide_on_leave: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    leave_absolute: bool = None,
    mode: str = None,
    origin: str = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_group: typing.Callable[[bool], Any] = None,
    on_hide_on_leave: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_leave_absolute: typing.Callable[[bool], Any] = None,
    on_mode: typing.Callable[[str], Any] = None,
    on_origin: typing.Callable[[str], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.ScrollXTransition]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        group=group,
        hide_on_leave=hide_on_leave,
        layout=layout,
        leave_absolute=leave_absolute,
        mode=mode,
        origin=origin,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_group=on_group,
        on_hide_on_leave=on_hide_on_leave,
        on_layout=on_layout,
        on_leave_absolute=on_leave_absolute,
        on_mode=on_mode,
        on_origin=on_origin,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.ScrollXTransition
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def ScrollYReverseTransition(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    group: bool = None,
    hide_on_leave: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    leave_absolute: bool = None,
    mode: str = None,
    origin: str = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_group: typing.Callable[[bool], Any] = None,
    on_hide_on_leave: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_leave_absolute: typing.Callable[[bool], Any] = None,
    on_mode: typing.Callable[[str], Any] = None,
    on_origin: typing.Callable[[str], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.ScrollYReverseTransition]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        group=group,
        hide_on_leave=hide_on_leave,
        layout=layout,
        leave_absolute=leave_absolute,
        mode=mode,
        origin=origin,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_group=on_group,
        on_hide_on_leave=on_hide_on_leave,
        on_layout=on_layout,
        on_leave_absolute=on_leave_absolute,
        on_mode=on_mode,
        on_origin=on_origin,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.ScrollYReverseTransition
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def ScrollYTransition(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    group: bool = None,
    hide_on_leave: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    leave_absolute: bool = None,
    mode: str = None,
    origin: str = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_group: typing.Callable[[bool], Any] = None,
    on_hide_on_leave: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_leave_absolute: typing.Callable[[bool], Any] = None,
    on_mode: typing.Callable[[str], Any] = None,
    on_origin: typing.Callable[[str], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.ScrollYTransition]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        group=group,
        hide_on_leave=hide_on_leave,
        layout=layout,
        leave_absolute=leave_absolute,
        mode=mode,
        origin=origin,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_group=on_group,
        on_hide_on_leave=on_hide_on_leave,
        on_layout=on_layout,
        on_leave_absolute=on_leave_absolute,
        on_mode=on_mode,
        on_origin=on_origin,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.ScrollYTransition
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Select(
    append_icon: str = None,
    append_outer_icon: str = None,
    attach: Any = None,
    attributes: dict = {},
    autofocus: bool = None,
    background_color: str = None,
    cache_items: bool = None,
    children: list = [],
    chips: bool = None,
    class_: str = None,
    clear_icon: str = None,
    clearable: bool = None,
    color: str = None,
    counter: typing.Union[bool, float, str] = None,
    dark: bool = None,
    deletable_chips: bool = None,
    dense: bool = None,
    disable_lookup: bool = None,
    disabled: bool = None,
    eager: bool = None,
    error: bool = None,
    error_count: typing.Union[float, str] = None,
    error_messages: typing.Union[str, list] = None,
    filled: bool = None,
    flat: bool = None,
    full_width: bool = None,
    height: typing.Union[float, str] = None,
    hide_details: typing.Union[bool, str] = None,
    hide_selected: bool = None,
    hint: str = None,
    id: str = None,
    item_color: str = None,
    item_disabled: typing.Union[str, list] = None,
    item_text: typing.Union[str, list] = None,
    item_value: typing.Union[str, list] = None,
    items: list = [],
    label: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    loader_height: typing.Union[float, str] = None,
    loading: typing.Union[bool, str] = None,
    menu_props: typing.Union[str, list, dict] = None,
    messages: typing.Union[str, list] = None,
    multiple: bool = None,
    no_data_text: str = None,
    open_on_clear: bool = None,
    outlined: bool = None,
    persistent_hint: bool = None,
    placeholder: str = None,
    prefix: str = None,
    prepend_icon: str = None,
    prepend_inner_icon: str = None,
    readonly: bool = None,
    return_object: bool = None,
    reverse: bool = None,
    rounded: bool = None,
    rules: list = [],
    shaped: bool = None,
    single_line: bool = None,
    slot: str = None,
    small_chips: bool = None,
    solo: bool = None,
    solo_inverted: bool = None,
    style_: str = None,
    success: bool = None,
    success_messages: typing.Union[str, list] = None,
    suffix: str = None,
    type: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    validate_on_blur: bool = None,
    value: Any = None,
    on_append_icon: typing.Callable[[str], Any] = None,
    on_append_outer_icon: typing.Callable[[str], Any] = None,
    on_attach: typing.Callable[[Any], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_autofocus: typing.Callable[[bool], Any] = None,
    on_background_color: typing.Callable[[str], Any] = None,
    on_cache_items: typing.Callable[[bool], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_chips: typing.Callable[[bool], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_clear_icon: typing.Callable[[str], Any] = None,
    on_clearable: typing.Callable[[bool], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_counter: typing.Callable[[typing.Union[bool, float, str]], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_deletable_chips: typing.Callable[[bool], Any] = None,
    on_dense: typing.Callable[[bool], Any] = None,
    on_disable_lookup: typing.Callable[[bool], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_eager: typing.Callable[[bool], Any] = None,
    on_error: typing.Callable[[bool], Any] = None,
    on_error_count: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_error_messages: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_filled: typing.Callable[[bool], Any] = None,
    on_flat: typing.Callable[[bool], Any] = None,
    on_full_width: typing.Callable[[bool], Any] = None,
    on_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_hide_details: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_hide_selected: typing.Callable[[bool], Any] = None,
    on_hint: typing.Callable[[str], Any] = None,
    on_id: typing.Callable[[str], Any] = None,
    on_item_color: typing.Callable[[str], Any] = None,
    on_item_disabled: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_item_text: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_item_value: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_items: typing.Callable[[list], Any] = None,
    on_label: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_loader_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_loading: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_menu_props: typing.Callable[[typing.Union[str, list, dict]], Any] = None,
    on_messages: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_multiple: typing.Callable[[bool], Any] = None,
    on_no_data_text: typing.Callable[[str], Any] = None,
    on_open_on_clear: typing.Callable[[bool], Any] = None,
    on_outlined: typing.Callable[[bool], Any] = None,
    on_persistent_hint: typing.Callable[[bool], Any] = None,
    on_placeholder: typing.Callable[[str], Any] = None,
    on_prefix: typing.Callable[[str], Any] = None,
    on_prepend_icon: typing.Callable[[str], Any] = None,
    on_prepend_inner_icon: typing.Callable[[str], Any] = None,
    on_readonly: typing.Callable[[bool], Any] = None,
    on_return_object: typing.Callable[[bool], Any] = None,
    on_reverse: typing.Callable[[bool], Any] = None,
    on_rounded: typing.Callable[[bool], Any] = None,
    on_rules: typing.Callable[[list], Any] = None,
    on_shaped: typing.Callable[[bool], Any] = None,
    on_single_line: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_small_chips: typing.Callable[[bool], Any] = None,
    on_solo: typing.Callable[[bool], Any] = None,
    on_solo_inverted: typing.Callable[[bool], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_success: typing.Callable[[bool], Any] = None,
    on_success_messages: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_suffix: typing.Callable[[str], Any] = None,
    on_type: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_validate_on_blur: typing.Callable[[bool], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
) -> Element[ipyvuetify.generated.Select]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        append_icon=append_icon,
        append_outer_icon=append_outer_icon,
        attach=attach,
        attributes=attributes,
        autofocus=autofocus,
        background_color=background_color,
        cache_items=cache_items,
        children=children,
        chips=chips,
        class_=class_,
        clear_icon=clear_icon,
        clearable=clearable,
        color=color,
        counter=counter,
        dark=dark,
        deletable_chips=deletable_chips,
        dense=dense,
        disable_lookup=disable_lookup,
        disabled=disabled,
        eager=eager,
        error=error,
        error_count=error_count,
        error_messages=error_messages,
        filled=filled,
        flat=flat,
        full_width=full_width,
        height=height,
        hide_details=hide_details,
        hide_selected=hide_selected,
        hint=hint,
        id=id,
        item_color=item_color,
        item_disabled=item_disabled,
        item_text=item_text,
        item_value=item_value,
        items=items,
        label=label,
        layout=layout,
        light=light,
        loader_height=loader_height,
        loading=loading,
        menu_props=menu_props,
        messages=messages,
        multiple=multiple,
        no_data_text=no_data_text,
        open_on_clear=open_on_clear,
        outlined=outlined,
        persistent_hint=persistent_hint,
        placeholder=placeholder,
        prefix=prefix,
        prepend_icon=prepend_icon,
        prepend_inner_icon=prepend_inner_icon,
        readonly=readonly,
        return_object=return_object,
        reverse=reverse,
        rounded=rounded,
        rules=rules,
        shaped=shaped,
        single_line=single_line,
        slot=slot,
        small_chips=small_chips,
        solo=solo,
        solo_inverted=solo_inverted,
        style_=style_,
        success=success,
        success_messages=success_messages,
        suffix=suffix,
        type=type,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        validate_on_blur=validate_on_blur,
        value=value,
        on_append_icon=on_append_icon,
        on_append_outer_icon=on_append_outer_icon,
        on_attach=on_attach,
        on_attributes=on_attributes,
        on_autofocus=on_autofocus,
        on_background_color=on_background_color,
        on_cache_items=on_cache_items,
        on_children=on_children,
        on_chips=on_chips,
        on_class_=on_class_,
        on_clear_icon=on_clear_icon,
        on_clearable=on_clearable,
        on_color=on_color,
        on_counter=on_counter,
        on_dark=on_dark,
        on_deletable_chips=on_deletable_chips,
        on_dense=on_dense,
        on_disable_lookup=on_disable_lookup,
        on_disabled=on_disabled,
        on_eager=on_eager,
        on_error=on_error,
        on_error_count=on_error_count,
        on_error_messages=on_error_messages,
        on_filled=on_filled,
        on_flat=on_flat,
        on_full_width=on_full_width,
        on_height=on_height,
        on_hide_details=on_hide_details,
        on_hide_selected=on_hide_selected,
        on_hint=on_hint,
        on_id=on_id,
        on_item_color=on_item_color,
        on_item_disabled=on_item_disabled,
        on_item_text=on_item_text,
        on_item_value=on_item_value,
        on_items=on_items,
        on_label=on_label,
        on_layout=on_layout,
        on_light=on_light,
        on_loader_height=on_loader_height,
        on_loading=on_loading,
        on_menu_props=on_menu_props,
        on_messages=on_messages,
        on_multiple=on_multiple,
        on_no_data_text=on_no_data_text,
        on_open_on_clear=on_open_on_clear,
        on_outlined=on_outlined,
        on_persistent_hint=on_persistent_hint,
        on_placeholder=on_placeholder,
        on_prefix=on_prefix,
        on_prepend_icon=on_prepend_icon,
        on_prepend_inner_icon=on_prepend_inner_icon,
        on_readonly=on_readonly,
        on_return_object=on_return_object,
        on_reverse=on_reverse,
        on_rounded=on_rounded,
        on_rules=on_rules,
        on_shaped=on_shaped,
        on_single_line=on_single_line,
        on_slot=on_slot,
        on_small_chips=on_small_chips,
        on_solo=on_solo,
        on_solo_inverted=on_solo_inverted,
        on_style_=on_style_,
        on_success=on_success,
        on_success_messages=on_success_messages,
        on_suffix=on_suffix,
        on_type=on_type,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_validate_on_blur=on_validate_on_blur,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.Select
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Sheet(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    color: str = None,
    dark: bool = None,
    elevation: typing.Union[float, str] = None,
    height: typing.Union[float, str] = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    max_height: typing.Union[float, str] = None,
    max_width: typing.Union[float, str] = None,
    min_height: typing.Union[float, str] = None,
    min_width: typing.Union[float, str] = None,
    slot: str = None,
    style_: str = None,
    tag: str = None,
    tile: bool = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    width: typing.Union[float, str] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_elevation: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_max_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_max_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_min_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_min_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_tag: typing.Callable[[str], Any] = None,
    on_tile: typing.Callable[[bool], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_width: typing.Callable[[typing.Union[float, str]], Any] = None,
) -> Element[ipyvuetify.generated.Sheet]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        color=color,
        dark=dark,
        elevation=elevation,
        height=height,
        layout=layout,
        light=light,
        max_height=max_height,
        max_width=max_width,
        min_height=min_height,
        min_width=min_width,
        slot=slot,
        style_=style_,
        tag=tag,
        tile=tile,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        width=width,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_dark=on_dark,
        on_elevation=on_elevation,
        on_height=on_height,
        on_layout=on_layout,
        on_light=on_light,
        on_max_height=on_max_height,
        on_max_width=on_max_width,
        on_min_height=on_min_height,
        on_min_width=on_min_width,
        on_slot=on_slot,
        on_style_=on_style_,
        on_tag=on_tag,
        on_tile=on_tile,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_width=on_width,
    )
    widget_cls = ipyvuetify.generated.Sheet
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def SimpleCheckbox(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    color: str = None,
    dark: bool = None,
    disabled: bool = None,
    indeterminate: bool = None,
    indeterminate_icon: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    off_icon: str = None,
    on_icon: str = None,
    ripple: bool = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: bool = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_indeterminate: typing.Callable[[bool], Any] = None,
    on_indeterminate_icon: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_off_icon: typing.Callable[[str], Any] = None,
    on_on_icon: typing.Callable[[str], Any] = None,
    on_ripple: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[bool], Any] = None,
) -> Element[ipyvuetify.generated.SimpleCheckbox]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        color=color,
        dark=dark,
        disabled=disabled,
        indeterminate=indeterminate,
        indeterminate_icon=indeterminate_icon,
        layout=layout,
        light=light,
        off_icon=off_icon,
        on_icon=on_icon,
        ripple=ripple,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_dark=on_dark,
        on_disabled=on_disabled,
        on_indeterminate=on_indeterminate,
        on_indeterminate_icon=on_indeterminate_icon,
        on_layout=on_layout,
        on_light=on_light,
        on_off_icon=on_off_icon,
        on_on_icon=on_on_icon,
        on_ripple=on_ripple,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.SimpleCheckbox
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def SimpleTable(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    dark: bool = None,
    dense: bool = None,
    fixed_header: bool = None,
    height: typing.Union[float, str] = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_dense: typing.Callable[[bool], Any] = None,
    on_fixed_header: typing.Callable[[bool], Any] = None,
    on_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.SimpleTable]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        dark=dark,
        dense=dense,
        fixed_header=fixed_header,
        height=height,
        layout=layout,
        light=light,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_dark=on_dark,
        on_dense=on_dense,
        on_fixed_header=on_fixed_header,
        on_height=on_height,
        on_layout=on_layout,
        on_light=on_light,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.SimpleTable
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def SkeletonLoader(
    attributes: dict = {},
    boilerplate: bool = None,
    children: list = [],
    class_: str = None,
    dark: bool = None,
    elevation: typing.Union[float, str] = None,
    height: typing.Union[float, str] = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    loading: bool = None,
    max_height: typing.Union[float, str] = None,
    max_width: typing.Union[float, str] = None,
    min_height: typing.Union[float, str] = None,
    min_width: typing.Union[float, str] = None,
    slot: str = None,
    style_: str = None,
    tile: bool = None,
    transition: str = None,
    type: str = None,
    types: dict = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    width: typing.Union[float, str] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_boilerplate: typing.Callable[[bool], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_elevation: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_loading: typing.Callable[[bool], Any] = None,
    on_max_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_max_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_min_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_min_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_tile: typing.Callable[[bool], Any] = None,
    on_transition: typing.Callable[[str], Any] = None,
    on_type: typing.Callable[[str], Any] = None,
    on_types: typing.Callable[[dict], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_width: typing.Callable[[typing.Union[float, str]], Any] = None,
) -> Element[ipyvuetify.generated.SkeletonLoader]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        boilerplate=boilerplate,
        children=children,
        class_=class_,
        dark=dark,
        elevation=elevation,
        height=height,
        layout=layout,
        light=light,
        loading=loading,
        max_height=max_height,
        max_width=max_width,
        min_height=min_height,
        min_width=min_width,
        slot=slot,
        style_=style_,
        tile=tile,
        transition=transition,
        type=type,
        types=types,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        width=width,
        on_attributes=on_attributes,
        on_boilerplate=on_boilerplate,
        on_children=on_children,
        on_class_=on_class_,
        on_dark=on_dark,
        on_elevation=on_elevation,
        on_height=on_height,
        on_layout=on_layout,
        on_light=on_light,
        on_loading=on_loading,
        on_max_height=on_max_height,
        on_max_width=on_max_width,
        on_min_height=on_min_height,
        on_min_width=on_min_width,
        on_slot=on_slot,
        on_style_=on_style_,
        on_tile=on_tile,
        on_transition=on_transition,
        on_type=on_type,
        on_types=on_types,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_width=on_width,
    )
    widget_cls = ipyvuetify.generated.SkeletonLoader
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def SlideGroup(
    active_class: str = None,
    attributes: dict = {},
    center_active: bool = None,
    children: list = [],
    class_: str = None,
    dark: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    mandatory: bool = None,
    max: typing.Union[float, str] = None,
    mobile_break_point: typing.Union[float, str] = None,
    multiple: bool = None,
    next_icon: str = None,
    prev_icon: str = None,
    show_arrows: bool = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: Any = None,
    on_active_class: typing.Callable[[str], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_center_active: typing.Callable[[bool], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_mandatory: typing.Callable[[bool], Any] = None,
    on_max: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_mobile_break_point: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_multiple: typing.Callable[[bool], Any] = None,
    on_next_icon: typing.Callable[[str], Any] = None,
    on_prev_icon: typing.Callable[[str], Any] = None,
    on_show_arrows: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
) -> Element[ipyvuetify.generated.SlideGroup]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        active_class=active_class,
        attributes=attributes,
        center_active=center_active,
        children=children,
        class_=class_,
        dark=dark,
        layout=layout,
        light=light,
        mandatory=mandatory,
        max=max,
        mobile_break_point=mobile_break_point,
        multiple=multiple,
        next_icon=next_icon,
        prev_icon=prev_icon,
        show_arrows=show_arrows,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        on_active_class=on_active_class,
        on_attributes=on_attributes,
        on_center_active=on_center_active,
        on_children=on_children,
        on_class_=on_class_,
        on_dark=on_dark,
        on_layout=on_layout,
        on_light=on_light,
        on_mandatory=on_mandatory,
        on_max=on_max,
        on_mobile_break_point=on_mobile_break_point,
        on_multiple=on_multiple,
        on_next_icon=on_next_icon,
        on_prev_icon=on_prev_icon,
        on_show_arrows=on_show_arrows,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.SlideGroup
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def SlideItem(
    active_class: str = None,
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    disabled: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: Any = None,
    on_active_class: typing.Callable[[str], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
) -> Element[ipyvuetify.generated.SlideItem]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        active_class=active_class,
        attributes=attributes,
        children=children,
        class_=class_,
        disabled=disabled,
        layout=layout,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        on_active_class=on_active_class,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_disabled=on_disabled,
        on_layout=on_layout,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.SlideItem
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def SlideXReverseTransition(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    group: bool = None,
    hide_on_leave: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    leave_absolute: bool = None,
    mode: str = None,
    origin: str = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_group: typing.Callable[[bool], Any] = None,
    on_hide_on_leave: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_leave_absolute: typing.Callable[[bool], Any] = None,
    on_mode: typing.Callable[[str], Any] = None,
    on_origin: typing.Callable[[str], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.SlideXReverseTransition]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        group=group,
        hide_on_leave=hide_on_leave,
        layout=layout,
        leave_absolute=leave_absolute,
        mode=mode,
        origin=origin,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_group=on_group,
        on_hide_on_leave=on_hide_on_leave,
        on_layout=on_layout,
        on_leave_absolute=on_leave_absolute,
        on_mode=on_mode,
        on_origin=on_origin,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.SlideXReverseTransition
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def SlideXTransition(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    group: bool = None,
    hide_on_leave: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    leave_absolute: bool = None,
    mode: str = None,
    origin: str = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_group: typing.Callable[[bool], Any] = None,
    on_hide_on_leave: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_leave_absolute: typing.Callable[[bool], Any] = None,
    on_mode: typing.Callable[[str], Any] = None,
    on_origin: typing.Callable[[str], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.SlideXTransition]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        group=group,
        hide_on_leave=hide_on_leave,
        layout=layout,
        leave_absolute=leave_absolute,
        mode=mode,
        origin=origin,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_group=on_group,
        on_hide_on_leave=on_hide_on_leave,
        on_layout=on_layout,
        on_leave_absolute=on_leave_absolute,
        on_mode=on_mode,
        on_origin=on_origin,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.SlideXTransition
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def SlideYReverseTransition(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    group: bool = None,
    hide_on_leave: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    leave_absolute: bool = None,
    mode: str = None,
    origin: str = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_group: typing.Callable[[bool], Any] = None,
    on_hide_on_leave: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_leave_absolute: typing.Callable[[bool], Any] = None,
    on_mode: typing.Callable[[str], Any] = None,
    on_origin: typing.Callable[[str], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.SlideYReverseTransition]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        group=group,
        hide_on_leave=hide_on_leave,
        layout=layout,
        leave_absolute=leave_absolute,
        mode=mode,
        origin=origin,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_group=on_group,
        on_hide_on_leave=on_hide_on_leave,
        on_layout=on_layout,
        on_leave_absolute=on_leave_absolute,
        on_mode=on_mode,
        on_origin=on_origin,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.SlideYReverseTransition
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def SlideYTransition(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    group: bool = None,
    hide_on_leave: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    leave_absolute: bool = None,
    mode: str = None,
    origin: str = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_group: typing.Callable[[bool], Any] = None,
    on_hide_on_leave: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_leave_absolute: typing.Callable[[bool], Any] = None,
    on_mode: typing.Callable[[str], Any] = None,
    on_origin: typing.Callable[[str], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.SlideYTransition]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        group=group,
        hide_on_leave=hide_on_leave,
        layout=layout,
        leave_absolute=leave_absolute,
        mode=mode,
        origin=origin,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_group=on_group,
        on_hide_on_leave=on_hide_on_leave,
        on_layout=on_layout,
        on_leave_absolute=on_leave_absolute,
        on_mode=on_mode,
        on_origin=on_origin,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.SlideYTransition
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Slider(
    append_icon: str = None,
    attributes: dict = {},
    background_color: str = None,
    children: list = [],
    class_: str = None,
    color: str = None,
    dark: bool = None,
    dense: bool = None,
    disabled: bool = None,
    error: bool = None,
    error_count: typing.Union[float, str] = None,
    error_messages: typing.Union[str, list] = None,
    height: typing.Union[float, str] = None,
    hide_details: typing.Union[bool, str] = None,
    hint: str = None,
    id: str = None,
    inverse_label: bool = None,
    label: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    loader_height: typing.Union[float, str] = None,
    loading: typing.Union[bool, str] = None,
    max: typing.Union[float, str] = None,
    messages: typing.Union[str, list] = None,
    min: typing.Union[float, str] = None,
    persistent_hint: bool = None,
    prepend_icon: str = None,
    readonly: bool = None,
    rules: list = [],
    slot: str = None,
    step: typing.Union[float, str] = None,
    style_: str = None,
    success: bool = None,
    success_messages: typing.Union[str, list] = None,
    thumb_color: str = None,
    thumb_label: typing.Union[bool, str] = None,
    thumb_size: typing.Union[float, str] = None,
    tick_labels: list = [],
    tick_size: typing.Union[float, str] = None,
    ticks: typing.Union[bool, str] = None,
    track_color: str = None,
    track_fill_color: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    validate_on_blur: bool = None,
    value: Any = None,
    vertical: bool = None,
    on_append_icon: typing.Callable[[str], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_background_color: typing.Callable[[str], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_dense: typing.Callable[[bool], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_error: typing.Callable[[bool], Any] = None,
    on_error_count: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_error_messages: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_hide_details: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_hint: typing.Callable[[str], Any] = None,
    on_id: typing.Callable[[str], Any] = None,
    on_inverse_label: typing.Callable[[bool], Any] = None,
    on_label: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_loader_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_loading: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_max: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_messages: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_min: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_persistent_hint: typing.Callable[[bool], Any] = None,
    on_prepend_icon: typing.Callable[[str], Any] = None,
    on_readonly: typing.Callable[[bool], Any] = None,
    on_rules: typing.Callable[[list], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_step: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_success: typing.Callable[[bool], Any] = None,
    on_success_messages: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_thumb_color: typing.Callable[[str], Any] = None,
    on_thumb_label: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_thumb_size: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_tick_labels: typing.Callable[[list], Any] = None,
    on_tick_size: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_ticks: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_track_color: typing.Callable[[str], Any] = None,
    on_track_fill_color: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_validate_on_blur: typing.Callable[[bool], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
    on_vertical: typing.Callable[[bool], Any] = None,
) -> Element[ipyvuetify.generated.Slider]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        append_icon=append_icon,
        attributes=attributes,
        background_color=background_color,
        children=children,
        class_=class_,
        color=color,
        dark=dark,
        dense=dense,
        disabled=disabled,
        error=error,
        error_count=error_count,
        error_messages=error_messages,
        height=height,
        hide_details=hide_details,
        hint=hint,
        id=id,
        inverse_label=inverse_label,
        label=label,
        layout=layout,
        light=light,
        loader_height=loader_height,
        loading=loading,
        max=max,
        messages=messages,
        min=min,
        persistent_hint=persistent_hint,
        prepend_icon=prepend_icon,
        readonly=readonly,
        rules=rules,
        slot=slot,
        step=step,
        style_=style_,
        success=success,
        success_messages=success_messages,
        thumb_color=thumb_color,
        thumb_label=thumb_label,
        thumb_size=thumb_size,
        tick_labels=tick_labels,
        tick_size=tick_size,
        ticks=ticks,
        track_color=track_color,
        track_fill_color=track_fill_color,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        validate_on_blur=validate_on_blur,
        value=value,
        vertical=vertical,
        on_append_icon=on_append_icon,
        on_attributes=on_attributes,
        on_background_color=on_background_color,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_dark=on_dark,
        on_dense=on_dense,
        on_disabled=on_disabled,
        on_error=on_error,
        on_error_count=on_error_count,
        on_error_messages=on_error_messages,
        on_height=on_height,
        on_hide_details=on_hide_details,
        on_hint=on_hint,
        on_id=on_id,
        on_inverse_label=on_inverse_label,
        on_label=on_label,
        on_layout=on_layout,
        on_light=on_light,
        on_loader_height=on_loader_height,
        on_loading=on_loading,
        on_max=on_max,
        on_messages=on_messages,
        on_min=on_min,
        on_persistent_hint=on_persistent_hint,
        on_prepend_icon=on_prepend_icon,
        on_readonly=on_readonly,
        on_rules=on_rules,
        on_slot=on_slot,
        on_step=on_step,
        on_style_=on_style_,
        on_success=on_success,
        on_success_messages=on_success_messages,
        on_thumb_color=on_thumb_color,
        on_thumb_label=on_thumb_label,
        on_thumb_size=on_thumb_size,
        on_tick_labels=on_tick_labels,
        on_tick_size=on_tick_size,
        on_ticks=on_ticks,
        on_track_color=on_track_color,
        on_track_fill_color=on_track_fill_color,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_validate_on_blur=on_validate_on_blur,
        on_value=on_value,
        on_vertical=on_vertical,
    )
    widget_cls = ipyvuetify.generated.Slider
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Snackbar(
    absolute: bool = None,
    attributes: dict = {},
    bottom: bool = None,
    children: list = [],
    class_: str = None,
    color: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    left: bool = None,
    multi_line: bool = None,
    right: bool = None,
    slot: str = None,
    style_: str = None,
    timeout: float = None,
    top: bool = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: Any = None,
    vertical: bool = None,
    on_absolute: typing.Callable[[bool], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_bottom: typing.Callable[[bool], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_left: typing.Callable[[bool], Any] = None,
    on_multi_line: typing.Callable[[bool], Any] = None,
    on_right: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_timeout: typing.Callable[[float], Any] = None,
    on_top: typing.Callable[[bool], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
    on_vertical: typing.Callable[[bool], Any] = None,
) -> Element[ipyvuetify.generated.Snackbar]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        absolute=absolute,
        attributes=attributes,
        bottom=bottom,
        children=children,
        class_=class_,
        color=color,
        layout=layout,
        left=left,
        multi_line=multi_line,
        right=right,
        slot=slot,
        style_=style_,
        timeout=timeout,
        top=top,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        vertical=vertical,
        on_absolute=on_absolute,
        on_attributes=on_attributes,
        on_bottom=on_bottom,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_layout=on_layout,
        on_left=on_left,
        on_multi_line=on_multi_line,
        on_right=on_right,
        on_slot=on_slot,
        on_style_=on_style_,
        on_timeout=on_timeout,
        on_top=on_top,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
        on_vertical=on_vertical,
    )
    widget_cls = ipyvuetify.generated.Snackbar
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Spacer(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.Spacer]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        layout=layout,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_layout=on_layout,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.Spacer
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Sparkline(
    attributes: dict = {},
    auto_draw: bool = None,
    auto_draw_duration: float = None,
    auto_draw_easing: str = None,
    auto_line_width: bool = None,
    children: list = [],
    class_: str = None,
    color: str = None,
    fill: bool = None,
    gradient: list = [],
    gradient_direction: str = None,
    height: typing.Union[str, float] = None,
    label_size: typing.Union[float, str] = None,
    labels: list = [],
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    line_width: typing.Union[str, float] = None,
    padding: typing.Union[str, float] = None,
    show_labels: bool = None,
    slot: str = None,
    smooth: typing.Union[bool, float, str] = None,
    style_: str = None,
    type: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: list = [],
    width: typing.Union[float, str] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_auto_draw: typing.Callable[[bool], Any] = None,
    on_auto_draw_duration: typing.Callable[[float], Any] = None,
    on_auto_draw_easing: typing.Callable[[str], Any] = None,
    on_auto_line_width: typing.Callable[[bool], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_fill: typing.Callable[[bool], Any] = None,
    on_gradient: typing.Callable[[list], Any] = None,
    on_gradient_direction: typing.Callable[[str], Any] = None,
    on_height: typing.Callable[[typing.Union[str, float]], Any] = None,
    on_label_size: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_labels: typing.Callable[[list], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_line_width: typing.Callable[[typing.Union[str, float]], Any] = None,
    on_padding: typing.Callable[[typing.Union[str, float]], Any] = None,
    on_show_labels: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_smooth: typing.Callable[[typing.Union[bool, float, str]], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_type: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[list], Any] = None,
    on_width: typing.Callable[[typing.Union[float, str]], Any] = None,
) -> Element[ipyvuetify.generated.Sparkline]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        auto_draw=auto_draw,
        auto_draw_duration=auto_draw_duration,
        auto_draw_easing=auto_draw_easing,
        auto_line_width=auto_line_width,
        children=children,
        class_=class_,
        color=color,
        fill=fill,
        gradient=gradient,
        gradient_direction=gradient_direction,
        height=height,
        label_size=label_size,
        labels=labels,
        layout=layout,
        line_width=line_width,
        padding=padding,
        show_labels=show_labels,
        slot=slot,
        smooth=smooth,
        style_=style_,
        type=type,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        width=width,
        on_attributes=on_attributes,
        on_auto_draw=on_auto_draw,
        on_auto_draw_duration=on_auto_draw_duration,
        on_auto_draw_easing=on_auto_draw_easing,
        on_auto_line_width=on_auto_line_width,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_fill=on_fill,
        on_gradient=on_gradient,
        on_gradient_direction=on_gradient_direction,
        on_height=on_height,
        on_label_size=on_label_size,
        on_labels=on_labels,
        on_layout=on_layout,
        on_line_width=on_line_width,
        on_padding=on_padding,
        on_show_labels=on_show_labels,
        on_slot=on_slot,
        on_smooth=on_smooth,
        on_style_=on_style_,
        on_type=on_type,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
        on_width=on_width,
    )
    widget_cls = ipyvuetify.generated.Sparkline
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def SpeedDial(
    absolute: bool = None,
    attributes: dict = {},
    bottom: bool = None,
    children: list = [],
    class_: str = None,
    direction: str = None,
    fixed: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    left: bool = None,
    mode: str = None,
    open_on_hover: bool = None,
    origin: str = None,
    right: bool = None,
    slot: str = None,
    style_: str = None,
    top: bool = None,
    transition: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: Any = None,
    on_absolute: typing.Callable[[bool], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_bottom: typing.Callable[[bool], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_direction: typing.Callable[[str], Any] = None,
    on_fixed: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_left: typing.Callable[[bool], Any] = None,
    on_mode: typing.Callable[[str], Any] = None,
    on_open_on_hover: typing.Callable[[bool], Any] = None,
    on_origin: typing.Callable[[str], Any] = None,
    on_right: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_top: typing.Callable[[bool], Any] = None,
    on_transition: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
) -> Element[ipyvuetify.generated.SpeedDial]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        absolute=absolute,
        attributes=attributes,
        bottom=bottom,
        children=children,
        class_=class_,
        direction=direction,
        fixed=fixed,
        layout=layout,
        left=left,
        mode=mode,
        open_on_hover=open_on_hover,
        origin=origin,
        right=right,
        slot=slot,
        style_=style_,
        top=top,
        transition=transition,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        on_absolute=on_absolute,
        on_attributes=on_attributes,
        on_bottom=on_bottom,
        on_children=on_children,
        on_class_=on_class_,
        on_direction=on_direction,
        on_fixed=on_fixed,
        on_layout=on_layout,
        on_left=on_left,
        on_mode=on_mode,
        on_open_on_hover=on_open_on_hover,
        on_origin=on_origin,
        on_right=on_right,
        on_slot=on_slot,
        on_style_=on_style_,
        on_top=on_top,
        on_transition=on_transition,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.SpeedDial
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Stepper(
    alt_labels: bool = None,
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    dark: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    non_linear: bool = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: Any = None,
    vertical: bool = None,
    on_alt_labels: typing.Callable[[bool], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_non_linear: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
    on_vertical: typing.Callable[[bool], Any] = None,
) -> Element[ipyvuetify.generated.Stepper]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        alt_labels=alt_labels,
        attributes=attributes,
        children=children,
        class_=class_,
        dark=dark,
        layout=layout,
        light=light,
        non_linear=non_linear,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        vertical=vertical,
        on_alt_labels=on_alt_labels,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_dark=on_dark,
        on_layout=on_layout,
        on_light=on_light,
        on_non_linear=on_non_linear,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
        on_vertical=on_vertical,
    )
    widget_cls = ipyvuetify.generated.Stepper
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def StepperContent(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    slot: str = None,
    step: typing.Union[float, str] = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_step: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.StepperContent]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        layout=layout,
        slot=slot,
        step=step,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_layout=on_layout,
        on_slot=on_slot,
        on_step=on_step,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.StepperContent
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def StepperHeader(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.StepperHeader]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        layout=layout,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_layout=on_layout,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.StepperHeader
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def StepperItems(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.StepperItems]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        layout=layout,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_layout=on_layout,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.StepperItems
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def StepperStep(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    color: str = None,
    complete: bool = None,
    complete_icon: str = None,
    edit_icon: str = None,
    editable: bool = None,
    error_icon: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    rules: list = [],
    slot: str = None,
    step: typing.Union[float, str] = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_complete: typing.Callable[[bool], Any] = None,
    on_complete_icon: typing.Callable[[str], Any] = None,
    on_edit_icon: typing.Callable[[str], Any] = None,
    on_editable: typing.Callable[[bool], Any] = None,
    on_error_icon: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_rules: typing.Callable[[list], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_step: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.StepperStep]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        color=color,
        complete=complete,
        complete_icon=complete_icon,
        edit_icon=edit_icon,
        editable=editable,
        error_icon=error_icon,
        layout=layout,
        rules=rules,
        slot=slot,
        step=step,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_complete=on_complete,
        on_complete_icon=on_complete_icon,
        on_edit_icon=on_edit_icon,
        on_editable=on_editable,
        on_error_icon=on_error_icon,
        on_layout=on_layout,
        on_rules=on_rules,
        on_slot=on_slot,
        on_step=on_step,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.StepperStep
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Subheader(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    dark: bool = None,
    inset: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_inset: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.Subheader]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        dark=dark,
        inset=inset,
        layout=layout,
        light=light,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_dark=on_dark,
        on_inset=on_inset,
        on_layout=on_layout,
        on_light=on_light,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.Subheader
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Switch(
    append_icon: str = None,
    attributes: dict = {},
    background_color: str = None,
    children: list = [],
    class_: str = None,
    color: str = None,
    dark: bool = None,
    dense: bool = None,
    disabled: bool = None,
    error: bool = None,
    error_count: typing.Union[float, str] = None,
    error_messages: typing.Union[str, list] = None,
    false_value: Any = None,
    flat: bool = None,
    height: typing.Union[float, str] = None,
    hide_details: typing.Union[bool, str] = None,
    hint: str = None,
    id: str = None,
    input_value: Any = None,
    inset: bool = None,
    label: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    loading: typing.Union[bool, str] = None,
    messages: typing.Union[str, list] = None,
    multiple: bool = None,
    persistent_hint: bool = None,
    prepend_icon: str = None,
    readonly: bool = None,
    ripple: typing.Union[bool, dict] = None,
    rules: list = [],
    slot: str = None,
    style_: str = None,
    success: bool = None,
    success_messages: typing.Union[str, list] = None,
    true_value: Any = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    validate_on_blur: bool = None,
    value: Any = None,
    on_append_icon: typing.Callable[[str], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_background_color: typing.Callable[[str], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_dense: typing.Callable[[bool], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_error: typing.Callable[[bool], Any] = None,
    on_error_count: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_error_messages: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_false_value: typing.Callable[[Any], Any] = None,
    on_flat: typing.Callable[[bool], Any] = None,
    on_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_hide_details: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_hint: typing.Callable[[str], Any] = None,
    on_id: typing.Callable[[str], Any] = None,
    on_input_value: typing.Callable[[Any], Any] = None,
    on_inset: typing.Callable[[bool], Any] = None,
    on_label: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_loading: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_messages: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_multiple: typing.Callable[[bool], Any] = None,
    on_persistent_hint: typing.Callable[[bool], Any] = None,
    on_prepend_icon: typing.Callable[[str], Any] = None,
    on_readonly: typing.Callable[[bool], Any] = None,
    on_ripple: typing.Callable[[typing.Union[bool, dict]], Any] = None,
    on_rules: typing.Callable[[list], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_success: typing.Callable[[bool], Any] = None,
    on_success_messages: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_true_value: typing.Callable[[Any], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_validate_on_blur: typing.Callable[[bool], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
) -> Element[ipyvuetify.generated.Switch]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        append_icon=append_icon,
        attributes=attributes,
        background_color=background_color,
        children=children,
        class_=class_,
        color=color,
        dark=dark,
        dense=dense,
        disabled=disabled,
        error=error,
        error_count=error_count,
        error_messages=error_messages,
        false_value=false_value,
        flat=flat,
        height=height,
        hide_details=hide_details,
        hint=hint,
        id=id,
        input_value=input_value,
        inset=inset,
        label=label,
        layout=layout,
        light=light,
        loading=loading,
        messages=messages,
        multiple=multiple,
        persistent_hint=persistent_hint,
        prepend_icon=prepend_icon,
        readonly=readonly,
        ripple=ripple,
        rules=rules,
        slot=slot,
        style_=style_,
        success=success,
        success_messages=success_messages,
        true_value=true_value,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        validate_on_blur=validate_on_blur,
        value=value,
        on_append_icon=on_append_icon,
        on_attributes=on_attributes,
        on_background_color=on_background_color,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_dark=on_dark,
        on_dense=on_dense,
        on_disabled=on_disabled,
        on_error=on_error,
        on_error_count=on_error_count,
        on_error_messages=on_error_messages,
        on_false_value=on_false_value,
        on_flat=on_flat,
        on_height=on_height,
        on_hide_details=on_hide_details,
        on_hint=on_hint,
        on_id=on_id,
        on_input_value=on_input_value,
        on_inset=on_inset,
        on_label=on_label,
        on_layout=on_layout,
        on_light=on_light,
        on_loading=on_loading,
        on_messages=on_messages,
        on_multiple=on_multiple,
        on_persistent_hint=on_persistent_hint,
        on_prepend_icon=on_prepend_icon,
        on_readonly=on_readonly,
        on_ripple=on_ripple,
        on_rules=on_rules,
        on_slot=on_slot,
        on_style_=on_style_,
        on_success=on_success,
        on_success_messages=on_success_messages,
        on_true_value=on_true_value,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_validate_on_blur=on_validate_on_blur,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.Switch
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def SystemBar(
    absolute: bool = None,
    app: bool = None,
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    color: str = None,
    dark: bool = None,
    fixed: bool = None,
    height: typing.Union[float, str] = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    lights_out: bool = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    window: bool = None,
    on_absolute: typing.Callable[[bool], Any] = None,
    on_app: typing.Callable[[bool], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_fixed: typing.Callable[[bool], Any] = None,
    on_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_lights_out: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_window: typing.Callable[[bool], Any] = None,
) -> Element[ipyvuetify.generated.SystemBar]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        absolute=absolute,
        app=app,
        attributes=attributes,
        children=children,
        class_=class_,
        color=color,
        dark=dark,
        fixed=fixed,
        height=height,
        layout=layout,
        light=light,
        lights_out=lights_out,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        window=window,
        on_absolute=on_absolute,
        on_app=on_app,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_dark=on_dark,
        on_fixed=on_fixed,
        on_height=on_height,
        on_layout=on_layout,
        on_light=on_light,
        on_lights_out=on_lights_out,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_window=on_window,
    )
    widget_cls = ipyvuetify.generated.SystemBar
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Tab(
    active_class: str = None,
    append: bool = None,
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    dark: bool = None,
    disabled: bool = None,
    exact: bool = None,
    exact_active_class: str = None,
    href: typing.Union[str, dict] = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    link: bool = None,
    nuxt: bool = None,
    replace: bool = None,
    ripple: typing.Union[bool, dict] = None,
    slot: str = None,
    style_: str = None,
    tag: str = None,
    target: str = None,
    to: typing.Union[str, dict] = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_active_class: typing.Callable[[str], Any] = None,
    on_append: typing.Callable[[bool], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_exact: typing.Callable[[bool], Any] = None,
    on_exact_active_class: typing.Callable[[str], Any] = None,
    on_href: typing.Callable[[typing.Union[str, dict]], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_link: typing.Callable[[bool], Any] = None,
    on_nuxt: typing.Callable[[bool], Any] = None,
    on_replace: typing.Callable[[bool], Any] = None,
    on_ripple: typing.Callable[[typing.Union[bool, dict]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_tag: typing.Callable[[str], Any] = None,
    on_target: typing.Callable[[str], Any] = None,
    on_to: typing.Callable[[typing.Union[str, dict]], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.Tab]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        active_class=active_class,
        append=append,
        attributes=attributes,
        children=children,
        class_=class_,
        dark=dark,
        disabled=disabled,
        exact=exact,
        exact_active_class=exact_active_class,
        href=href,
        layout=layout,
        light=light,
        link=link,
        nuxt=nuxt,
        replace=replace,
        ripple=ripple,
        slot=slot,
        style_=style_,
        tag=tag,
        target=target,
        to=to,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_active_class=on_active_class,
        on_append=on_append,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_dark=on_dark,
        on_disabled=on_disabled,
        on_exact=on_exact,
        on_exact_active_class=on_exact_active_class,
        on_href=on_href,
        on_layout=on_layout,
        on_light=on_light,
        on_link=on_link,
        on_nuxt=on_nuxt,
        on_replace=on_replace,
        on_ripple=on_ripple,
        on_slot=on_slot,
        on_style_=on_style_,
        on_tag=on_tag,
        on_target=on_target,
        on_to=on_to,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.Tab
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def TabItem(
    active_class: str = None,
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    disabled: bool = None,
    eager: bool = None,
    id: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    reverse_transition: typing.Union[bool, str] = None,
    slot: str = None,
    style_: str = None,
    transition: typing.Union[bool, str] = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: Any = None,
    on_active_class: typing.Callable[[str], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_eager: typing.Callable[[bool], Any] = None,
    on_id: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_reverse_transition: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_transition: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
) -> Element[ipyvuetify.generated.TabItem]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        active_class=active_class,
        attributes=attributes,
        children=children,
        class_=class_,
        disabled=disabled,
        eager=eager,
        id=id,
        layout=layout,
        reverse_transition=reverse_transition,
        slot=slot,
        style_=style_,
        transition=transition,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        on_active_class=on_active_class,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_disabled=on_disabled,
        on_eager=on_eager,
        on_id=on_id,
        on_layout=on_layout,
        on_reverse_transition=on_reverse_transition,
        on_slot=on_slot,
        on_style_=on_style_,
        on_transition=on_transition,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.TabItem
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def TabReverseTransition(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    group: bool = None,
    hide_on_leave: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    leave_absolute: bool = None,
    mode: str = None,
    origin: str = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_group: typing.Callable[[bool], Any] = None,
    on_hide_on_leave: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_leave_absolute: typing.Callable[[bool], Any] = None,
    on_mode: typing.Callable[[str], Any] = None,
    on_origin: typing.Callable[[str], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.TabReverseTransition]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        group=group,
        hide_on_leave=hide_on_leave,
        layout=layout,
        leave_absolute=leave_absolute,
        mode=mode,
        origin=origin,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_group=on_group,
        on_hide_on_leave=on_hide_on_leave,
        on_layout=on_layout,
        on_leave_absolute=on_leave_absolute,
        on_mode=on_mode,
        on_origin=on_origin,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.TabReverseTransition
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def TabTransition(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    group: bool = None,
    hide_on_leave: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    leave_absolute: bool = None,
    mode: str = None,
    origin: str = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_group: typing.Callable[[bool], Any] = None,
    on_hide_on_leave: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_leave_absolute: typing.Callable[[bool], Any] = None,
    on_mode: typing.Callable[[str], Any] = None,
    on_origin: typing.Callable[[str], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.TabTransition]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        group=group,
        hide_on_leave=hide_on_leave,
        layout=layout,
        leave_absolute=leave_absolute,
        mode=mode,
        origin=origin,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_group=on_group,
        on_hide_on_leave=on_hide_on_leave,
        on_layout=on_layout,
        on_leave_absolute=on_leave_absolute,
        on_mode=on_mode,
        on_origin=on_origin,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.TabTransition
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def TableOverflow(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.TableOverflow]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        layout=layout,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_layout=on_layout,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.TableOverflow
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Tabs(
    active_class: str = None,
    align_with_title: bool = None,
    attributes: dict = {},
    background_color: str = None,
    center_active: bool = None,
    centered: bool = None,
    children: list = [],
    class_: str = None,
    color: str = None,
    dark: bool = None,
    fixed_tabs: bool = None,
    grow: bool = None,
    height: typing.Union[float, str] = None,
    hide_slider: bool = None,
    icons_and_text: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    mobile_break_point: typing.Union[float, str] = None,
    next_icon: str = None,
    optional: bool = None,
    prev_icon: str = None,
    right: bool = None,
    show_arrows: bool = None,
    slider_color: str = None,
    slider_size: typing.Union[float, str] = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: Any = None,
    vertical: bool = None,
    on_active_class: typing.Callable[[str], Any] = None,
    on_align_with_title: typing.Callable[[bool], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_background_color: typing.Callable[[str], Any] = None,
    on_center_active: typing.Callable[[bool], Any] = None,
    on_centered: typing.Callable[[bool], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_fixed_tabs: typing.Callable[[bool], Any] = None,
    on_grow: typing.Callable[[bool], Any] = None,
    on_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_hide_slider: typing.Callable[[bool], Any] = None,
    on_icons_and_text: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_mobile_break_point: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_next_icon: typing.Callable[[str], Any] = None,
    on_optional: typing.Callable[[bool], Any] = None,
    on_prev_icon: typing.Callable[[str], Any] = None,
    on_right: typing.Callable[[bool], Any] = None,
    on_show_arrows: typing.Callable[[bool], Any] = None,
    on_slider_color: typing.Callable[[str], Any] = None,
    on_slider_size: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
    on_vertical: typing.Callable[[bool], Any] = None,
) -> Element[ipyvuetify.generated.Tabs]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        active_class=active_class,
        align_with_title=align_with_title,
        attributes=attributes,
        background_color=background_color,
        center_active=center_active,
        centered=centered,
        children=children,
        class_=class_,
        color=color,
        dark=dark,
        fixed_tabs=fixed_tabs,
        grow=grow,
        height=height,
        hide_slider=hide_slider,
        icons_and_text=icons_and_text,
        layout=layout,
        light=light,
        mobile_break_point=mobile_break_point,
        next_icon=next_icon,
        optional=optional,
        prev_icon=prev_icon,
        right=right,
        show_arrows=show_arrows,
        slider_color=slider_color,
        slider_size=slider_size,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        vertical=vertical,
        on_active_class=on_active_class,
        on_align_with_title=on_align_with_title,
        on_attributes=on_attributes,
        on_background_color=on_background_color,
        on_center_active=on_center_active,
        on_centered=on_centered,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_dark=on_dark,
        on_fixed_tabs=on_fixed_tabs,
        on_grow=on_grow,
        on_height=on_height,
        on_hide_slider=on_hide_slider,
        on_icons_and_text=on_icons_and_text,
        on_layout=on_layout,
        on_light=on_light,
        on_mobile_break_point=on_mobile_break_point,
        on_next_icon=on_next_icon,
        on_optional=on_optional,
        on_prev_icon=on_prev_icon,
        on_right=on_right,
        on_show_arrows=on_show_arrows,
        on_slider_color=on_slider_color,
        on_slider_size=on_slider_size,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
        on_vertical=on_vertical,
    )
    widget_cls = ipyvuetify.generated.Tabs
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def TabsItems(
    active_class: str = None,
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    continuous: bool = None,
    dark: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    mandatory: bool = None,
    max: typing.Union[float, str] = None,
    multiple: bool = None,
    next_icon: typing.Union[bool, str] = None,
    prev_icon: typing.Union[bool, str] = None,
    reverse: bool = None,
    show_arrows: bool = None,
    show_arrows_on_hover: bool = None,
    slot: str = None,
    style_: str = None,
    touch: dict = None,
    touchless: bool = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: Any = None,
    vertical: bool = None,
    on_active_class: typing.Callable[[str], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_continuous: typing.Callable[[bool], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_mandatory: typing.Callable[[bool], Any] = None,
    on_max: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_multiple: typing.Callable[[bool], Any] = None,
    on_next_icon: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_prev_icon: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_reverse: typing.Callable[[bool], Any] = None,
    on_show_arrows: typing.Callable[[bool], Any] = None,
    on_show_arrows_on_hover: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_touch: typing.Callable[[dict], Any] = None,
    on_touchless: typing.Callable[[bool], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
    on_vertical: typing.Callable[[bool], Any] = None,
) -> Element[ipyvuetify.generated.TabsItems]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        active_class=active_class,
        attributes=attributes,
        children=children,
        class_=class_,
        continuous=continuous,
        dark=dark,
        layout=layout,
        light=light,
        mandatory=mandatory,
        max=max,
        multiple=multiple,
        next_icon=next_icon,
        prev_icon=prev_icon,
        reverse=reverse,
        show_arrows=show_arrows,
        show_arrows_on_hover=show_arrows_on_hover,
        slot=slot,
        style_=style_,
        touch=touch,
        touchless=touchless,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        vertical=vertical,
        on_active_class=on_active_class,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_continuous=on_continuous,
        on_dark=on_dark,
        on_layout=on_layout,
        on_light=on_light,
        on_mandatory=on_mandatory,
        on_max=on_max,
        on_multiple=on_multiple,
        on_next_icon=on_next_icon,
        on_prev_icon=on_prev_icon,
        on_reverse=on_reverse,
        on_show_arrows=on_show_arrows,
        on_show_arrows_on_hover=on_show_arrows_on_hover,
        on_slot=on_slot,
        on_style_=on_style_,
        on_touch=on_touch,
        on_touchless=on_touchless,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
        on_vertical=on_vertical,
    )
    widget_cls = ipyvuetify.generated.TabsItems
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def TabsSlider(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    color: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.TabsSlider]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        color=color,
        layout=layout,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_layout=on_layout,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.TabsSlider
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Text(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: str = "",
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[str], Any] = None,
) -> Element[ipyvuetify.generated.Text]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        layout=layout,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_layout=on_layout,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.Text
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def TextField(
    append_icon: str = None,
    append_outer_icon: str = None,
    attributes: dict = {},
    autofocus: bool = None,
    background_color: str = None,
    children: list = [],
    class_: str = None,
    clear_icon: str = None,
    clearable: bool = None,
    color: str = None,
    counter: typing.Union[bool, float, str] = None,
    dark: bool = None,
    dense: bool = None,
    disabled: bool = None,
    error: bool = None,
    error_count: typing.Union[float, str] = None,
    error_messages: typing.Union[str, list] = None,
    filled: bool = None,
    flat: bool = None,
    full_width: bool = None,
    height: typing.Union[float, str] = None,
    hide_details: typing.Union[bool, str] = None,
    hint: str = None,
    id: str = None,
    label: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    loader_height: typing.Union[float, str] = None,
    loading: typing.Union[bool, str] = None,
    messages: typing.Union[str, list] = None,
    outlined: bool = None,
    persistent_hint: bool = None,
    placeholder: str = None,
    prefix: str = None,
    prepend_icon: str = None,
    prepend_inner_icon: str = None,
    readonly: bool = None,
    reverse: bool = None,
    rounded: bool = None,
    rules: list = [],
    shaped: bool = None,
    single_line: bool = None,
    slot: str = None,
    solo: bool = None,
    solo_inverted: bool = None,
    style_: str = None,
    success: bool = None,
    success_messages: typing.Union[str, list] = None,
    suffix: str = None,
    type: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    validate_on_blur: bool = None,
    value: Any = None,
    on_append_icon: typing.Callable[[str], Any] = None,
    on_append_outer_icon: typing.Callable[[str], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_autofocus: typing.Callable[[bool], Any] = None,
    on_background_color: typing.Callable[[str], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_clear_icon: typing.Callable[[str], Any] = None,
    on_clearable: typing.Callable[[bool], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_counter: typing.Callable[[typing.Union[bool, float, str]], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_dense: typing.Callable[[bool], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_error: typing.Callable[[bool], Any] = None,
    on_error_count: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_error_messages: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_filled: typing.Callable[[bool], Any] = None,
    on_flat: typing.Callable[[bool], Any] = None,
    on_full_width: typing.Callable[[bool], Any] = None,
    on_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_hide_details: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_hint: typing.Callable[[str], Any] = None,
    on_id: typing.Callable[[str], Any] = None,
    on_label: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_loader_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_loading: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_messages: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_outlined: typing.Callable[[bool], Any] = None,
    on_persistent_hint: typing.Callable[[bool], Any] = None,
    on_placeholder: typing.Callable[[str], Any] = None,
    on_prefix: typing.Callable[[str], Any] = None,
    on_prepend_icon: typing.Callable[[str], Any] = None,
    on_prepend_inner_icon: typing.Callable[[str], Any] = None,
    on_readonly: typing.Callable[[bool], Any] = None,
    on_reverse: typing.Callable[[bool], Any] = None,
    on_rounded: typing.Callable[[bool], Any] = None,
    on_rules: typing.Callable[[list], Any] = None,
    on_shaped: typing.Callable[[bool], Any] = None,
    on_single_line: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_solo: typing.Callable[[bool], Any] = None,
    on_solo_inverted: typing.Callable[[bool], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_success: typing.Callable[[bool], Any] = None,
    on_success_messages: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_suffix: typing.Callable[[str], Any] = None,
    on_type: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_validate_on_blur: typing.Callable[[bool], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
) -> Element[ipyvuetify.generated.TextField]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        append_icon=append_icon,
        append_outer_icon=append_outer_icon,
        attributes=attributes,
        autofocus=autofocus,
        background_color=background_color,
        children=children,
        class_=class_,
        clear_icon=clear_icon,
        clearable=clearable,
        color=color,
        counter=counter,
        dark=dark,
        dense=dense,
        disabled=disabled,
        error=error,
        error_count=error_count,
        error_messages=error_messages,
        filled=filled,
        flat=flat,
        full_width=full_width,
        height=height,
        hide_details=hide_details,
        hint=hint,
        id=id,
        label=label,
        layout=layout,
        light=light,
        loader_height=loader_height,
        loading=loading,
        messages=messages,
        outlined=outlined,
        persistent_hint=persistent_hint,
        placeholder=placeholder,
        prefix=prefix,
        prepend_icon=prepend_icon,
        prepend_inner_icon=prepend_inner_icon,
        readonly=readonly,
        reverse=reverse,
        rounded=rounded,
        rules=rules,
        shaped=shaped,
        single_line=single_line,
        slot=slot,
        solo=solo,
        solo_inverted=solo_inverted,
        style_=style_,
        success=success,
        success_messages=success_messages,
        suffix=suffix,
        type=type,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        validate_on_blur=validate_on_blur,
        value=value,
        on_append_icon=on_append_icon,
        on_append_outer_icon=on_append_outer_icon,
        on_attributes=on_attributes,
        on_autofocus=on_autofocus,
        on_background_color=on_background_color,
        on_children=on_children,
        on_class_=on_class_,
        on_clear_icon=on_clear_icon,
        on_clearable=on_clearable,
        on_color=on_color,
        on_counter=on_counter,
        on_dark=on_dark,
        on_dense=on_dense,
        on_disabled=on_disabled,
        on_error=on_error,
        on_error_count=on_error_count,
        on_error_messages=on_error_messages,
        on_filled=on_filled,
        on_flat=on_flat,
        on_full_width=on_full_width,
        on_height=on_height,
        on_hide_details=on_hide_details,
        on_hint=on_hint,
        on_id=on_id,
        on_label=on_label,
        on_layout=on_layout,
        on_light=on_light,
        on_loader_height=on_loader_height,
        on_loading=on_loading,
        on_messages=on_messages,
        on_outlined=on_outlined,
        on_persistent_hint=on_persistent_hint,
        on_placeholder=on_placeholder,
        on_prefix=on_prefix,
        on_prepend_icon=on_prepend_icon,
        on_prepend_inner_icon=on_prepend_inner_icon,
        on_readonly=on_readonly,
        on_reverse=on_reverse,
        on_rounded=on_rounded,
        on_rules=on_rules,
        on_shaped=on_shaped,
        on_single_line=on_single_line,
        on_slot=on_slot,
        on_solo=on_solo,
        on_solo_inverted=on_solo_inverted,
        on_style_=on_style_,
        on_success=on_success,
        on_success_messages=on_success_messages,
        on_suffix=on_suffix,
        on_type=on_type,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_validate_on_blur=on_validate_on_blur,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.TextField
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Textarea(
    append_icon: str = None,
    append_outer_icon: str = None,
    attributes: dict = {},
    auto_grow: bool = None,
    autofocus: bool = None,
    background_color: str = None,
    children: list = [],
    class_: str = None,
    clear_icon: str = None,
    clearable: bool = None,
    color: str = None,
    counter: typing.Union[bool, float, str] = None,
    dark: bool = None,
    dense: bool = None,
    disabled: bool = None,
    error: bool = None,
    error_count: typing.Union[float, str] = None,
    error_messages: typing.Union[str, list] = None,
    filled: bool = None,
    flat: bool = None,
    full_width: bool = None,
    height: typing.Union[float, str] = None,
    hide_details: typing.Union[bool, str] = None,
    hint: str = None,
    id: str = None,
    label: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    loader_height: typing.Union[float, str] = None,
    loading: typing.Union[bool, str] = None,
    messages: typing.Union[str, list] = None,
    no_resize: bool = None,
    outlined: bool = None,
    persistent_hint: bool = None,
    placeholder: str = None,
    prefix: str = None,
    prepend_icon: str = None,
    prepend_inner_icon: str = None,
    readonly: bool = None,
    reverse: bool = None,
    rounded: bool = None,
    row_height: typing.Union[float, str] = None,
    rows: typing.Union[float, str] = None,
    rules: list = [],
    shaped: bool = None,
    single_line: bool = None,
    slot: str = None,
    solo: bool = None,
    solo_inverted: bool = None,
    style_: str = None,
    success: bool = None,
    success_messages: typing.Union[str, list] = None,
    suffix: str = None,
    type: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    validate_on_blur: bool = None,
    value: Any = None,
    on_append_icon: typing.Callable[[str], Any] = None,
    on_append_outer_icon: typing.Callable[[str], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_auto_grow: typing.Callable[[bool], Any] = None,
    on_autofocus: typing.Callable[[bool], Any] = None,
    on_background_color: typing.Callable[[str], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_clear_icon: typing.Callable[[str], Any] = None,
    on_clearable: typing.Callable[[bool], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_counter: typing.Callable[[typing.Union[bool, float, str]], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_dense: typing.Callable[[bool], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_error: typing.Callable[[bool], Any] = None,
    on_error_count: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_error_messages: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_filled: typing.Callable[[bool], Any] = None,
    on_flat: typing.Callable[[bool], Any] = None,
    on_full_width: typing.Callable[[bool], Any] = None,
    on_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_hide_details: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_hint: typing.Callable[[str], Any] = None,
    on_id: typing.Callable[[str], Any] = None,
    on_label: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_loader_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_loading: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_messages: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_no_resize: typing.Callable[[bool], Any] = None,
    on_outlined: typing.Callable[[bool], Any] = None,
    on_persistent_hint: typing.Callable[[bool], Any] = None,
    on_placeholder: typing.Callable[[str], Any] = None,
    on_prefix: typing.Callable[[str], Any] = None,
    on_prepend_icon: typing.Callable[[str], Any] = None,
    on_prepend_inner_icon: typing.Callable[[str], Any] = None,
    on_readonly: typing.Callable[[bool], Any] = None,
    on_reverse: typing.Callable[[bool], Any] = None,
    on_rounded: typing.Callable[[bool], Any] = None,
    on_row_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_rows: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_rules: typing.Callable[[list], Any] = None,
    on_shaped: typing.Callable[[bool], Any] = None,
    on_single_line: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_solo: typing.Callable[[bool], Any] = None,
    on_solo_inverted: typing.Callable[[bool], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_success: typing.Callable[[bool], Any] = None,
    on_success_messages: typing.Callable[[typing.Union[str, list]], Any] = None,
    on_suffix: typing.Callable[[str], Any] = None,
    on_type: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_validate_on_blur: typing.Callable[[bool], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
) -> Element[ipyvuetify.generated.Textarea]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        append_icon=append_icon,
        append_outer_icon=append_outer_icon,
        attributes=attributes,
        auto_grow=auto_grow,
        autofocus=autofocus,
        background_color=background_color,
        children=children,
        class_=class_,
        clear_icon=clear_icon,
        clearable=clearable,
        color=color,
        counter=counter,
        dark=dark,
        dense=dense,
        disabled=disabled,
        error=error,
        error_count=error_count,
        error_messages=error_messages,
        filled=filled,
        flat=flat,
        full_width=full_width,
        height=height,
        hide_details=hide_details,
        hint=hint,
        id=id,
        label=label,
        layout=layout,
        light=light,
        loader_height=loader_height,
        loading=loading,
        messages=messages,
        no_resize=no_resize,
        outlined=outlined,
        persistent_hint=persistent_hint,
        placeholder=placeholder,
        prefix=prefix,
        prepend_icon=prepend_icon,
        prepend_inner_icon=prepend_inner_icon,
        readonly=readonly,
        reverse=reverse,
        rounded=rounded,
        row_height=row_height,
        rows=rows,
        rules=rules,
        shaped=shaped,
        single_line=single_line,
        slot=slot,
        solo=solo,
        solo_inverted=solo_inverted,
        style_=style_,
        success=success,
        success_messages=success_messages,
        suffix=suffix,
        type=type,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        validate_on_blur=validate_on_blur,
        value=value,
        on_append_icon=on_append_icon,
        on_append_outer_icon=on_append_outer_icon,
        on_attributes=on_attributes,
        on_auto_grow=on_auto_grow,
        on_autofocus=on_autofocus,
        on_background_color=on_background_color,
        on_children=on_children,
        on_class_=on_class_,
        on_clear_icon=on_clear_icon,
        on_clearable=on_clearable,
        on_color=on_color,
        on_counter=on_counter,
        on_dark=on_dark,
        on_dense=on_dense,
        on_disabled=on_disabled,
        on_error=on_error,
        on_error_count=on_error_count,
        on_error_messages=on_error_messages,
        on_filled=on_filled,
        on_flat=on_flat,
        on_full_width=on_full_width,
        on_height=on_height,
        on_hide_details=on_hide_details,
        on_hint=on_hint,
        on_id=on_id,
        on_label=on_label,
        on_layout=on_layout,
        on_light=on_light,
        on_loader_height=on_loader_height,
        on_loading=on_loading,
        on_messages=on_messages,
        on_no_resize=on_no_resize,
        on_outlined=on_outlined,
        on_persistent_hint=on_persistent_hint,
        on_placeholder=on_placeholder,
        on_prefix=on_prefix,
        on_prepend_icon=on_prepend_icon,
        on_prepend_inner_icon=on_prepend_inner_icon,
        on_readonly=on_readonly,
        on_reverse=on_reverse,
        on_rounded=on_rounded,
        on_row_height=on_row_height,
        on_rows=on_rows,
        on_rules=on_rules,
        on_shaped=on_shaped,
        on_single_line=on_single_line,
        on_slot=on_slot,
        on_solo=on_solo,
        on_solo_inverted=on_solo_inverted,
        on_style_=on_style_,
        on_success=on_success,
        on_success_messages=on_success_messages,
        on_suffix=on_suffix,
        on_type=on_type,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_validate_on_blur=on_validate_on_blur,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.Textarea
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def ThemeProvider(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    dark: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    root: bool = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_root: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.ThemeProvider]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        dark=dark,
        layout=layout,
        light=light,
        root=root,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_dark=on_dark,
        on_layout=on_layout,
        on_light=on_light,
        on_root=on_root,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.ThemeProvider
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def TimePicker(
    allowed_hours: list = None,
    allowed_minutes: list = None,
    allowed_seconds: list = None,
    ampm_in_title: bool = None,
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    color: str = None,
    dark: bool = None,
    disabled: bool = None,
    format: str = None,
    full_width: bool = None,
    header_color: str = None,
    landscape: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    max: str = None,
    min: str = None,
    no_title: bool = None,
    readonly: bool = None,
    scrollable: bool = None,
    slot: str = None,
    style_: str = None,
    use_seconds: bool = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: Any = None,
    width: typing.Union[float, str] = None,
    on_allowed_hours: typing.Callable[[list], Any] = None,
    on_allowed_minutes: typing.Callable[[list], Any] = None,
    on_allowed_seconds: typing.Callable[[list], Any] = None,
    on_ampm_in_title: typing.Callable[[bool], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_format: typing.Callable[[str], Any] = None,
    on_full_width: typing.Callable[[bool], Any] = None,
    on_header_color: typing.Callable[[str], Any] = None,
    on_landscape: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_max: typing.Callable[[str], Any] = None,
    on_min: typing.Callable[[str], Any] = None,
    on_no_title: typing.Callable[[bool], Any] = None,
    on_readonly: typing.Callable[[bool], Any] = None,
    on_scrollable: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_use_seconds: typing.Callable[[bool], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
    on_width: typing.Callable[[typing.Union[float, str]], Any] = None,
) -> Element[ipyvuetify.generated.TimePicker]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        allowed_hours=allowed_hours,
        allowed_minutes=allowed_minutes,
        allowed_seconds=allowed_seconds,
        ampm_in_title=ampm_in_title,
        attributes=attributes,
        children=children,
        class_=class_,
        color=color,
        dark=dark,
        disabled=disabled,
        format=format,
        full_width=full_width,
        header_color=header_color,
        landscape=landscape,
        layout=layout,
        light=light,
        max=max,
        min=min,
        no_title=no_title,
        readonly=readonly,
        scrollable=scrollable,
        slot=slot,
        style_=style_,
        use_seconds=use_seconds,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        width=width,
        on_allowed_hours=on_allowed_hours,
        on_allowed_minutes=on_allowed_minutes,
        on_allowed_seconds=on_allowed_seconds,
        on_ampm_in_title=on_ampm_in_title,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_dark=on_dark,
        on_disabled=on_disabled,
        on_format=on_format,
        on_full_width=on_full_width,
        on_header_color=on_header_color,
        on_landscape=on_landscape,
        on_layout=on_layout,
        on_light=on_light,
        on_max=on_max,
        on_min=on_min,
        on_no_title=on_no_title,
        on_readonly=on_readonly,
        on_scrollable=on_scrollable,
        on_slot=on_slot,
        on_style_=on_style_,
        on_use_seconds=on_use_seconds,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
        on_width=on_width,
    )
    widget_cls = ipyvuetify.generated.TimePicker
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def TimePickerClock(
    ampm: bool = None,
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    color: str = None,
    dark: bool = None,
    disabled: bool = None,
    double: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    max: float = None,
    min: float = None,
    readonly: bool = None,
    rotate: float = None,
    scrollable: bool = None,
    slot: str = None,
    step: float = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: float = None,
    on_ampm: typing.Callable[[bool], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_double: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_max: typing.Callable[[float], Any] = None,
    on_min: typing.Callable[[float], Any] = None,
    on_readonly: typing.Callable[[bool], Any] = None,
    on_rotate: typing.Callable[[float], Any] = None,
    on_scrollable: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_step: typing.Callable[[float], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[float], Any] = None,
) -> Element[ipyvuetify.generated.TimePickerClock]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        ampm=ampm,
        attributes=attributes,
        children=children,
        class_=class_,
        color=color,
        dark=dark,
        disabled=disabled,
        double=double,
        layout=layout,
        light=light,
        max=max,
        min=min,
        readonly=readonly,
        rotate=rotate,
        scrollable=scrollable,
        slot=slot,
        step=step,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        on_ampm=on_ampm,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_dark=on_dark,
        on_disabled=on_disabled,
        on_double=on_double,
        on_layout=on_layout,
        on_light=on_light,
        on_max=on_max,
        on_min=on_min,
        on_readonly=on_readonly,
        on_rotate=on_rotate,
        on_scrollable=on_scrollable,
        on_slot=on_slot,
        on_step=on_step,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.TimePickerClock
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def TimePickerTitle(
    ampm: bool = None,
    ampm_readonly: bool = None,
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    color: str = None,
    disabled: bool = None,
    hour: float = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    minute: float = None,
    period: str = None,
    readonly: bool = None,
    second: float = None,
    selecting: float = None,
    slot: str = None,
    style_: str = None,
    use_seconds: bool = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_ampm: typing.Callable[[bool], Any] = None,
    on_ampm_readonly: typing.Callable[[bool], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_hour: typing.Callable[[float], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_minute: typing.Callable[[float], Any] = None,
    on_period: typing.Callable[[str], Any] = None,
    on_readonly: typing.Callable[[bool], Any] = None,
    on_second: typing.Callable[[float], Any] = None,
    on_selecting: typing.Callable[[float], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_use_seconds: typing.Callable[[bool], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.TimePickerTitle]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        ampm=ampm,
        ampm_readonly=ampm_readonly,
        attributes=attributes,
        children=children,
        class_=class_,
        color=color,
        disabled=disabled,
        hour=hour,
        layout=layout,
        minute=minute,
        period=period,
        readonly=readonly,
        second=second,
        selecting=selecting,
        slot=slot,
        style_=style_,
        use_seconds=use_seconds,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_ampm=on_ampm,
        on_ampm_readonly=on_ampm_readonly,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_disabled=on_disabled,
        on_hour=on_hour,
        on_layout=on_layout,
        on_minute=on_minute,
        on_period=on_period,
        on_readonly=on_readonly,
        on_second=on_second,
        on_selecting=on_selecting,
        on_slot=on_slot,
        on_style_=on_style_,
        on_use_seconds=on_use_seconds,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.TimePickerTitle
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Timeline(
    align_top: bool = None,
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    dark: bool = None,
    dense: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    reverse: bool = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_align_top: typing.Callable[[bool], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_dense: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_reverse: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.Timeline]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        align_top=align_top,
        attributes=attributes,
        children=children,
        class_=class_,
        dark=dark,
        dense=dense,
        layout=layout,
        light=light,
        reverse=reverse,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_align_top=on_align_top,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_dark=on_dark,
        on_dense=on_dense,
        on_layout=on_layout,
        on_light=on_light,
        on_reverse=on_reverse,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.Timeline
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def TimelineItem(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    color: str = None,
    dark: bool = None,
    fill_dot: bool = None,
    hide_dot: bool = None,
    icon: str = None,
    icon_color: str = None,
    large: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    left: bool = None,
    light: bool = None,
    right: bool = None,
    slot: str = None,
    small: bool = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_fill_dot: typing.Callable[[bool], Any] = None,
    on_hide_dot: typing.Callable[[bool], Any] = None,
    on_icon: typing.Callable[[str], Any] = None,
    on_icon_color: typing.Callable[[str], Any] = None,
    on_large: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_left: typing.Callable[[bool], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_right: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_small: typing.Callable[[bool], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.TimelineItem]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        color=color,
        dark=dark,
        fill_dot=fill_dot,
        hide_dot=hide_dot,
        icon=icon,
        icon_color=icon_color,
        large=large,
        layout=layout,
        left=left,
        light=light,
        right=right,
        slot=slot,
        small=small,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_dark=on_dark,
        on_fill_dot=on_fill_dot,
        on_hide_dot=on_hide_dot,
        on_icon=on_icon,
        on_icon_color=on_icon_color,
        on_large=on_large,
        on_layout=on_layout,
        on_left=on_left,
        on_light=on_light,
        on_right=on_right,
        on_slot=on_slot,
        on_small=on_small,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.TimelineItem
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Toolbar(
    absolute: bool = None,
    attributes: dict = {},
    bottom: bool = None,
    children: list = [],
    class_: str = None,
    collapse: bool = None,
    color: str = None,
    dark: bool = None,
    dense: bool = None,
    elevation: typing.Union[float, str] = None,
    extended: bool = None,
    extension_height: typing.Union[float, str] = None,
    flat: bool = None,
    floating: bool = None,
    height: typing.Union[float, str] = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    max_height: typing.Union[float, str] = None,
    max_width: typing.Union[float, str] = None,
    min_height: typing.Union[float, str] = None,
    min_width: typing.Union[float, str] = None,
    prominent: bool = None,
    short: bool = None,
    slot: str = None,
    src: typing.Union[str, dict] = None,
    style_: str = None,
    tag: str = None,
    tile: bool = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    width: typing.Union[float, str] = None,
    on_absolute: typing.Callable[[bool], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_bottom: typing.Callable[[bool], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_collapse: typing.Callable[[bool], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_dense: typing.Callable[[bool], Any] = None,
    on_elevation: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_extended: typing.Callable[[bool], Any] = None,
    on_extension_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_flat: typing.Callable[[bool], Any] = None,
    on_floating: typing.Callable[[bool], Any] = None,
    on_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_max_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_max_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_min_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_min_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_prominent: typing.Callable[[bool], Any] = None,
    on_short: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_src: typing.Callable[[typing.Union[str, dict]], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_tag: typing.Callable[[str], Any] = None,
    on_tile: typing.Callable[[bool], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_width: typing.Callable[[typing.Union[float, str]], Any] = None,
) -> Element[ipyvuetify.generated.Toolbar]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        absolute=absolute,
        attributes=attributes,
        bottom=bottom,
        children=children,
        class_=class_,
        collapse=collapse,
        color=color,
        dark=dark,
        dense=dense,
        elevation=elevation,
        extended=extended,
        extension_height=extension_height,
        flat=flat,
        floating=floating,
        height=height,
        layout=layout,
        light=light,
        max_height=max_height,
        max_width=max_width,
        min_height=min_height,
        min_width=min_width,
        prominent=prominent,
        short=short,
        slot=slot,
        src=src,
        style_=style_,
        tag=tag,
        tile=tile,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        width=width,
        on_absolute=on_absolute,
        on_attributes=on_attributes,
        on_bottom=on_bottom,
        on_children=on_children,
        on_class_=on_class_,
        on_collapse=on_collapse,
        on_color=on_color,
        on_dark=on_dark,
        on_dense=on_dense,
        on_elevation=on_elevation,
        on_extended=on_extended,
        on_extension_height=on_extension_height,
        on_flat=on_flat,
        on_floating=on_floating,
        on_height=on_height,
        on_layout=on_layout,
        on_light=on_light,
        on_max_height=on_max_height,
        on_max_width=on_max_width,
        on_min_height=on_min_height,
        on_min_width=on_min_width,
        on_prominent=on_prominent,
        on_short=on_short,
        on_slot=on_slot,
        on_src=on_src,
        on_style_=on_style_,
        on_tag=on_tag,
        on_tile=on_tile,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_width=on_width,
    )
    widget_cls = ipyvuetify.generated.Toolbar
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def ToolbarItems(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.ToolbarItems]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        layout=layout,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_layout=on_layout,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.ToolbarItems
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def ToolbarTitle(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.ToolbarTitle]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        layout=layout,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_layout=on_layout,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.ToolbarTitle
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Tooltip(
    absolute: bool = None,
    activator: Any = None,
    allow_overflow: bool = None,
    attach: Any = None,
    attributes: dict = {},
    bottom: bool = None,
    children: list = [],
    class_: str = None,
    close_delay: typing.Union[float, str] = None,
    color: str = None,
    content_class: str = None,
    dark: bool = None,
    disabled: bool = None,
    eager: bool = None,
    fixed: bool = None,
    internal_activator: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    left: bool = None,
    light: bool = None,
    max_width: typing.Union[float, str] = None,
    min_width: typing.Union[float, str] = None,
    nudge_bottom: typing.Union[float, str] = None,
    nudge_left: typing.Union[float, str] = None,
    nudge_right: typing.Union[float, str] = None,
    nudge_top: typing.Union[float, str] = None,
    nudge_width: typing.Union[float, str] = None,
    offset_overflow: bool = None,
    open_delay: typing.Union[float, str] = None,
    open_on_click: bool = None,
    open_on_hover: bool = None,
    position_x: float = None,
    position_y: float = None,
    right: bool = None,
    slot: str = None,
    style_: str = None,
    tag: str = None,
    top: bool = None,
    transition: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: Any = None,
    z_index: Any = None,
    on_absolute: typing.Callable[[bool], Any] = None,
    on_activator: typing.Callable[[Any], Any] = None,
    on_allow_overflow: typing.Callable[[bool], Any] = None,
    on_attach: typing.Callable[[Any], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_bottom: typing.Callable[[bool], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_close_delay: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_content_class: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_eager: typing.Callable[[bool], Any] = None,
    on_fixed: typing.Callable[[bool], Any] = None,
    on_internal_activator: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_left: typing.Callable[[bool], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_max_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_min_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_nudge_bottom: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_nudge_left: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_nudge_right: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_nudge_top: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_nudge_width: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_offset_overflow: typing.Callable[[bool], Any] = None,
    on_open_delay: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_open_on_click: typing.Callable[[bool], Any] = None,
    on_open_on_hover: typing.Callable[[bool], Any] = None,
    on_position_x: typing.Callable[[float], Any] = None,
    on_position_y: typing.Callable[[float], Any] = None,
    on_right: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_tag: typing.Callable[[str], Any] = None,
    on_top: typing.Callable[[bool], Any] = None,
    on_transition: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
    on_z_index: typing.Callable[[Any], Any] = None,
) -> Element[ipyvuetify.generated.Tooltip]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        absolute=absolute,
        activator=activator,
        allow_overflow=allow_overflow,
        attach=attach,
        attributes=attributes,
        bottom=bottom,
        children=children,
        class_=class_,
        close_delay=close_delay,
        color=color,
        content_class=content_class,
        dark=dark,
        disabled=disabled,
        eager=eager,
        fixed=fixed,
        internal_activator=internal_activator,
        layout=layout,
        left=left,
        light=light,
        max_width=max_width,
        min_width=min_width,
        nudge_bottom=nudge_bottom,
        nudge_left=nudge_left,
        nudge_right=nudge_right,
        nudge_top=nudge_top,
        nudge_width=nudge_width,
        offset_overflow=offset_overflow,
        open_delay=open_delay,
        open_on_click=open_on_click,
        open_on_hover=open_on_hover,
        position_x=position_x,
        position_y=position_y,
        right=right,
        slot=slot,
        style_=style_,
        tag=tag,
        top=top,
        transition=transition,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        z_index=z_index,
        on_absolute=on_absolute,
        on_activator=on_activator,
        on_allow_overflow=on_allow_overflow,
        on_attach=on_attach,
        on_attributes=on_attributes,
        on_bottom=on_bottom,
        on_children=on_children,
        on_class_=on_class_,
        on_close_delay=on_close_delay,
        on_color=on_color,
        on_content_class=on_content_class,
        on_dark=on_dark,
        on_disabled=on_disabled,
        on_eager=on_eager,
        on_fixed=on_fixed,
        on_internal_activator=on_internal_activator,
        on_layout=on_layout,
        on_left=on_left,
        on_light=on_light,
        on_max_width=on_max_width,
        on_min_width=on_min_width,
        on_nudge_bottom=on_nudge_bottom,
        on_nudge_left=on_nudge_left,
        on_nudge_right=on_nudge_right,
        on_nudge_top=on_nudge_top,
        on_nudge_width=on_nudge_width,
        on_offset_overflow=on_offset_overflow,
        on_open_delay=on_open_delay,
        on_open_on_click=on_open_on_click,
        on_open_on_hover=on_open_on_hover,
        on_position_x=on_position_x,
        on_position_y=on_position_y,
        on_right=on_right,
        on_slot=on_slot,
        on_style_=on_style_,
        on_tag=on_tag,
        on_top=on_top,
        on_transition=on_transition,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
        on_z_index=on_z_index,
    )
    widget_cls = ipyvuetify.generated.Tooltip
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Treeview(
    activatable: bool = None,
    active: list = [],
    active_class: str = None,
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    color: str = None,
    dark: bool = None,
    dense: bool = None,
    expand_icon: str = None,
    hoverable: bool = None,
    indeterminate_icon: str = None,
    item_children: str = None,
    item_disabled: str = None,
    item_key: str = None,
    item_text: str = None,
    items: list = [],
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    loading_icon: str = None,
    multiple_active: bool = None,
    off_icon: str = None,
    on_icon: str = None,
    open_: list = [],
    open_all: bool = None,
    open_on_click: bool = None,
    return_object: bool = None,
    rounded: bool = None,
    search: str = None,
    selectable: bool = None,
    selected_color: str = None,
    selection_type: str = None,
    shaped: bool = None,
    slot: str = None,
    style_: str = None,
    transition: bool = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: list = [],
    on_activatable: typing.Callable[[bool], Any] = None,
    on_active: typing.Callable[[list], Any] = None,
    on_active_class: typing.Callable[[str], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_dense: typing.Callable[[bool], Any] = None,
    on_expand_icon: typing.Callable[[str], Any] = None,
    on_hoverable: typing.Callable[[bool], Any] = None,
    on_indeterminate_icon: typing.Callable[[str], Any] = None,
    on_item_children: typing.Callable[[str], Any] = None,
    on_item_disabled: typing.Callable[[str], Any] = None,
    on_item_key: typing.Callable[[str], Any] = None,
    on_item_text: typing.Callable[[str], Any] = None,
    on_items: typing.Callable[[list], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_loading_icon: typing.Callable[[str], Any] = None,
    on_multiple_active: typing.Callable[[bool], Any] = None,
    on_off_icon: typing.Callable[[str], Any] = None,
    on_on_icon: typing.Callable[[str], Any] = None,
    on_open_: typing.Callable[[list], Any] = None,
    on_open_all: typing.Callable[[bool], Any] = None,
    on_open_on_click: typing.Callable[[bool], Any] = None,
    on_return_object: typing.Callable[[bool], Any] = None,
    on_rounded: typing.Callable[[bool], Any] = None,
    on_search: typing.Callable[[str], Any] = None,
    on_selectable: typing.Callable[[bool], Any] = None,
    on_selected_color: typing.Callable[[str], Any] = None,
    on_selection_type: typing.Callable[[str], Any] = None,
    on_shaped: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_transition: typing.Callable[[bool], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.Treeview]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        activatable=activatable,
        active=active,
        active_class=active_class,
        attributes=attributes,
        children=children,
        class_=class_,
        color=color,
        dark=dark,
        dense=dense,
        expand_icon=expand_icon,
        hoverable=hoverable,
        indeterminate_icon=indeterminate_icon,
        item_children=item_children,
        item_disabled=item_disabled,
        item_key=item_key,
        item_text=item_text,
        items=items,
        layout=layout,
        light=light,
        loading_icon=loading_icon,
        multiple_active=multiple_active,
        off_icon=off_icon,
        on_icon=on_icon,
        open_=open_,
        open_all=open_all,
        open_on_click=open_on_click,
        return_object=return_object,
        rounded=rounded,
        search=search,
        selectable=selectable,
        selected_color=selected_color,
        selection_type=selection_type,
        shaped=shaped,
        slot=slot,
        style_=style_,
        transition=transition,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        on_activatable=on_activatable,
        on_active=on_active,
        on_active_class=on_active_class,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_dark=on_dark,
        on_dense=on_dense,
        on_expand_icon=on_expand_icon,
        on_hoverable=on_hoverable,
        on_indeterminate_icon=on_indeterminate_icon,
        on_item_children=on_item_children,
        on_item_disabled=on_item_disabled,
        on_item_key=on_item_key,
        on_item_text=on_item_text,
        on_items=on_items,
        on_layout=on_layout,
        on_light=on_light,
        on_loading_icon=on_loading_icon,
        on_multiple_active=on_multiple_active,
        on_off_icon=on_off_icon,
        on_on_icon=on_on_icon,
        on_open_=on_open_,
        on_open_all=on_open_all,
        on_open_on_click=on_open_on_click,
        on_return_object=on_return_object,
        on_rounded=on_rounded,
        on_search=on_search,
        on_selectable=on_selectable,
        on_selected_color=on_selected_color,
        on_selection_type=on_selection_type,
        on_shaped=on_shaped,
        on_slot=on_slot,
        on_style_=on_style_,
        on_transition=on_transition,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.Treeview
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def TreeviewNode(
    activatable: bool = None,
    active_class: str = None,
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    color: str = None,
    expand_icon: str = None,
    indeterminate_icon: str = None,
    item: dict = None,
    item_children: str = None,
    item_disabled: str = None,
    item_key: str = None,
    item_text: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    level: float = None,
    loading_icon: str = None,
    off_icon: str = None,
    on_icon: str = None,
    open_on_click: bool = None,
    rounded: bool = None,
    selectable: bool = None,
    selected_color: str = None,
    shaped: bool = None,
    slot: str = None,
    style_: str = None,
    transition: bool = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_activatable: typing.Callable[[bool], Any] = None,
    on_active_class: typing.Callable[[str], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_color: typing.Callable[[str], Any] = None,
    on_expand_icon: typing.Callable[[str], Any] = None,
    on_indeterminate_icon: typing.Callable[[str], Any] = None,
    on_item: typing.Callable[[dict], Any] = None,
    on_item_children: typing.Callable[[str], Any] = None,
    on_item_disabled: typing.Callable[[str], Any] = None,
    on_item_key: typing.Callable[[str], Any] = None,
    on_item_text: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_level: typing.Callable[[float], Any] = None,
    on_loading_icon: typing.Callable[[str], Any] = None,
    on_off_icon: typing.Callable[[str], Any] = None,
    on_on_icon: typing.Callable[[str], Any] = None,
    on_open_on_click: typing.Callable[[bool], Any] = None,
    on_rounded: typing.Callable[[bool], Any] = None,
    on_selectable: typing.Callable[[bool], Any] = None,
    on_selected_color: typing.Callable[[str], Any] = None,
    on_shaped: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_transition: typing.Callable[[bool], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.TreeviewNode]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        activatable=activatable,
        active_class=active_class,
        attributes=attributes,
        children=children,
        class_=class_,
        color=color,
        expand_icon=expand_icon,
        indeterminate_icon=indeterminate_icon,
        item=item,
        item_children=item_children,
        item_disabled=item_disabled,
        item_key=item_key,
        item_text=item_text,
        layout=layout,
        level=level,
        loading_icon=loading_icon,
        off_icon=off_icon,
        on_icon=on_icon,
        open_on_click=open_on_click,
        rounded=rounded,
        selectable=selectable,
        selected_color=selected_color,
        shaped=shaped,
        slot=slot,
        style_=style_,
        transition=transition,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_activatable=on_activatable,
        on_active_class=on_active_class,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_color=on_color,
        on_expand_icon=on_expand_icon,
        on_indeterminate_icon=on_indeterminate_icon,
        on_item=on_item,
        on_item_children=on_item_children,
        on_item_disabled=on_item_disabled,
        on_item_key=on_item_key,
        on_item_text=on_item_text,
        on_layout=on_layout,
        on_level=on_level,
        on_loading_icon=on_loading_icon,
        on_off_icon=on_off_icon,
        on_on_icon=on_on_icon,
        on_open_on_click=on_open_on_click,
        on_rounded=on_rounded,
        on_selectable=on_selectable,
        on_selected_color=on_selected_color,
        on_shaped=on_shaped,
        on_slot=on_slot,
        on_style_=on_style_,
        on_transition=on_transition,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.TreeviewNode
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def VirtualTable(
    attributes: dict = {},
    children: list = [],
    chunk_size: float = None,
    class_: str = None,
    dark: bool = None,
    dense: bool = None,
    fixed_header: bool = None,
    header_height: float = None,
    height: typing.Union[float, str] = None,
    items: list = [],
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    row_height: float = None,
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_chunk_size: typing.Callable[[float], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_dense: typing.Callable[[bool], Any] = None,
    on_fixed_header: typing.Callable[[bool], Any] = None,
    on_header_height: typing.Callable[[float], Any] = None,
    on_height: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_items: typing.Callable[[list], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_row_height: typing.Callable[[float], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.VirtualTable]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        chunk_size=chunk_size,
        class_=class_,
        dark=dark,
        dense=dense,
        fixed_header=fixed_header,
        header_height=header_height,
        height=height,
        items=items,
        layout=layout,
        light=light,
        row_height=row_height,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_chunk_size=on_chunk_size,
        on_class_=on_class_,
        on_dark=on_dark,
        on_dense=on_dense,
        on_fixed_header=on_fixed_header,
        on_header_height=on_header_height,
        on_height=on_height,
        on_items=on_items,
        on_layout=on_layout,
        on_light=on_light,
        on_row_height=on_row_height,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.VirtualTable
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def VuetifyTemplate(
    components: dict = None,
    css: str = None,
    data: str = None,
    events: list = [],
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    methods: str = None,
    template: typing.Union[Element[ipyvue.Template], str] = None,
    on_components: typing.Callable[[dict], Any] = None,
    on_css: typing.Callable[[str], Any] = None,
    on_data: typing.Callable[[str], Any] = None,
    on_events: typing.Callable[[list], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_methods: typing.Callable[[str], Any] = None,
    on_template: typing.Callable[[typing.Union[Element[ipyvue.Template], str]], Any] = None,
) -> Element[ipyvuetify.VuetifyTemplate]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        components=components,
        css=css,
        data=data,
        events=events,
        layout=layout,
        methods=methods,
        template=template,
        on_components=on_components,
        on_css=on_css,
        on_data=on_data,
        on_events=on_events,
        on_layout=on_layout,
        on_methods=on_methods,
        on_template=on_template,
    )
    widget_cls = ipyvuetify.VuetifyTemplate
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def VuetifyWidget(
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    slot: str = None,
    style_: str = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
) -> Element[ipyvuetify.generated.VuetifyWidget]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        attributes=attributes,
        children=children,
        class_=class_,
        layout=layout,
        slot=slot,
        style_=style_,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_layout=on_layout,
        on_slot=on_slot,
        on_style_=on_style_,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
    )
    widget_cls = ipyvuetify.generated.VuetifyWidget
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def Window(
    active_class: str = None,
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    continuous: bool = None,
    dark: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    light: bool = None,
    mandatory: bool = None,
    max: typing.Union[float, str] = None,
    multiple: bool = None,
    next_icon: typing.Union[bool, str] = None,
    prev_icon: typing.Union[bool, str] = None,
    reverse: bool = None,
    show_arrows: bool = None,
    show_arrows_on_hover: bool = None,
    slot: str = None,
    style_: str = None,
    touch: dict = None,
    touchless: bool = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: Any = None,
    vertical: bool = None,
    on_active_class: typing.Callable[[str], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_continuous: typing.Callable[[bool], Any] = None,
    on_dark: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_light: typing.Callable[[bool], Any] = None,
    on_mandatory: typing.Callable[[bool], Any] = None,
    on_max: typing.Callable[[typing.Union[float, str]], Any] = None,
    on_multiple: typing.Callable[[bool], Any] = None,
    on_next_icon: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_prev_icon: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_reverse: typing.Callable[[bool], Any] = None,
    on_show_arrows: typing.Callable[[bool], Any] = None,
    on_show_arrows_on_hover: typing.Callable[[bool], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_touch: typing.Callable[[dict], Any] = None,
    on_touchless: typing.Callable[[bool], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
    on_vertical: typing.Callable[[bool], Any] = None,
) -> Element[ipyvuetify.generated.Window]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        active_class=active_class,
        attributes=attributes,
        children=children,
        class_=class_,
        continuous=continuous,
        dark=dark,
        layout=layout,
        light=light,
        mandatory=mandatory,
        max=max,
        multiple=multiple,
        next_icon=next_icon,
        prev_icon=prev_icon,
        reverse=reverse,
        show_arrows=show_arrows,
        show_arrows_on_hover=show_arrows_on_hover,
        slot=slot,
        style_=style_,
        touch=touch,
        touchless=touchless,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        vertical=vertical,
        on_active_class=on_active_class,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_continuous=on_continuous,
        on_dark=on_dark,
        on_layout=on_layout,
        on_light=on_light,
        on_mandatory=on_mandatory,
        on_max=on_max,
        on_multiple=on_multiple,
        on_next_icon=on_next_icon,
        on_prev_icon=on_prev_icon,
        on_reverse=on_reverse,
        on_show_arrows=on_show_arrows,
        on_show_arrows_on_hover=on_show_arrows_on_hover,
        on_slot=on_slot,
        on_style_=on_style_,
        on_touch=on_touch,
        on_touchless=on_touchless,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
        on_vertical=on_vertical,
    )
    widget_cls = ipyvuetify.generated.Window
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)


###
def WindowItem(
    active_class: str = None,
    attributes: dict = {},
    children: list = [],
    class_: str = None,
    disabled: bool = None,
    eager: bool = None,
    layout: Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]] = {},
    reverse_transition: typing.Union[bool, str] = None,
    slot: str = None,
    style_: str = None,
    transition: typing.Union[bool, str] = None,
    v_model: Any = "!!disabled!!",
    v_on: str = None,
    v_slots: list = [],
    value: Any = None,
    on_active_class: typing.Callable[[str], Any] = None,
    on_attributes: typing.Callable[[dict], Any] = None,
    on_children: typing.Callable[[list], Any] = None,
    on_class_: typing.Callable[[str], Any] = None,
    on_disabled: typing.Callable[[bool], Any] = None,
    on_eager: typing.Callable[[bool], Any] = None,
    on_layout: typing.Callable[[Union[Dict[str, Any], Element[ipywidgets.widgets.widget_layout.Layout]]], Any] = None,
    on_reverse_transition: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_slot: typing.Callable[[str], Any] = None,
    on_style_: typing.Callable[[str], Any] = None,
    on_transition: typing.Callable[[typing.Union[bool, str]], Any] = None,
    on_v_model: typing.Callable[[Any], Any] = None,
    on_v_on: typing.Callable[[str], Any] = None,
    on_v_slots: typing.Callable[[list], Any] = None,
    on_value: typing.Callable[[Any], Any] = None,
) -> Element[ipyvuetify.generated.WindowItem]:
    """ """
    if isinstance(layout, dict):
        layout = w.Layout(**layout)
    kwargs: Dict[Any, Any] = dict(
        active_class=active_class,
        attributes=attributes,
        children=children,
        class_=class_,
        disabled=disabled,
        eager=eager,
        layout=layout,
        reverse_transition=reverse_transition,
        slot=slot,
        style_=style_,
        transition=transition,
        v_model=v_model,
        v_on=v_on,
        v_slots=v_slots,
        value=value,
        on_active_class=on_active_class,
        on_attributes=on_attributes,
        on_children=on_children,
        on_class_=on_class_,
        on_disabled=on_disabled,
        on_eager=on_eager,
        on_layout=on_layout,
        on_reverse_transition=on_reverse_transition,
        on_slot=on_slot,
        on_style_=on_style_,
        on_transition=on_transition,
        on_v_model=on_v_model,
        on_v_on=on_v_on,
        on_v_slots=on_v_slots,
        on_value=on_value,
    )
    widget_cls = ipyvuetify.generated.WindowItem
    comp = react.core.ComponentWidget(widget=widget_cls)
    return react.core.Element(comp, **kwargs)
