# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import data_consumer_pb2 as data__consumer__pb2


class DataConsumerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Stop = channel.unary_unary(
                '/yandex.cloud.priv.ai.platform.v1.DataConsumer/Stop',
                request_serializer=data__consumer__pb2.ConsumerStopRequest.SerializeToString,
                response_deserializer=data__consumer__pb2.ConsumerStopResponse.FromString,
                )
        self.DiskStatus = channel.stream_stream(
                '/yandex.cloud.priv.ai.platform.v1.DataConsumer/DiskStatus',
                request_serializer=data__consumer__pb2.ConsumerDiskStatusRequest.SerializeToString,
                response_deserializer=data__consumer__pb2.ConsumerDiskStatusResponse.FromString,
                )


class DataConsumerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Stop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DiskStatus(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataConsumerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Stop': grpc.unary_unary_rpc_method_handler(
                    servicer.Stop,
                    request_deserializer=data__consumer__pb2.ConsumerStopRequest.FromString,
                    response_serializer=data__consumer__pb2.ConsumerStopResponse.SerializeToString,
            ),
            'DiskStatus': grpc.stream_stream_rpc_method_handler(
                    servicer.DiskStatus,
                    request_deserializer=data__consumer__pb2.ConsumerDiskStatusRequest.FromString,
                    response_serializer=data__consumer__pb2.ConsumerDiskStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'yandex.cloud.priv.ai.platform.v1.DataConsumer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataConsumer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Stop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/yandex.cloud.priv.ai.platform.v1.DataConsumer/Stop',
            data__consumer__pb2.ConsumerStopRequest.SerializeToString,
            data__consumer__pb2.ConsumerStopResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DiskStatus(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/yandex.cloud.priv.ai.platform.v1.DataConsumer/DiskStatus',
            data__consumer__pb2.ConsumerDiskStatusRequest.SerializeToString,
            data__consumer__pb2.ConsumerDiskStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class DataProducerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PullBatch = channel.stream_stream(
                '/yandex.cloud.priv.ai.platform.v1.DataProducer/PullBatch',
                request_serializer=data__consumer__pb2.BatchDataRequest.SerializeToString,
                response_deserializer=data__consumer__pb2.BatchDataResponse.FromString,
                )
        self.Stop = channel.unary_unary(
                '/yandex.cloud.priv.ai.platform.v1.DataProducer/Stop',
                request_serializer=data__consumer__pb2.ProducerStopRequest.SerializeToString,
                response_deserializer=data__consumer__pb2.ProducerStopResponse.FromString,
                )


class DataProducerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def PullBatch(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataProducerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PullBatch': grpc.stream_stream_rpc_method_handler(
                    servicer.PullBatch,
                    request_deserializer=data__consumer__pb2.BatchDataRequest.FromString,
                    response_serializer=data__consumer__pb2.BatchDataResponse.SerializeToString,
            ),
            'Stop': grpc.unary_unary_rpc_method_handler(
                    servicer.Stop,
                    request_deserializer=data__consumer__pb2.ProducerStopRequest.FromString,
                    response_serializer=data__consumer__pb2.ProducerStopResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'yandex.cloud.priv.ai.platform.v1.DataProducer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataProducer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def PullBatch(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/yandex.cloud.priv.ai.platform.v1.DataProducer/PullBatch',
            data__consumer__pb2.BatchDataRequest.SerializeToString,
            data__consumer__pb2.BatchDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Stop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/yandex.cloud.priv.ai.platform.v1.DataProducer/Stop',
            data__consumer__pb2.ProducerStopRequest.SerializeToString,
            data__consumer__pb2.ProducerStopResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
