from typing import Optional, Dict

from classiq_interface.generator.function_param_list import *

import abc
from classiq.exceptions import ClassiqValueError as ClassiqValueError, ClassiqWiringError as ClassiqWiringError
from classiq.model_designer.wire import Wire as Wire
from classiq.quantum_functions.function_library import FunctionLibrary as FunctionLibrary
from classiq.quantum_register import QReg as QuantumRegister
from typing import Collection, Dict, Iterable, Optional, Union

QregOrWire = Union[QuantumRegister, Wire]
WireOrWires = Union[Wire, Iterable[Wire]]
SupportedIOUnion = Union[Dict[str, QregOrWire], Collection[QuantumRegister], QuantumRegister]

class FunctionHandler(abc.ABC, metaclass=abc.ABCMeta):
    def __init__(self) -> None: ...
    def apply(self, function_name: str, in_wires: Optional[Union[Dict[str, QregOrWire], QuantumRegister]] = ..., out_wires: Optional[Union[Dict[str, QregOrWire], QuantumRegister]] = ...) -> Dict[str, Wire]: ...
    def __getattr__(self, item): ...
    def __dir__(self): ...
    def include_library(self, library: FunctionLibrary) -> None: ...
    def GreaterThan(self, params: GreaterThan, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def CPhaseGate(self, params: CPhaseGate, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def Multiplier(self, params: Multiplier, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def SGate(self, params: SGate, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def SwapGate(self, params: SwapGate, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def RYYGate(self, params: RYYGate, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def Subtractor(self, params: Subtractor, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def CustomFunction(self, params: CustomFunction, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def CZGate(self, params: CZGate, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def BitwiseXor(self, params: BitwiseXor, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def ZGate(self, params: ZGate, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def LShift(self, params: LShift, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def IGate(self, params: IGate, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def BitwiseAnd(self, params: BitwiseAnd, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def CHGate(self, params: CHGate, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def RShift(self, params: RShift, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def UnitaryGate(self, params: UnitaryGate, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def UCC(self, params: UCC, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def PhaseGate(self, params: PhaseGate, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def HGate(self, params: HGate, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def AmplitudeEstimation(self, params: AmplitudeEstimation, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def NotEqual(self, params: NotEqual, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def RXXGate(self, params: RXXGate, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def GridEntangler(self, params: GridEntangler, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def SparseAmpLoad(self, params: SparseAmpLoad, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def YGate(self, params: YGate, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def CSXGate(self, params: CSXGate, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def RGate(self, params: RGate, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def HartreeFock(self, params: HartreeFock, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def StatePreparation(self, params: StatePreparation, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def CyclicShift(self, params: CyclicShift, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def Negation(self, params: Negation, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def RZGate(self, params: RZGate, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def Equal(self, params: Equal, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def CRXGate(self, params: CRXGate, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def iSwapGate(self, params: iSwapGate, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def TGate(self, params: TGate, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def TwoDimensionalEntangler(self, params: TwoDimensionalEntangler, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def LinearPauliRotations(self, params: LinearPauliRotations, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def BitwiseOr(self, params: BitwiseOr, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def Mcx(self, params: Mcx, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def RYGate(self, params: RYGate, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def LogicalOr(self, params: LogicalOr, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def XGate(self, params: XGate, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def GreaterEqual(self, params: GreaterEqual, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def TdgGate(self, params: TdgGate, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def SXdgGate(self, params: SXdgGate, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def C3XGate(self, params: C3XGate, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def WeightedAdder(self, params: WeightedAdder, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def C4XGate(self, params: C4XGate, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def CRYGate(self, params: CRYGate, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def CRZGate(self, params: CRZGate, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def QFT(self, params: QFT, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def Adder(self, params: Adder, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def LessThan(self, params: LessThan, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def MCPhaseGate(self, params: MCPhaseGate, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def CDFComparator(self, params: CDFComparator, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def FinancePayoff(self, params: FinancePayoff, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def SXGate(self, params: SXGate, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def StatePropagator(self, params: StatePropagator, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def HardwareEfficientAnsatz(self, params: HardwareEfficientAnsatz, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def GroverOperator(self, params: GroverOperator, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def Finance(self, params: Finance, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def FinanceModels(self, params: FinanceModels, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def HypercubeEntangler(self, params: HypercubeEntangler, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def Exponentiation(self, params: Exponentiation, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def CCXGate(self, params: CCXGate, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def ArithmeticOracle(self, params: ArithmeticOracle, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def Arithmetic(self, params: Arithmetic, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def HadamardAmpLoad(self, params: HadamardAmpLoad, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def Max(self, params: Max, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def LinearGCI(self, params: LinearGCI, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def RXGate(self, params: RXGate, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def Min(self, params: Min, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def LogicalAnd(self, params: LogicalAnd, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def SdgGate(self, params: SdgGate, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def RZZGate(self, params: RZZGate, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def LessEqual(self, params: LessEqual, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def CXGate(self, params: CXGate, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def CYGate(self, params: CYGate, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def BitwiseInvert(self, params: BitwiseInvert, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
