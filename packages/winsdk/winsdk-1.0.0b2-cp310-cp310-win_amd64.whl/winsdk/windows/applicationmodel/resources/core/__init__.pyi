# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.2

import enum
import sys
import types
import typing
import uuid

import winsdk._winrt as _winrt

try:
    import winsdk.windows.foundation
except Exception:
    pass

try:
    import winsdk.windows.foundation.collections
except Exception:
    pass

try:
    import winsdk.windows.storage
except Exception:
    pass

try:
    import winsdk.windows.storage.streams
except Exception:
    pass

try:
    import winsdk.windows.ui
except Exception:
    pass

class ResourceCandidateKind(enum.IntEnum):
    STRING = 0
    FILE = 1
    EMBEDDED_DATA = 2

class ResourceQualifierPersistence(enum.IntEnum):
    NONE = 0
    LOCAL_MACHINE = 1

class ResourceLayoutInfo:
    major_version: _winrt.UInt32
    minor_version: _winrt.UInt32
    resource_subtree_count: _winrt.UInt32
    named_resource_count: _winrt.UInt32
    checksum: _winrt.Int32
    def __init__(self, major_version: _winrt.UInt32, minor_version: _winrt.UInt32, resource_subtree_count: _winrt.UInt32, named_resource_count: _winrt.UInt32, checksum: _winrt.Int32) -> None: ...

class NamedResource(_winrt.Object):
    candidates: winsdk.windows.foundation.collections.IVectorView[ResourceCandidate]
    uri: winsdk.windows.foundation.Uri
    @staticmethod
    def _from(obj: _winrt.Object) -> NamedResource: ...
    @typing.overload
    def resolve(self) -> ResourceCandidate: ...
    @typing.overload
    def resolve(self, resource_context: ResourceContext) -> ResourceCandidate: ...
    @typing.overload
    def resolve_all(self) -> winsdk.windows.foundation.collections.IVectorView[ResourceCandidate]: ...
    @typing.overload
    def resolve_all(self, resource_context: ResourceContext) -> winsdk.windows.foundation.collections.IVectorView[ResourceCandidate]: ...

class ResourceCandidate(_winrt.Object):
    is_default: _winrt.Boolean
    is_match: _winrt.Boolean
    is_match_as_default: _winrt.Boolean
    qualifiers: winsdk.windows.foundation.collections.IVectorView[ResourceQualifier]
    value_as_string: str
    kind: ResourceCandidateKind
    @staticmethod
    def _from(obj: _winrt.Object) -> ResourceCandidate: ...
    @typing.overload
    def get_qualifier_value(self, qualifier_name: str) -> str: ...
    @typing.overload
    def get_value_as_file_async(self) -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.storage.StorageFile]: ...
    @typing.overload
    def get_value_as_stream_async(self) -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.storage.streams.IRandomAccessStream]: ...

class ResourceCandidateVectorView(winsdk.windows.foundation.collections.IVectorView[ResourceCandidate], winsdk.windows.foundation.collections.IIterable[ResourceCandidate], _winrt.Object):
    size: _winrt.UInt32
    @staticmethod
    def _from(obj: _winrt.Object) -> ResourceCandidateVectorView: ...
    @typing.overload
    def first(self) -> winsdk.windows.foundation.collections.IIterator[ResourceCandidate]: ...
    @typing.overload
    def get_at(self, index: _winrt.UInt32) -> ResourceCandidate: ...
    @typing.overload
    def get_many(self, start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[ResourceCandidate]]: ...
    @typing.overload
    def index_of(self, value: ResourceCandidate) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]: ...

class ResourceContext(_winrt.Object):
    languages: winsdk.windows.foundation.collections.IVectorView[str]
    qualifier_values: winsdk.windows.foundation.collections.IObservableMap[str, str]
    @staticmethod
    def _from(obj: _winrt.Object) -> ResourceContext: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def clone(self) -> ResourceContext: ...
    @typing.overload
    @staticmethod
    def create_matching_context(result: typing.Iterable[ResourceQualifier]) -> ResourceContext: ...
    @typing.overload
    @staticmethod
    def get_for_current_view() -> ResourceContext: ...
    @typing.overload
    @staticmethod
    def get_for_u_i_context(context: winsdk.windows.ui.UIContext) -> ResourceContext: ...
    @typing.overload
    @staticmethod
    def get_for_view_independent_use() -> ResourceContext: ...
    @typing.overload
    def override_to_match(self, result: typing.Iterable[ResourceQualifier]) -> None: ...
    @typing.overload
    def reset(self) -> None: ...
    @typing.overload
    def reset(self, qualifier_names: typing.Iterable[str]) -> None: ...
    @typing.overload
    @staticmethod
    def reset_global_qualifier_values() -> None: ...
    @typing.overload
    @staticmethod
    def reset_global_qualifier_values(qualifier_names: typing.Iterable[str]) -> None: ...
    @typing.overload
    @staticmethod
    def set_global_qualifier_value(key: str, value: str) -> None: ...
    @typing.overload
    @staticmethod
    def set_global_qualifier_value(key: str, value: str, persistence: ResourceQualifierPersistence) -> None: ...

class ResourceContextLanguagesVectorView(winsdk.windows.foundation.collections.IVectorView[str], winsdk.windows.foundation.collections.IIterable[str], _winrt.Object):
    size: _winrt.UInt32
    @staticmethod
    def _from(obj: _winrt.Object) -> ResourceContextLanguagesVectorView: ...
    @typing.overload
    def first(self) -> winsdk.windows.foundation.collections.IIterator[str]: ...
    @typing.overload
    def get_at(self, index: _winrt.UInt32) -> str: ...
    @typing.overload
    def get_many(self, start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[str]]: ...
    @typing.overload
    def index_of(self, value: str) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]: ...

class ResourceManager(_winrt.Object):
    all_resource_maps: winsdk.windows.foundation.collections.IMapView[str, ResourceMap]
    default_context: ResourceContext
    main_resource_map: ResourceMap
    current: ResourceManager
    @staticmethod
    def _from(obj: _winrt.Object) -> ResourceManager: ...
    @typing.overload
    def get_all_named_resources_for_package(self, package_name: str, resource_layout_info: ResourceLayoutInfo) -> winsdk.windows.foundation.collections.IVectorView[NamedResource]: ...
    @typing.overload
    def get_all_subtrees_for_package(self, package_name: str, resource_layout_info: ResourceLayoutInfo) -> winsdk.windows.foundation.collections.IVectorView[ResourceMap]: ...
    @typing.overload
    @staticmethod
    def is_resource_reference(resource_reference: str) -> _winrt.Boolean: ...
    @typing.overload
    def load_pri_files(self, files: typing.Iterable[winsdk.windows.storage.IStorageFile]) -> None: ...
    @typing.overload
    def unload_pri_files(self, files: typing.Iterable[winsdk.windows.storage.IStorageFile]) -> None: ...

class ResourceMap(winsdk.windows.foundation.collections.IMapView[str, NamedResource], winsdk.windows.foundation.collections.IIterable[winsdk.windows.foundation.collections.IKeyValuePair[str, NamedResource]], _winrt.Object):
    uri: winsdk.windows.foundation.Uri
    size: _winrt.UInt32
    @staticmethod
    def _from(obj: _winrt.Object) -> ResourceMap: ...
    @typing.overload
    def first(self) -> winsdk.windows.foundation.collections.IIterator[winsdk.windows.foundation.collections.IKeyValuePair[str, NamedResource]]: ...
    @typing.overload
    def get_subtree(self, reference: str) -> ResourceMap: ...
    @typing.overload
    def get_value(self, resource: str) -> ResourceCandidate: ...
    @typing.overload
    def get_value(self, resource: str, context: ResourceContext) -> ResourceCandidate: ...
    @typing.overload
    def has_key(self, key: str) -> _winrt.Boolean: ...
    @typing.overload
    def lookup(self, key: str) -> NamedResource: ...
    @typing.overload
    def split(self, ) -> typing.Tuple[winsdk.windows.foundation.collections.IMapView[str, NamedResource], winsdk.windows.foundation.collections.IMapView[str, NamedResource]]: ...

class ResourceMapIterator(winsdk.windows.foundation.collections.IIterator[winsdk.windows.foundation.collections.IKeyValuePair[str, NamedResource]], _winrt.Object):
    current: winsdk.windows.foundation.collections.IKeyValuePair[str, NamedResource]
    has_current: _winrt.Boolean
    @staticmethod
    def _from(obj: _winrt.Object) -> ResourceMapIterator: ...
    @typing.overload
    def get_many(self, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[winsdk.windows.foundation.collections.IKeyValuePair[str, NamedResource]]]: ...
    @typing.overload
    def move_next(self) -> _winrt.Boolean: ...

class ResourceMapMapView(winsdk.windows.foundation.collections.IMapView[str, ResourceMap], winsdk.windows.foundation.collections.IIterable[winsdk.windows.foundation.collections.IKeyValuePair[str, ResourceMap]], _winrt.Object):
    size: _winrt.UInt32
    @staticmethod
    def _from(obj: _winrt.Object) -> ResourceMapMapView: ...
    @typing.overload
    def first(self) -> winsdk.windows.foundation.collections.IIterator[winsdk.windows.foundation.collections.IKeyValuePair[str, ResourceMap]]: ...
    @typing.overload
    def has_key(self, key: str) -> _winrt.Boolean: ...
    @typing.overload
    def lookup(self, key: str) -> ResourceMap: ...
    @typing.overload
    def split(self, ) -> typing.Tuple[winsdk.windows.foundation.collections.IMapView[str, ResourceMap], winsdk.windows.foundation.collections.IMapView[str, ResourceMap]]: ...

class ResourceMapMapViewIterator(winsdk.windows.foundation.collections.IIterator[winsdk.windows.foundation.collections.IKeyValuePair[str, ResourceMap]], _winrt.Object):
    current: winsdk.windows.foundation.collections.IKeyValuePair[str, ResourceMap]
    has_current: _winrt.Boolean
    @staticmethod
    def _from(obj: _winrt.Object) -> ResourceMapMapViewIterator: ...
    @typing.overload
    def get_many(self, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[winsdk.windows.foundation.collections.IKeyValuePair[str, ResourceMap]]]: ...
    @typing.overload
    def move_next(self) -> _winrt.Boolean: ...

class ResourceQualifier(_winrt.Object):
    is_default: _winrt.Boolean
    is_match: _winrt.Boolean
    qualifier_name: str
    qualifier_value: str
    score: _winrt.Double
    @staticmethod
    def _from(obj: _winrt.Object) -> ResourceQualifier: ...

class ResourceQualifierMapView(winsdk.windows.foundation.collections.IMapView[str, str], winsdk.windows.foundation.collections.IIterable[winsdk.windows.foundation.collections.IKeyValuePair[str, str]], _winrt.Object):
    size: _winrt.UInt32
    @staticmethod
    def _from(obj: _winrt.Object) -> ResourceQualifierMapView: ...
    @typing.overload
    def first(self) -> winsdk.windows.foundation.collections.IIterator[winsdk.windows.foundation.collections.IKeyValuePair[str, str]]: ...
    @typing.overload
    def has_key(self, key: str) -> _winrt.Boolean: ...
    @typing.overload
    def lookup(self, key: str) -> str: ...
    @typing.overload
    def split(self, ) -> typing.Tuple[winsdk.windows.foundation.collections.IMapView[str, str], winsdk.windows.foundation.collections.IMapView[str, str]]: ...

class ResourceQualifierObservableMap(winsdk.windows.foundation.collections.IObservableMap[str, str], winsdk.windows.foundation.collections.IMap[str, str], winsdk.windows.foundation.collections.IIterable[winsdk.windows.foundation.collections.IKeyValuePair[str, str]], _winrt.Object):
    size: _winrt.UInt32
    @staticmethod
    def _from(obj: _winrt.Object) -> ResourceQualifierObservableMap: ...
    @typing.overload
    def clear(self) -> None: ...
    @typing.overload
    def first(self) -> winsdk.windows.foundation.collections.IIterator[winsdk.windows.foundation.collections.IKeyValuePair[str, str]]: ...
    @typing.overload
    def get_view(self) -> winsdk.windows.foundation.collections.IMapView[str, str]: ...
    @typing.overload
    def has_key(self, key: str) -> _winrt.Boolean: ...
    @typing.overload
    def insert(self, key: str, value: str) -> _winrt.Boolean: ...
    @typing.overload
    def lookup(self, key: str) -> str: ...
    @typing.overload
    def remove(self, key: str) -> None: ...
    @typing.overload
    def add_map_changed(self, vhnd: winsdk.windows.foundation.collections.MapChangedEventHandler[str, str]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    @typing.overload
    def remove_map_changed(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...

class ResourceQualifierVectorView(winsdk.windows.foundation.collections.IVectorView[ResourceQualifier], winsdk.windows.foundation.collections.IIterable[ResourceQualifier], _winrt.Object):
    size: _winrt.UInt32
    @staticmethod
    def _from(obj: _winrt.Object) -> ResourceQualifierVectorView: ...
    @typing.overload
    def first(self) -> winsdk.windows.foundation.collections.IIterator[ResourceQualifier]: ...
    @typing.overload
    def get_at(self, index: _winrt.UInt32) -> ResourceQualifier: ...
    @typing.overload
    def get_many(self, start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[ResourceQualifier]]: ...
    @typing.overload
    def index_of(self, value: ResourceQualifier) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]: ...

