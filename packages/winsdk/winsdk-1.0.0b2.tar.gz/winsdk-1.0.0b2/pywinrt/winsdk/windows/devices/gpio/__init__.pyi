# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.2

import enum
import sys
import types
import typing
import uuid

import winsdk._winrt as _winrt

try:
    import winsdk.windows.devices.gpio.provider
except Exception:
    pass

try:
    import winsdk.windows.foundation
except Exception:
    pass

try:
    import winsdk.windows.foundation.collections
except Exception:
    pass

class GpioChangePolarity(enum.IntEnum):
    FALLING = 0
    RISING = 1
    BOTH = 2

class GpioOpenStatus(enum.IntEnum):
    PIN_OPENED = 0
    PIN_UNAVAILABLE = 1
    SHARING_VIOLATION = 2
    MUXING_CONFLICT = 3
    UNKNOWN_ERROR = 4

class GpioPinDriveMode(enum.IntEnum):
    INPUT = 0
    OUTPUT = 1
    INPUT_PULL_UP = 2
    INPUT_PULL_DOWN = 3
    OUTPUT_OPEN_DRAIN = 4
    OUTPUT_OPEN_DRAIN_PULL_UP = 5
    OUTPUT_OPEN_SOURCE = 6
    OUTPUT_OPEN_SOURCE_PULL_DOWN = 7

class GpioPinEdge(enum.IntEnum):
    FALLING_EDGE = 0
    RISING_EDGE = 1

class GpioPinValue(enum.IntEnum):
    LOW = 0
    HIGH = 1

class GpioSharingMode(enum.IntEnum):
    EXCLUSIVE = 0
    SHARED_READ_ONLY = 1

class GpioChangeCount:
    count: _winrt.UInt64
    relative_time: winsdk.windows.foundation.TimeSpan
    def __init__(self, count: _winrt.UInt64, relative_time: winsdk.windows.foundation.TimeSpan) -> None: ...

class GpioChangeRecord:
    relative_time: winsdk.windows.foundation.TimeSpan
    edge: GpioPinEdge
    def __init__(self, relative_time: winsdk.windows.foundation.TimeSpan, edge: GpioPinEdge) -> None: ...

class GpioChangeCounter(winsdk.windows.foundation.IClosable, _winrt.Object):
    polarity: GpioChangePolarity
    is_started: _winrt.Boolean
    @staticmethod
    def _from(obj: _winrt.Object) -> GpioChangeCounter: ...
    @typing.overload
    def __init__(self, pin: GpioPin) -> None: ...
    @typing.overload
    def close(self) -> None: ...
    @typing.overload
    def read(self) -> GpioChangeCount: ...
    @typing.overload
    def reset(self) -> GpioChangeCount: ...
    @typing.overload
    def start(self) -> None: ...
    @typing.overload
    def stop(self) -> None: ...

class GpioChangeReader(winsdk.windows.foundation.IClosable, _winrt.Object):
    polarity: GpioChangePolarity
    capacity: _winrt.Int32
    is_empty: _winrt.Boolean
    is_overflowed: _winrt.Boolean
    is_started: _winrt.Boolean
    length: _winrt.Int32
    @staticmethod
    def _from(obj: _winrt.Object) -> GpioChangeReader: ...
    @typing.overload
    def __init__(self, pin: GpioPin) -> None: ...
    @typing.overload
    def __init__(self, pin: GpioPin, min_capacity: _winrt.Int32) -> None: ...
    @typing.overload
    def clear(self) -> None: ...
    @typing.overload
    def close(self) -> None: ...
    @typing.overload
    def get_all_items(self) -> winsdk.windows.foundation.collections.IVector[GpioChangeRecord]: ...
    @typing.overload
    def get_next_item(self) -> GpioChangeRecord: ...
    @typing.overload
    def peek_next_item(self) -> GpioChangeRecord: ...
    @typing.overload
    def start(self) -> None: ...
    @typing.overload
    def stop(self) -> None: ...
    @typing.overload
    def wait_for_items_async(self, count: _winrt.Int32) -> winsdk.windows.foundation.IAsyncAction: ...

class GpioController(_winrt.Object):
    pin_count: _winrt.Int32
    @staticmethod
    def _from(obj: _winrt.Object) -> GpioController: ...
    @typing.overload
    @staticmethod
    def get_controllers_async(provider: winsdk.windows.devices.gpio.provider.IGpioProvider) -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.foundation.collections.IVectorView[GpioController]]: ...
    @typing.overload
    @staticmethod
    def get_default() -> GpioController: ...
    @typing.overload
    @staticmethod
    def get_default_async() -> winsdk.windows.foundation.IAsyncOperation[GpioController]: ...
    @typing.overload
    def open_pin(self, pin_number: _winrt.Int32) -> GpioPin: ...
    @typing.overload
    def open_pin(self, pin_number: _winrt.Int32, sharing_mode: GpioSharingMode) -> GpioPin: ...
    @typing.overload
    def try_open_pin(self, pin_number: _winrt.Int32, sharing_mode: GpioSharingMode) -> typing.Tuple[_winrt.Boolean, GpioPin, GpioOpenStatus]: ...

class GpioPin(winsdk.windows.foundation.IClosable, _winrt.Object):
    debounce_timeout: winsdk.windows.foundation.TimeSpan
    pin_number: _winrt.Int32
    sharing_mode: GpioSharingMode
    @staticmethod
    def _from(obj: _winrt.Object) -> GpioPin: ...
    @typing.overload
    def close(self) -> None: ...
    @typing.overload
    def get_drive_mode(self) -> GpioPinDriveMode: ...
    @typing.overload
    def is_drive_mode_supported(self, drive_mode: GpioPinDriveMode) -> _winrt.Boolean: ...
    @typing.overload
    def read(self) -> GpioPinValue: ...
    @typing.overload
    def set_drive_mode(self, value: GpioPinDriveMode) -> None: ...
    @typing.overload
    def write(self, value: GpioPinValue) -> None: ...
    @typing.overload
    def add_value_changed(self, handler: winsdk.windows.foundation.TypedEventHandler[GpioPin, GpioPinValueChangedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    @typing.overload
    def remove_value_changed(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...

class GpioPinValueChangedEventArgs(_winrt.Object):
    edge: GpioPinEdge
    @staticmethod
    def _from(obj: _winrt.Object) -> GpioPinValueChangedEventArgs: ...

