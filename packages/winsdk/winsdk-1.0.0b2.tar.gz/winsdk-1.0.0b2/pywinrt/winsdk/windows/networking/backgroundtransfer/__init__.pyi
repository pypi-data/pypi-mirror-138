# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.2

import enum
import sys
import types
import typing
import uuid

import winsdk._winrt as _winrt

try:
    import winsdk.windows.applicationmodel.background
except Exception:
    pass

try:
    import winsdk.windows.foundation
except Exception:
    pass

try:
    import winsdk.windows.foundation.collections
except Exception:
    pass

try:
    import winsdk.windows.security.credentials
except Exception:
    pass

try:
    import winsdk.windows.storage
except Exception:
    pass

try:
    import winsdk.windows.storage.streams
except Exception:
    pass

try:
    import winsdk.windows.ui.notifications
except Exception:
    pass

try:
    import winsdk.windows.web
except Exception:
    pass

class BackgroundTransferBehavior(enum.IntEnum):
    PARALLEL = 0
    SERIALIZED = 1

class BackgroundTransferCostPolicy(enum.IntEnum):
    DEFAULT = 0
    UNRESTRICTED_ONLY = 1
    ALWAYS = 2

class BackgroundTransferPriority(enum.IntEnum):
    DEFAULT = 0
    HIGH = 1
    LOW = 2

class BackgroundTransferStatus(enum.IntEnum):
    IDLE = 0
    RUNNING = 1
    PAUSED_BY_APPLICATION = 2
    PAUSED_COSTED_NETWORK = 3
    PAUSED_NO_NETWORK = 4
    COMPLETED = 5
    CANCELED = 6
    ERROR = 7
    PAUSED_RECOVERABLE_WEB_ERROR_STATUS = 8
    PAUSED_SYSTEM_POLICY = 32

class BackgroundDownloadProgress:
    bytes_received: _winrt.UInt64
    total_bytes_to_receive: _winrt.UInt64
    status: BackgroundTransferStatus
    has_response_changed: _winrt.Boolean
    has_restarted: _winrt.Boolean
    def __init__(self, bytes_received: _winrt.UInt64, total_bytes_to_receive: _winrt.UInt64, status: BackgroundTransferStatus, has_response_changed: _winrt.Boolean, has_restarted: _winrt.Boolean) -> None: ...

class BackgroundTransferFileRange:
    offset: _winrt.UInt64
    length: _winrt.UInt64
    def __init__(self, offset: _winrt.UInt64, length: _winrt.UInt64) -> None: ...

class BackgroundUploadProgress:
    bytes_received: _winrt.UInt64
    bytes_sent: _winrt.UInt64
    total_bytes_to_receive: _winrt.UInt64
    total_bytes_to_send: _winrt.UInt64
    status: BackgroundTransferStatus
    has_response_changed: _winrt.Boolean
    has_restarted: _winrt.Boolean
    def __init__(self, bytes_received: _winrt.UInt64, bytes_sent: _winrt.UInt64, total_bytes_to_receive: _winrt.UInt64, total_bytes_to_send: _winrt.UInt64, status: BackgroundTransferStatus, has_response_changed: _winrt.Boolean, has_restarted: _winrt.Boolean) -> None: ...

class BackgroundDownloader(IBackgroundTransferBase, _winrt.Object):
    failure_toast_notification: winsdk.windows.ui.notifications.ToastNotification
    success_tile_notification: winsdk.windows.ui.notifications.TileNotification
    success_toast_notification: winsdk.windows.ui.notifications.ToastNotification
    transfer_group: BackgroundTransferGroup
    failure_tile_notification: winsdk.windows.ui.notifications.TileNotification
    completion_group: BackgroundTransferCompletionGroup
    cost_policy: BackgroundTransferCostPolicy
    group: str
    method: str
    proxy_credential: winsdk.windows.security.credentials.PasswordCredential
    server_credential: winsdk.windows.security.credentials.PasswordCredential
    @staticmethod
    def _from(obj: _winrt.Object) -> BackgroundDownloader: ...
    @typing.overload
    def __init__(self, completion_group: BackgroundTransferCompletionGroup) -> None: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def create_download(self, uri: winsdk.windows.foundation.Uri, result_file: winsdk.windows.storage.IStorageFile) -> DownloadOperation: ...
    @typing.overload
    def create_download(self, uri: winsdk.windows.foundation.Uri, result_file: winsdk.windows.storage.IStorageFile, request_body_file: winsdk.windows.storage.IStorageFile) -> DownloadOperation: ...
    @typing.overload
    def create_download_async(self, uri: winsdk.windows.foundation.Uri, result_file: winsdk.windows.storage.IStorageFile, request_body_stream: winsdk.windows.storage.streams.IInputStream) -> winsdk.windows.foundation.IAsyncOperation[DownloadOperation]: ...
    @typing.overload
    @staticmethod
    def get_current_downloads_async() -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.foundation.collections.IVectorView[DownloadOperation]]: ...
    @typing.overload
    @staticmethod
    def get_current_downloads_async(group: str) -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.foundation.collections.IVectorView[DownloadOperation]]: ...
    @typing.overload
    @staticmethod
    def get_current_downloads_for_transfer_group_async(group: BackgroundTransferGroup) -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.foundation.collections.IVectorView[DownloadOperation]]: ...
    @typing.overload
    @staticmethod
    def request_unconstrained_downloads_async(operations: typing.Iterable[DownloadOperation]) -> winsdk.windows.foundation.IAsyncOperation[UnconstrainedTransferRequestResult]: ...
    @typing.overload
    def set_request_header(self, header_name: str, header_value: str) -> None: ...

class BackgroundTransferCompletionGroup(_winrt.Object):
    is_enabled: _winrt.Boolean
    trigger: winsdk.windows.applicationmodel.background.IBackgroundTrigger
    @staticmethod
    def _from(obj: _winrt.Object) -> BackgroundTransferCompletionGroup: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def enable(self) -> None: ...

class BackgroundTransferCompletionGroupTriggerDetails(_winrt.Object):
    downloads: winsdk.windows.foundation.collections.IVectorView[DownloadOperation]
    uploads: winsdk.windows.foundation.collections.IVectorView[UploadOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> BackgroundTransferCompletionGroupTriggerDetails: ...

class BackgroundTransferContentPart(_winrt.Object):
    @staticmethod
    def _from(obj: _winrt.Object) -> BackgroundTransferContentPart: ...
    @typing.overload
    def __init__(self, name: str) -> None: ...
    @typing.overload
    def __init__(self, name: str, file_name: str) -> None: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def set_file(self, value: winsdk.windows.storage.IStorageFile) -> None: ...
    @typing.overload
    def set_header(self, header_name: str, header_value: str) -> None: ...
    @typing.overload
    def set_text(self, value: str) -> None: ...

class BackgroundTransferError(_winrt.Object):
    @staticmethod
    def _from(obj: _winrt.Object) -> BackgroundTransferError: ...
    @typing.overload
    @staticmethod
    def get_status(hresult: _winrt.Int32) -> winsdk.windows.web.WebErrorStatus: ...

class BackgroundTransferGroup(_winrt.Object):
    transfer_behavior: BackgroundTransferBehavior
    name: str
    @staticmethod
    def _from(obj: _winrt.Object) -> BackgroundTransferGroup: ...
    @typing.overload
    @staticmethod
    def create_group(name: str) -> BackgroundTransferGroup: ...

class BackgroundTransferRangesDownloadedEventArgs(_winrt.Object):
    added_ranges: winsdk.windows.foundation.collections.IVector[BackgroundTransferFileRange]
    was_download_restarted: _winrt.Boolean
    @staticmethod
    def _from(obj: _winrt.Object) -> BackgroundTransferRangesDownloadedEventArgs: ...
    @typing.overload
    def get_deferral(self) -> winsdk.windows.foundation.Deferral: ...

class BackgroundUploader(IBackgroundTransferBase, _winrt.Object):
    server_credential: winsdk.windows.security.credentials.PasswordCredential
    proxy_credential: winsdk.windows.security.credentials.PasswordCredential
    method: str
    group: str
    cost_policy: BackgroundTransferCostPolicy
    failure_tile_notification: winsdk.windows.ui.notifications.TileNotification
    transfer_group: BackgroundTransferGroup
    success_toast_notification: winsdk.windows.ui.notifications.ToastNotification
    success_tile_notification: winsdk.windows.ui.notifications.TileNotification
    failure_toast_notification: winsdk.windows.ui.notifications.ToastNotification
    completion_group: BackgroundTransferCompletionGroup
    @staticmethod
    def _from(obj: _winrt.Object) -> BackgroundUploader: ...
    @typing.overload
    def __init__(self, completion_group: BackgroundTransferCompletionGroup) -> None: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def create_upload(self, uri: winsdk.windows.foundation.Uri, source_file: winsdk.windows.storage.IStorageFile) -> UploadOperation: ...
    @typing.overload
    def create_upload_async(self, uri: winsdk.windows.foundation.Uri, parts: typing.Iterable[BackgroundTransferContentPart]) -> winsdk.windows.foundation.IAsyncOperation[UploadOperation]: ...
    @typing.overload
    def create_upload_async(self, uri: winsdk.windows.foundation.Uri, parts: typing.Iterable[BackgroundTransferContentPart], sub_type: str) -> winsdk.windows.foundation.IAsyncOperation[UploadOperation]: ...
    @typing.overload
    def create_upload_async(self, uri: winsdk.windows.foundation.Uri, parts: typing.Iterable[BackgroundTransferContentPart], sub_type: str, boundary: str) -> winsdk.windows.foundation.IAsyncOperation[UploadOperation]: ...
    @typing.overload
    def create_upload_from_stream_async(self, uri: winsdk.windows.foundation.Uri, source_stream: winsdk.windows.storage.streams.IInputStream) -> winsdk.windows.foundation.IAsyncOperation[UploadOperation]: ...
    @typing.overload
    @staticmethod
    def get_current_uploads_async() -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.foundation.collections.IVectorView[UploadOperation]]: ...
    @typing.overload
    @staticmethod
    def get_current_uploads_async(group: str) -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.foundation.collections.IVectorView[UploadOperation]]: ...
    @typing.overload
    @staticmethod
    def get_current_uploads_for_transfer_group_async(group: BackgroundTransferGroup) -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.foundation.collections.IVectorView[UploadOperation]]: ...
    @typing.overload
    @staticmethod
    def request_unconstrained_uploads_async(operations: typing.Iterable[UploadOperation]) -> winsdk.windows.foundation.IAsyncOperation[UnconstrainedTransferRequestResult]: ...
    @typing.overload
    def set_request_header(self, header_name: str, header_value: str) -> None: ...

class ContentPrefetcher(_winrt.Object):
    indirect_content_uri: winsdk.windows.foundation.Uri
    content_uris: winsdk.windows.foundation.collections.IVector[winsdk.windows.foundation.Uri]
    last_successful_prefetch_time: typing.Optional[winsdk.windows.foundation.DateTime]
    @staticmethod
    def _from(obj: _winrt.Object) -> ContentPrefetcher: ...

class DownloadOperation(IBackgroundTransferOperation, IBackgroundTransferOperationPriority, _winrt.Object):
    cost_policy: BackgroundTransferCostPolicy
    requested_uri: winsdk.windows.foundation.Uri
    method: str
    group: str
    guid: uuid.UUID
    priority: BackgroundTransferPriority
    progress: BackgroundDownloadProgress
    result_file: winsdk.windows.storage.IStorageFile
    transfer_group: BackgroundTransferGroup
    is_random_access_required: _winrt.Boolean
    current_web_error_status: typing.Optional[winsdk.windows.web.WebErrorStatus]
    recoverable_web_error_statuses: winsdk.windows.foundation.collections.IVector[winsdk.windows.web.WebErrorStatus]
    @staticmethod
    def _from(obj: _winrt.Object) -> DownloadOperation: ...
    @typing.overload
    def attach_async(self) -> winsdk.windows.foundation.IAsyncOperationWithProgress[DownloadOperation, DownloadOperation]: ...
    @typing.overload
    def get_downloaded_ranges(self) -> winsdk.windows.foundation.collections.IVector[BackgroundTransferFileRange]: ...
    @typing.overload
    def get_response_information(self) -> ResponseInformation: ...
    @typing.overload
    def get_result_random_access_stream_reference(self) -> winsdk.windows.storage.streams.IRandomAccessStreamReference: ...
    @typing.overload
    def get_result_stream_at(self, position: _winrt.UInt64) -> winsdk.windows.storage.streams.IInputStream: ...
    @typing.overload
    def make_current_in_transfer_group(self) -> None: ...
    @typing.overload
    def pause(self) -> None: ...
    @typing.overload
    def remove_request_header(self, header_name: str) -> None: ...
    @typing.overload
    def resume(self) -> None: ...
    @typing.overload
    def set_request_header(self, header_name: str, header_value: str) -> None: ...
    @typing.overload
    def start_async(self) -> winsdk.windows.foundation.IAsyncOperationWithProgress[DownloadOperation, DownloadOperation]: ...
    @typing.overload
    def add_ranges_downloaded(self, event_handler: winsdk.windows.foundation.TypedEventHandler[DownloadOperation, BackgroundTransferRangesDownloadedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    @typing.overload
    def remove_ranges_downloaded(self, event_cookie: winsdk.windows.foundation.EventRegistrationToken) -> None: ...

class ResponseInformation(_winrt.Object):
    actual_uri: winsdk.windows.foundation.Uri
    headers: winsdk.windows.foundation.collections.IMapView[str, str]
    is_resumable: _winrt.Boolean
    status_code: _winrt.UInt32
    @staticmethod
    def _from(obj: _winrt.Object) -> ResponseInformation: ...

class UnconstrainedTransferRequestResult(_winrt.Object):
    is_unconstrained: _winrt.Boolean
    @staticmethod
    def _from(obj: _winrt.Object) -> UnconstrainedTransferRequestResult: ...

class UploadOperation(IBackgroundTransferOperation, IBackgroundTransferOperationPriority, _winrt.Object):
    cost_policy: BackgroundTransferCostPolicy
    group: str
    guid: uuid.UUID
    method: str
    requested_uri: winsdk.windows.foundation.Uri
    priority: BackgroundTransferPriority
    progress: BackgroundUploadProgress
    source_file: winsdk.windows.storage.IStorageFile
    transfer_group: BackgroundTransferGroup
    @staticmethod
    def _from(obj: _winrt.Object) -> UploadOperation: ...
    @typing.overload
    def attach_async(self) -> winsdk.windows.foundation.IAsyncOperationWithProgress[UploadOperation, UploadOperation]: ...
    @typing.overload
    def get_response_information(self) -> ResponseInformation: ...
    @typing.overload
    def get_result_stream_at(self, position: _winrt.UInt64) -> winsdk.windows.storage.streams.IInputStream: ...
    @typing.overload
    def make_current_in_transfer_group(self) -> None: ...
    @typing.overload
    def remove_request_header(self, header_name: str) -> None: ...
    @typing.overload
    def set_request_header(self, header_name: str, header_value: str) -> None: ...
    @typing.overload
    def start_async(self) -> winsdk.windows.foundation.IAsyncOperationWithProgress[UploadOperation, UploadOperation]: ...

class IBackgroundTransferBase(_winrt.Object):
    cost_policy: BackgroundTransferCostPolicy
    group: str
    method: str
    proxy_credential: winsdk.windows.security.credentials.PasswordCredential
    server_credential: winsdk.windows.security.credentials.PasswordCredential
    @staticmethod
    def _from(obj: _winrt.Object) -> IBackgroundTransferBase: ...
    @typing.overload
    def set_request_header(self, header_name: str, header_value: str) -> None: ...

class IBackgroundTransferContentPartFactory(_winrt.Object):
    @staticmethod
    def _from(obj: _winrt.Object) -> IBackgroundTransferContentPartFactory: ...
    @typing.overload
    def create_with_name(self, name: str) -> BackgroundTransferContentPart: ...
    @typing.overload
    def create_with_name_and_file_name(self, name: str, file_name: str) -> BackgroundTransferContentPart: ...

class IBackgroundTransferOperation(_winrt.Object):
    cost_policy: BackgroundTransferCostPolicy
    group: str
    guid: uuid.UUID
    method: str
    requested_uri: winsdk.windows.foundation.Uri
    @staticmethod
    def _from(obj: _winrt.Object) -> IBackgroundTransferOperation: ...
    @typing.overload
    def get_response_information(self) -> ResponseInformation: ...
    @typing.overload
    def get_result_stream_at(self, position: _winrt.UInt64) -> winsdk.windows.storage.streams.IInputStream: ...

class IBackgroundTransferOperationPriority(_winrt.Object):
    priority: BackgroundTransferPriority
    @staticmethod
    def _from(obj: _winrt.Object) -> IBackgroundTransferOperationPriority: ...

