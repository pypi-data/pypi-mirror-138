# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.2

import enum
import sys
import types
import typing
import uuid

import winsdk._winrt as _winrt

try:
    import winsdk.windows.foundation
except Exception:
    pass

try:
    import winsdk.windows.foundation.collections
except Exception:
    pass

try:
    import winsdk.windows.storage
except Exception:
    pass

try:
    import winsdk.windows.system
except Exception:
    pass

class PickerLocationId(enum.IntEnum):
    DOCUMENTS_LIBRARY = 0
    COMPUTER_FOLDER = 1
    DESKTOP = 2
    DOWNLOADS = 3
    HOME_GROUP = 4
    MUSIC_LIBRARY = 5
    PICTURES_LIBRARY = 6
    VIDEOS_LIBRARY = 7
    OBJECTS3_D = 8
    UNSPECIFIED = 9

class PickerViewMode(enum.IntEnum):
    LIST = 0
    THUMBNAIL = 1

class FileExtensionVector(winsdk.windows.foundation.collections.IVector[str], winsdk.windows.foundation.collections.IIterable[str], _winrt.Object):
    size: _winrt.UInt32
    @staticmethod
    def _from(obj: _winrt.Object) -> FileExtensionVector: ...
    @typing.overload
    def append(self, value: str) -> None: ...
    @typing.overload
    def clear(self) -> None: ...
    @typing.overload
    def first(self) -> winsdk.windows.foundation.collections.IIterator[str]: ...
    @typing.overload
    def get_at(self, index: _winrt.UInt32) -> str: ...
    @typing.overload
    def get_many(self, start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[str]]: ...
    @typing.overload
    def get_view(self) -> winsdk.windows.foundation.collections.IVectorView[str]: ...
    @typing.overload
    def index_of(self, value: str) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]: ...
    @typing.overload
    def insert_at(self, index: _winrt.UInt32, value: str) -> None: ...
    @typing.overload
    def remove_at(self, index: _winrt.UInt32) -> None: ...
    @typing.overload
    def remove_at_end(self) -> None: ...
    @typing.overload
    def replace_all(self, items: typing.Sequence[str]) -> None: ...
    @typing.overload
    def set_at(self, index: _winrt.UInt32, value: str) -> None: ...

class FileOpenPicker(_winrt.Object):
    view_mode: PickerViewMode
    suggested_start_location: PickerLocationId
    settings_identifier: str
    commit_button_text: str
    file_type_filter: winsdk.windows.foundation.collections.IVector[str]
    continuation_data: winsdk.windows.foundation.collections.ValueSet
    user: winsdk.windows.system.User
    @staticmethod
    def _from(obj: _winrt.Object) -> FileOpenPicker: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    @staticmethod
    def create_for_user(user: winsdk.windows.system.User) -> FileOpenPicker: ...
    @typing.overload
    def pick_multiple_files_and_continue(self) -> None: ...
    @typing.overload
    def pick_multiple_files_async(self) -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.foundation.collections.IVectorView[winsdk.windows.storage.StorageFile]]: ...
    @typing.overload
    def pick_single_file_and_continue(self) -> None: ...
    @typing.overload
    def pick_single_file_async(self) -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.storage.StorageFile]: ...
    @typing.overload
    def pick_single_file_async(self, picker_operation_id: str) -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.storage.StorageFile]: ...
    @typing.overload
    @staticmethod
    def resume_pick_single_file_async() -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.storage.StorageFile]: ...

class FilePickerFileTypesOrderedMap(winsdk.windows.foundation.collections.IMap[str, winsdk.windows.foundation.collections.IVector[str]], winsdk.windows.foundation.collections.IIterable[winsdk.windows.foundation.collections.IKeyValuePair[str, winsdk.windows.foundation.collections.IVector[str]]], _winrt.Object):
    size: _winrt.UInt32
    @staticmethod
    def _from(obj: _winrt.Object) -> FilePickerFileTypesOrderedMap: ...
    @typing.overload
    def clear(self) -> None: ...
    @typing.overload
    def first(self) -> winsdk.windows.foundation.collections.IIterator[winsdk.windows.foundation.collections.IKeyValuePair[str, winsdk.windows.foundation.collections.IVector[str]]]: ...
    @typing.overload
    def get_view(self) -> winsdk.windows.foundation.collections.IMapView[str, winsdk.windows.foundation.collections.IVector[str]]: ...
    @typing.overload
    def has_key(self, key: str) -> _winrt.Boolean: ...
    @typing.overload
    def insert(self, key: str, value: winsdk.windows.foundation.collections.IVector[str]) -> _winrt.Boolean: ...
    @typing.overload
    def lookup(self, key: str) -> winsdk.windows.foundation.collections.IVector[str]: ...
    @typing.overload
    def remove(self, key: str) -> None: ...

class FilePickerSelectedFilesArray(winsdk.windows.foundation.collections.IVectorView[winsdk.windows.storage.StorageFile], winsdk.windows.foundation.collections.IIterable[winsdk.windows.storage.StorageFile], _winrt.Object):
    size: _winrt.UInt32
    @staticmethod
    def _from(obj: _winrt.Object) -> FilePickerSelectedFilesArray: ...
    @typing.overload
    def first(self) -> winsdk.windows.foundation.collections.IIterator[winsdk.windows.storage.StorageFile]: ...
    @typing.overload
    def get_at(self, index: _winrt.UInt32) -> winsdk.windows.storage.StorageFile: ...
    @typing.overload
    def get_many(self, start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[winsdk.windows.storage.StorageFile]]: ...
    @typing.overload
    def index_of(self, value: winsdk.windows.storage.StorageFile) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]: ...

class FileSavePicker(_winrt.Object):
    suggested_start_location: PickerLocationId
    suggested_save_file: winsdk.windows.storage.StorageFile
    suggested_file_name: str
    settings_identifier: str
    default_file_extension: str
    commit_button_text: str
    file_type_choices: winsdk.windows.foundation.collections.IMap[str, winsdk.windows.foundation.collections.IVector[str]]
    continuation_data: winsdk.windows.foundation.collections.ValueSet
    enterprise_id: str
    user: winsdk.windows.system.User
    @staticmethod
    def _from(obj: _winrt.Object) -> FileSavePicker: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    @staticmethod
    def create_for_user(user: winsdk.windows.system.User) -> FileSavePicker: ...
    @typing.overload
    def pick_save_file_and_continue(self) -> None: ...
    @typing.overload
    def pick_save_file_async(self) -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.storage.StorageFile]: ...

class FolderPicker(_winrt.Object):
    view_mode: PickerViewMode
    suggested_start_location: PickerLocationId
    settings_identifier: str
    commit_button_text: str
    file_type_filter: winsdk.windows.foundation.collections.IVector[str]
    continuation_data: winsdk.windows.foundation.collections.ValueSet
    user: winsdk.windows.system.User
    @staticmethod
    def _from(obj: _winrt.Object) -> FolderPicker: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    @staticmethod
    def create_for_user(user: winsdk.windows.system.User) -> FolderPicker: ...
    @typing.overload
    def pick_folder_and_continue(self) -> None: ...
    @typing.overload
    def pick_single_folder_async(self) -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.storage.StorageFolder]: ...

