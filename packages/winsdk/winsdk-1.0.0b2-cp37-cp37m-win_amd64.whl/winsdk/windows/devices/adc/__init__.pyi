# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.2

import enum
import sys
import types
import typing
import uuid

import winsdk._winrt as _winrt

try:
    import winsdk.windows.devices.adc.provider
except Exception:
    pass

try:
    import winsdk.windows.foundation
except Exception:
    pass

try:
    import winsdk.windows.foundation.collections
except Exception:
    pass

class AdcChannelMode(enum.IntEnum):
    SINGLE_ENDED = 0
    DIFFERENTIAL = 1

class AdcChannel(winsdk.windows.foundation.IClosable, _winrt.Object):
    controller: AdcController
    @staticmethod
    def _from(obj: _winrt.Object) -> AdcChannel: ...
    @typing.overload
    def close(self) -> None: ...
    @typing.overload
    def read_ratio(self) -> _winrt.Double: ...
    @typing.overload
    def read_value(self) -> _winrt.Int32: ...

class AdcController(_winrt.Object):
    channel_mode: AdcChannelMode
    channel_count: _winrt.Int32
    max_value: _winrt.Int32
    min_value: _winrt.Int32
    resolution_in_bits: _winrt.Int32
    @staticmethod
    def _from(obj: _winrt.Object) -> AdcController: ...
    @typing.overload
    @staticmethod
    def get_controllers_async(provider: winsdk.windows.devices.adc.provider.IAdcProvider) -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.foundation.collections.IVectorView[AdcController]]: ...
    @typing.overload
    @staticmethod
    def get_default_async() -> winsdk.windows.foundation.IAsyncOperation[AdcController]: ...
    @typing.overload
    def is_channel_mode_supported(self, channel_mode: AdcChannelMode) -> _winrt.Boolean: ...
    @typing.overload
    def open_channel(self, channel_number: _winrt.Int32) -> AdcChannel: ...

