# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.2

import enum
import sys
import types
import typing
import uuid

import winsdk._winrt as _winrt

try:
    import winsdk.windows.foundation
except Exception:
    pass

try:
    import winsdk.windows.foundation.collections
except Exception:
    pass

try:
    import winsdk.windows.storage
except Exception:
    pass

class AddFileResult(enum.IntEnum):
    ADDED = 0
    ALREADY_ADDED = 1
    NOT_ALLOWED = 2
    UNAVAILABLE = 3

class FileSelectionMode(enum.IntEnum):
    SINGLE = 0
    MULTIPLE = 1

class SetFileNameResult(enum.IntEnum):
    SUCCEEDED = 0
    NOT_ALLOWED = 1
    UNAVAILABLE = 2

class FileOpenPickerUI(_winrt.Object):
    title: str
    allowed_file_types: winsdk.windows.foundation.collections.IVectorView[str]
    selection_mode: FileSelectionMode
    settings_identifier: str
    @staticmethod
    def _from(obj: _winrt.Object) -> FileOpenPickerUI: ...
    @typing.overload
    def add_file(self, id: str, file: winsdk.windows.storage.IStorageFile) -> AddFileResult: ...
    @typing.overload
    def can_add_file(self, file: winsdk.windows.storage.IStorageFile) -> _winrt.Boolean: ...
    @typing.overload
    def contains_file(self, id: str) -> _winrt.Boolean: ...
    @typing.overload
    def remove_file(self, id: str) -> None: ...
    @typing.overload
    def add_closing(self, handler: winsdk.windows.foundation.TypedEventHandler[FileOpenPickerUI, PickerClosingEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    @typing.overload
    def remove_closing(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    @typing.overload
    def add_file_removed(self, handler: winsdk.windows.foundation.TypedEventHandler[FileOpenPickerUI, FileRemovedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    @typing.overload
    def remove_file_removed(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...

class FileRemovedEventArgs(_winrt.Object):
    id: str
    @staticmethod
    def _from(obj: _winrt.Object) -> FileRemovedEventArgs: ...

class FileSavePickerUI(_winrt.Object):
    title: str
    allowed_file_types: winsdk.windows.foundation.collections.IVectorView[str]
    file_name: str
    settings_identifier: str
    @staticmethod
    def _from(obj: _winrt.Object) -> FileSavePickerUI: ...
    @typing.overload
    def try_set_file_name(self, value: str) -> SetFileNameResult: ...
    @typing.overload
    def add_file_name_changed(self, handler: winsdk.windows.foundation.TypedEventHandler[FileSavePickerUI, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    @typing.overload
    def remove_file_name_changed(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    @typing.overload
    def add_target_file_requested(self, handler: winsdk.windows.foundation.TypedEventHandler[FileSavePickerUI, TargetFileRequestedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    @typing.overload
    def remove_target_file_requested(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...

class PickerClosingDeferral(_winrt.Object):
    @staticmethod
    def _from(obj: _winrt.Object) -> PickerClosingDeferral: ...
    @typing.overload
    def complete(self) -> None: ...

class PickerClosingEventArgs(_winrt.Object):
    closing_operation: PickerClosingOperation
    is_canceled: _winrt.Boolean
    @staticmethod
    def _from(obj: _winrt.Object) -> PickerClosingEventArgs: ...

class PickerClosingOperation(_winrt.Object):
    deadline: winsdk.windows.foundation.DateTime
    @staticmethod
    def _from(obj: _winrt.Object) -> PickerClosingOperation: ...
    @typing.overload
    def get_deferral(self) -> PickerClosingDeferral: ...

class TargetFileRequest(_winrt.Object):
    target_file: winsdk.windows.storage.IStorageFile
    @staticmethod
    def _from(obj: _winrt.Object) -> TargetFileRequest: ...
    @typing.overload
    def get_deferral(self) -> TargetFileRequestDeferral: ...

class TargetFileRequestDeferral(_winrt.Object):
    @staticmethod
    def _from(obj: _winrt.Object) -> TargetFileRequestDeferral: ...
    @typing.overload
    def complete(self) -> None: ...

class TargetFileRequestedEventArgs(_winrt.Object):
    request: TargetFileRequest
    @staticmethod
    def _from(obj: _winrt.Object) -> TargetFileRequestedEventArgs: ...

