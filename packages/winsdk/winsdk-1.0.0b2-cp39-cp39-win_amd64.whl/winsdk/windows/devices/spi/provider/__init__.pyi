# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.2

import enum
import sys
import types
import typing
import uuid

import winsdk._winrt as _winrt

try:
    import winsdk.windows.foundation
except Exception:
    pass

try:
    import winsdk.windows.foundation.collections
except Exception:
    pass

class ProviderSpiMode(enum.IntEnum):
    MODE0 = 0
    MODE1 = 1
    MODE2 = 2
    MODE3 = 3

class ProviderSpiSharingMode(enum.IntEnum):
    EXCLUSIVE = 0
    SHARED = 1

class ProviderSpiConnectionSettings(_winrt.Object):
    sharing_mode: ProviderSpiSharingMode
    mode: ProviderSpiMode
    data_bit_length: _winrt.Int32
    clock_frequency: _winrt.Int32
    chip_select_line: _winrt.Int32
    @staticmethod
    def _from(obj: _winrt.Object) -> ProviderSpiConnectionSettings: ...
    @typing.overload
    def __init__(self, chip_select_line: _winrt.Int32) -> None: ...

class ISpiControllerProvider(_winrt.Object):
    @staticmethod
    def _from(obj: _winrt.Object) -> ISpiControllerProvider: ...
    @typing.overload
    def get_device_provider(self, settings: ProviderSpiConnectionSettings) -> ISpiDeviceProvider: ...

class ISpiDeviceProvider(winsdk.windows.foundation.IClosable, _winrt.Object):
    connection_settings: ProviderSpiConnectionSettings
    device_id: str
    @staticmethod
    def _from(obj: _winrt.Object) -> ISpiDeviceProvider: ...
    @typing.overload
    def read(self, buffer_size: _winrt.UInt32) -> typing.List[_winrt.UInt8]: ...
    @typing.overload
    def transfer_full_duplex(self, write_buffer: typing.Sequence[_winrt.UInt8], read_buffer_size: _winrt.UInt32) -> typing.List[_winrt.UInt8]: ...
    @typing.overload
    def transfer_sequential(self, write_buffer: typing.Sequence[_winrt.UInt8], read_buffer_size: _winrt.UInt32) -> typing.List[_winrt.UInt8]: ...
    @typing.overload
    def write(self, buffer: typing.Sequence[_winrt.UInt8]) -> None: ...
    @typing.overload
    def close(self) -> None: ...

class ISpiProvider(_winrt.Object):
    @staticmethod
    def _from(obj: _winrt.Object) -> ISpiProvider: ...
    @typing.overload
    def get_controllers_async(self) -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.foundation.collections.IVectorView[ISpiControllerProvider]]: ...

