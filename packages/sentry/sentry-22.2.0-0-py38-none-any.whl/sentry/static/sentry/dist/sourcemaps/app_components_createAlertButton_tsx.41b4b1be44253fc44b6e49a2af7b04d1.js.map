{"version":3,"file":"chunks/app_components_createAlertButton_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/createAlertButton.tsx","webpack:///./app/views/alerts/incidentRules/constants.tsx"],"sourcesContent":["import * as React from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport {navigateTo} from 'sentry/actionCreators/navigation';\nimport Access from 'sentry/components/acl/access';\nimport Alert from 'sentry/components/alert';\nimport GuideAnchor from 'sentry/components/assistant/guideAnchor';\nimport Button from 'sentry/components/button';\nimport Link from 'sentry/components/links/link';\nimport {IconClose, IconInfo, IconSiren} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {\n  Aggregation,\n  AGGREGATIONS,\n  explodeFieldString,\n} from 'sentry/utils/discover/fields';\nimport useApi from 'sentry/utils/useApi';\nimport {\n  errorFieldConfig,\n  transactionFieldConfig,\n} from 'sentry/views/alerts/incidentRules/constants';\nimport {getQueryDatasource} from 'sentry/views/alerts/utils';\n\n/**\n * Discover query supports more features than alert rules\n * To create an alert rule from a discover query, some parameters need to be adjusted\n */\ntype IncompatibleQueryProperties = {\n  /**\n   * Must have zero or one environments\n   */\n  hasEnvironmentError: boolean;\n  /**\n   * event.type must be error or transaction\n   */\n  hasEventTypeError: boolean;\n  /**\n   * Must have exactly one project selected and not -1 (all projects)\n   */\n  hasProjectError: boolean;\n  hasYAxisError: boolean;\n};\n\ntype AlertProps = {\n  eventView: EventView;\n  incompatibleQuery: IncompatibleQueryProperties;\n  /**\n   * Dismiss alert\n   */\n  onClose: () => void;\n  orgId: string;\n};\n\n/**\n * Displays messages to the user on what needs to change in their query\n */\nfunction IncompatibleQueryAlert({\n  incompatibleQuery,\n  eventView,\n  orgId,\n  onClose,\n}: AlertProps) {\n  const {hasProjectError, hasEnvironmentError, hasEventTypeError, hasYAxisError} =\n    incompatibleQuery;\n\n  const totalErrors = Object.values(incompatibleQuery).filter(val => val === true).length;\n\n  const eventTypeError = eventView.clone();\n  eventTypeError.query += ' event.type:error';\n  const eventTypeTransaction = eventView.clone();\n  eventTypeTransaction.query += ' event.type:transaction';\n  const eventTypeDefault = eventView.clone();\n  eventTypeDefault.query += ' event.type:default';\n  const eventTypeErrorDefault = eventView.clone();\n  eventTypeErrorDefault.query += ' event.type:error or event.type:default';\n  const pathname = `/organizations/${orgId}/discover/results/`;\n\n  const eventTypeLinks = {\n    error: (\n      <Link\n        to={{\n          pathname,\n          query: eventTypeError.generateQueryStringObject(),\n        }}\n      />\n    ),\n    default: (\n      <Link\n        to={{\n          pathname,\n          query: eventTypeDefault.generateQueryStringObject(),\n        }}\n      />\n    ),\n    transaction: (\n      <Link\n        to={{\n          pathname,\n          query: eventTypeTransaction.generateQueryStringObject(),\n        }}\n      />\n    ),\n    errorDefault: (\n      <Link\n        to={{\n          pathname,\n          query: eventTypeErrorDefault.generateQueryStringObject(),\n        }}\n      />\n    ),\n  };\n\n  return (\n    <StyledAlert type=\"warning\" icon={<IconInfo color=\"yellow300\" size=\"sm\" />}>\n      {totalErrors === 1 && (\n        <React.Fragment>\n          {hasProjectError &&\n            t('An alert can use data from only one Project. Select one and try again.')}\n          {hasEnvironmentError &&\n            t(\n              'An alert supports data from a single Environment or All Environments. Pick one try again.'\n            )}\n          {hasEventTypeError &&\n            tct(\n              'An alert needs a filter of [error:event.type:error], [default:event.type:default], [transaction:event.type:transaction], [errorDefault:(event.type:error OR event.type:default)]. Use one of these and try again.',\n              eventTypeLinks\n            )}\n          {hasYAxisError &&\n            tct(\n              'An alert can’t use the metric [yAxis] just yet. Select another metric and try again.',\n              {\n                yAxis: <StyledCode>{eventView.getYAxis()}</StyledCode>,\n              }\n            )}\n        </React.Fragment>\n      )}\n      {totalErrors > 1 && (\n        <React.Fragment>\n          {t('Yikes! That button didn’t work. Please fix the following problems:')}\n          <StyledUnorderedList>\n            {hasProjectError && <li>{t('Select one Project.')}</li>}\n            {hasEnvironmentError && (\n              <li>{t('Select a single Environment or All Environments.')}</li>\n            )}\n            {hasEventTypeError && (\n              <li>\n                {tct(\n                  'Use the filter [error:event.type:error], [default:event.type:default], [transaction:event.type:transaction], [errorDefault:(event.type:error OR event.type:default)].',\n                  eventTypeLinks\n                )}\n              </li>\n            )}\n            {hasYAxisError && (\n              <li>\n                {tct(\n                  'An alert can’t use the metric [yAxis] just yet. Select another metric and try again.',\n                  {\n                    yAxis: <StyledCode>{eventView.getYAxis()}</StyledCode>,\n                  }\n                )}\n              </li>\n            )}\n          </StyledUnorderedList>\n        </React.Fragment>\n      )}\n      <StyledCloseButton\n        icon={<IconClose size=\"sm\" />}\n        aria-label={t('Close')}\n        size=\"zero\"\n        onClick={onClose}\n        borderless\n      />\n    </StyledAlert>\n  );\n}\n\ntype CreateAlertFromViewButtonProps = Omit<\n  React.ComponentProps<typeof Button>,\n  'aria-label'\n> & {\n  /**\n   * Discover query used to create the alert\n   */\n  eventView: EventView;\n  /**\n   * Called when the current eventView does not meet the requirements of alert rules\n   * @returns a function that takes an alert close function argument\n   */\n  onIncompatibleQuery: (\n    incompatibleAlertNoticeFn: (onAlertClose: () => void) => React.ReactNode,\n    errors: IncompatibleQueryProperties\n  ) => void;\n  /**\n   * Called when the user is redirected to the alert builder\n   */\n  onSuccess: () => void;\n  organization: Organization;\n  projects: Project[];\n  className?: string;\n  referrer?: string;\n};\n\nfunction incompatibleYAxis(eventView: EventView): boolean {\n  const column = explodeFieldString(eventView.getYAxis());\n  if (column.kind === 'field' || column.kind === 'equation') {\n    return true;\n  }\n\n  const eventTypeMatch = eventView.query.match(/event\\.type:(transaction|error)/);\n  if (!eventTypeMatch) {\n    return false;\n  }\n\n  const dataset = eventTypeMatch[1];\n  const yAxisConfig = dataset === 'error' ? errorFieldConfig : transactionFieldConfig;\n\n  const invalidFunction = !yAxisConfig.aggregations.includes(column.function[0]);\n  // Allow empty parameters, allow all numeric parameters - eg. apdex(300)\n  const aggregation: Aggregation | undefined = AGGREGATIONS[column.function[0]];\n  if (!aggregation) {\n    return false;\n  }\n\n  const isNumericParameter = aggregation.parameters.some(\n    param => param.kind === 'value' && param.dataType === 'number'\n  );\n  // There are other measurements possible, but for the time being, only allow alerting\n  // on the predefined set of measurements for alerts.\n  const allowedParameters = [\n    '',\n    ...yAxisConfig.fields,\n    ...(yAxisConfig.measurementKeys ?? []),\n  ];\n  const invalidParameter =\n    !isNumericParameter && !allowedParameters.includes(column.function[1]);\n\n  return invalidFunction || invalidParameter;\n}\n\n/**\n * Provide a button that can create an alert from an event view.\n * Emits incompatible query issues on click\n */\nfunction CreateAlertFromViewButton({\n  projects,\n  eventView,\n  organization,\n  referrer,\n  onIncompatibleQuery,\n  onSuccess,\n  ...buttonProps\n}: CreateAlertFromViewButtonProps) {\n  // Must have exactly one project selected and not -1 (all projects)\n  const hasProjectError = eventView.project.length !== 1 || eventView.project[0] === -1;\n  // Must have one or zero environments\n  const hasEnvironmentError = eventView.environment.length > 1;\n  // Must have event.type of error or transaction\n  const hasEventTypeError = getQueryDatasource(eventView.query) === null;\n  // yAxis must be a function and enabled on alerts\n  const hasYAxisError = incompatibleYAxis(eventView);\n  const errors: IncompatibleQueryProperties = {\n    hasProjectError,\n    hasEnvironmentError,\n    hasEventTypeError,\n    hasYAxisError,\n  };\n  const project = projects.find(p => p.id === `${eventView.project[0]}`);\n  const queryParams = eventView.generateQueryStringObject();\n  if (queryParams.query?.includes(`project:${project?.slug}`)) {\n    queryParams.query = (queryParams.query as string).replace(\n      `project:${project?.slug}`,\n      ''\n    );\n  }\n\n  const hasErrors = Object.values(errors).some(x => x);\n  const to = hasErrors\n    ? undefined\n    : {\n        pathname: `/organizations/${organization.slug}/alerts/${project?.slug}/new/`,\n        query: {\n          ...queryParams,\n          createFromDiscover: true,\n          referrer,\n        },\n      };\n\n  const handleClick = (event: React.MouseEvent) => {\n    if (hasErrors) {\n      event.preventDefault();\n      onIncompatibleQuery(\n        (onAlertClose: () => void) => (\n          <IncompatibleQueryAlert\n            incompatibleQuery={errors}\n            eventView={eventView}\n            orgId={organization.slug}\n            onClose={onAlertClose}\n          />\n        ),\n        errors\n      );\n      return;\n    }\n\n    onSuccess();\n  };\n\n  return (\n    <CreateAlertButton\n      organization={organization}\n      onClick={handleClick}\n      to={to}\n      aria-label={t('Create Alert')}\n      {...buttonProps}\n    />\n  );\n}\n\ntype Props = {\n  organization: Organization;\n  hideIcon?: boolean;\n  iconProps?: React.ComponentProps<typeof IconSiren>;\n  projectSlug?: string;\n  referrer?: string;\n  showPermissionGuide?: boolean;\n} & WithRouterProps &\n  React.ComponentProps<typeof Button>;\n\nconst CreateAlertButton = withRouter(\n  ({\n    organization,\n    projectSlug,\n    iconProps,\n    referrer,\n    router,\n    hideIcon,\n    showPermissionGuide,\n    ...buttonProps\n  }: Props) => {\n    const api = useApi();\n\n    const createAlertUrl = (providedProj: string) => {\n      const alertsBaseUrl = `/organizations/${organization.slug}/alerts/${providedProj}`;\n      return `${alertsBaseUrl}/wizard/${referrer ? `?referrer=${referrer}` : ''}`;\n    };\n\n    function handleClickWithoutProject(event: React.MouseEvent) {\n      event.preventDefault();\n\n      navigateTo(createAlertUrl(':projectId'), router);\n    }\n\n    async function enableAlertsMemberWrite() {\n      const settingsEndpoint = `/organizations/${organization.slug}/`;\n      addLoadingMessage();\n      try {\n        await api.requestPromise(settingsEndpoint, {\n          method: 'PUT',\n          data: {\n            alertsMemberWrite: true,\n          },\n        });\n        addSuccessMessage(t('Successfully updated organization settings'));\n      } catch (err) {\n        addErrorMessage(t('Unable to update organization settings'));\n      }\n    }\n\n    const permissionTooltipText = tct(\n      'Ask your organization owner or manager to [settingsLink:enable alerts access] for you.',\n      {settingsLink: <Link to={`/settings/${organization.slug}`} />}\n    );\n\n    const renderButton = (hasAccess: boolean) => (\n      <Button\n        disabled={!hasAccess}\n        title={!hasAccess ? permissionTooltipText : undefined}\n        icon={!hideIcon && <IconSiren {...iconProps} />}\n        to={projectSlug ? createAlertUrl(projectSlug) : undefined}\n        tooltipProps={{\n          isHoverable: true,\n          position: 'top',\n          popperStyle: {\n            maxWidth: '270px',\n          },\n        }}\n        onClick={projectSlug ? undefined : handleClickWithoutProject}\n        {...buttonProps}\n      >\n        {buttonProps.children ?? t('Create Alert')}\n      </Button>\n    );\n\n    const showGuide = !organization.alertsMemberWrite && !!showPermissionGuide;\n\n    return (\n      <Access organization={organization} access={['alerts:write']}>\n        {({hasAccess}) =>\n          showGuide ? (\n            <Access organization={organization} access={['org:write']}>\n              {({hasAccess: isOrgAdmin}) => (\n                <GuideAnchor\n                  target={isOrgAdmin ? 'alerts_write_owner' : 'alerts_write_member'}\n                  onFinish={isOrgAdmin ? enableAlertsMemberWrite : undefined}\n                >\n                  {renderButton(hasAccess)}\n                </GuideAnchor>\n              )}\n            </Access>\n          ) : (\n            renderButton(hasAccess)\n          )\n        }\n      </Access>\n    );\n  }\n);\n\nexport {CreateAlertFromViewButton};\nexport default CreateAlertButton;\n\nconst StyledAlert = styled(Alert)`\n  color: ${p => p.theme.textColor};\n  margin-bottom: 0;\n`;\n\nconst StyledUnorderedList = styled('ul')`\n  margin-bottom: 0;\n`;\n\nconst StyledCode = styled('code')`\n  background-color: transparent;\n  padding: 0;\n`;\n\nconst StyledCloseButton = styled(Button)`\n  transition: opacity 0.1s linear;\n  position: absolute;\n  top: 3px;\n  right: 0;\n\n  &:hover,\n  &:focus {\n    background-color: transparent;\n  }\n`;\n","import {t} from 'sentry/locale';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {AggregationKey, LooseFieldKey} from 'sentry/utils/discover/fields';\nimport {WEB_VITAL_DETAILS} from 'sentry/utils/performance/vitals/constants';\nimport {\n  AlertRuleThresholdType,\n  Dataset,\n  Datasource,\n  EventTypes,\n  TimeWindow,\n  Trigger,\n  UnsavedIncidentRule,\n} from 'sentry/views/alerts/incidentRules/types';\nimport {\n  DATA_SOURCE_TO_SET_AND_EVENT_TYPES,\n  getQueryDatasource,\n  isSessionAggregate,\n} from 'sentry/views/alerts/utils';\nimport {AlertType, WizardRuleTemplate} from 'sentry/views/alerts/wizard/options';\n\nexport const DEFAULT_COUNT_TIME_WINDOW = 1; // 1min\nexport const DEFAULT_CHANGE_TIME_WINDOW = 60; // 1h\nexport const DEFAULT_CHANGE_COMP_DELTA = 10080; // 1w\n\nexport const DEFAULT_AGGREGATE = 'count()';\nexport const DEFAULT_TRANSACTION_AGGREGATE = 'p95(transaction.duration)';\n\nexport const DATASET_EVENT_TYPE_FILTERS = {\n  [Dataset.ERRORS]: 'event.type:error',\n  [Dataset.TRANSACTIONS]: 'event.type:transaction',\n} as const;\n\nexport const DATASOURCE_EVENT_TYPE_FILTERS = {\n  [Datasource.ERROR_DEFAULT]: 'event.type:[error, default]',\n  [Datasource.ERROR]: 'event.type:error',\n  [Datasource.DEFAULT]: 'event.type:default',\n  [Datasource.TRANSACTION]: 'event.type:transaction',\n} as const;\n\nexport type OptionConfig = {\n  aggregations: AggregationKey[];\n  fields: LooseFieldKey[];\n  measurementKeys?: string[];\n};\n\n/**\n * Allowed error aggregations for alerts\n */\nexport const errorFieldConfig: OptionConfig = {\n  aggregations: ['count', 'count_unique'],\n  fields: ['user'],\n};\n\nconst commonAggregations: AggregationKey[] = [\n  'avg',\n  'percentile',\n  'p50',\n  'p75',\n  'p95',\n  'p99',\n  'p100',\n];\n\nconst allAggregations: AggregationKey[] = [\n  ...commonAggregations,\n  'failure_rate',\n  'apdex',\n  'count',\n];\n\nexport const COMPARISON_DELTA_OPTIONS = [\n  {value: 5, label: t('same time 5 minutes ago')}, // 5 minutes\n  {value: 15, label: t('same time 15 minutes ago')}, // 15 minutes\n  {value: 60, label: t('same time one hour ago')}, // one hour\n  {value: 1440, label: t('same time one day ago')}, // one day\n  {value: 10080, label: t('same time one week ago')}, // one week\n  {value: 43200, label: t('same time one month ago')}, // 30 days\n];\n\nexport function getWizardAlertFieldConfig(\n  alertType: AlertType,\n  dataset: Dataset\n): OptionConfig {\n  if (alertType === 'custom' && dataset === Dataset.ERRORS) {\n    return errorFieldConfig;\n  }\n  // If user selected apdex we must include that in the OptionConfig as it has a user specified column\n  const aggregations =\n    alertType === 'apdex' || alertType === 'custom'\n      ? allAggregations\n      : commonAggregations;\n  return {\n    aggregations,\n    fields: ['transaction.duration'],\n    measurementKeys: Object.keys(WEB_VITAL_DETAILS),\n  };\n}\n\n/**\n * Allowed aggregations for alerts created from wizard\n */\nexport const wizardAlertFieldConfig: OptionConfig = {\n  aggregations: commonAggregations,\n  fields: ['transaction.duration'],\n  measurementKeys: Object.keys(WEB_VITAL_DETAILS),\n};\n\n/**\n * Allowed transaction aggregations for alerts\n */\nexport const transactionFieldConfig: OptionConfig = {\n  aggregations: allAggregations,\n  fields: ['transaction.duration'],\n  measurementKeys: Object.keys(WEB_VITAL_DETAILS),\n};\n\nexport function createDefaultTrigger(label: 'critical' | 'warning'): Trigger {\n  return {\n    label,\n    alertThreshold: '',\n    actions: [],\n  };\n}\n\nexport function createDefaultRule(\n  defaultRuleOptions: Partial<UnsavedIncidentRule> = {}\n): UnsavedIncidentRule {\n  return {\n    dataset: Dataset.ERRORS,\n    eventTypes: [EventTypes.ERROR],\n    aggregate: DEFAULT_AGGREGATE,\n    query: '',\n    timeWindow: 60,\n    thresholdPeriod: 1,\n    triggers: [createDefaultTrigger('critical'), createDefaultTrigger('warning')],\n    projects: [],\n    environment: null,\n    resolveThreshold: '',\n    thresholdType: AlertRuleThresholdType.ABOVE,\n    ...defaultRuleOptions,\n  };\n}\n\n/**\n * Create an unsaved alert from a discover EventView object\n */\nexport function createRuleFromEventView(eventView: EventView): UnsavedIncidentRule {\n  const parsedQuery = getQueryDatasource(eventView.query);\n  const datasetAndEventtypes = parsedQuery\n    ? DATA_SOURCE_TO_SET_AND_EVENT_TYPES[parsedQuery.source]\n    : DATA_SOURCE_TO_SET_AND_EVENT_TYPES.error;\n\n  let aggregate = eventView.getYAxis();\n  if (\n    datasetAndEventtypes.dataset === 'transactions' &&\n    /^p\\d{2,3}\\(\\)/.test(eventView.getYAxis())\n  ) {\n    // p95() -> p95(transaction.duration)\n    aggregate = eventView.getYAxis().slice(0, 3) + '(transaction.duration)';\n  }\n\n  return {\n    ...createDefaultRule(),\n    ...datasetAndEventtypes,\n    query: parsedQuery?.query ?? eventView.query,\n    aggregate,\n    environment: eventView.environment.length ? eventView.environment[0] : null,\n  };\n}\n\nexport function createRuleFromWizardTemplate(\n  wizardTemplate: WizardRuleTemplate\n): UnsavedIncidentRule {\n  const {eventTypes, aggregate, dataset} = wizardTemplate;\n  const defaultRuleOptions: Partial<UnsavedIncidentRule> = {};\n\n  if (isSessionAggregate(aggregate)) {\n    defaultRuleOptions.thresholdType = AlertRuleThresholdType.BELOW;\n    defaultRuleOptions.timeWindow = TimeWindow.ONE_HOUR;\n  }\n\n  if (aggregate.includes('apdex')) {\n    defaultRuleOptions.thresholdType = AlertRuleThresholdType.BELOW;\n  }\n\n  return {\n    ...createDefaultRule(defaultRuleOptions),\n    eventTypes: [eventTypes],\n    aggregate,\n    dataset,\n  };\n}\n"],"names":["IncompatibleQueryAlert","incompatibleQuery","eventView","orgId","onClose","hasProjectError","hasEnvironmentError","hasEventTypeError","hasYAxisError","totalErrors","Object","values","filter","val","length","eventTypeError","clone","query","eventTypeTransaction","eventTypeDefault","eventTypeErrorDefault","pathname","eventTypeLinks","error","to","generateQueryStringObject","default","transaction","errorDefault","StyledAlert","type","icon","color","size","t","tct","yAxis","StyledCode","getYAxis","StyledUnorderedList","StyledCloseButton","onClick","borderless","CreateAlertFromViewButton","projects","organization","referrer","onIncompatibleQuery","onSuccess","buttonProps","errors","project","environment","getQueryDatasource","column","explodeFieldString","kind","eventTypeMatch","match","yAxisConfig","errorFieldConfig","transactionFieldConfig","invalidFunction","aggregations","includes","function","aggregation","AGGREGATIONS","isNumericParameter","parameters","some","param","dataType","allowedParameters","fields","measurementKeys","invalidParameter","incompatibleYAxis","find","p","id","queryParams","slug","replace","hasErrors","x","undefined","createFromDiscover","CreateAlertButton","event","preventDefault","onAlertClose","withRouter","projectSlug","iconProps","router","hideIcon","showPermissionGuide","api","useApi","createAlertUrl","providedProj","handleClickWithoutProject","navigateTo","async","enableAlertsMemberWrite","settingsEndpoint","addLoadingMessage","requestPromise","method","data","alertsMemberWrite","addSuccessMessage","err","addErrorMessage","permissionTooltipText","settingsLink","renderButton","hasAccess","disabled","title","tooltipProps","isHoverable","position","popperStyle","maxWidth","children","showGuide","access","isOrgAdmin","target","onFinish","Alert","theme","textColor","Button","DEFAULT_COUNT_TIME_WINDOW","DEFAULT_CHANGE_TIME_WINDOW","DEFAULT_CHANGE_COMP_DELTA","DEFAULT_AGGREGATE","DEFAULT_TRANSACTION_AGGREGATE","DATASET_EVENT_TYPE_FILTERS","Dataset","DATASOURCE_EVENT_TYPE_FILTERS","Datasource","commonAggregations","allAggregations","COMPARISON_DELTA_OPTIONS","value","label","getWizardAlertFieldConfig","alertType","dataset","keys","WEB_VITAL_DETAILS","createDefaultTrigger","alertThreshold","actions","createDefaultRule","defaultRuleOptions","eventTypes","EventTypes","aggregate","timeWindow","thresholdPeriod","triggers","resolveThreshold","thresholdType","AlertRuleThresholdType","createRuleFromEventView","parsedQuery","datasetAndEventtypes","DATA_SOURCE_TO_SET_AND_EVENT_TYPES","source","test","slice","createRuleFromWizardTemplate","wizardTemplate","isSessionAggregate","TimeWindow"],"sourceRoot":""}