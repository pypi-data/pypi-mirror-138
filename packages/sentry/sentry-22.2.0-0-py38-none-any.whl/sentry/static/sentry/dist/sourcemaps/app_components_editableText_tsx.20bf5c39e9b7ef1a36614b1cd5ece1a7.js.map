{"version":3,"file":"chunks/app_components_editableText_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/useKeyPress.tsx","webpack:///./app/components/editableText.tsx","webpack:///./app/utils/useOnClickOutside.tsx"],"sourcesContent":["import {useEffect, useState} from 'react';\n\n/**\n * Hook to detect when a specific key is being pressed\n */\nfunction useKeyPress(targetKey: React.KeyboardEvent['key']) {\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  useEffect(() => {\n    function downHandler({key}: KeyboardEvent) {\n      if (key === targetKey) {\n        setKeyPressed(true);\n      }\n    }\n\n    function upHandler({key}: KeyboardEvent) {\n      if (key === targetKey) {\n        setKeyPressed(false);\n      }\n    }\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  }, [targetKey]);\n\n  return keyPressed;\n}\n\nexport default useKeyPress;\n","import {useCallback, useEffect, useRef, useState} from 'react';\nimport * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport Input from 'sentry/components/forms/controls/input';\nimport TextOverflow from 'sentry/components/textOverflow';\nimport {IconEdit} from 'sentry/icons/iconEdit';\nimport space from 'sentry/styles/space';\nimport {defined} from 'sentry/utils';\nimport useKeypress from 'sentry/utils/useKeyPress';\nimport useOnClickOutside from 'sentry/utils/useOnClickOutside';\n\ntype Props = {\n  onChange: (value: string) => void;\n  value: string;\n  autoSelect?: boolean;\n  errorMessage?: React.ReactNode;\n  isDisabled?: boolean;\n  name?: string;\n  successMessage?: React.ReactNode;\n};\n\nfunction EditableText({\n  value,\n  onChange,\n  name,\n  errorMessage,\n  successMessage,\n  isDisabled = false,\n  autoSelect = false,\n}: Props) {\n  const [isEditing, setIsEditing] = useState(false);\n  const [inputValue, setInputValue] = useState(value);\n\n  const isEmpty = !inputValue.trim();\n\n  const innerWrapperRef = useRef<HTMLDivElement>(null);\n  const labelRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const enter = useKeypress('Enter');\n  const esc = useKeypress('Escape');\n\n  function revertValueAndCloseEditor() {\n    if (value !== inputValue) {\n      setInputValue(value);\n    }\n\n    if (isEditing) {\n      setIsEditing(false);\n    }\n  }\n\n  // check to see if the user clicked outside of this component\n  useOnClickOutside(innerWrapperRef, () => {\n    if (!isEditing) {\n      return;\n    }\n\n    if (isEmpty) {\n      displayStatusMessage('error');\n      return;\n    }\n\n    if (inputValue !== value) {\n      onChange(inputValue);\n      displayStatusMessage('success');\n    }\n\n    setIsEditing(false);\n  });\n\n  const onEnter = useCallback(() => {\n    if (enter) {\n      if (isEmpty) {\n        displayStatusMessage('error');\n        return;\n      }\n\n      if (inputValue !== value) {\n        onChange(inputValue);\n        displayStatusMessage('success');\n      }\n\n      setIsEditing(false);\n    }\n  }, [enter, inputValue, onChange]);\n\n  const onEsc = useCallback(() => {\n    if (esc) {\n      revertValueAndCloseEditor();\n    }\n  }, [esc]);\n\n  useEffect(() => {\n    revertValueAndCloseEditor();\n  }, [isDisabled, value]);\n\n  // focus the cursor in the input field on edit start\n  useEffect(() => {\n    if (isEditing) {\n      const inputElement = inputRef.current;\n      if (defined(inputElement)) {\n        inputElement.focus();\n      }\n    }\n  }, [isEditing]);\n\n  useEffect(() => {\n    if (isEditing) {\n      // if Enter is pressed, save the value and close the editor\n      onEnter();\n      // if Escape is pressed, revert the value and close the editor\n      onEsc();\n    }\n  }, [onEnter, onEsc, isEditing]); // watch the Enter and Escape key presses\n\n  function displayStatusMessage(status: 'error' | 'success') {\n    if (status === 'error') {\n      if (errorMessage) {\n        addErrorMessage(errorMessage);\n      }\n      return;\n    }\n\n    if (successMessage) {\n      addSuccessMessage(successMessage);\n    }\n  }\n\n  function handleInputChange(event: React.ChangeEvent<HTMLInputElement>) {\n    setInputValue(event.target.value);\n  }\n\n  function handleEditClick() {\n    setIsEditing(true);\n  }\n\n  return (\n    <Wrapper isDisabled={isDisabled} isEditing={isEditing}>\n      {isEditing ? (\n        <InputWrapper\n          ref={innerWrapperRef}\n          isEmpty={isEmpty}\n          data-test-id=\"editable-text-input\"\n        >\n          <StyledInput\n            name={name}\n            ref={inputRef}\n            value={inputValue}\n            onChange={handleInputChange}\n            onFocus={event => autoSelect && event.target.select()}\n          />\n          <InputLabel>{inputValue}</InputLabel>\n        </InputWrapper>\n      ) : (\n        <Label\n          onClick={isDisabled ? undefined : handleEditClick}\n          ref={labelRef}\n          isDisabled={isDisabled}\n          data-test-id=\"editable-text-label\"\n        >\n          <InnerLabel>{inputValue}</InnerLabel>\n          {!isDisabled && <IconEdit />}\n        </Label>\n      )}\n    </Wrapper>\n  );\n}\n\nexport default EditableText;\n\nconst Label = styled('div')<{isDisabled: boolean}>`\n  display: grid;\n  grid-auto-flow: column;\n  align-items: center;\n  gap: ${space(1)};\n  cursor: ${p => (p.isDisabled ? 'default' : 'pointer')};\n`;\n\nconst InnerLabel = styled(TextOverflow)`\n  border-top: 1px solid transparent;\n  border-bottom: 1px dotted ${p => p.theme.gray200};\n`;\n\nconst InputWrapper = styled('div')<{isEmpty: boolean}>`\n  display: inline-block;\n  background: ${p => p.theme.gray100};\n  border-radius: ${p => p.theme.borderRadius};\n  margin: -${space(0.5)} -${space(1)};\n  max-width: calc(100% + ${space(2)});\n`;\n\nconst StyledInput = styled(Input)`\n  border: none !important;\n  background: transparent;\n  height: auto;\n  min-height: 34px;\n  padding: ${space(0.5)} ${space(1)};\n  &,\n  &:focus,\n  &:active,\n  &:hover {\n    box-shadow: none;\n  }\n`;\n\nconst InputLabel = styled('div')`\n  height: 0;\n  opacity: 0;\n  white-space: pre;\n  padding: 0 ${space(1)};\n`;\n\nconst Wrapper = styled('div')<{isDisabled: boolean; isEditing: boolean}>`\n  display: flex;\n\n  ${p =>\n    p.isDisabled &&\n    `\n      ${InnerLabel} {\n        border-bottom-color: transparent;\n      }\n    `}\n`;\n","// hook from https://usehooks.com/useOnClickOutside/\nimport {useEffect} from 'react';\nimport * as React from 'react';\n\nfunction useOnClickOutside<T extends HTMLElement = HTMLElement>(\n  ref: React.RefObject<T>,\n  handler: (event: MouseEvent | TouchEvent) => void\n) {\n  useEffect(\n    () => {\n      const listener = (event: MouseEvent | TouchEvent) => {\n        const el = ref?.current;\n\n        // Do nothing if clicking ref's element or descendent elements\n        if (!el || el.contains(event.target as Node)) {\n          return;\n        }\n\n        handler(event);\n      };\n\n      document.addEventListener('mousedown', listener);\n      document.addEventListener('touchstart', listener);\n      return () => {\n        document.removeEventListener('mousedown', listener);\n        document.removeEventListener('touchstart', listener);\n      };\n    },\n    // Reload only if ref or handler changes\n    [ref, handler]\n  );\n}\n\nexport default useOnClickOutside;\n"],"names":["targetKey","keyPressed","setKeyPressed","useState","useEffect","downHandler","key","upHandler","window","addEventListener","removeEventListener","EditableText","value","onChange","name","errorMessage","successMessage","isDisabled","autoSelect","isEditing","setIsEditing","inputValue","setInputValue","isEmpty","trim","innerWrapperRef","useRef","labelRef","inputRef","enter","useKeypress","esc","revertValueAndCloseEditor","ref","handler","displayStatusMessage","listener","event","el","current","contains","target","document","onEnter","useCallback","onEsc","status","addSuccessMessage","addErrorMessage","inputElement","defined","focus","Wrapper","InputWrapper","StyledInput","onFocus","select","InputLabel","Label","onClick","undefined","InnerLabel","space","p","TextOverflow","theme","gray200","gray100","borderRadius","Input"],"sourceRoot":""}