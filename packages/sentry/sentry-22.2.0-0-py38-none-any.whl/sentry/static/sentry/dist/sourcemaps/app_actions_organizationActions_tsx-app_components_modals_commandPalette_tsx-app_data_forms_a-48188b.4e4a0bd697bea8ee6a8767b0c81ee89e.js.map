{"version":3,"file":"chunks/app_actions_organizationActions_tsx-app_components_modals_commandPalette_tsx-app_data_forms_a-48188b.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actions/organizationActions.tsx","webpack:///./app/components/modals/commandPalette.tsx","webpack:///./app/data/forms/accountEmails.tsx","webpack:///./app/stores/organizationsStore.tsx","webpack:///./app/stores/projectsStore.tsx","webpack:///../node_modules/lodash/flattenDepth.js","webpack:///../node_modules/lodash/isNumber.js"],"sourcesContent":["import Reflux from 'reflux';\n\nconst OrganizationActions = Reflux.createActions(['reset', 'fetchOrgError', 'update']);\n\nexport default OrganizationActions;\n","import {useEffect} from 'react';\nimport {ClassNames, css, useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport Input from 'sentry/components/forms/controls/input';\nimport {Search} from 'sentry/components/search';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {analytics} from 'sentry/utils/analytics';\n\nfunction CommandPalette({Body}: ModalRenderProps) {\n  const theme = useTheme();\n\n  useEffect(() => void analytics('omnisearch.open', {}), []);\n\n  return (\n    <Body>\n      <ClassNames>\n        {({css: injectedCss}) => (\n          <Search\n            entryPoint=\"command_palette\"\n            minSearch={1}\n            maxResults={10}\n            dropdownStyle={injectedCss`\n                width: 100%;\n                border: transparent;\n                border-top-left-radius: 0;\n                border-top-right-radius: 0;\n                position: initial;\n                box-shadow: none;\n                border-top: 1px solid ${theme.border};\n              `}\n            renderInput={({getInputProps}) => (\n              <InputWrapper>\n                <StyledInput\n                  autoFocus\n                  {...getInputProps({\n                    type: 'text',\n                    placeholder: t('Search for projects, teams, settings, etc...'),\n                  })}\n                />\n              </InputWrapper>\n            )}\n          />\n        )}\n      </ClassNames>\n    </Body>\n  );\n}\n\nexport default CommandPalette;\n\nexport const modalCss = css`\n  [role='document'] {\n    padding: 0;\n  }\n`;\n\nconst InputWrapper = styled('div')`\n  padding: ${space(0.25)};\n`;\n\nconst StyledInput = styled(Input)`\n  width: 100%;\n  padding: ${space(1)};\n  border-radius: 8px;\n\n  outline: none;\n  border: none;\n  box-shadow: none;\n\n  :focus,\n  :active,\n  :hover {\n    outline: none;\n    border: none;\n    box-shadow: none;\n  }\n`;\n","import {JsonFormObject} from 'sentry/components/forms/type';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/account/emails/';\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'Add Secondary Emails',\n    fields: [\n      {\n        name: 'email',\n        type: 'string',\n\n        // additional data/props that is related to rendering of form field rather than data\n        label: 'Additional Email',\n        placeholder: 'e.g. secondary@example.com',\n        help: 'Designate an alternative email for this account',\n        showReturnButton: true,\n      },\n    ],\n  },\n];\n\nexport default formGroups;\n","import Reflux from 'reflux';\n\nimport OrganizationsActions from 'sentry/actions/organizationsActions';\nimport {Organization} from 'sentry/types';\n\ntype OrganizationsStoreInterface = {\n  add(item: Organization): void;\n  get(slug: string): Organization | undefined;\n\n  getAll(): Organization[];\n  load(items: Organization[]): void;\n  loaded: boolean;\n  onChangeSlug(prev: Organization, next: Organization): void;\n  onRemoveSuccess(slug: string): void;\n  onUpdate(org: Organization): void;\n  remove(slug: string): void;\n  state: Organization[];\n};\n\nconst storeConfig: Reflux.StoreDefinition & OrganizationsStoreInterface = {\n  listenables: [OrganizationsActions],\n\n  state: [],\n  loaded: false,\n\n  // So we can use Reflux.connect in a component mixin\n  getInitialState() {\n    return this.state;\n  },\n\n  init() {\n    this.state = [];\n    this.loaded = false;\n  },\n\n  onUpdate(org: Organization) {\n    this.add(org);\n  },\n\n  onChangeSlug(prev: Organization, next: Organization) {\n    if (prev.slug === next.slug) {\n      return;\n    }\n\n    this.remove(prev.slug);\n    this.add(next);\n  },\n\n  onRemoveSuccess(slug: string) {\n    this.remove(slug);\n  },\n\n  get(slug: Organization['slug']) {\n    return this.state.find((item: Organization) => item.slug === slug);\n  },\n\n  getAll() {\n    return this.state;\n  },\n\n  remove(slug: Organization['slug']) {\n    this.state = this.state.filter(item => slug !== item.slug);\n    this.trigger(this.state);\n  },\n\n  add(item: Organization) {\n    let match = false;\n    this.state.forEach((existing, idx) => {\n      if (existing.id === item.id) {\n        item = {...existing, ...item};\n        this.state[idx] = item;\n        match = true;\n      }\n    });\n    if (!match) {\n      this.state = [...this.state, item];\n    }\n    this.trigger(this.state);\n  },\n\n  load(items: Organization[]) {\n    this.state = items;\n    this.loaded = true;\n    this.trigger(items);\n  },\n};\n\nconst OrganizationsStore = Reflux.createStore(storeConfig) as Reflux.Store &\n  OrganizationsStoreInterface;\n\nexport default OrganizationsStore;\n","import Reflux from 'reflux';\n\nimport ProjectActions from 'sentry/actions/projectActions';\nimport TeamActions from 'sentry/actions/teamActions';\nimport {Project, Team} from 'sentry/types';\n\nimport {CommonStoreInterface} from './types';\n\ntype State = {\n  loading: boolean;\n  projects: Project[];\n};\n\ntype StatsData = Record<string, Project['stats']>;\n\n/**\n * Attributes that need typing but aren't part of the external interface,\n */\ntype Internals = {\n  itemsById: Record<string, Project>;\n  loading: boolean;\n  removeTeamFromProject(teamSlug: string, project: Project): void;\n};\n\ntype ProjectsStoreInterface = CommonStoreInterface<State> & {\n  getAll(): Project[];\n  getById(id?: string): Project | undefined;\n  getBySlug(slug?: string): Project | undefined;\n  init(): void;\n  isLoading(): boolean;\n  loadInitialData(projects: Project[]): void;\n  onAddTeam(team: Team, projectSlug: string): void;\n  onChangeSlug(prevSlug: string, newSlug: string): void;\n  onCreateSuccess(project: Project): void;\n  onDeleteTeam(slug: string): void;\n  onRemoveTeam(teamSlug: string, projectSlug: string): void;\n  onStatsLoadSuccess(data: StatsData): void;\n  onUpdateSuccess(data: Partial<Project>): void;\n  reset(): void;\n};\n\nconst storeConfig: Reflux.StoreDefinition & Internals & ProjectsStoreInterface = {\n  itemsById: {},\n  loading: true,\n\n  init() {\n    this.reset();\n\n    this.listenTo(ProjectActions.addTeamSuccess, this.onAddTeam);\n    this.listenTo(ProjectActions.changeSlug, this.onChangeSlug);\n    this.listenTo(ProjectActions.createSuccess, this.onCreateSuccess);\n    this.listenTo(ProjectActions.loadProjects, this.loadInitialData);\n    this.listenTo(ProjectActions.loadStatsSuccess, this.onStatsLoadSuccess);\n    this.listenTo(ProjectActions.removeTeamSuccess, this.onRemoveTeam);\n    this.listenTo(ProjectActions.reset, this.reset);\n    this.listenTo(ProjectActions.updateSuccess, this.onUpdateSuccess);\n\n    this.listenTo(TeamActions.removeTeamSuccess, this.onDeleteTeam);\n  },\n\n  reset() {\n    this.itemsById = {};\n    this.loading = true;\n  },\n\n  loadInitialData(items: Project[]) {\n    const mapping = items.map(project => [project.id, project] as const);\n\n    this.itemsById = Object.fromEntries(mapping);\n    this.loading = false;\n\n    this.trigger(new Set(Object.keys(this.itemsById)));\n  },\n\n  onChangeSlug(prevSlug: string, newSlug: string) {\n    const prevProject = this.getBySlug(prevSlug);\n\n    if (!prevProject) {\n      return;\n    }\n\n    const newProject = {...prevProject, slug: newSlug};\n\n    this.itemsById = {...this.itemsById, [newProject.id]: newProject};\n    this.trigger(new Set([prevProject.id]));\n  },\n\n  onCreateSuccess(project: Project) {\n    this.itemsById = {...this.itemsById, [project.id]: project};\n    this.trigger(new Set([project.id]));\n  },\n\n  onUpdateSuccess(data: Partial<Project>) {\n    const project = this.getById(data.id);\n\n    if (!project) {\n      return;\n    }\n\n    const newProject = {...project, ...data};\n\n    this.itemsById = {...this.itemsById, [project.id]: newProject};\n    this.trigger(new Set([data.id]));\n  },\n\n  onStatsLoadSuccess(data) {\n    const entries = Object.entries(data || {}).filter(\n      ([projectId]) => projectId in this.itemsById\n    );\n\n    // Assign stats into projects\n    entries.forEach(([projectId, stats]) => {\n      this.itemsById[projectId].stats = stats;\n    });\n\n    const touchedIds = entries.map(([projectId]) => projectId);\n    this.trigger(new Set(touchedIds));\n  },\n\n  /**\n   * Listener for when a team is completely removed\n   *\n   * @param teamSlug Team Slug\n   */\n  onDeleteTeam(teamSlug: string) {\n    // Look for team in all projects\n    const projects = this.getAll().filter(({teams}) =>\n      teams.find(({slug}) => slug === teamSlug)\n    );\n\n    projects.forEach(project => this.removeTeamFromProject(teamSlug, project));\n\n    const affectedProjectIds = projects.map(project => project.id);\n    this.trigger(new Set(affectedProjectIds));\n  },\n\n  onRemoveTeam(teamSlug: string, projectSlug: string) {\n    const project = this.getBySlug(projectSlug);\n\n    if (!project) {\n      return;\n    }\n\n    this.removeTeamFromProject(teamSlug, project);\n    this.trigger(new Set([project.id]));\n  },\n\n  onAddTeam(team: Team, projectSlug: string) {\n    const project = this.getBySlug(projectSlug);\n\n    // Don't do anything if we can't find a project\n    if (!project) {\n      return;\n    }\n\n    const newProject = {...project, teams: [...project.teams, team]};\n\n    this.itemsById = {...this.itemsById, [project.id]: newProject};\n    this.trigger(new Set([project.id]));\n  },\n\n  // Internal method, does not trigger\n  removeTeamFromProject(teamSlug: string, project: Project) {\n    const newTeams = project.teams.filter(({slug}) => slug !== teamSlug);\n    const newProject = {...project, teams: newTeams};\n\n    this.itemsById = {...this.itemsById, [project.id]: newProject};\n  },\n\n  isLoading() {\n    return this.loading;\n  },\n\n  getAll() {\n    return Object.values(this.itemsById).sort((a, b) => a.slug.localeCompare(b.slug));\n  },\n\n  getById(id) {\n    return this.getAll().find(project => project.id === id);\n  },\n\n  getBySlug(slug) {\n    return this.getAll().find(project => project.slug === slug);\n  },\n\n  getState() {\n    return {\n      projects: this.getAll(),\n      loading: this.loading,\n    };\n  },\n};\n\nconst ProjectsStore = Reflux.createStore(storeConfig) as Reflux.Store &\n  ProjectsStoreInterface;\n\nexport default ProjectsStore;\n","var baseFlatten = require('./_baseFlatten'),\n    toInteger = require('./toInteger');\n\n/**\n * Recursively flatten `array` up to `depth` times.\n *\n * @static\n * @memberOf _\n * @since 4.4.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @param {number} [depth=1] The maximum recursion depth.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * var array = [1, [2, [3, [4]], 5]];\n *\n * _.flattenDepth(array, 1);\n * // => [1, 2, [3, [4]], 5]\n *\n * _.flattenDepth(array, 2);\n * // => [1, 2, 3, [4], 5]\n */\nfunction flattenDepth(array, depth) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return [];\n  }\n  depth = depth === undefined ? 1 : toInteger(depth);\n  return baseFlatten(array, depth);\n}\n\nmodule.exports = flattenDepth;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar numberTag = '[object Number]';\n\n/**\n * Checks if `value` is classified as a `Number` primitive or object.\n *\n * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n * classified as numbers, use the `_.isFinite` method.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n * @example\n *\n * _.isNumber(3);\n * // => true\n *\n * _.isNumber(Number.MIN_VALUE);\n * // => true\n *\n * _.isNumber(Infinity);\n * // => true\n *\n * _.isNumber('3');\n * // => false\n */\nfunction isNumber(value) {\n  return typeof value == 'number' ||\n    (isObjectLike(value) && baseGetTag(value) == numberTag);\n}\n\nmodule.exports = isNumber;\n"],"names":["Reflux","CommandPalette","Body","theme","useTheme","useEffect","analytics","css","injectedCss","entryPoint","minSearch","maxResults","dropdownStyle","border","renderInput","getInputProps","InputWrapper","StyledInput","autoFocus","type","placeholder","t","modalCss","space","Input","route","title","fields","name","label","help","showReturnButton","storeConfig","listenables","OrganizationsActions","state","loaded","getInitialState","this","init","onUpdate","org","add","onChangeSlug","prev","next","slug","remove","onRemoveSuccess","get","find","item","getAll","filter","trigger","match","forEach","existing","idx","id","load","items","itemsById","loading","reset","listenTo","ProjectActions","onAddTeam","onCreateSuccess","loadInitialData","onStatsLoadSuccess","onRemoveTeam","onUpdateSuccess","TeamActions","onDeleteTeam","mapping","map","project","Object","fromEntries","Set","keys","prevSlug","newSlug","prevProject","getBySlug","newProject","data","getById","entries","projectId","stats","touchedIds","teamSlug","projects","teams","removeTeamFromProject","affectedProjectIds","projectSlug","team","newTeams","isLoading","values","sort","a","b","localeCompare","getState","baseFlatten","toInteger","module","exports","array","depth","length","undefined","baseGetTag","isObjectLike","value"],"sourceRoot":""}