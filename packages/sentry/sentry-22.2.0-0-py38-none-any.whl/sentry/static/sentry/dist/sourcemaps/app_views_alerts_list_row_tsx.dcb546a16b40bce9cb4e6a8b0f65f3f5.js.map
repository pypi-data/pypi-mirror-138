{"version":3,"file":"chunks/app_views_alerts_list_row_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/alerts/details/index.tsx","webpack:///./app/views/alerts/list/row.tsx","webpack:///./app/views/alerts/rules/details/constants.tsx"],"sourcesContent":["import {useEffect, useState} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\n\nimport {Client} from 'sentry/api';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {Organization} from 'sentry/types';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport useApi from 'sentry/utils/useApi';\n\nimport {AlertRuleStatus, Incident} from '../types';\nimport {fetchIncident} from '../utils';\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n} & RouteComponentProps<{alertId: string; orgId: string}, {}>;\n\nexport const alertDetailsLink = (organization: Organization, incident: Incident) =>\n  `/organizations/${organization.slug}/alerts/rules/details/${\n    incident.alertRule.status === AlertRuleStatus.SNAPSHOT &&\n    incident.alertRule.originalAlertRuleId\n      ? incident.alertRule.originalAlertRuleId\n      : incident.alertRule.id\n  }/`;\n\nfunction IncidentDetails({organization, params}: Props) {\n  const api = useApi();\n  const [hasError, setHasError] = useState(false);\n\n  const track = () => {\n    trackAnalyticsEvent({\n      eventKey: 'alert_details.viewed',\n      eventName: 'Alert Details: Viewed',\n      organization_id: parseInt(organization.id, 10),\n      alert_id: parseInt(params.alertId, 10),\n    });\n  };\n\n  const fetchData = async () => {\n    setHasError(false);\n\n    try {\n      const incident = await fetchIncident(api, params.orgId, params.alertId);\n      browserHistory.replace({\n        pathname: alertDetailsLink(organization, incident),\n        query: {alert: incident.identifier},\n      });\n    } catch (err) {\n      setHasError(true);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n    track();\n  }, []);\n\n  if (hasError) {\n    return <LoadingError onRetry={fetchData} />;\n  }\n\n  return <LoadingIndicator />;\n}\n\nexport default IncidentDetails;\n","import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\nimport memoize from 'lodash/memoize';\nimport moment from 'moment';\n\nimport ActorAvatar from 'sentry/components/avatar/actorAvatar';\nimport Duration from 'sentry/components/duration';\nimport ErrorBoundary from 'sentry/components/errorBoundary';\nimport IdBadge from 'sentry/components/idBadge';\nimport Link from 'sentry/components/links/link';\nimport Tag from 'sentry/components/tag';\nimport TimeSince from 'sentry/components/timeSince';\nimport {t} from 'sentry/locale';\nimport TeamStore from 'sentry/stores/teamStore';\nimport overflowEllipsis from 'sentry/styles/overflowEllipsis';\nimport space from 'sentry/styles/space';\nimport {Actor, Organization, Project} from 'sentry/types';\nimport {getUtcDateString} from 'sentry/utils/dates';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {alertDetailsLink} from 'sentry/views/alerts/details';\n\nimport {\n  API_INTERVAL_POINTS_LIMIT,\n  API_INTERVAL_POINTS_MIN,\n} from '../rules/details/constants';\nimport {Incident, IncidentStatus} from '../types';\nimport {getIncidentMetricPreset} from '../utils';\n\n/**\n * Retrieve the start/end for showing the graph of the metric\n * Will show at least 150 and no more than 10,000 data points\n */\nexport const makeRuleDetailsQuery = (\n  incident: Incident\n): {end: string; start: string} => {\n  const {timeWindow} = incident.alertRule;\n  const timeWindowMillis = timeWindow * 60 * 1000;\n  const minRange = timeWindowMillis * API_INTERVAL_POINTS_MIN;\n  const maxRange = timeWindowMillis * API_INTERVAL_POINTS_LIMIT;\n  const now = moment.utc();\n  const startDate = moment.utc(incident.dateStarted);\n  // make a copy of now since we will modify endDate and use now for comparing\n  const endDate = incident.dateClosed ? moment.utc(incident.dateClosed) : moment(now);\n  const incidentRange = Math.max(endDate.diff(startDate), 3 * timeWindowMillis);\n  const range = Math.min(maxRange, Math.max(minRange, incidentRange));\n  const halfRange = moment.duration(range / 2);\n\n  return {\n    start: getUtcDateString(startDate.subtract(halfRange)),\n    end: getUtcDateString(moment.min(endDate.add(halfRange), now)),\n  };\n};\n\ntype Props = {\n  incident: Incident;\n  orgId: string;\n  organization: Organization;\n  projects: Project[];\n  projectsLoaded: boolean;\n};\n\nclass AlertListRow extends Component<Props> {\n  get metricPreset() {\n    const {incident} = this.props;\n    return incident ? getIncidentMetricPreset(incident) : undefined;\n  }\n\n  /**\n   * Memoized function to find a project from a list of projects\n   */\n  getProject = memoize((slug: string, projects: Project[]) =>\n    projects.find(project => project.slug === slug)\n  );\n\n  render() {\n    const {incident, projectsLoaded, projects, organization} = this.props;\n    const slug = incident.projects[0];\n    const started = moment(incident.dateStarted);\n    const duration = moment\n      .duration(moment(incident.dateClosed || new Date()).diff(started))\n      .as('seconds');\n\n    const alertLink = {\n      pathname: alertDetailsLink(organization, incident),\n      query: {alert: incident.identifier},\n    };\n    const ownerId = incident.alertRule.owner?.split(':')[1];\n    let teamName = '';\n    if (ownerId) {\n      teamName = TeamStore.getById(ownerId)?.name ?? '';\n    }\n    const teamActor = ownerId\n      ? {type: 'team' as Actor['type'], id: ownerId, name: teamName}\n      : null;\n\n    return (\n      <ErrorBoundary>\n        <Title data-test-id=\"alert-title\">\n          <Link to={alertLink}>{incident.title}</Link>\n        </Title>\n\n        <NoWrapNumeric>\n          {getDynamicText({\n            value: <TimeSince date={incident.dateStarted} extraShort />,\n            fixed: '1w ago',\n          })}\n        </NoWrapNumeric>\n        <NoWrapNumeric>\n          {incident.status === IncidentStatus.CLOSED ? (\n            <Duration seconds={getDynamicText({value: duration, fixed: 1200})} />\n          ) : (\n            <Tag type=\"warning\">{t('Still Active')}</Tag>\n          )}\n        </NoWrapNumeric>\n\n        <ProjectBadge\n          avatarSize={18}\n          project={!projectsLoaded ? {slug} : this.getProject(slug, projects)}\n        />\n        <NoWrapNumeric>#{incident.id}</NoWrapNumeric>\n\n        <FlexCenter>\n          {teamActor ? (\n            <Fragment>\n              <StyledActorAvatar actor={teamActor} size={24} hasTooltip={false} />{' '}\n              <TeamWrapper>{teamActor.name}</TeamWrapper>\n            </Fragment>\n          ) : (\n            '-'\n          )}\n        </FlexCenter>\n      </ErrorBoundary>\n    );\n  }\n}\n\nconst Title = styled('div')`\n  ${overflowEllipsis}\n  min-width: 130px;\n`;\n\nconst NoWrapNumeric = styled('div')`\n  white-space: nowrap;\n  font-variant-numeric: tabular-nums;\n`;\n\nconst ProjectBadge = styled(IdBadge)`\n  flex-shrink: 0;\n`;\n\nconst FlexCenter = styled('div')`\n  ${overflowEllipsis}\n  display: flex;\n  align-items: center;\n`;\n\nconst TeamWrapper = styled('span')`\n  ${overflowEllipsis}\n`;\n\nconst StyledActorAvatar = styled(ActorAvatar)`\n  margin-right: ${space(1)};\n`;\n\nexport default AlertListRow;\n","import * as React from 'react';\n\nimport {t} from 'sentry/locale';\nimport {SelectValue} from 'sentry/types';\nimport {TimePeriod, TimeWindow} from 'sentry/views/alerts/incidentRules/types';\n\nexport const TIME_OPTIONS: SelectValue<string>[] = [\n  {label: t('Last 6 hours'), value: TimePeriod.SIX_HOURS},\n  {label: t('Last 24 hours'), value: TimePeriod.ONE_DAY},\n  {label: t('Last 3 days'), value: TimePeriod.THREE_DAYS},\n  {label: t('Last 7 days'), value: TimePeriod.SEVEN_DAYS},\n];\n\nexport const TIME_WINDOWS = {\n  [TimePeriod.SIX_HOURS]: TimeWindow.ONE_HOUR * 6 * 60 * 1000,\n  [TimePeriod.ONE_DAY]: TimeWindow.ONE_DAY * 60 * 1000,\n  [TimePeriod.THREE_DAYS]: TimeWindow.ONE_DAY * 3 * 60 * 1000,\n  [TimePeriod.SEVEN_DAYS]: TimeWindow.ONE_DAY * 7 * 60 * 1000,\n};\n\nexport const API_INTERVAL_POINTS_LIMIT = 10000;\nexport const API_INTERVAL_POINTS_MIN = 150;\n\nexport type TimePeriodType = {\n  display: React.ReactNode;\n  end: string;\n  label: string;\n  period: string;\n  start: string;\n  custom?: boolean;\n};\n"],"names":["alertDetailsLink","organization","incident","slug","alertRule","status","AlertRuleStatus","originalAlertRuleId","id","IncidentDetails","params","api","useApi","hasError","setHasError","useState","fetchData","async","fetchIncident","orgId","alertId","browserHistory","pathname","query","alert","identifier","err","useEffect","trackAnalyticsEvent","eventKey","eventName","organization_id","parseInt","alert_id","onRetry","makeRuleDetailsQuery","timeWindow","timeWindowMillis","minRange","API_INTERVAL_POINTS_MIN","maxRange","API_INTERVAL_POINTS_LIMIT","now","moment","startDate","dateStarted","endDate","dateClosed","incidentRange","Math","max","diff","range","min","halfRange","start","getUtcDateString","subtract","end","add","AlertListRow","Component","memoize","projects","find","project","this","props","getIncidentMetricPreset","undefined","render","projectsLoaded","started","duration","Date","as","alertLink","ownerId","owner","split","teamName","TeamStore","name","teamActor","type","Title","to","title","NoWrapNumeric","getDynamicText","value","date","extraShort","fixed","IncidentStatus","seconds","t","ProjectBadge","avatarSize","getProject","FlexCenter","Fragment","StyledActorAvatar","actor","size","hasTooltip","TeamWrapper","overflowEllipsis","IdBadge","ActorAvatar","space","TIME_OPTIONS","label","TimePeriod","TIME_WINDOWS","TimeWindow"],"sourceRoot":""}