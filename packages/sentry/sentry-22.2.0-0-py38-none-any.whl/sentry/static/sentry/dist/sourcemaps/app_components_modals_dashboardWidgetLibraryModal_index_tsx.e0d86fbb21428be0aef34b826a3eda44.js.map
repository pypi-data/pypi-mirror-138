{"version":3,"file":"chunks/app_components_modals_dashboardWidgetLibraryModal_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/dashboardsV2/widgetLibrary/data.tsx","webpack:///./app/views/dashboardsV2/widgetLibrary/widgetCard.tsx","webpack:///./app/components/modals/dashboardWidgetLibraryModal/libraryTab.tsx","webpack:///./app/components/modals/dashboardWidgetLibraryModal/index.tsx"],"sourcesContent":["import {t} from 'sentry/locale';\n\nimport {DisplayType, Widget, WidgetType} from '../types';\n\nexport type WidgetTemplate = Widget & {\n  description: string;\n};\n\nexport const DEFAULT_WIDGETS: Readonly<Array<WidgetTemplate>> = [\n  {\n    id: undefined,\n    title: t('Duration Distribution'),\n    description: t('Compare transaction durations across different percentiles.'),\n    displayType: DisplayType.LINE,\n    widgetType: WidgetType.DISCOVER,\n    interval: '5m',\n    queries: [\n      {\n        name: '',\n        conditions: 'event.type:transaction',\n        fields: [\n          'p50(transaction.duration)',\n          'p75(transaction.duration)',\n          'p95(transaction.duration)',\n        ],\n        orderby: '',\n      },\n    ],\n  },\n  {\n    id: undefined,\n    title: t('High Throughput Transactions'),\n    description: t('Top 5 transactions with the largest volume.'),\n    displayType: DisplayType.TOP_N,\n    widgetType: WidgetType.DISCOVER,\n    interval: '5m',\n    queries: [\n      {\n        name: '',\n        conditions: 'event.type:transaction',\n        fields: ['transaction', 'count()'],\n        orderby: '-count',\n      },\n    ],\n  },\n  {\n    id: undefined,\n    title: t('LCP by Country'),\n    description: t('Density map showing page load times by country.'),\n    displayType: DisplayType.WORLD_MAP,\n    widgetType: WidgetType.DISCOVER,\n    interval: '5m',\n    queries: [\n      {\n        name: '',\n        conditions: 'has:geo.country_code',\n        fields: ['p75(measurements.lcp)'],\n        orderby: '',\n      },\n    ],\n  },\n  {\n    id: undefined,\n    title: t('Miserable Users'),\n    description: t('Unique users who have experienced slow load times.'),\n    displayType: DisplayType.BIG_NUMBER,\n    widgetType: WidgetType.DISCOVER,\n    interval: '5m',\n    queries: [\n      {\n        name: '',\n        conditions: '',\n        fields: ['count_miserable(user,300)'],\n        orderby: '',\n      },\n    ],\n  },\n  {\n    id: undefined,\n    title: t('Slow vs. Fast Transactions'),\n    description: t('Percentage breakdown of transaction durations over and under 300ms.'),\n    displayType: DisplayType.BAR,\n    widgetType: WidgetType.DISCOVER,\n    interval: '5m',\n    queries: [\n      {\n        name: '',\n        conditions: 'event.type:transaction',\n        fields: [\n          'equation|(count_if(transaction.duration,greater,300) / count()) * 100',\n          'equation|(count_if(transaction.duration,lessOrEquals,300) / count()) * 100',\n        ],\n        orderby: '',\n      },\n    ],\n  },\n  {\n    id: undefined,\n    title: t('Issues For Review'),\n    description: t('Most recently seen unresolved issues for review.'),\n    displayType: DisplayType.TABLE,\n    widgetType: WidgetType.ISSUE,\n    interval: '5m',\n    queries: [\n      {\n        name: '',\n        conditions: 'is:unresolved is:for_review',\n        fields: ['issue', 'assignee', 'events', 'title'],\n        orderby: 'date',\n      },\n    ],\n  },\n  {\n    id: undefined,\n    title: t('Top Unhandled Error Types'),\n    description: t('Most frequently encountered unhandled errors.'),\n    displayType: DisplayType.TOP_N,\n    widgetType: WidgetType.DISCOVER,\n    interval: '5m',\n    queries: [\n      {\n        name: '',\n        conditions: 'error.unhandled:true',\n        fields: ['error.type', 'count()'],\n        orderby: '-count',\n      },\n    ],\n  },\n  {\n    id: undefined,\n    title: t('Users Affected by Errors'),\n    description: t('Footprint of unique users affected by errors.'),\n    displayType: DisplayType.LINE,\n    widgetType: WidgetType.DISCOVER,\n    interval: '5m',\n    queries: [\n      {\n        name: '',\n        conditions: 'event.type:error',\n        fields: ['count_unique(user)', 'count()'],\n        orderby: '',\n      },\n    ],\n  },\n];\n","import * as React from 'react';\nimport {useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Panel, PanelBody} from 'sentry/components/panels';\nimport {IconArrow, IconGlobe, IconGraph, IconMenu, IconNumber} from 'sentry/icons';\nimport {IconGraphArea} from 'sentry/icons/iconGraphArea';\nimport {IconGraphBar} from 'sentry/icons/iconGraphBar';\nimport space from 'sentry/styles/space';\n\nimport {DisplayType} from '../types';\n\nimport {WidgetTemplate} from './data';\n\ntype Props = {\n  selectedWidgets: WidgetTemplate[];\n  setErrored: (errored: boolean) => void;\n  setSelectedWidgets: (widgets: WidgetTemplate[]) => void;\n  widget: WidgetTemplate;\n  ['data-test-id']?: string;\n};\n\nfunction WidgetLibraryCard({\n  selectedWidgets,\n  widget,\n  setSelectedWidgets,\n  ['data-test-id']: dataTestId,\n}: Props) {\n  const [selected, setSelected] = useState(selectedWidgets.includes(widget));\n\n  function getWidgetIcon(displayType: DisplayType) {\n    switch (displayType) {\n      case DisplayType.TABLE:\n        return <IconMenu size=\"xs\" />;\n      case DisplayType.WORLD_MAP:\n        return <IconGlobe size=\"xs\" />;\n      case DisplayType.BIG_NUMBER:\n        return <IconNumber size=\"xs\" />;\n      case DisplayType.BAR:\n        return <IconGraphBar size=\"xs\" />;\n      case DisplayType.TOP_N:\n        return <IconArrow size=\"xs\" />;\n      case DisplayType.AREA:\n        return <IconGraphArea size=\"xs\" />;\n      case DisplayType.LINE:\n      default:\n        return <IconGraph size=\"xs\" />;\n    }\n  }\n\n  return (\n    <StyledPanel\n      data-test-id={dataTestId}\n      selected={selected}\n      onClick={() => {\n        if (selected) {\n          const updatedWidgets = selectedWidgets.filter(\n            selectedWidget => widget !== selectedWidget\n          );\n          setSelectedWidgets(updatedWidgets);\n        } else {\n          const updatedWidgets = selectedWidgets.slice().concat(widget);\n          setSelectedWidgets(updatedWidgets);\n        }\n        setSelected(!!!selected);\n      }}\n    >\n      <PanelBody>\n        <TitleContainer>\n          {getWidgetIcon(widget.displayType)}\n          <Title>{widget.title}</Title>\n        </TitleContainer>\n        <Description>{widget.description}</Description>\n      </PanelBody>\n    </StyledPanel>\n  );\n}\n\nconst Title = styled('div')`\n  padding-left: ${space(1)};\n  font-size: 16px;\n  line-height: 140%;\n  color: ${p => p.theme.gray500};\n`;\n\nconst TitleContainer = styled('div')`\n  padding: ${space(1.5)} ${space(2)};\n  padding-bottom: ${space(0.5)};\n  display: flex;\n  align-items: center;\n`;\n\nconst Description = styled('div')`\n  padding: 0 ${space(1)} ${space(1.5)} 36px;\n  font-size: 14px;\n  line-height: 21px;\n  color: ${p => p.theme.gray300};\n`;\n\ntype PanelProps = {\n  selected?: boolean;\n};\n\nconst StyledPanel = styled(Panel)<PanelProps>`\n  margin-bottom: 0;\n  border: ${p => '1px solid ' + p.theme.border};\n  outline: ${p => (p.selected ? '2px solid' + p.theme.purple400 : undefined)};\n  box-sizing: border-box;\n  box-shadow: 0px 2px 1px rgba(0, 0, 0, 0.08);\n  cursor: pointer;\n`;\n\nexport default WidgetLibraryCard;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {\n  DEFAULT_WIDGETS,\n  WidgetTemplate,\n} from 'sentry/views/dashboardsV2/widgetLibrary/data';\nimport WidgetLibraryCard from 'sentry/views/dashboardsV2/widgetLibrary/widgetCard';\n\ntype Props = {\n  errored: boolean;\n  selectedWidgets: WidgetTemplate[];\n  setErrored: (errored: boolean) => void;\n  setSelectedWidgets: (widgets: WidgetTemplate[]) => void;\n};\n\nfunction DashboardWidgetLibraryTab({\n  selectedWidgets,\n  errored,\n  setSelectedWidgets,\n  setErrored,\n}: Props) {\n  return (\n    <React.Fragment>\n      {errored && !!!selectedWidgets.length ? (\n        <Alert type=\"error\">\n          {t(\n            'Please select at least one Widget from our Library. Alternatively, you can build a custom widget from scratch.'\n          )}\n        </Alert>\n      ) : null}\n      <WidgetLibraryGrid>\n        {DEFAULT_WIDGETS.map((widgetCard, index) => {\n          return (\n            <WidgetLibraryCard\n              data-test-id={`widget-library-card-${index}`}\n              key={widgetCard.title}\n              widget={widgetCard}\n              selectedWidgets={selectedWidgets}\n              setSelectedWidgets={setSelectedWidgets}\n              setErrored={setErrored}\n            />\n          );\n        })}\n      </WidgetLibraryGrid>\n    </React.Fragment>\n  );\n}\n\nconst WidgetLibraryGrid = styled('div')`\n  display: grid;\n  grid-template-columns: repeat(2, minmax(100px, 1fr));\n  grid-template-rows: repeat(2, max-content);\n  row-gap: ${space(1.5)};\n  column-gap: ${space(2)};\n  /* 700px is the max width of the modal */\n  @media (max-width: 700px) {\n    grid-template-columns: auto;\n  }\n`;\n\nexport default DashboardWidgetLibraryTab;\n","import * as React from 'react';\nimport {useState} from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport Tooltip from 'sentry/components/tooltip';\nimport {t, tct} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport {assignTempId} from 'sentry/views/dashboardsV2/layoutUtils';\nimport {DashboardDetails, MAX_WIDGETS, Widget} from 'sentry/views/dashboardsV2/types';\nimport {WidgetTemplate} from 'sentry/views/dashboardsV2/widgetLibrary/data';\n\nimport Button from '../../button';\nimport ButtonBar from '../../buttonBar';\n\nimport DashboardWidgetLibraryTab from './libraryTab';\nimport {TAB, TabsButtonBar} from './tabsButtonBar';\n\nexport type DashboardWidgetLibraryModalOptions = {\n  dashboard: DashboardDetails;\n  onAddWidget: (widgets: Widget[]) => void;\n  organization: Organization;\n  customWidget?: Widget;\n  initialSelectedWidgets?: WidgetTemplate[];\n};\n\ntype Props = ModalRenderProps & DashboardWidgetLibraryModalOptions;\n\nfunction DashboardWidgetLibraryModal({\n  Header,\n  Body,\n  Footer,\n  dashboard,\n  organization,\n  customWidget,\n  initialSelectedWidgets,\n  closeModal,\n  onAddWidget,\n}: Props) {\n  const [selectedWidgets, setSelectedWidgets] = useState<WidgetTemplate[]>(\n    initialSelectedWidgets ? initialSelectedWidgets : []\n  );\n  const [errored, setErrored] = useState(false);\n\n  function handleSubmit() {\n    onAddWidget([...dashboard.widgets, ...selectedWidgets.map(assignTempId)]);\n    closeModal();\n  }\n\n  const overLimit = dashboard.widgets.length + selectedWidgets.length > MAX_WIDGETS;\n\n  return (\n    <React.Fragment>\n      <Header closeButton>\n        <h4>{t('Add Widget(s)')}</h4>\n      </Header>\n      <Body>\n        <TabsButtonBar\n          activeTab={TAB.Library}\n          organization={organization}\n          dashboard={dashboard}\n          selectedWidgets={selectedWidgets}\n          customWidget={customWidget}\n          onAddWidget={onAddWidget}\n        />\n        <DashboardWidgetLibraryTab\n          selectedWidgets={selectedWidgets}\n          errored={errored}\n          setSelectedWidgets={setSelectedWidgets}\n          setErrored={setErrored}\n        />\n      </Body>\n      <Footer>\n        <ButtonBar gap={1}>\n          <Button\n            external\n            href=\"https://docs.sentry.io/product/dashboards/widget-library/\"\n          >\n            {t('Read the docs')}\n          </Button>\n          <Tooltip\n            title={tct(\n              'Exceeds max widgets ([maxWidgets]) per dashboard. Plese unselect [unselectWidgets] widget(s).',\n              {\n                maxWidgets: MAX_WIDGETS,\n                unselectWidgets:\n                  dashboard.widgets.length + selectedWidgets.length - MAX_WIDGETS,\n              }\n            )}\n            disabled={!!!overLimit}\n          >\n            <StyledButton\n              data-test-id=\"confirm-widgets\"\n              priority=\"primary\"\n              disabled={overLimit}\n              type=\"button\"\n              onClick={() => {\n                if (!!!selectedWidgets.length) {\n                  setErrored(true);\n                  return;\n                }\n                trackAdvancedAnalyticsEvent('dashboards_views.widget_library.add', {\n                  organization,\n                  num_widgets: selectedWidgets.length,\n                });\n                selectedWidgets.forEach(selectedWidget => {\n                  trackAdvancedAnalyticsEvent(\n                    'dashboards_views.widget_library.add_widget',\n                    {\n                      organization,\n                      title: selectedWidget.title,\n                    }\n                  );\n                });\n                handleSubmit();\n              }}\n            >\n              {selectedWidgets.length\n                ? tct('Add ([numWidgets])', {numWidgets: selectedWidgets.length})\n                : t('Add')}\n            </StyledButton>\n          </Tooltip>\n        </ButtonBar>\n      </Footer>\n    </React.Fragment>\n  );\n}\n\nexport const modalCss = css`\n  width: 100%;\n  max-width: 700px;\n  margin: 70px auto;\n`;\n\nconst StyledButton = styled(Button)`\n  min-width: 90px;\n`;\n\nexport default DashboardWidgetLibraryModal;\n"],"names":["DEFAULT_WIDGETS","id","undefined","title","t","description","displayType","DisplayType","widgetType","WidgetType","interval","queries","name","conditions","fields","orderby","WidgetLibraryCard","selectedWidgets","widget","setSelectedWidgets","dataTestId","selected","setSelected","useState","includes","StyledPanel","onClick","updatedWidgets","filter","selectedWidget","slice","concat","TitleContainer","size","getWidgetIcon","Title","Description","space","p","theme","gray500","gray300","Panel","border","purple400","DashboardWidgetLibraryTab","errored","setErrored","length","type","WidgetLibraryGrid","map","widgetCard","index","DashboardWidgetLibraryModal","Header","Body","Footer","dashboard","organization","customWidget","initialSelectedWidgets","closeModal","onAddWidget","overLimit","widgets","MAX_WIDGETS","closeButton","activeTab","TAB","gap","external","href","tct","maxWidgets","unselectWidgets","disabled","StyledButton","priority","trackAdvancedAnalyticsEvent","num_widgets","forEach","assignTempId","numWidgets","modalCss","Button"],"sourceRoot":""}