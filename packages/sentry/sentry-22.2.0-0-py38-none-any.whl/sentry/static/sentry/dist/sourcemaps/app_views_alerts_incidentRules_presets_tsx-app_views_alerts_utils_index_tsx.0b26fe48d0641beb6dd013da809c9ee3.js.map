{"version":3,"file":"chunks/app_views_alerts_incidentRules_presets_tsx-app_views_alerts_utils_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"6VAkBO,SAASA,EAAiBC,GAAuD,IAAjCC,EAAiC,uDAAZ,GAC1E,KAAKC,EAAAA,EAAAA,IAAQF,GACX,MAAO,IAET,QAAQG,EAAAA,EAAAA,IAAoBF,IAC1B,IAAK,UACL,IAAK,SACH,OAAOD,EAAMI,iBACf,IAAK,aACH,OAAOC,EAAAA,EAAAA,IAAiBL,EAAO,GACjC,IAAK,WACH,OAAOM,EAAAA,EAAAA,IAAYN,EAAQ,IAAM,GAAG,GACtC,QACE,OAAOA,EAAMO,YAQZ,SAASC,EACdR,EACAC,GAEQ,IADRQ,EACQ,wDACR,QAAQN,EAAAA,EAAAA,IAAoBF,IAC1B,IAAK,UACL,IAAK,SACH,OAAOQ,GAAeC,EAAAA,EAAAA,IAAwBV,GAASA,EAAMI,iBAC/D,IAAK,aACH,OAAOC,EAAAA,EAAAA,IAAiBL,EAAO,GACjC,IAAK,WACH,OAAOW,EAAaX,GACtB,QACE,OAAOA,EAAMO,YAWZ,SAASI,EAAaX,GAC3B,GAAc,IAAVA,EACF,MAAO,IAET,GAAIA,GAASY,EAAAA,GAAM,CACjB,MAAMC,GAASb,EAAQY,EAAAA,IAAME,QAAQ,GACrC,OAAOC,EAAAA,EAAAA,GAAE,OAAQF,GAEnB,GAAIb,GAASgB,EAAAA,GAAK,CAChB,MAAMH,GAASb,EAAQgB,EAAAA,IAAKF,QAAQ,GACpC,OAAOC,EAAAA,EAAAA,GAAE,MAAOF,GAElB,GAAIb,GAASiB,EAAAA,GAAM,CACjB,MAAMJ,GAASb,EAAQiB,EAAAA,IAAMH,QAAQ,GACrC,OAAOC,EAAAA,EAAAA,GAAE,OAAQF,GAEnB,GAAIb,GAASkB,EAAAA,GAAQ,CACnB,MAAML,GAASb,EAAQkB,EAAAA,IAAQJ,QAAQ,GACvC,OAAOC,EAAAA,EAAAA,GAAE,QAASF,GAEpB,GAAIb,GAASmB,EAAAA,GAAQ,CACnB,MAAMN,GAASb,EAAQmB,EAAAA,IAAQL,QAAQ,GACvC,OAAOC,EAAAA,EAAAA,GAAE,MAAOF,GAElB,MAAMA,EAAQb,EAAMc,QAAQ,GAC5B,OAAOC,EAAAA,EAAAA,GAAE,OAAQF,K,oaCxEZ,SAASO,EAAuBC,GAMpC,MACD,MAAM,QAACC,EAAD,SAAUC,EAAV,SAAoBC,EAApB,MAA8BC,EAA9B,iBAAqCC,GAAoBL,EAE/D,KAAKE,GAAaA,EAASI,QAAWH,GAAaC,GACjD,MAAO,GAGT,MAAMG,EAAoB,GAAEJ,EAASK,UAAUC,eACzC,MAACC,EAAD,IAAQC,IAAOC,EAAAA,EAAAA,IAAqBR,GAEpCS,EAA0B,CAC9BC,QAAIC,EACJC,KAAOb,GAAYA,EAASc,OAAU,GACtCC,QAAU,KAAGC,EAAAA,EAAAA,IAAkBhB,EAASK,UAAUY,aAClDC,MAAOlB,EAASK,UAAUY,UAAY,CAACjB,EAASK,UAAUY,gBAAaL,EACvEO,MAAK,UAAEnB,MAAAA,OAAF,EAAEA,EAAUU,qBAAZ,QAA6B,GAClCX,SAAUA,EACPqB,QAAO,QAAC,KAACC,GAAF,SAAYrB,EAASD,SAASuB,SAASD,MAC9CE,KAAI,QAAC,GAACZ,GAAF,SAAUa,OAAOb,MACxBc,QAAS,EACTC,OACE1B,EAASK,UAAUsB,UAAYC,EAAAA,GAAAA,OAC3B,CAAC,QAAS,UAAW,sBACrB,CAAC,cAAe5B,EAASK,UAAUY,WACzCV,MAAAA,EACAC,IAAAA,KACGN,GAGC2B,EAAeC,EAAAA,GAAAA,eAAyBpB,IACxC,MAACS,KAAUY,GAAYF,EAAaG,wBAAwBlC,GAElE,MAAO,CACLqB,MAAO,IAAIA,EAAOc,SAAU7B,MACzB2B,G,gECAA,MAAMG,EAA8B,CACzC,CACErB,MAAMtB,EAAAA,EAAAA,GAAE,eACR4C,MAAO,aACPC,aAAc,CAACR,EAAAA,GAAAA,QACfS,QAAS,UAITC,cAAeC,GAEjB,CACE1B,MAAMtB,EAAAA,EAAAA,GAAE,kBACR4C,MAAO,wBACPC,aAAc,CAACR,EAAAA,GAAAA,QACfS,QAAS,qBAITC,cAAeC,GAEjB,CACE1B,MAAMtB,EAAAA,EAAAA,GAAE,WACR4C,MAAO,wEACPC,aAAc,CAACR,EAAAA,GAAAA,cACfS,QAAS,yCAITC,cAAezC,GACb2C,EAA0B,CACxB3C,KAAAA,EACA4C,SAASlD,EAAAA,EAAAA,GAAE,6BAGjB,CACEsB,MAAMtB,EAAAA,EAAAA,GAAE,SACR4C,MAAO,oBACPC,aAAc,CAACR,EAAAA,GAAAA,cACfS,QAAS,aAITC,cAAezC,GACb2C,EAA0B,CACxB3C,KAAAA,EACA4C,SAASlD,EAAAA,EAAAA,GAAE,2BAGjB,CACEsB,MAAMtB,EAAAA,EAAAA,GAAE,qBACR4C,MAAO,aACPC,aAAc,CAACR,EAAAA,GAAAA,cACfS,QAAS,UAITC,cAAezC,GAAQ2C,EAA0B,CAAC3C,KAAAA,KAEpD,CACEgB,MAAMtB,EAAAA,EAAAA,GAAE,gBACR4C,MAAO,oBACPC,aAAc,CAACR,EAAAA,GAAAA,cACfS,QAAS,iBAITC,cAqFJ,YAAiF,YAArD,QAACxC,EAAD,SAAUE,EAAV,SAAoBD,EAApB,MAA8BE,GAAuB,EAC/E,IAAKD,IAAaC,EAChB,MAAO,CAACyC,GAAI,GAAIC,YAAYpD,EAAAA,EAAAA,GAAE,qBAGhC,MACMqD,EAAW,UADH,IAAIC,EAAAA,GAAJ,UAAkB7C,EAASU,qBAA3B,QAA4C,IAEvDoC,gBAAgB,sBADF,aAAG,EAEhBC,MAAK3B,IAAWA,EAAOE,SAAS,OAyBpC,MAAO,CACLoB,GATkB9C,EAAuB,CACzCE,QAAAA,EACAC,SAAAA,EACAC,SAAAA,EACAC,MAAAA,EACAC,sBAnBgBU,IAAhBgC,EAEI,CACElB,OAAQ,CAAC,qBAAsB,WAC/BX,QAAS,SACTiC,QAASC,EAAAA,GAAAA,MAGX,CACEvB,OAAQ,CAAC,cAAe,kBACxBX,QAAS,gBACTiC,QAASC,EAAAA,GAAAA,QAafN,YAAYpD,EAAAA,EAAAA,GAAE,oBACduB,WAAuBF,IAAhBgC,GAA4BrD,EAAAA,EAAAA,GAAE,oCAAiCqB,MA1G1E,SAAS4B,EAA0B3C,GAGrB,QACZ,MACEA,MAAM,QAACC,EAAD,SAAUC,EAAV,SAAoBC,EAApB,MAA8BC,GADhC,QAEJwC,GACE5C,EAEJ,IAAKG,IAAaC,EAChB,MAAO,CAACyC,GAAI,GAAIC,YAAYpD,EAAAA,EAAAA,GAAE,qBAGhC,MACMqD,EAAW,UADH,IAAIC,EAAAA,GAAJ,UAAkB7C,EAASU,qBAA3B,QAA4C,IAEvDoC,gBAAgB,sBADF,aAAG,EAEhBC,MAAK3B,IAAWA,EAAOE,SAAS,OAGpC,QAAoBV,IAAhBgC,EAA2B,CAC7B,MAAMM,GAASzC,EAAAA,EAAAA,IAAqBR,GAWpC,MAAO,CACLyC,IAViBS,EAAAA,EAAAA,IAAiC,CAClDrD,QAAAA,EACA8C,YAAAA,EACAQ,UAAWrD,EACRqB,QAAO,QAAC,KAACC,GAAF,SAAYrB,EAASD,SAASuB,SAASD,MAC9CE,KAAI,QAAC,GAACZ,GAAF,SAAUA,KACjBQ,MAAO,IAAI+B,KAKXP,YAAYpD,EAAAA,EAAAA,GAAE,4BACduB,MAAO8B,GAKX,MAAM1C,EAAmB,CACvBwB,OAAQ,IAAI,IAAI2B,IAAI,CAAC,cAAe,UAAWrD,EAASK,UAAUY,aAClEF,QAAS,SACTiC,QAASC,EAAAA,GAAAA,MAWX,MAAO,CACLP,GATkB9C,EAAuB,CACzCE,QAAAA,EACAC,SAAAA,EACAC,SAAAA,EACAC,MAAAA,EACAC,iBAAAA,IAKAyC,YAAYpD,EAAAA,EAAAA,GAAE,oBACduB,MAAO2B,GAyDJ,SAASF,EAAT,GAKsB,IALE,QAC7BzC,EAD6B,SAE7BC,EAF6B,SAG7BC,EAH6B,MAI7BC,GAC2B,EAC3B,IAAKD,EACH,MAAO,CACL2C,YAAYpD,EAAAA,EAAAA,GAAE,oBACdmD,GAAI,IAIR,MAAMxC,EAAmB,CACvB8C,QAASC,EAAAA,GAAAA,MAGX,MAAO,CACLN,YAAYpD,EAAAA,EAAAA,GAAE,oBACdmD,GAAI9C,EAAuB,CAACE,QAAAA,EAASC,SAAAA,EAAUC,SAAAA,EAAUC,MAAAA,EAAOC,iBAAAA,O,wMC5Q7D,IAAKoD,EAKAC,EAKA3B,EAMA4B,EAQAC,EAYAC,EA0DAC,EAUAC,EAYAC,G,SApHAP,GAAAA,EAAAA,EAAAA,MAAAA,GAAAA,QAAAA,EAAAA,EAAAA,MAAAA,GAAAA,Q,CAAAA,IAAAA,EAAAA,K,SAKAC,GAAAA,EAAAA,MAAAA,QAAAA,EAAAA,OAAAA,S,CAAAA,IAAAA,EAAAA,K,SAKA3B,GAAAA,EAAAA,OAAAA,SAAAA,EAAAA,aAAAA,eAAAA,EAAAA,SAAAA,W,CAAAA,IAAAA,EAAAA,K,SAMA4B,GAAAA,EAAAA,QAAAA,UAAAA,EAAAA,MAAAA,QAAAA,EAAAA,YAAAA,cAAAA,EAAAA,KAAAA,OAAAA,EAAAA,QAAAA,U,CAAAA,IAAAA,EAAAA,K,SAQAC,GAAAA,EAAAA,cAAAA,gBAAAA,EAAAA,QAAAA,UAAAA,EAAAA,MAAAA,QAAAA,EAAAA,YAAAA,c,CAAAA,IAAAA,EAAAA,K,SAYAC,GAAAA,EAAAA,oBAAAA,wEAAAA,EAAAA,iBAAAA,kE,CAAAA,IAAAA,EAAAA,K,SA0DAC,GAAAA,EAAAA,UAAAA,KAAAA,EAAAA,QAAAA,KAAAA,EAAAA,WAAAA,KAAAA,EAAAA,WAAAA,SAAAA,EAAAA,cAAAA,MAAAA,EAAAA,YAAAA,M,CAAAA,IAAAA,EAAAA,K,SAUAC,GAAAA,EAAAA,EAAAA,WAAAA,GAAAA,aAAAA,EAAAA,EAAAA,aAAAA,GAAAA,eAAAA,EAAAA,EAAAA,YAAAA,IAAAA,cAAAA,EAAAA,EAAAA,gBAAAA,IAAAA,kBAAAA,EAAAA,EAAAA,eAAAA,IAAAA,iBAAAA,EAAAA,EAAAA,SAAAA,IAAAA,WAAAA,EAAAA,EAAAA,UAAAA,KAAAA,YAAAA,EAAAA,EAAAA,WAAAA,KAAAA,aAAAA,EAAAA,EAAAA,QAAAA,MAAAA,U,CAAAA,IAAAA,EAAAA,K,SAYAC,GAAAA,EAAAA,MAAAA,QAAAA,EAAAA,MAAAA,QAAAA,EAAAA,UAAAA,YAAAA,EAAAA,QAAAA,UAAAA,EAAAA,WAAAA,a,CAAAA,IAAAA,EAAAA,KAQL,MAAMC,EAAc,CACzB,CAACD,EAAWE,QAAQxE,EAAAA,EAAAA,GAAE,SACtB,CAACsE,EAAWG,QAAQzE,EAAAA,EAAAA,GAAE,SACtB,CAACsE,EAAWI,YAAY1E,EAAAA,EAAAA,GAAE,aAC1B,CAACsE,EAAWK,UAAU3E,EAAAA,EAAAA,GAAE,YACxB,CAACsE,EAAWM,aAAa5E,EAAAA,EAAAA,GAAE,iBAGtB,IAAK6E,G,SAAAA,GAAAA,EAAAA,SAAAA,WAAAA,EAAAA,KAAAA,OAAAA,EAAAA,KAAAA,OAAAA,EAAAA,WAAAA,a,CAAAA,IAAAA,EAAAA,KAcL,MAAMC,EAAc,CACzB,CAACD,EAAWE,OAAO/E,EAAAA,EAAAA,GAAE,UACrB,CAAC6E,EAAWG,OAAOhF,EAAAA,EAAAA,GAAE,U,ikBCjIvB,MAAMiF,EAAmB,IAAIC,EAAAA,GAEtB,SAASC,EAAeC,EAAeC,GAC5C,OAAOJ,EAAiBK,eACrB,kBAAiBF,iBAAqBC,MAIpC,SAASE,EACdH,EACAtE,EACAE,EACAC,GAEA,OAAOgE,EAAiBK,eAAgB,kBAAiBF,eAAoB,CAC3ExD,MAAO,CACLd,UAAAA,EACA0E,kBAAkB,EAClBxE,MAAAA,EACAC,IAAAA,EACAwE,OAAQ,CAAC,aAAc,UAAW,0BAKjC,SAASC,EACdC,EACAP,EACAQ,GAEA,OAAOD,EAAIL,eAAgB,kBAAiBF,eAAmBQ,MAgC1D,SAASC,EAAwBpF,GAAoB,QAC1D,MAAMK,EAAYL,MAAAA,OAAH,EAAGA,EAAUK,UACtBY,EAAS,UAAGZ,MAAAA,OAAH,EAAGA,EAAWY,iBAAd,QAA2B,GACpCU,EAAO,UAAGtB,MAAAA,OAAH,EAAGA,EAAWsB,eAAd,QAAyBC,EAAAA,GAAAA,OAEtC,OAAOM,EAAAA,EAAAA,MACLmD,GAAKA,EAAEjD,aAAad,SAASK,IAAY0D,EAAElD,MAAMmD,KAAKrE,KAOnD,SAASR,EAAqBR,GAMnC,MAAO,CAACM,OALMgF,EAAAA,EAAAA,IAA+C,IAA9BtF,EAAMuF,WAAWC,KAAK,GAAG,IAKzCjF,KAJH+E,EAAAA,EAAAA,IACmD,IAA7DtF,EAAMuF,WAAWC,KAAKxF,EAAMuF,WAAWC,KAAKtF,OAAS,GAAG,KAMrD,SAASuF,EACdD,GAEA,OAAQA,EAAKE,eAAe,YAGvB,MAAMC,EAAqB,CAChC,CAAChE,EAAAA,GAAAA,SAAiBrC,EAAAA,EAAAA,GAAE,UACpB,CAACqC,EAAAA,GAAAA,eAAuBrC,EAAAA,EAAAA,GAAE,gBAC1B,CAACkE,EAAAA,GAAAA,eAA2B,yCAC5B,CAACA,EAAAA,GAAAA,OAAmB,mBACpB,CAACA,EAAAA,GAAAA,SAAqB,qBACtB,CAACA,EAAAA,GAAAA,aAAyB,0BAIfoC,EAAqC,CAChD,CAACpC,EAAAA,GAAAA,eAA2B,CAC1B9B,QAASC,EAAAA,GAAAA,OACTkE,WAAY,CAACtC,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,UAEjC,CAACC,EAAAA,GAAAA,OAAmB,CAClB9B,QAASC,EAAAA,GAAAA,OACTkE,WAAY,CAACtC,EAAAA,GAAAA,QAEf,CAACC,EAAAA,GAAAA,SAAqB,CACpB9B,QAASC,EAAAA,GAAAA,OACTkE,WAAY,CAACtC,EAAAA,GAAAA,UAEf,CAACC,EAAAA,GAAAA,aAAyB,CACxB9B,QAASC,EAAAA,GAAAA,aACTkE,WAAY,CAACtC,EAAAA,GAAAA,eAKV,SAASuC,EACdpE,EACAmE,GAGA,OAAInE,IAAYC,EAAAA,GAAAA,aACP6B,EAAAA,GAAAA,YAGJqC,EAIDA,EAAWxE,SAASkC,EAAAA,GAAAA,UAAuBsC,EAAWxE,SAASkC,EAAAA,GAAAA,OAC1DC,EAAAA,GAAAA,cAELqC,EAAWxE,SAASkC,EAAAA,GAAAA,SACfC,EAAAA,GAAAA,QAEFA,EAAAA,GAAAA,MATEA,EAAAA,GAAAA,MAkBJ,SAASuC,EACd7E,GAEA,IAAIgB,EAAQhB,EAAMgB,MAChB,uGAEF,OAAIA,EAGiB,kBADAA,EAAM8D,MAAM,EAAG,GAAGC,OAAOC,KAAK,KAExC,KAGF,CAACC,OAAQ3C,EAAAA,GAAAA,cAA0BtC,MAAOA,EAAMkF,QAAQlE,EAAM,GAAI,IAAImE,SAG/EnE,EAAQhB,EAAMgB,MAAM,kDAChBA,GAASsB,EAAAA,GAAWtB,EAAM,GAAGoE,eACxB,CACLH,OAAQ3C,EAAAA,GAAWtB,EAAM,GAAGoE,eAC5BpF,MAAOA,EAAMkF,QAAQlE,EAAM,GAAI,IAAImE,QAIhC,MAGF,SAASE,EAAmBvF,GACjC,OAAOwF,OAAOC,OAAOhD,EAAAA,IAAmBpC,SAASL,GAG5C,MAAM0F,EAA6B,CACxC,CAACjD,EAAAA,GAAAA,qBAAwCkD,EAAAA,GAAAA,SACzC,CAAClD,EAAAA,GAAAA,kBAAqCkD,EAAAA,GAAAA,OAGjC,SAASC,EAAmBrI,EAAeC,EAAoBwC,GACpE,OAAIuF,EAAmBvF,IACdvC,EAAAA,EAAAA,IAAQF,GAAU,GAAEsI,GAAAA,CAAMtI,EAAO,MAAQ,KAG3CQ,EAAAA,EAAAA,IAAmBR,EAAOC,GAG5B,SAASsI,EACdvI,EACAC,EACAwC,GAEA,OAAIuF,EAAmBvF,IACdvC,EAAAA,EAAAA,IAAQF,GAAU,GAAEA,KAAW,KAGjCD,EAAAA,EAAAA,IAAiBC,EAAOC,GAG1B,MAAMuI,EAA6B,KAEnC,SAASC,EAAsBhG,GAGpC,OAAOuF,EAAmBvF","sources":["webpack:///./app/utils/discover/charts.tsx","webpack:///./app/views/alerts/utils/getIncidentDiscoverUrl.tsx","webpack:///./app/views/alerts/incidentRules/presets.tsx","webpack:///./app/views/alerts/incidentRules/types.tsx","webpack:///./app/views/alerts/utils/index.tsx"],"sourcesContent":["import {t} from 'sentry/locale';\nimport {defined} from 'sentry/utils';\nimport {aggregateOutputType} from 'sentry/utils/discover/fields';\nimport {\n  DAY,\n  formatAbbreviatedNumber,\n  formatPercentage,\n  getDuration,\n  HOUR,\n  MINUTE,\n  SECOND,\n  WEEK,\n} from 'sentry/utils/formatters';\n\n/**\n * Formatter for chart tooltips that handle a variety of discover and metrics result values.\n * If the result is metric values, the value can be of type number or null\n */\nexport function tooltipFormatter(value: number | null, seriesName: string = ''): string {\n  if (!defined(value)) {\n    return '\\u2014';\n  }\n  switch (aggregateOutputType(seriesName)) {\n    case 'integer':\n    case 'number':\n      return value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 2);\n    case 'duration':\n      return getDuration(value / 1000, 2, true);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Formatter for chart axis labels that handle a variety of discover result values\n * This function is *very similar* to tooltipFormatter but outputs data with less precision.\n */\nexport function axisLabelFormatter(\n  value: number,\n  seriesName: string,\n  abbreviation: boolean = false\n): string {\n  switch (aggregateOutputType(seriesName)) {\n    case 'integer':\n    case 'number':\n      return abbreviation ? formatAbbreviatedNumber(value) : value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 0);\n    case 'duration':\n      return axisDuration(value);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Specialized duration formatting for axis labels.\n * In that context we are ok sacrificing accuracy for more\n * consistent sizing.\n *\n * @param value Number of milliseconds to format.\n */\nexport function axisDuration(value: number): string {\n  if (value === 0) {\n    return '0';\n  }\n  if (value >= WEEK) {\n    const label = (value / WEEK).toFixed(0);\n    return t('%swk', label);\n  }\n  if (value >= DAY) {\n    const label = (value / DAY).toFixed(0);\n    return t('%sd', label);\n  }\n  if (value >= HOUR) {\n    const label = (value / HOUR).toFixed(0);\n    return t('%shr', label);\n  }\n  if (value >= MINUTE) {\n    const label = (value / MINUTE).toFixed(0);\n    return t('%smin', label);\n  }\n  if (value >= SECOND) {\n    const label = (value / SECOND).toFixed(0);\n    return t('%ss', label);\n  }\n  const label = value.toFixed(0);\n  return t('%sms', label);\n}\n","import {NewQuery, Project} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {getAggregateAlias} from 'sentry/utils/discover/fields';\nimport {Dataset} from 'sentry/views/alerts/incidentRules/types';\nimport {Incident, IncidentStats} from 'sentry/views/alerts/types';\nimport {getStartEndFromStats} from 'sentry/views/alerts/utils';\n/**\n * Gets the URL for a discover view of the incident with the following default\n * parameters:\n *\n * - Ordered by the incident aggregate, descending\n * - yAxis maps to the aggregate\n * - The following fields are displayed:\n *   - For Error dataset alerts: [issue, count(), count_unique(user)]\n *   - For Transaction dataset alerts: [transaction, count()]\n * - Start and end are scoped to the same period as the alert rule\n */\nexport function getIncidentDiscoverUrl(opts: {\n  orgSlug: string;\n  projects: Project[];\n  extraQueryParams?: Partial<NewQuery>;\n  incident?: Incident;\n  stats?: IncidentStats;\n}) {\n  const {orgSlug, projects, incident, stats, extraQueryParams} = opts;\n\n  if (!projects || !projects.length || !incident || !stats) {\n    return '';\n  }\n\n  const timeWindowString = `${incident.alertRule.timeWindow}m`;\n  const {start, end} = getStartEndFromStats(stats);\n\n  const discoverQuery: NewQuery = {\n    id: undefined,\n    name: (incident && incident.title) || '',\n    orderby: `-${getAggregateAlias(incident.alertRule.aggregate)}`,\n    yAxis: incident.alertRule.aggregate ? [incident.alertRule.aggregate] : undefined,\n    query: incident?.discoverQuery ?? '',\n    projects: projects\n      .filter(({slug}) => incident.projects.includes(slug))\n      .map(({id}) => Number(id)),\n    version: 2,\n    fields:\n      incident.alertRule.dataset === Dataset.ERRORS\n        ? ['issue', 'count()', 'count_unique(user)']\n        : ['transaction', incident.alertRule.aggregate],\n    start,\n    end,\n    ...extraQueryParams,\n  };\n\n  const discoverView = EventView.fromSavedQuery(discoverQuery);\n  const {query, ...toObject} = discoverView.getResultsViewUrlTarget(orgSlug);\n\n  return {\n    query: {...query, interval: timeWindowString},\n    ...toObject,\n  };\n}\n","import Link from 'sentry/components/links/link';\nimport {t} from 'sentry/locale';\nimport {Project} from 'sentry/types';\nimport {DisplayModes} from 'sentry/utils/discover/types';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport {Incident, IncidentStats} from 'sentry/views/alerts/types';\nimport {getStartEndFromStats} from 'sentry/views/alerts/utils';\nimport {getIncidentDiscoverUrl} from 'sentry/views/alerts/utils/getIncidentDiscoverUrl';\nimport {transactionSummaryRouteWithQuery} from 'sentry/views/performance/transactionSummary/utils';\n\nimport {Dataset} from './types';\n\ntype PresetCta = {\n  /**\n   * The CTA text\n   */\n  buttonText: string;\n  /**\n   * The location to direct to upon clicking the CTA.\n   */\n  to: React.ComponentProps<typeof Link>['to'];\n  /**\n   * The tooltip title for the CTA button, may be empty.\n   */\n  title?: string;\n};\n\ntype PresetCtaOpts = {\n  orgSlug: string;\n  projects: Project[];\n  incident?: Incident;\n  stats?: IncidentStats;\n};\n\ntype Preset = {\n  /**\n   * The default aggregate to use when selecting this preset\n   */\n  default: string;\n  /**\n   * Generates the CTA component\n   */\n  makeCtaParams: (opts: PresetCtaOpts) => PresetCta;\n  /**\n   * The regex used to match aggregates to this preset.\n   */\n  match: RegExp;\n  /**\n   * The name of the preset\n   */\n  name: string;\n  /**\n   * The dataset that this preset applys to.\n   */\n  validDataset: Dataset[];\n};\n\nexport const PRESET_AGGREGATES: Preset[] = [\n  {\n    name: t('Error count'),\n    match: /^count\\(\\)/,\n    validDataset: [Dataset.ERRORS],\n    default: 'count()',\n    /**\n     * Simple \"Open in Discover\" button\n     */\n    makeCtaParams: makeDefaultCta,\n  },\n  {\n    name: t('Users affected'),\n    match: /^count_unique\\(user\\)/,\n    validDataset: [Dataset.ERRORS],\n    default: 'count_unique(user)',\n    /**\n     * Simple \"Open in Discover\" button\n     */\n    makeCtaParams: makeDefaultCta,\n  },\n  {\n    name: t('Latency'),\n    match: /^(p[0-9]{2,3}|percentile\\(transaction\\.duration,[^)]+\\)|avg\\([^)]+\\))/,\n    validDataset: [Dataset.TRANSACTIONS],\n    default: 'percentile(transaction.duration, 0.95)',\n    /**\n     * see: makeGenericTransactionCta\n     */\n    makeCtaParams: opts =>\n      makeGenericTransactionCta({\n        opts,\n        tooltip: t('Latency by Transaction'),\n      }),\n  },\n  {\n    name: t('Apdex'),\n    match: /^apdex\\([0-9.]+\\)/,\n    validDataset: [Dataset.TRANSACTIONS],\n    default: 'apdex(300)',\n    /**\n     * see: makeGenericTransactionCta\n     */\n    makeCtaParams: opts =>\n      makeGenericTransactionCta({\n        opts,\n        tooltip: t('Apdex by Transaction'),\n      }),\n  },\n  {\n    name: t('Transaction Count'),\n    match: /^count\\(\\)/,\n    validDataset: [Dataset.TRANSACTIONS],\n    default: 'count()',\n    /**\n     * see: makeGenericTransactionCta\n     */\n    makeCtaParams: opts => makeGenericTransactionCta({opts}),\n  },\n  {\n    name: t('Failure rate'),\n    match: /^failure_rate\\(\\)/,\n    validDataset: [Dataset.TRANSACTIONS],\n    default: 'failure_rate()',\n    /**\n     * See makeFailureRateCta\n     */\n    makeCtaParams: makeFailureRateCta,\n  },\n];\n\n/**\n * - CASE 1: If has a specific transaction filter\n *   - CTA is: \"View Transaction Summary\"\n *   - Tooltip is the transaction name\n *   - the same period as the alert graph (i.e. with alert start time in the middle)\n *\n * - CASE 2: If transaction is NOT filtered, or has a * filter:\n *   - \"Open in Discover\" button with optional tooltip which opens a discover view with...\n *      - fields {transaction, count(), <metric>} sorted by count()\n *      - top-5 activated\n */\nfunction makeGenericTransactionCta(opts: {\n  opts: PresetCtaOpts;\n  tooltip?: string;\n}): PresetCta {\n  const {\n    opts: {orgSlug, projects, incident, stats},\n    tooltip,\n  } = opts;\n\n  if (!incident || !stats) {\n    return {to: '', buttonText: t('Incident details')};\n  }\n\n  const query = new MutableSearch(incident.discoverQuery ?? '');\n  const transaction = query\n    .getFilterValues('transaction')\n    ?.find(filter => !filter.includes('*'));\n\n  // CASE 1\n  if (transaction !== undefined) {\n    const period = getStartEndFromStats(stats);\n\n    const summaryUrl = transactionSummaryRouteWithQuery({\n      orgSlug,\n      transaction,\n      projectID: projects\n        .filter(({slug}) => incident.projects.includes(slug))\n        .map(({id}) => id),\n      query: {...period},\n    });\n\n    return {\n      to: summaryUrl,\n      buttonText: t('View Transaction Summary'),\n      title: transaction,\n    };\n  }\n\n  // CASE 2\n  const extraQueryParams = {\n    fields: [...new Set(['transaction', 'count()', incident.alertRule.aggregate])],\n    orderby: '-count',\n    display: DisplayModes.TOP5,\n  };\n\n  const discoverUrl = getIncidentDiscoverUrl({\n    orgSlug,\n    projects,\n    incident,\n    stats,\n    extraQueryParams,\n  });\n\n  return {\n    to: discoverUrl,\n    buttonText: t('Open in Discover'),\n    title: tooltip,\n  };\n}\n\n/**\n * - CASE 1: Filtered to a specific transaction, \"Open in Discover\" with...\n *   - fields [transaction.status, count()] sorted by count(),\n *   - \"Top 5 period\" activated.\n *\n * - CASE 2: If filtered on multiple transactions, \"Open in Discover\" button\n *   with tooltip \"Failure rate by transaction\" which opens a discover view\n *   - fields [transaction, failure_rate()] sorted by failure_rate\n *   - top 5 activated\n */\nfunction makeFailureRateCta({orgSlug, incident, projects, stats}: PresetCtaOpts) {\n  if (!incident || !stats) {\n    return {to: '', buttonText: t('Incident details')};\n  }\n\n  const query = new MutableSearch(incident.discoverQuery ?? '');\n  const transaction = query\n    .getFilterValues('transaction')\n    ?.find(filter => !filter.includes('*'));\n\n  const extraQueryParams =\n    transaction !== undefined\n      ? // CASE 1\n        {\n          fields: ['transaction.status', 'count()'],\n          orderby: '-count',\n          display: DisplayModes.TOP5,\n        }\n      : // Case 2\n        {\n          fields: ['transaction', 'failure_rate()'],\n          orderby: '-failure_rate',\n          display: DisplayModes.TOP5,\n        };\n\n  const discoverUrl = getIncidentDiscoverUrl({\n    orgSlug,\n    projects,\n    incident,\n    stats,\n    extraQueryParams,\n  });\n\n  return {\n    to: discoverUrl,\n    buttonText: t('Open in Discover'),\n    title: transaction === undefined ? t('Failure rate by transaction') : undefined,\n  };\n}\n\n/**\n * Get the CTA used for alerts that do not have a preset\n */\nexport function makeDefaultCta({\n  orgSlug,\n  projects,\n  incident,\n  stats,\n}: PresetCtaOpts): PresetCta {\n  if (!incident) {\n    return {\n      buttonText: t('Open in Discover'),\n      to: '',\n    };\n  }\n\n  const extraQueryParams = {\n    display: DisplayModes.TOP5,\n  };\n\n  return {\n    buttonText: t('Open in Discover'),\n    to: getIncidentDiscoverUrl({orgSlug, projects, incident, stats, extraQueryParams}),\n  };\n}\n","import {t} from 'sentry/locale';\nimport {SchemaFormConfig} from 'sentry/views/organizationIntegrations/sentryAppExternalForm';\n\nexport enum AlertRuleThresholdType {\n  ABOVE,\n  BELOW,\n}\n\nexport enum AlertRuleComparisonType {\n  COUNT = 'count',\n  CHANGE = 'change',\n}\n\nexport enum Dataset {\n  ERRORS = 'events',\n  TRANSACTIONS = 'transactions',\n  SESSIONS = 'sessions',\n}\n\nexport enum EventTypes {\n  DEFAULT = 'default',\n  ERROR = 'error',\n  TRANSACTION = 'transaction',\n  USER = 'user',\n  SESSION = 'session',\n}\n\nexport enum Datasource {\n  ERROR_DEFAULT = 'error_default',\n  DEFAULT = 'default',\n  ERROR = 'error',\n  TRANSACTION = 'transaction',\n}\n\n/**\n * This is not a real aggregate as crash-free sessions/users can be only calculated on frontend by comparing the count of sessions broken down by status\n * It is here nevertheless to shoehorn sessions dataset into existing alerts codebase\n * This will most likely be revised as we introduce the metrics dataset\n */\nexport enum SessionsAggregate {\n  CRASH_FREE_SESSIONS = 'percentage(sessions_crashed, sessions) AS _crash_rate_alert_aggregate',\n  CRASH_FREE_USERS = 'percentage(users_crashed, users) AS _crash_rate_alert_aggregate',\n}\n\nexport type UnsavedTrigger = {\n  actions: Action[];\n  alertThreshold: number | '' | null;\n  label: string;\n  // UnsavedTrigger can be apart of an Unsaved Alert Rule that does not have an\n  // id yet\n  alertRuleId?: string;\n};\n\nexport type ThresholdControlValue = {\n  /**\n   * Resolve threshold is optional, so it can be null\n   */\n  threshold: number | '' | null;\n  thresholdType: AlertRuleThresholdType;\n};\n\ntype SavedTrigger = Omit<UnsavedTrigger, 'actions'> & {\n  actions: Action[];\n  dateCreated: string;\n  id: string;\n};\n\nexport type Trigger = Partial<SavedTrigger> & UnsavedTrigger;\n\nexport type UnsavedIncidentRule = {\n  aggregate: string;\n  dataset: Dataset;\n  environment: string | null;\n  projects: string[];\n  query: string;\n  resolveThreshold: number | '' | null;\n  thresholdPeriod: number | null;\n  thresholdType: AlertRuleThresholdType;\n  timeWindow: TimeWindow;\n  triggers: Trigger[];\n  comparisonDelta?: number | null;\n  eventTypes?: EventTypes[];\n  owner?: string | null;\n};\n\nexport type SavedIncidentRule = UnsavedIncidentRule & {\n  dateCreated: string;\n  dateModified: string;\n  id: string;\n  name: string;\n  status: number;\n  createdBy?: {email: string; id: number; name: string} | null;\n  originalAlertRuleId?: number | null;\n};\n\nexport type IncidentRule = Partial<SavedIncidentRule> & UnsavedIncidentRule;\n\nexport enum TimePeriod {\n  SIX_HOURS = '6h',\n  ONE_DAY = '1d',\n  THREE_DAYS = '3d',\n  // Seven days is actually 10080m but we have a max of 10000 events\n  SEVEN_DAYS = '10000m',\n  FOURTEEN_DAYS = '14d',\n  THIRTY_DAYS = '30d',\n}\n\nexport enum TimeWindow {\n  ONE_MINUTE = 1,\n  FIVE_MINUTES = 5,\n  TEN_MINUTES = 10,\n  FIFTEEN_MINUTES = 15,\n  THIRTY_MINUTES = 30,\n  ONE_HOUR = 60,\n  TWO_HOURS = 120,\n  FOUR_HOURS = 240,\n  ONE_DAY = 1440,\n}\n\nexport enum ActionType {\n  EMAIL = 'email',\n  SLACK = 'slack',\n  PAGERDUTY = 'pagerduty',\n  MSTEAMS = 'msteams',\n  SENTRY_APP = 'sentry_app',\n}\n\nexport const ActionLabel = {\n  [ActionType.EMAIL]: t('Email'),\n  [ActionType.SLACK]: t('Slack'),\n  [ActionType.PAGERDUTY]: t('Pagerduty'),\n  [ActionType.MSTEAMS]: t('MS Teams'),\n  [ActionType.SENTRY_APP]: t('Notification'),\n};\n\nexport enum TargetType {\n  // A direct reference, like an email address, Slack channel, or PagerDuty service\n  SPECIFIC = 'specific',\n\n  // A specific user. This could be used to grab the user's email address.\n  USER = 'user',\n\n  // A specific team. This could be used to send an email to everyone associated with a team.\n  TEAM = 'team',\n\n  // A Sentry App instead of any of the above.\n  SENTRY_APP = 'sentry_app',\n}\n\nexport const TargetLabel = {\n  [TargetType.USER]: t('Member'),\n  [TargetType.TEAM]: t('Team'),\n};\n\n/**\n * This is an available action template that is associated to a Trigger in a\n * Metric Alert Rule. They are defined by the available-actions API.\n */\nexport type MetricActionTemplate = {\n  /**\n   * See `TargetType`\n   */\n  allowedTargetTypes: TargetType[];\n\n  /**\n   * The integration type e.g. 'email'\n   */\n  type: ActionType;\n\n  /**\n   * Integration id for this `type`, should be passed to backend as `integrationId` when creating an action\n   */\n  integrationId?: number;\n\n  /**\n   * Name of the integration. This is a text field that differentiates integrations from the same provider from each other\n   */\n  integrationName?: string;\n\n  /**\n   * For some available actions, we pass in the list of available targets.\n   */\n  options?: Array<{label: string; value: any}>;\n\n  /**\n   * SentryApp id for this `type`, should be passed to backend as `sentryAppId` when creating an action.\n   */\n  sentryAppId?: number;\n\n  sentryAppInstallationUuid?: string;\n  /**\n   * Name of the SentryApp. Like `integrationName`, this differentiates SentryApps from each other.\n   */\n  sentryAppName?: string;\n\n  /**\n   * Sentry App Alert Rule UI Component settings\n   */\n  settings?: SchemaFormConfig;\n\n  /**\n   * If this is a `sentry_app` action, this is the Sentry App's status.\n   */\n  status?: 'unpublished' | 'published' | 'internal';\n};\n\n/**\n * This is the user's configured action\n */\nexport type Action = UnsavedAction & Partial<SavedActionFields>;\nexport type SavedAction = Omit<UnsavedAction, 'unsavedDateCreated' | 'unsavedId'> &\n  SavedActionFields;\n\ntype SavedActionFields = {\n  /**\n   * The id of the alert rule this action belongs to\n   */\n  alertRuleTriggerId: string;\n\n  /**\n   * date created\n   */\n  dateCreated: string;\n\n  /**\n   * A human readable description of the action generated by server\n   */\n  desc: string;\n\n  /**\n   * model id of the action\n   */\n  id: string;\n};\n\ntype UnsavedAction = {\n  /**\n   * An optional Slack channel or user id the user can input to avoid rate limiting issues.\n   */\n  inputChannelId: string | null;\n  /**\n   * For some available actions, we pass in the list of available targets.\n   */\n  options: Array<{label: string; value: any}> | null;\n  /**\n   * How to identify the target. Can be email, slack channel, pagerduty service,\n   * user_id, team_id, SentryApp id, etc\n   */\n  targetIdentifier: string | null;\n\n  targetType: TargetType | null;\n\n  type: ActionType;\n  /** Used to maintain order of unsaved actions */\n  unsavedDateCreated: string;\n  unsavedId: string;\n\n  /**\n   * The id of the integration, can be null (e.g. email) or undefined (server errors when posting w/ null value)\n   */\n  integrationId?: number | null;\n\n  /**\n   * The id of the SentryApp, can be null (e.g. email) or undefined (server errors when posting w/ null value)\n   */\n  sentryAppId?: number | null;\n\n  /**\n   * If this is a `sentry_app` action, this is the Sentry App's status.\n   */\n  status?: 'unpublished' | 'published' | 'internal';\n};\n","import round from 'lodash/round';\n\nimport {Client} from 'sentry/api';\nimport {t} from 'sentry/locale';\nimport {SessionField} from 'sentry/types';\nimport {IssueAlertRule} from 'sentry/types/alerts';\nimport {defined} from 'sentry/utils';\nimport {getUtcDateString} from 'sentry/utils/dates';\nimport {axisLabelFormatter, tooltipFormatter} from 'sentry/utils/discover/charts';\nimport {PRESET_AGGREGATES} from 'sentry/views/alerts/incidentRules/presets';\nimport {\n  Dataset,\n  Datasource,\n  EventTypes,\n  IncidentRule,\n  SavedIncidentRule,\n  SessionsAggregate,\n} from 'sentry/views/alerts/incidentRules/types';\n\nimport {Incident, IncidentStats, IncidentStatus} from '../types';\n\n// Use this api for requests that are getting cancelled\nconst uncancellableApi = new Client();\n\nexport function fetchAlertRule(orgId: string, ruleId: string): Promise<IncidentRule> {\n  return uncancellableApi.requestPromise(\n    `/organizations/${orgId}/alert-rules/${ruleId}/`\n  );\n}\n\nexport function fetchIncidentsForRule(\n  orgId: string,\n  alertRule: string,\n  start: string,\n  end: string\n): Promise<Incident[]> {\n  return uncancellableApi.requestPromise(`/organizations/${orgId}/incidents/`, {\n    query: {\n      alertRule,\n      includeSnapshots: true,\n      start,\n      end,\n      expand: ['activities', 'seen_by', 'original_alert_rule'],\n    },\n  });\n}\n\nexport function fetchIncident(\n  api: Client,\n  orgId: string,\n  alertId: string\n): Promise<Incident> {\n  return api.requestPromise(`/organizations/${orgId}/incidents/${alertId}/`);\n}\n\nexport function updateSubscription(\n  api: Client,\n  orgId: string,\n  alertId: string,\n  isSubscribed?: boolean\n): Promise<Incident> {\n  const method = isSubscribed ? 'POST' : 'DELETE';\n  return api.requestPromise(\n    `/organizations/${orgId}/incidents/${alertId}/subscriptions/`,\n    {\n      method,\n    }\n  );\n}\n\nexport function updateStatus(\n  api: Client,\n  orgId: string,\n  alertId: string,\n  status: IncidentStatus\n): Promise<Incident> {\n  return api.requestPromise(`/organizations/${orgId}/incidents/${alertId}/`, {\n    method: 'PUT',\n    data: {\n      status,\n    },\n  });\n}\n\nexport function getIncidentMetricPreset(incident: Incident) {\n  const alertRule = incident?.alertRule;\n  const aggregate = alertRule?.aggregate ?? '';\n  const dataset = alertRule?.dataset ?? Dataset.ERRORS;\n\n  return PRESET_AGGREGATES.find(\n    p => p.validDataset.includes(dataset) && p.match.test(aggregate)\n  );\n}\n\n/**\n * Gets start and end date query parameters from stats\n */\nexport function getStartEndFromStats(stats: IncidentStats) {\n  const start = getUtcDateString(stats.eventStats.data[0][0] * 1000);\n  const end = getUtcDateString(\n    stats.eventStats.data[stats.eventStats.data.length - 1][0] * 1000\n  );\n\n  return {start, end};\n}\n\nexport function isIssueAlert(\n  data: IssueAlertRule | SavedIncidentRule | IncidentRule\n): data is IssueAlertRule {\n  return !data.hasOwnProperty('triggers');\n}\n\nexport const DATA_SOURCE_LABELS = {\n  [Dataset.ERRORS]: t('Errors'),\n  [Dataset.TRANSACTIONS]: t('Transactions'),\n  [Datasource.ERROR_DEFAULT]: 'event.type:error OR event.type:default',\n  [Datasource.ERROR]: 'event.type:error',\n  [Datasource.DEFAULT]: 'event.type:default',\n  [Datasource.TRANSACTION]: 'event.type:transaction',\n};\n\n// Maps a datasource to the relevant dataset and event_types for the backend to use\nexport const DATA_SOURCE_TO_SET_AND_EVENT_TYPES = {\n  [Datasource.ERROR_DEFAULT]: {\n    dataset: Dataset.ERRORS,\n    eventTypes: [EventTypes.ERROR, EventTypes.DEFAULT],\n  },\n  [Datasource.ERROR]: {\n    dataset: Dataset.ERRORS,\n    eventTypes: [EventTypes.ERROR],\n  },\n  [Datasource.DEFAULT]: {\n    dataset: Dataset.ERRORS,\n    eventTypes: [EventTypes.DEFAULT],\n  },\n  [Datasource.TRANSACTION]: {\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: [EventTypes.TRANSACTION],\n  },\n};\n\n// Converts the given dataset and event types array to a datasource for the datasource dropdown\nexport function convertDatasetEventTypesToSource(\n  dataset: Dataset,\n  eventTypes: EventTypes[]\n) {\n  // transactions only has one datasource option regardless of event type\n  if (dataset === Dataset.TRANSACTIONS) {\n    return Datasource.TRANSACTION;\n  }\n  // if no event type was provided use the default datasource\n  if (!eventTypes) {\n    return Datasource.ERROR;\n  }\n\n  if (eventTypes.includes(EventTypes.DEFAULT) && eventTypes.includes(EventTypes.ERROR)) {\n    return Datasource.ERROR_DEFAULT;\n  }\n  if (eventTypes.includes(EventTypes.DEFAULT)) {\n    return Datasource.DEFAULT;\n  }\n  return Datasource.ERROR;\n}\n\n/**\n * Attempt to guess the data source of a discover query\n *\n * @returns An object containing the datasource and new query without the datasource.\n * Returns null on no datasource.\n */\nexport function getQueryDatasource(\n  query: string\n): {query: string; source: Datasource} | null {\n  let match = query.match(\n    /\\(?\\bevent\\.type:(error|default|transaction)\\)?\\WOR\\W\\(?event\\.type:(error|default|transaction)\\)?/i\n  );\n  if (match) {\n    // should be [error, default] or [default, error]\n    const eventTypes = match.slice(1, 3).sort().join(',');\n    if (eventTypes !== 'default,error') {\n      return null;\n    }\n\n    return {source: Datasource.ERROR_DEFAULT, query: query.replace(match[0], '').trim()};\n  }\n\n  match = query.match(/(^|\\s)event\\.type:(error|default|transaction)/i);\n  if (match && Datasource[match[2].toUpperCase()]) {\n    return {\n      source: Datasource[match[2].toUpperCase()],\n      query: query.replace(match[0], '').trim(),\n    };\n  }\n\n  return null;\n}\n\nexport function isSessionAggregate(aggregate: string) {\n  return Object.values(SessionsAggregate).includes(aggregate as SessionsAggregate);\n}\n\nexport const SESSION_AGGREGATE_TO_FIELD = {\n  [SessionsAggregate.CRASH_FREE_SESSIONS]: SessionField.SESSIONS,\n  [SessionsAggregate.CRASH_FREE_USERS]: SessionField.USERS,\n};\n\nexport function alertAxisFormatter(value: number, seriesName: string, aggregate: string) {\n  if (isSessionAggregate(aggregate)) {\n    return defined(value) ? `${round(value, 2)}%` : '\\u2015';\n  }\n\n  return axisLabelFormatter(value, seriesName);\n}\n\nexport function alertTooltipValueFormatter(\n  value: number,\n  seriesName: string,\n  aggregate: string\n) {\n  if (isSessionAggregate(aggregate)) {\n    return defined(value) ? `${value}%` : '\\u2015';\n  }\n\n  return tooltipFormatter(value, seriesName);\n}\n\nexport const ALERT_CHART_MIN_MAX_BUFFER = 1.03;\n\nexport function shouldScaleAlertChart(aggregate: string) {\n  // We want crash free rate charts to be scaled because they are usually too\n  // close to 100% and therefore too fine to see the spikes on 0%-100% scale.\n  return isSessionAggregate(aggregate);\n}\n"],"names":["tooltipFormatter","value","seriesName","defined","aggregateOutputType","toLocaleString","formatPercentage","getDuration","toString","axisLabelFormatter","abbreviation","formatAbbreviatedNumber","axisDuration","WEEK","label","toFixed","t","DAY","HOUR","MINUTE","SECOND","getIncidentDiscoverUrl","opts","orgSlug","projects","incident","stats","extraQueryParams","length","timeWindowString","alertRule","timeWindow","start","end","getStartEndFromStats","discoverQuery","id","undefined","name","title","orderby","getAggregateAlias","aggregate","yAxis","query","filter","slug","includes","map","Number","version","fields","dataset","Dataset","discoverView","EventView","toObject","getResultsViewUrlTarget","interval","PRESET_AGGREGATES","match","validDataset","default","makeCtaParams","makeDefaultCta","makeGenericTransactionCta","tooltip","to","buttonText","transaction","MutableSearch","getFilterValues","find","display","DisplayModes","period","transactionSummaryRouteWithQuery","projectID","Set","AlertRuleThresholdType","AlertRuleComparisonType","EventTypes","Datasource","SessionsAggregate","TimePeriod","TimeWindow","ActionType","ActionLabel","EMAIL","SLACK","PAGERDUTY","MSTEAMS","SENTRY_APP","TargetType","TargetLabel","USER","TEAM","uncancellableApi","Client","fetchAlertRule","orgId","ruleId","requestPromise","fetchIncidentsForRule","includeSnapshots","expand","fetchIncident","api","alertId","getIncidentMetricPreset","p","test","getUtcDateString","eventStats","data","isIssueAlert","hasOwnProperty","DATA_SOURCE_LABELS","DATA_SOURCE_TO_SET_AND_EVENT_TYPES","eventTypes","convertDatasetEventTypesToSource","getQueryDatasource","slice","sort","join","source","replace","trim","toUpperCase","isSessionAggregate","Object","values","SESSION_AGGREGATE_TO_FIELD","SessionField","alertAxisFormatter","round","alertTooltipValueFormatter","ALERT_CHART_MIN_MAX_BUFFER","shouldScaleAlertChart"],"sourceRoot":""}