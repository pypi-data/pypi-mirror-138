{"version":3,"file":"chunks/app_utils_performance_histogram_utils_tsx-app_views_performance_metricsSwitch_tsx-app_views_p-47deb1.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/events/searchBar.tsx","webpack:///./app/utils/measurements/measurements.tsx","webpack:///./app/utils/performance/histogram/utils.tsx","webpack:///./app/utils/withTags.tsx","webpack:///./app/views/performance/metricsSwitch.tsx","webpack:///./app/views/performance/transactionSummary/transactionEvents/utils.tsx","webpack:///./app/views/performance/trends/content.tsx","webpack:///./app/views/performance/trends/index.tsx"],"sourcesContent":["import * as React from 'react';\nimport {ClassNames} from '@emotion/react';\nimport assign from 'lodash/assign';\nimport flatten from 'lodash/flatten';\nimport isEqual from 'lodash/isEqual';\nimport memoize from 'lodash/memoize';\nimport omit from 'lodash/omit';\n\nimport {fetchTagValues} from 'sentry/actionCreators/tags';\nimport {Client} from 'sentry/api';\nimport SmartSearchBar from 'sentry/components/smartSearchBar';\nimport {NEGATION_OPERATOR, SEARCH_WILDCARD} from 'sentry/constants';\nimport {Organization, SavedSearchType, TagCollection} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {\n  Field,\n  FIELD_TAGS,\n  isAggregateField,\n  isEquation,\n  isMeasurement,\n  SEMVER_TAGS,\n  TRACING_FIELDS,\n} from 'sentry/utils/discover/fields';\nimport Measurements from 'sentry/utils/measurements/measurements';\nimport withApi from 'sentry/utils/withApi';\nimport withTags from 'sentry/utils/withTags';\n\nconst SEARCH_SPECIAL_CHARS_REGEXP = new RegExp(\n  `^${NEGATION_OPERATOR}|\\\\${SEARCH_WILDCARD}`,\n  'g'\n);\n\ntype SearchBarProps = Omit<React.ComponentProps<typeof SmartSearchBar>, 'tags'> & {\n  api: Client;\n  organization: Organization;\n  tags: TagCollection;\n  fields?: Readonly<Field[]>;\n  includeSessionTagsValues?: boolean;\n  omitTags?: string[];\n  projectIds?: number[] | Readonly<number[]>;\n};\n\nclass SearchBar extends React.PureComponent<SearchBarProps> {\n  componentDidMount() {\n    // Clear memoized data on mount to make tests more consistent.\n    this.getEventFieldValues.cache.clear?.();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!isEqual(this.props.projectIds, prevProps.projectIds)) {\n      // Clear memoized data when projects change.\n      this.getEventFieldValues.cache.clear?.();\n    }\n  }\n\n  /**\n   * Returns array of tag values that substring match `query`; invokes `callback`\n   * with data when ready\n   */\n  getEventFieldValues = memoize(\n    (tag, query, endpointParams): Promise<string[]> => {\n      const {api, organization, projectIds, includeSessionTagsValues} = this.props;\n      const projectIdStrings = (projectIds as Readonly<number>[])?.map(String);\n\n      if (isAggregateField(tag.key) || isMeasurement(tag.key)) {\n        // We can't really auto suggest values for aggregate fields\n        // or measurements, so we simply don't\n        return Promise.resolve([]);\n      }\n\n      return fetchTagValues(\n        api,\n        organization.slug,\n        tag.key,\n        query,\n        projectIdStrings,\n        endpointParams,\n\n        // allows searching for tags on transactions as well\n        true,\n\n        // allows searching for tags on sessions as well\n        includeSessionTagsValues\n      ).then(\n        results =>\n          flatten(results.filter(({name}) => defined(name)).map(({name}) => name)),\n        () => {\n          throw new Error('Unable to fetch event field values');\n        }\n      );\n    },\n    ({key}, query) => `${key}-${query}`\n  );\n\n  /**\n   * Prepare query string (e.g. strip special characters like negation operator)\n   */\n  prepareQuery = query => query.replace(SEARCH_SPECIAL_CHARS_REGEXP, '');\n\n  getTagList(\n    measurements: Parameters<\n      React.ComponentProps<typeof Measurements>['children']\n    >[0]['measurements']\n  ) {\n    const {fields, organization, tags, omitTags} = this.props;\n\n    const functionTags = fields\n      ? Object.fromEntries(\n          fields\n            .filter(\n              item =>\n                !Object.keys(FIELD_TAGS).includes(item.field) && !isEquation(item.field)\n            )\n            .map(item => [item.field, {key: item.field, name: item.field}])\n        )\n      : {};\n\n    const fieldTags = organization.features.includes('performance-view')\n      ? Object.assign({}, measurements, FIELD_TAGS, functionTags)\n      : omit(FIELD_TAGS, TRACING_FIELDS);\n\n    const combined = assign({}, tags, fieldTags, SEMVER_TAGS);\n    combined.has = {\n      key: 'has',\n      name: 'Has property',\n      values: Object.keys(combined),\n      predefined: true,\n    };\n\n    return omit(combined, omitTags ?? []);\n  }\n\n  render() {\n    const {organization} = this.props;\n    return (\n      <Measurements organization={organization}>\n        {({measurements}) => {\n          const tags = this.getTagList(measurements);\n          return (\n            <ClassNames>\n              {({css}) => (\n                <SmartSearchBar\n                  hasRecentSearches\n                  savedSearchType={SavedSearchType.EVENT}\n                  onGetTagValues={this.getEventFieldValues}\n                  supportedTags={tags}\n                  prepareQuery={this.prepareQuery}\n                  excludeEnvironment\n                  dropdownClassName={css`\n                    max-height: 300px;\n                    overflow-y: auto;\n                  `}\n                  {...this.props}\n                />\n              )}\n            </ClassNames>\n          );\n        }}\n      </Measurements>\n    );\n  }\n}\n\nexport default withApi(withTags(SearchBar));\n","import * as React from 'react';\n\nimport {Organization} from 'sentry/types';\nimport {MobileVital, WebVital} from 'sentry/utils/discover/fields';\nimport {\n  MOBILE_VITAL_DETAILS,\n  WEB_VITAL_DETAILS,\n} from 'sentry/utils/performance/vitals/constants';\nimport {Vital} from 'sentry/utils/performance/vitals/types';\n\ntype Measurement = {\n  key: string;\n  name: string;\n};\n\ntype MeasurementCollection = Record<string, Measurement>;\n\ntype VitalType = WebVital | MobileVital;\n\nfunction measurementsFromDetails(\n  details: Partial<Record<VitalType, Vital>>\n): MeasurementCollection {\n  return Object.fromEntries(\n    Object.entries(details).map(([key, value]) => {\n      const newValue: Measurement = {\n        name: value.name,\n        key,\n      };\n      return [key, newValue];\n    })\n  );\n}\n\nconst MOBILE_MEASUREMENTS = measurementsFromDetails(MOBILE_VITAL_DETAILS);\nconst WEB_MEASUREMENTS = measurementsFromDetails(WEB_VITAL_DETAILS);\n\ntype ChildrenProps = {\n  measurements: MeasurementCollection;\n};\n\ntype Props = {\n  children: (props: ChildrenProps) => React.ReactNode;\n  organization: Organization;\n};\n\nfunction Measurements({organization, children}: Props) {\n  const measurements = organization.features.includes('performance-mobile-vitals')\n    ? {...WEB_MEASUREMENTS, ...MOBILE_MEASUREMENTS}\n    : WEB_MEASUREMENTS;\n  return <React.Fragment>{children({measurements})}</React.Fragment>;\n}\n\nexport default Measurements;\n","import {ColumnType} from 'sentry/utils/discover/fields';\nimport {getDuration} from 'sentry/utils/formatters';\n\nimport {HistogramData} from './types';\n\nexport function getBucketWidth(data: HistogramData) {\n  // We can assume that all buckets are of equal width, use the first two\n  // buckets to get the width. The value of each histogram function indicates\n  // the beginning of the bucket.\n  return data.length >= 2 ? data[1].bin - data[0].bin : 0;\n}\n\nexport function computeBuckets(data: HistogramData) {\n  const width = getBucketWidth(data);\n\n  return data.map(item => {\n    const bucket = item.bin;\n    return {\n      start: bucket,\n      end: bucket + width,\n    };\n  });\n}\n\nexport function formatHistogramData(\n  data: HistogramData,\n  {\n    precision,\n    type,\n    additionalFieldsFn,\n  }: {\n    additionalFieldsFn?: any;\n    precision?: number;\n    type?: ColumnType;\n  } = {}\n) {\n  const formatter = (value: number): string => {\n    switch (type) {\n      case 'duration':\n        const decimalPlaces = precision ?? (value < 1000 ? 0 : 3);\n        return getDuration(value / 1000, decimalPlaces, true);\n      case 'number':\n        // This is trying to avoid some of potential rounding errors that cause bins\n        // have the same label, if the number of bins doesn't visually match what is\n        // expected, check that this rounding is correct. If this issue persists,\n        // consider formatting the bin as a string in the response\n        const factor = 10 ** (precision ?? 0);\n        return (Math.round((value + Number.EPSILON) * factor) / factor).toLocaleString();\n      default:\n        throw new Error(`Unable to format type: ${type}`);\n    }\n  };\n  return data.map(item => {\n    return {\n      value: item.count,\n      name: formatter(item.bin),\n      ...(additionalFieldsFn?.(item.bin) ?? {}),\n    };\n  });\n}\n","import * as React from 'react';\n\nimport TagStore from 'sentry/stores/tagStore';\nimport {TagCollection} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\n\ntype InjectedTagsProps = {\n  tags: TagCollection;\n};\n\ntype State = {\n  tags: TagCollection;\n};\n\n/**\n * HOC for getting *only* tags from the TagStore.\n */\nfunction withTags<P extends InjectedTagsProps>(WrappedComponent: React.ComponentType<P>) {\n  class WithTags extends React.Component<Omit<P, keyof InjectedTagsProps>, State> {\n    static displayName = `withTags(${getDisplayName(WrappedComponent)})`;\n\n    state: State = {\n      tags: TagStore.getAllTags(),\n    };\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n    unsubscribe = TagStore.listen(\n      (tags: TagCollection) => this.setState({tags}),\n      undefined\n    );\n\n    render() {\n      const {tags, ...props} = this.props as P;\n      return <WrappedComponent {...({tags: tags ?? this.state.tags, ...props} as P)} />;\n    }\n  }\n\n  return WithTags;\n}\n\nexport default withTags;\n","import {createContext, useContext, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport Feature from 'sentry/components/acl/feature';\nimport Switch from 'sentry/components/switchButton';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport localStorage from 'sentry/utils/localStorage';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nconst FEATURE_FLAG = 'metrics-performance-ui';\n\n/**\n * This is a temporary component used for debugging metrics data on performance pages.\n * Visible only to small amount of internal users.\n */\nfunction MetricsSwitch({onSwitch}: {onSwitch: () => void}) {\n  const organization = useOrganization();\n  const {isMetricsData, setIsMetricsData} = useMetricsSwitch();\n\n  function handleToggle() {\n    onSwitch();\n    setIsMetricsData(!isMetricsData);\n  }\n\n  return (\n    <Feature features={[FEATURE_FLAG]} organization={organization}>\n      <Label>\n        {t('Metrics Data')}\n        <Switch isActive={isMetricsData} toggle={handleToggle} size=\"lg\" />\n      </Label>\n    </Feature>\n  );\n}\n\nconst Label = styled('label')`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 0;\n  gap: ${space(1)};\n  font-weight: normal;\n`;\n\nconst MetricsSwitchContext = createContext({\n  isMetricsData: false,\n  setIsMetricsData: (_isMetricsData: boolean) => {},\n});\n\nfunction MetricsSwitchContextContainer({children}: {children: React.ReactNode}) {\n  const organization = useOrganization();\n  const localStorageKey = `metrics.performance:${organization.slug}`;\n  const [isMetricsData, setIsMetricsData] = useState(\n    localStorage.getItem(localStorageKey) === 'true'\n  );\n\n  function handleSetIsMetricsData(value: boolean) {\n    localStorage.setItem(localStorageKey, value.toString());\n    setIsMetricsData(value);\n  }\n\n  return (\n    <MetricsSwitchContext.Provider\n      value={{\n        isMetricsData: isMetricsData && organization.features.includes(FEATURE_FLAG),\n        setIsMetricsData: handleSetIsMetricsData,\n      }}\n    >\n      {children}\n    </MetricsSwitchContext.Provider>\n  );\n}\n\nfunction useMetricsSwitch() {\n  const contextValue = useContext(MetricsSwitchContext);\n\n  return contextValue;\n}\n\nexport {\n  MetricsSwitch,\n  MetricsSwitchContextContainer,\n  useMetricsSwitch,\n  MetricsSwitchContext,\n};\n","import {Location, Query} from 'history';\n\nimport {t} from 'sentry/locale';\nimport {decodeScalar} from 'sentry/utils/queryString';\n\nimport {filterToField, SpanOperationBreakdownFilter} from '../filter';\nimport {TransactionFilterOptions} from '../utils';\n\nexport enum EventsDisplayFilterName {\n  p50 = 'p50',\n  p75 = 'p75',\n  p95 = 'p95',\n  p99 = 'p99',\n  p100 = 'p100',\n}\n\nexport type EventsDisplayFilter = {\n  label: string;\n  name: EventsDisplayFilterName;\n  query?: string[][];\n  sort?: {field: string; kind: 'desc' | 'asc'};\n};\n\nexport type EventsFilterOptions = {\n  [name in EventsDisplayFilterName]: EventsDisplayFilter;\n};\n\nexport type EventsFilterPercentileValues = {\n  [name in Exclude<EventsDisplayFilterName, EventsDisplayFilterName.p100>]: number;\n};\n\nexport function getEventsFilterOptions(\n  spanOperationBreakdownFilter: SpanOperationBreakdownFilter,\n  percentileValues?: EventsFilterPercentileValues\n): EventsFilterOptions {\n  const {p99, p95, p75, p50} = percentileValues\n    ? percentileValues\n    : {p99: 0, p95: 0, p75: 0, p50: 0};\n  return {\n    [EventsDisplayFilterName.p50]: {\n      name: EventsDisplayFilterName.p50,\n      query: p50 ? [['transaction.duration', `<=${p50.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p50'),\n    },\n    [EventsDisplayFilterName.p75]: {\n      name: EventsDisplayFilterName.p75,\n      query: p75 ? [['transaction.duration', `<=${p75.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p75'),\n    },\n    [EventsDisplayFilterName.p95]: {\n      name: EventsDisplayFilterName.p95,\n      query: p95 ? [['transaction.duration', `<=${p95.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p95'),\n    },\n    [EventsDisplayFilterName.p99]: {\n      name: EventsDisplayFilterName.p99,\n      query: p99 ? [['transaction.duration', `<=${p99.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p99'),\n    },\n    [EventsDisplayFilterName.p100]: {\n      name: EventsDisplayFilterName.p100,\n      label: t('p100'),\n    },\n  };\n}\n\nexport function eventsRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n}: {\n  orgSlug: string;\n  query: Query;\n  transaction: string;\n  projectID?: string | string[];\n}) {\n  const pathname = `/organizations/${orgSlug}/performance/summary/events/`;\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n    },\n  };\n}\n\nfunction stringToFilter(option: string) {\n  if (\n    Object.values(EventsDisplayFilterName).includes(option as EventsDisplayFilterName)\n  ) {\n    return option as EventsDisplayFilterName;\n  }\n\n  return EventsDisplayFilterName.p100;\n}\nexport function decodeEventsDisplayFilterFromLocation(location: Location) {\n  return stringToFilter(\n    decodeScalar(location.query.showTransactions, EventsDisplayFilterName.p100)\n  );\n}\n\nexport function filterEventsDisplayToLocationQuery(\n  option: EventsDisplayFilterName,\n  spanOperationBreakdownFilter: SpanOperationBreakdownFilter\n) {\n  const eventsFilterOptions = getEventsFilterOptions(spanOperationBreakdownFilter);\n  const kind = eventsFilterOptions[option].sort?.kind;\n  const field = eventsFilterOptions[option].sort?.field;\n\n  const query: {showTransactions: string; sort?: string} = {\n    showTransactions: option,\n  };\n  if (kind && field) {\n    query.sort = `${kind === 'desc' ? '-' : ''}${field}`;\n  }\n  return query;\n}\n\nexport function mapShowTransactionToPercentile(\n  showTransaction\n): EventsDisplayFilterName | undefined {\n  switch (showTransaction) {\n    case TransactionFilterOptions.OUTLIER:\n      return EventsDisplayFilterName.p100;\n    case TransactionFilterOptions.SLOW:\n      return EventsDisplayFilterName.p95;\n    default:\n      return undefined;\n  }\n}\n","import * as React from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport Alert from 'sentry/components/alert';\nimport Breadcrumbs from 'sentry/components/breadcrumbs';\nimport DropdownControl, {DropdownItem} from 'sentry/components/dropdownControl';\nimport SearchBar from 'sentry/components/events/searchBar';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport {MAX_QUERY_LENGTH} from 'sentry/constants';\nimport {IconFlag} from 'sentry/icons/iconFlag';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, PageFilters, Project} from 'sentry/types';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {generateAggregateFields} from 'sentry/utils/discover/fields';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport withPageFilters from 'sentry/utils/withPageFilters';\n\nimport {getPerformanceLandingUrl, getTransactionSearchQuery} from '../utils';\n\nimport ChangedTransactions from './changedTransactions';\nimport {TrendChangeType, TrendFunctionField, TrendView} from './types';\nimport {\n  DEFAULT_MAX_DURATION,\n  DEFAULT_TRENDS_STATS_PERIOD,\n  getCurrentTrendFunction,\n  getCurrentTrendParameter,\n  getSelectedQueryKey,\n  modifyTrendsViewDefaultPeriod,\n  resetCursors,\n  TRENDS_FUNCTIONS,\n  TRENDS_PARAMETERS,\n} from './utils';\n\ntype Props = {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  selection: PageFilters;\n};\n\ntype State = {\n  error?: string;\n  previousTrendFunction?: TrendFunctionField;\n};\n\nclass TrendsContent extends React.Component<Props, State> {\n  state: State = {};\n\n  handleSearch = (searchQuery: string) => {\n    const {location} = this.props;\n\n    const cursors = resetCursors();\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        ...cursors,\n        query: String(searchQuery).trim() || undefined,\n      },\n    });\n  };\n\n  setError = (error: string | undefined) => {\n    this.setState({error});\n  };\n\n  handleTrendFunctionChange = (field: string) => {\n    const {organization, location} = this.props;\n\n    const offsets = {};\n\n    Object.values(TrendChangeType).forEach(trendChangeType => {\n      const queryKey = getSelectedQueryKey(trendChangeType);\n      offsets[queryKey] = undefined;\n    });\n\n    trackAnalyticsEvent({\n      eventKey: 'performance_views.trends.change_function',\n      eventName: 'Performance Views: Change Function',\n      organization_id: parseInt(organization.id, 10),\n      function_name: field,\n    });\n\n    this.setState({\n      previousTrendFunction: getCurrentTrendFunction(location).field,\n    });\n\n    const cursors = resetCursors();\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        ...offsets,\n        ...cursors,\n        trendFunction: field,\n      },\n    });\n  };\n\n  renderError() {\n    const {error} = this.state;\n\n    if (!error) {\n      return null;\n    }\n\n    return (\n      <Alert type=\"error\" icon={<IconFlag size=\"md\" />}>\n        {error}\n      </Alert>\n    );\n  }\n\n  handleParameterChange = (label: string) => {\n    const {organization, location} = this.props;\n    const cursors = resetCursors();\n\n    trackAnalyticsEvent({\n      eventKey: 'performance_views.trends.change_parameter',\n      eventName: 'Performance Views: Change Parameter',\n      organization_id: parseInt(organization.id, 10),\n      parameter_name: label,\n    });\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        ...cursors,\n        trendParameter: label,\n      },\n    });\n  };\n\n  getPerformanceLink() {\n    const {location} = this.props;\n\n    const newQuery = {\n      ...location.query,\n    };\n    const query = decodeScalar(location.query.query, '');\n    const conditions = new MutableSearch(query);\n\n    // This stops errors from occurring when navigating to other views since we are appending aggregates to the trends view\n    conditions.removeFilter('tpm()');\n    conditions.removeFilter('confidence()');\n    conditions.removeFilter('transaction.duration');\n    newQuery.query = conditions.formatString();\n    return {\n      pathname: getPerformanceLandingUrl(this.props.organization),\n      query: newQuery,\n    };\n  }\n\n  render() {\n    const {organization, eventView, location, projects} = this.props;\n    const {previousTrendFunction} = this.state;\n\n    const trendView = eventView.clone() as TrendView;\n    modifyTrendsViewDefaultPeriod(trendView, location);\n\n    const fields = generateAggregateFields(\n      organization,\n      [\n        {\n          field: 'absolute_correlation()',\n        },\n        {\n          field: 'trend_percentage()',\n        },\n        {\n          field: 'trend_difference()',\n        },\n        {\n          field: 'count_percentage()',\n        },\n        {\n          field: 'tpm()',\n        },\n        {\n          field: 'tps()',\n        },\n      ],\n      ['epm()', 'eps()']\n    );\n    const currentTrendFunction = getCurrentTrendFunction(location);\n    const currentTrendParameter = getCurrentTrendParameter(\n      location,\n      projects,\n      eventView.project\n    );\n    const query = getTransactionSearchQuery(location);\n\n    return (\n      <PageFiltersContainer\n        defaultSelection={{\n          datetime: {\n            start: null,\n            end: null,\n            utc: false,\n            period: DEFAULT_TRENDS_STATS_PERIOD,\n          },\n        }}\n      >\n        <Layout.Header>\n          <Layout.HeaderContent>\n            <Breadcrumbs\n              crumbs={[\n                {\n                  label: 'Performance',\n                  to: this.getPerformanceLink(),\n                },\n                {\n                  label: 'Trends',\n                },\n              ]}\n            />\n            <Layout.Title>{t('Trends')}</Layout.Title>\n          </Layout.HeaderContent>\n        </Layout.Header>\n        <Layout.Body>\n          <Layout.Main fullWidth>\n            <DefaultTrends location={location} eventView={eventView} projects={projects}>\n              <StyledSearchContainer>\n                <StyledSearchBar\n                  searchSource=\"trends\"\n                  organization={organization}\n                  projectIds={trendView.project}\n                  query={query}\n                  fields={fields}\n                  onSearch={this.handleSearch}\n                  maxQueryLength={MAX_QUERY_LENGTH}\n                />\n                <TrendsDropdown>\n                  <DropdownControl\n                    buttonProps={{prefix: t('Percentile')}}\n                    label={currentTrendFunction.label}\n                  >\n                    {TRENDS_FUNCTIONS.map(({label, field}) => (\n                      <DropdownItem\n                        key={field}\n                        onSelect={this.handleTrendFunctionChange}\n                        eventKey={field}\n                        data-test-id={field}\n                        isActive={field === currentTrendFunction.field}\n                      >\n                        {label}\n                      </DropdownItem>\n                    ))}\n                  </DropdownControl>\n                </TrendsDropdown>\n                <TrendsDropdown>\n                  <DropdownControl\n                    buttonProps={{prefix: t('Parameter')}}\n                    label={currentTrendParameter.label}\n                  >\n                    {TRENDS_PARAMETERS.map(({label}) => (\n                      <DropdownItem\n                        key={label}\n                        onSelect={this.handleParameterChange}\n                        eventKey={label}\n                        data-test-id={label}\n                        isActive={label === currentTrendParameter.label}\n                      >\n                        {label}\n                      </DropdownItem>\n                    ))}\n                  </DropdownControl>\n                </TrendsDropdown>\n              </StyledSearchContainer>\n              <TrendsLayoutContainer>\n                <ChangedTransactions\n                  trendChangeType={TrendChangeType.IMPROVED}\n                  previousTrendFunction={previousTrendFunction}\n                  trendView={trendView}\n                  location={location}\n                  setError={this.setError}\n                />\n                <ChangedTransactions\n                  trendChangeType={TrendChangeType.REGRESSION}\n                  previousTrendFunction={previousTrendFunction}\n                  trendView={trendView}\n                  location={location}\n                  setError={this.setError}\n                />\n              </TrendsLayoutContainer>\n            </DefaultTrends>\n          </Layout.Main>\n        </Layout.Body>\n      </PageFiltersContainer>\n    );\n  }\n}\n\ntype DefaultTrendsProps = {\n  children: React.ReactNode[];\n  eventView: EventView;\n  location: Location;\n  projects: Project[];\n};\n\nclass DefaultTrends extends React.Component<DefaultTrendsProps> {\n  hasPushedDefaults = false;\n\n  render() {\n    const {children, location, eventView, projects} = this.props;\n\n    const queryString = decodeScalar(location.query.query);\n    const trendParameter = getCurrentTrendParameter(\n      location,\n      projects,\n      eventView.project\n    );\n    const conditions = new MutableSearch(queryString || '');\n\n    if (queryString || this.hasPushedDefaults) {\n      this.hasPushedDefaults = true;\n      return <React.Fragment>{children}</React.Fragment>;\n    }\n    this.hasPushedDefaults = true;\n    conditions.setFilterValues('tpm()', ['>0.01']);\n    conditions.setFilterValues(trendParameter.column, ['>0', `<${DEFAULT_MAX_DURATION}`]);\n\n    const query = conditions.formatString();\n    eventView.query = query;\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        cursor: undefined,\n        query: String(query).trim() || undefined,\n      },\n    });\n    return null;\n  }\n}\n\nconst StyledSearchBar = styled(SearchBar)`\n  flex-grow: 1;\n  margin-bottom: ${space(2)};\n`;\n\nconst TrendsDropdown = styled('div')`\n  margin-left: ${space(1)};\n  flex-grow: 0;\n`;\n\nconst StyledSearchContainer = styled('div')`\n  display: flex;\n`;\n\nconst TrendsLayoutContainer = styled('div')`\n  display: grid;\n  gap: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints[1]}) {\n    grid-template-columns: repeat(2, minmax(0, 1fr));\n    align-items: stretch;\n  }\n`;\n\nexport default withPageFilters(TrendsContent);\n","import {Component} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {Client} from 'sentry/api';\nimport NoProjectMessage from 'sentry/components/noProjectMessage';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport {PageContent} from 'sentry/styles/organization';\nimport {Organization, PageFilters, Project} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withPageFilters from 'sentry/utils/withPageFilters';\nimport withProjects from 'sentry/utils/withProjects';\n\nimport {generatePerformanceEventView} from '../data';\n\nimport TrendsContent from './content';\n\ntype Props = RouteComponentProps<{}, {}> & {\n  api: Client;\n  organization: Organization;\n  projects: Project[];\n  selection: PageFilters;\n};\n\ntype State = {\n  eventView: EventView;\n  error?: string;\n};\n\nclass TrendsSummary extends Component<Props, State> {\n  static getDerivedStateFromProps(nextProps: Readonly<Props>, prevState: State): State {\n    return {\n      ...prevState,\n      eventView: generatePerformanceEventView(\n        nextProps.location,\n        nextProps.organization,\n        nextProps.projects,\n        {\n          isTrends: true,\n        }\n      ),\n    };\n  }\n\n  state: State = {\n    eventView: generatePerformanceEventView(\n      this.props.location,\n      this.props.organization,\n      this.props.projects,\n      {\n        isTrends: true,\n      }\n    ),\n    error: undefined,\n  };\n\n  getDocumentTitle(): string {\n    return [t('Trends'), t('Performance')].join(' - ');\n  }\n\n  setError = (error: string | undefined) => {\n    this.setState({error});\n  };\n\n  renderContent() {\n    const {organization, location, projects} = this.props;\n    const {eventView} = this.state;\n    return (\n      <TrendsContent\n        organization={organization}\n        location={location}\n        eventView={eventView}\n        projects={projects}\n      />\n    );\n  }\n\n  render() {\n    const {organization} = this.props;\n\n    return (\n      <SentryDocumentTitle title={this.getDocumentTitle()} orgSlug={organization.slug}>\n        <StyledPageContent>\n          <NoProjectMessage organization={organization}>\n            {this.renderContent()}\n          </NoProjectMessage>\n        </StyledPageContent>\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nexport default withOrganization(withProjects(withPageFilters(withApi(TrendsSummary))));\nconst StyledPageContent = styled(PageContent)`\n  padding: 0;\n`;\n"],"names":["SEARCH_SPECIAL_CHARS_REGEXP","RegExp","NEGATION_OPERATOR","SEARCH_WILDCARD","SearchBar","React","memoize","tag","query","endpointParams","api","organization","projectIds","includeSessionTagsValues","this","props","projectIdStrings","map","String","isAggregateField","key","isMeasurement","Promise","resolve","fetchTagValues","slug","then","results","flatten","filter","name","defined","Error","replace","componentDidMount","getEventFieldValues","cache","clear","componentDidUpdate","prevProps","isEqual","getTagList","measurements","fields","tags","omitTags","functionTags","Object","fromEntries","item","keys","FIELD_TAGS","includes","field","isEquation","fieldTags","features","assign","omit","TRACING_FIELDS","combined","SEMVER_TAGS","has","values","predefined","render","css","hasRecentSearches","savedSearchType","SavedSearchType","onGetTagValues","supportedTags","prepareQuery","excludeEnvironment","dropdownClassName","withApi","withTags","measurementsFromDetails","details","entries","value","MOBILE_MEASUREMENTS","MOBILE_VITAL_DETAILS","WEB_MEASUREMENTS","WEB_VITAL_DETAILS","Measurements","children","getBucketWidth","data","length","bin","computeBuckets","width","bucket","start","end","formatHistogramData","precision","type","additionalFieldsFn","formatter","decimalPlaces","getDuration","factor","Math","round","Number","EPSILON","toLocaleString","count","WrappedComponent","WithTags","TagStore","setState","undefined","componentWillUnmount","unsubscribe","state","getDisplayName","FEATURE_FLAG","MetricsSwitch","onSwitch","useOrganization","isMetricsData","setIsMetricsData","useMetricsSwitch","Label","t","isActive","toggle","size","space","MetricsSwitchContext","createContext","_isMetricsData","MetricsSwitchContextContainer","localStorageKey","useState","localStorage","Provider","toString","useContext","EventsDisplayFilterName","getEventsFilterOptions","spanOperationBreakdownFilter","percentileValues","p99","p95","p75","p50","toFixed","sort","kind","filterToField","label","p100","eventsRouteWithQuery","orgSlug","transaction","projectID","pathname","project","environment","statsPeriod","decodeEventsDisplayFilterFromLocation","location","option","decodeScalar","showTransactions","filterEventsDisplayToLocationQuery","eventsFilterOptions","mapShowTransactionToPercentile","showTransaction","TransactionFilterOptions","TrendsContent","searchQuery","cursors","resetCursors","browserHistory","trim","error","offsets","TrendChangeType","forEach","trendChangeType","queryKey","getSelectedQueryKey","trackAnalyticsEvent","eventKey","eventName","organization_id","parseInt","id","function_name","previousTrendFunction","getCurrentTrendFunction","trendFunction","parameter_name","trendParameter","renderError","icon","getPerformanceLink","newQuery","conditions","MutableSearch","removeFilter","formatString","getPerformanceLandingUrl","eventView","projects","trendView","clone","modifyTrendsViewDefaultPeriod","generateAggregateFields","currentTrendFunction","currentTrendParameter","getCurrentTrendParameter","getTransactionSearchQuery","defaultSelection","datetime","utc","period","DEFAULT_TRENDS_STATS_PERIOD","crumbs","to","fullWidth","DefaultTrends","StyledSearchContainer","StyledSearchBar","searchSource","onSearch","handleSearch","maxQueryLength","MAX_QUERY_LENGTH","TrendsDropdown","buttonProps","prefix","TRENDS_FUNCTIONS","onSelect","handleTrendFunctionChange","TRENDS_PARAMETERS","handleParameterChange","TrendsLayoutContainer","setError","queryString","hasPushedDefaults","setFilterValues","column","DEFAULT_MAX_DURATION","cursor","p","theme","breakpoints","withPageFilters","TrendsSummary","Component","generatePerformanceEventView","isTrends","nextProps","prevState","getDocumentTitle","join","renderContent","title","StyledPageContent","withOrganization","withProjects","PageContent"],"sourceRoot":""}