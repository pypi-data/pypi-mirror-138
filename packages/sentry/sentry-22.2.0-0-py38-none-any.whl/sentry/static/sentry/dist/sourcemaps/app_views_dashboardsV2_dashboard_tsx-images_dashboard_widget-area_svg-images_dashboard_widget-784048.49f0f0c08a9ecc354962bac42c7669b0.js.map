{"version":3,"file":"chunks/app_views_dashboardsV2_dashboard_tsx-images_dashboard_widget-area_svg-images_dashboard_widget-784048.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/dashboardsV2/dashboard.tsx","webpack:///./app/views/dashboardsV2/types.tsx"],"sourcesContent":["import 'react-grid-layout/css/styles.css';\nimport 'react-resizable/css/styles.css';\n\nimport {Component} from 'react';\nimport {Layouts, Responsive, WidthProvider} from 'react-grid-layout';\nimport {forceCheck} from 'react-lazyload';\nimport {InjectedRouter} from 'react-router';\nimport {closestCenter, DndContext} from '@dnd-kit/core';\nimport {arrayMove, rectSortingStrategy, SortableContext} from '@dnd-kit/sortable';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\nimport cloneDeep from 'lodash/cloneDeep';\nimport debounce from 'lodash/debounce';\nimport isEqual from 'lodash/isEqual';\n\nimport {validateWidget} from 'sentry/actionCreators/dashboards';\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {fetchOrgMembers} from 'sentry/actionCreators/members';\nimport {openAddDashboardWidgetModal} from 'sentry/actionCreators/modal';\nimport {loadOrganizationTags} from 'sentry/actionCreators/tags';\nimport {Client} from 'sentry/api';\nimport {IconResize} from 'sentry/icons';\nimport space from 'sentry/styles/space';\nimport {Organization, PageFilters} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport theme from 'sentry/utils/theme';\nimport withApi from 'sentry/utils/withApi';\nimport withPageFilters from 'sentry/utils/withPageFilters';\n\nimport AddWidget, {ADD_WIDGET_BUTTON_DRAG_ID} from './addWidget';\nimport {\n  assignDefaultLayout,\n  assignTempId,\n  calculateColumnDepths,\n  constructGridItemKey,\n  DEFAULT_WIDGET_WIDTH,\n  enforceWidgetHeightValues,\n  generateWidgetId,\n  generateWidgetsAfterCompaction,\n  getDashboardLayout,\n  getDefaultWidgetHeight,\n  getMobileLayout,\n  getNextAvailablePosition,\n  pickDefinedStoreKeys,\n  Position,\n} from './layoutUtils';\nimport SortableWidget from './sortableWidget';\nimport {DashboardDetails, DashboardWidgetSource, Widget, WidgetType} from './types';\n\nexport const DRAG_HANDLE_CLASS = 'widget-drag';\nconst DESKTOP = 'desktop';\nconst MOBILE = 'mobile';\nexport const NUM_DESKTOP_COLS = 6;\nconst NUM_MOBILE_COLS = 2;\nconst ROW_HEIGHT = 120;\nconst WIDGET_MARGINS: [number, number] = [16, 16];\nconst BOTTOM_MOBILE_VIEW_POSITION = {\n  x: 0,\n  y: Number.MAX_SAFE_INTEGER,\n};\nconst MOBILE_BREAKPOINT = parseInt(theme.breakpoints[0], 10);\nconst BREAKPOINTS = {[MOBILE]: 0, [DESKTOP]: MOBILE_BREAKPOINT};\nconst COLUMNS = {[MOBILE]: NUM_MOBILE_COLS, [DESKTOP]: NUM_DESKTOP_COLS};\n\ntype Props = {\n  api: Client;\n  dashboard: DashboardDetails;\n  handleAddCustomWidget: (widget: Widget) => void;\n  handleUpdateWidgetList: (widgets: Widget[]) => void;\n  isEditing: boolean;\n  location: Location;\n  onSetWidgetToBeUpdated: (widget: Widget) => void;\n  /**\n   * Fired when widgets are added/removed/sorted.\n   */\n  onUpdate: (widgets: Widget[]) => void;\n  organization: Organization;\n  router: InjectedRouter;\n  selection: PageFilters;\n  widgetLimitReached: boolean;\n  isPreview?: boolean;\n  newWidget?: Widget;\n  paramDashboardId?: string;\n  paramTemplateId?: string;\n};\n\ntype State = {\n  isMobile: boolean;\n  layouts: Layouts;\n  windowWidth: number;\n};\n\nclass Dashboard extends Component<Props, State> {\n  constructor(props) {\n    super(props);\n    const {dashboard, organization} = props;\n    const isUsingGrid = organization.features.includes('dashboard-grid-layout');\n    const desktopLayout = getDashboardLayout(dashboard.widgets);\n    this.state = {\n      isMobile: false,\n      layouts: {\n        [DESKTOP]: isUsingGrid ? desktopLayout : [],\n        [MOBILE]: isUsingGrid ? getMobileLayout(desktopLayout, dashboard.widgets) : [],\n      },\n      windowWidth: window.innerWidth,\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.organization.features.includes('dashboard-grid-layout')) {\n      if (state.isMobile) {\n        // Don't need to recalculate any layout state from props in the mobile view\n        // because we want to force different positions (i.e. new widgets added\n        // at the bottom)\n        return null;\n      }\n\n      // If the user clicks \"Cancel\" and the dashboard resets,\n      // recalculate the layout to revert to the unmodified state\n      const dashboardLayout = getDashboardLayout(props.dashboard.widgets);\n      if (\n        !isEqual(\n          dashboardLayout.map(pickDefinedStoreKeys),\n          state.layouts[DESKTOP].map(pickDefinedStoreKeys)\n        )\n      ) {\n        return {\n          ...state,\n          layouts: {\n            [DESKTOP]: dashboardLayout,\n            [MOBILE]: getMobileLayout(dashboardLayout, props.dashboard.widgets),\n          },\n        };\n      }\n    }\n    return null;\n  }\n\n  async componentDidMount() {\n    const {isEditing, organization} = this.props;\n    if (organization.features.includes('dashboard-grid-layout')) {\n      window.addEventListener('resize', this.debouncedHandleResize);\n    }\n    // Load organization tags when in edit mode.\n    if (isEditing) {\n      this.fetchTags();\n    }\n    this.addNewWidget();\n\n    // Get member list data for issue widgets\n    this.fetchMemberList();\n  }\n\n  async componentDidUpdate(prevProps: Props) {\n    const {isEditing, newWidget} = this.props;\n\n    // Load organization tags when going into edit mode.\n    // We use tags on the add widget modal.\n    if (prevProps.isEditing !== isEditing && isEditing) {\n      this.fetchTags();\n    }\n    if (newWidget !== prevProps.newWidget) {\n      this.addNewWidget();\n    }\n    if (!isEqual(prevProps.selection.projects, this.props.selection.projects)) {\n      this.fetchMemberList();\n    }\n  }\n\n  componentWillUnmount() {\n    const {organization} = this.props;\n    if (organization.features.includes('dashboard-grid-layout')) {\n      window.removeEventListener('resize', this.debouncedHandleResize);\n    }\n  }\n\n  debouncedHandleResize = debounce(() => {\n    this.setState({\n      windowWidth: window.innerWidth,\n    });\n  }, 250);\n\n  fetchMemberList() {\n    const {api, selection} = this.props;\n    // Stores MemberList in MemberListStore for use in modals and sets state for use is child components\n    fetchOrgMembers(\n      api,\n      this.props.organization.slug,\n      selection.projects?.map(projectId => String(projectId))\n    );\n  }\n\n  async addNewWidget() {\n    const {api, organization, newWidget, handleAddCustomWidget} = this.props;\n    if (newWidget) {\n      try {\n        await validateWidget(api, organization.slug, newWidget);\n        handleAddCustomWidget(newWidget);\n      } catch (error) {\n        // Don't do anything, widget isn't valid\n        addErrorMessage(error);\n      }\n    }\n  }\n\n  fetchTags() {\n    const {api, organization, selection} = this.props;\n    loadOrganizationTags(api, organization.slug, selection);\n  }\n\n  handleStartAdd = () => {\n    const {\n      organization,\n      dashboard,\n      selection,\n      handleUpdateWidgetList,\n      handleAddCustomWidget,\n    } = this.props;\n    trackAdvancedAnalyticsEvent('dashboards_views.add_widget_modal.opened', {\n      organization,\n    });\n\n    if (organization.features.includes('widget-library')) {\n      trackAdvancedAnalyticsEvent('dashboards_views.widget_library.opened', {\n        organization,\n      });\n      openAddDashboardWidgetModal({\n        organization,\n        dashboard,\n        selection,\n        onAddWidget: handleAddCustomWidget,\n        onAddLibraryWidget: (widgets: Widget[]) => handleUpdateWidgetList(widgets),\n        source: DashboardWidgetSource.LIBRARY,\n      });\n      return;\n    }\n    openAddDashboardWidgetModal({\n      organization,\n      dashboard,\n      selection,\n      onAddWidget: handleAddCustomWidget,\n      source: DashboardWidgetSource.DASHBOARDS,\n    });\n  };\n\n  handleOpenWidgetBuilder = () => {\n    const {router, location, paramDashboardId, organization} = this.props;\n\n    if (paramDashboardId) {\n      router.push({\n        pathname: `/organizations/${organization.slug}/dashboard/${paramDashboardId}/widget/new/`,\n        query: {\n          ...location.query,\n          source: DashboardWidgetSource.DASHBOARDS,\n        },\n      });\n      return;\n    }\n\n    router.push({\n      pathname: `/organizations/${organization.slug}/dashboards/new/widget/new/`,\n      query: {\n        ...location.query,\n        source: DashboardWidgetSource.DASHBOARDS,\n      },\n    });\n  };\n\n  handleUpdateComplete = (prevWidget: Widget) => (nextWidget: Widget) => {\n    const {isEditing, onUpdate, handleUpdateWidgetList} = this.props;\n\n    let nextList = [...this.props.dashboard.widgets];\n    const updateIndex = nextList.indexOf(prevWidget);\n    const nextWidgetData = {\n      ...nextWidget,\n      tempId: prevWidget.tempId,\n    };\n\n    // Only modify and re-compact if the default height has changed\n    if (\n      getDefaultWidgetHeight(prevWidget.displayType) !==\n      getDefaultWidgetHeight(nextWidget.displayType)\n    ) {\n      nextList[updateIndex] = enforceWidgetHeightValues(nextWidgetData);\n      nextList = generateWidgetsAfterCompaction(nextList);\n    } else {\n      nextList[updateIndex] = nextWidgetData;\n    }\n\n    onUpdate(nextList);\n    if (!!!isEditing) {\n      handleUpdateWidgetList(nextList);\n    }\n  };\n\n  handleDeleteWidget = (widgetToDelete: Widget) => () => {\n    const {dashboard, onUpdate, isEditing, handleUpdateWidgetList} = this.props;\n\n    let nextList = dashboard.widgets.filter(widget => widget !== widgetToDelete);\n    nextList = generateWidgetsAfterCompaction(nextList);\n\n    onUpdate(nextList);\n    if (!!!isEditing) {\n      handleUpdateWidgetList(nextList);\n    }\n  };\n\n  handleDuplicateWidget = (widget: Widget, index: number) => () => {\n    const {dashboard, onUpdate, isEditing, handleUpdateWidgetList} = this.props;\n\n    const widgetCopy = cloneDeep(\n      assignTempId({...widget, id: undefined, tempId: undefined})\n    );\n\n    let nextList = [...dashboard.widgets];\n    nextList.splice(index, 0, widgetCopy);\n    nextList = generateWidgetsAfterCompaction(nextList);\n\n    onUpdate(nextList);\n    if (!!!isEditing) {\n      handleUpdateWidgetList(nextList);\n    }\n  };\n\n  handleEditWidget = (widget: Widget) => () => {\n    const {\n      organization,\n      dashboard,\n      selection,\n      router,\n      location,\n      paramDashboardId,\n      onSetWidgetToBeUpdated,\n      handleAddCustomWidget,\n    } = this.props;\n\n    if (organization.features.includes('new-widget-builder-experience')) {\n      onSetWidgetToBeUpdated(widget);\n\n      if (paramDashboardId) {\n        router.push({\n          pathname: `/organizations/${organization.slug}/dashboard/${paramDashboardId}/widget/${widget.id}/edit/`,\n          query: {\n            ...location.query,\n            source: DashboardWidgetSource.DASHBOARDS,\n          },\n        });\n        return;\n      }\n\n      router.push({\n        pathname: `/organizations/${organization.slug}/dashboards/new/widget/${widget.id}/edit/`,\n        query: {\n          ...location.query,\n          source: DashboardWidgetSource.DASHBOARDS,\n        },\n      });\n    }\n\n    trackAdvancedAnalyticsEvent('dashboards_views.edit_widget_modal.opened', {\n      organization,\n    });\n    const modalProps = {\n      organization,\n      widget,\n      selection,\n      onAddWidget: handleAddCustomWidget,\n      onUpdateWidget: this.handleUpdateComplete(widget),\n    };\n    openAddDashboardWidgetModal({\n      ...modalProps,\n      dashboard,\n      source: DashboardWidgetSource.DASHBOARDS,\n    });\n  };\n\n  getWidgetIds() {\n    return [\n      ...this.props.dashboard.widgets.map((widget, index): string => {\n        return generateWidgetId(widget, index);\n      }),\n      ADD_WIDGET_BUTTON_DRAG_ID,\n    ];\n  }\n\n  renderWidget(widget: Widget, index: number) {\n    const {isMobile, windowWidth} = this.state;\n    const {isEditing, organization, widgetLimitReached, isPreview} = this.props;\n\n    const widgetProps = {\n      widget,\n      isEditing,\n      widgetLimitReached,\n      onDelete: this.handleDeleteWidget(widget),\n      onEdit: this.handleEditWidget(widget),\n      onDuplicate: this.handleDuplicateWidget(widget, index),\n      isPreview,\n    };\n\n    if (organization.features.includes('dashboard-grid-layout')) {\n      const key = constructGridItemKey(widget);\n      const dragId = key;\n      return (\n        <GridItem key={key} data-grid={widget.layout}>\n          <SortableWidget\n            {...widgetProps}\n            dragId={dragId}\n            isMobile={isMobile}\n            windowWidth={windowWidth}\n          />\n        </GridItem>\n      );\n    }\n\n    const key = generateWidgetId(widget, index);\n    const dragId = key;\n    return <SortableWidget {...widgetProps} key={key} dragId={dragId} />;\n  }\n\n  handleLayoutChange = (_, allLayouts: Layouts) => {\n    const {isMobile} = this.state;\n    const {dashboard, onUpdate} = this.props;\n    const isNotAddButton = ({i}) => i !== ADD_WIDGET_BUTTON_DRAG_ID;\n    const newLayouts = {\n      [DESKTOP]: allLayouts[DESKTOP].filter(isNotAddButton),\n      [MOBILE]: allLayouts[MOBILE].filter(isNotAddButton),\n    };\n\n    // Generate a new list of widgets where the layouts are associated\n    let columnDepths = calculateColumnDepths(newLayouts[DESKTOP]);\n    const newWidgets = dashboard.widgets.map(widget => {\n      const gridKey = constructGridItemKey(widget);\n      let matchingLayout = newLayouts[DESKTOP].find(({i}) => i === gridKey);\n      if (!matchingLayout) {\n        const height = getDefaultWidgetHeight(widget.displayType);\n        const defaultWidgetParams = {\n          w: DEFAULT_WIDGET_WIDTH,\n          h: height,\n          minH: height,\n          i: gridKey,\n        };\n\n        // Calculate the available position\n        const [nextPosition, nextColumnDepths] = getNextAvailablePosition(\n          columnDepths,\n          height\n        );\n        columnDepths = nextColumnDepths;\n\n        // Set the position for the desktop layout\n        matchingLayout = {\n          ...defaultWidgetParams,\n          ...nextPosition,\n        };\n\n        if (isMobile) {\n          // This is a new widget and it's on the mobile page so we keep it at the bottom\n          const mobileLayout = newLayouts[MOBILE].filter(({i}) => i !== gridKey);\n          mobileLayout.push({\n            ...defaultWidgetParams,\n            ...BOTTOM_MOBILE_VIEW_POSITION,\n          });\n          newLayouts[MOBILE] = mobileLayout;\n        }\n      }\n      return {\n        ...widget,\n        layout: pickDefinedStoreKeys(matchingLayout),\n      };\n    });\n\n    this.setState({\n      layouts: newLayouts,\n    });\n    onUpdate(newWidgets);\n\n    // Force check lazyLoad elements that might have shifted into view after (re)moving an upper widget\n    // Unfortunately need to use setTimeout since React Grid Layout animates widgets into view when layout changes\n    // RGL doesn't provide a handler for post animation layout change\n    setTimeout(forceCheck, 400);\n  };\n\n  handleBreakpointChange = (newBreakpoint: string) => {\n    const {layouts} = this.state;\n    const {\n      dashboard: {widgets},\n    } = this.props;\n\n    if (newBreakpoint === MOBILE) {\n      this.setState({\n        isMobile: true,\n        layouts: {\n          ...layouts,\n          [MOBILE]: getMobileLayout(layouts[DESKTOP], widgets),\n        },\n      });\n      return;\n    }\n    this.setState({isMobile: false});\n  };\n\n  get addWidgetLayout() {\n    const {isMobile, layouts} = this.state;\n    let position: Position = BOTTOM_MOBILE_VIEW_POSITION;\n    if (!isMobile) {\n      const columnDepths = calculateColumnDepths(layouts[DESKTOP]);\n      const [nextPosition] = getNextAvailablePosition(columnDepths, 1);\n      position = nextPosition;\n    }\n\n    return {\n      ...position,\n      w: DEFAULT_WIDGET_WIDTH,\n      h: 1,\n      isResizable: false,\n    };\n  }\n\n  renderGridDashboard() {\n    const {layouts, isMobile} = this.state;\n    const {isEditing, dashboard, organization, widgetLimitReached} = this.props;\n    let {widgets} = dashboard;\n    // Filter out any issue widgets if the user does not have the feature flag\n    if (!organization.features.includes('issues-in-dashboards')) {\n      widgets = widgets.filter(({widgetType}) => widgetType !== WidgetType.ISSUE);\n    }\n\n    const columnDepths = calculateColumnDepths(layouts[DESKTOP]);\n    const widgetsWithLayout = assignDefaultLayout(widgets, columnDepths);\n\n    const canModifyLayout = !isMobile && isEditing;\n\n    return (\n      <GridLayout\n        breakpoints={BREAKPOINTS}\n        cols={COLUMNS}\n        rowHeight={ROW_HEIGHT}\n        margin={WIDGET_MARGINS}\n        draggableHandle={`.${DRAG_HANDLE_CLASS}`}\n        layouts={layouts}\n        onLayoutChange={this.handleLayoutChange}\n        onBreakpointChange={this.handleBreakpointChange}\n        isDraggable={canModifyLayout}\n        isResizable={canModifyLayout}\n        resizeHandle={\n          <ResizeHandle\n            className=\"react-resizable-handle\"\n            data-test-id=\"custom-resize-handle\"\n          >\n            <IconResize />\n          </ResizeHandle>\n        }\n        useCSSTransforms={false}\n        isBounded\n      >\n        {widgetsWithLayout.map((widget, index) => this.renderWidget(widget, index))}\n        {isEditing && !!!widgetLimitReached && (\n          <AddWidgetWrapper\n            key={ADD_WIDGET_BUTTON_DRAG_ID}\n            data-grid={this.addWidgetLayout}\n          >\n            <AddWidget\n              orgFeatures={organization.features}\n              onAddWidget={this.handleStartAdd}\n              onOpenWidgetBuilder={this.handleOpenWidgetBuilder}\n            />\n          </AddWidgetWrapper>\n        )}\n      </GridLayout>\n    );\n  }\n\n  renderDndDashboard = () => {\n    const {isEditing, onUpdate, dashboard, organization, widgetLimitReached} = this.props;\n    let {widgets} = dashboard;\n    // Filter out any issue widgets if the user does not have the feature flag\n    if (!organization.features.includes('issues-in-dashboards')) {\n      widgets = widgets.filter(({widgetType}) => widgetType !== WidgetType.ISSUE);\n    }\n\n    const items = this.getWidgetIds();\n\n    return (\n      <DndContext\n        collisionDetection={closestCenter}\n        onDragEnd={({over, active}) => {\n          const activeDragId = active.id;\n          const getIndex = items.indexOf.bind(items);\n\n          const activeIndex = activeDragId ? getIndex(activeDragId) : -1;\n\n          if (over && over.id !== ADD_WIDGET_BUTTON_DRAG_ID) {\n            const overIndex = getIndex(over.id);\n            if (activeIndex !== overIndex) {\n              onUpdate(arrayMove(widgets, activeIndex, overIndex));\n            }\n          }\n        }}\n      >\n        <WidgetContainer>\n          <SortableContext items={items} strategy={rectSortingStrategy}>\n            {widgets.map((widget, index) => this.renderWidget(widget, index))}\n            {isEditing && !!!widgetLimitReached && (\n              <AddWidget\n                orgFeatures={organization.features}\n                onAddWidget={this.handleStartAdd}\n                onOpenWidgetBuilder={this.handleOpenWidgetBuilder}\n              />\n            )}\n          </SortableContext>\n        </WidgetContainer>\n      </DndContext>\n    );\n  };\n\n  render() {\n    const {organization} = this.props;\n    if (organization.features.includes('dashboard-grid-layout')) {\n      return this.renderGridDashboard();\n    }\n\n    return this.renderDndDashboard();\n  }\n}\n\nexport default withApi(withPageFilters(Dashboard));\n\nconst WidgetContainer = styled('div')`\n  display: grid;\n  grid-template-columns: repeat(2, minmax(0, 1fr));\n  grid-auto-flow: row dense;\n  gap: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints[1]}) {\n    grid-template-columns: repeat(4, minmax(0, 1fr));\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[3]}) {\n    grid-template-columns: repeat(6, minmax(0, 1fr));\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[4]}) {\n    grid-template-columns: repeat(8, minmax(0, 1fr));\n  }\n`;\n\n// A widget being dragged has a z-index of 3\n// Allow the Add Widget tile to show above widgets when moved\nconst AddWidgetWrapper = styled('div')`\n  z-index: 5;\n  background-color: ${p => p.theme.background};\n`;\n\nconst GridItem = styled('div')`\n  .react-resizable-handle {\n    z-index: 2;\n  }\n`;\n\nconst GridLayout = styled(WidthProvider(Responsive))`\n  margin: -${space(2)};\n\n  .react-resizable-handle {\n    background-image: none;\n  }\n\n  .react-grid-item > .react-resizable-handle::after {\n    border: none;\n  }\n\n  .react-grid-item.react-grid-placeholder {\n    background: ${p => p.theme.purple200};\n  }\n`;\n\nconst ResizeHandle = styled('div')`\n  position: absolute;\n  bottom: 2px;\n  right: 2px;\n  cursor: nwse-resize;\n`;\n","import {Layout} from 'react-grid-layout';\n\nimport {User} from 'sentry/types';\n\n// Max widgets per dashboard we are currently willing\n// to allow to limit the load on snuba from the\n// parallel requests. Somewhat arbitrary\n// limit that can be changed if necessary.\nexport const MAX_WIDGETS = 30;\n\nexport enum DisplayType {\n  AREA = 'area',\n  BAR = 'bar',\n  LINE = 'line',\n  TABLE = 'table',\n  WORLD_MAP = 'world_map',\n  BIG_NUMBER = 'big_number',\n  STACKED_AREA = 'stacked_area',\n  TOP_N = 'top_n',\n}\n\nexport enum WidgetType {\n  DISCOVER = 'discover',\n  ISSUE = 'issue',\n  METRICS = 'metrics',\n}\n\nexport type WidgetQuery = {\n  conditions: string;\n  fields: string[];\n  name: string;\n  orderby: string;\n};\n\nexport type Widget = {\n  displayType: DisplayType;\n  interval: string;\n  queries: WidgetQuery[];\n  title: string;\n  id?: string;\n  layout?: WidgetLayout | null;\n  tempId?: string;\n  widgetType?: WidgetType;\n};\n\n// We store an explicit set of keys in the backend now\nexport type WidgetLayout = Pick<Layout, 'h' | 'w' | 'x' | 'y'> & {\n  minH: number;\n};\n\nexport type WidgetPreview = {\n  displayType: DisplayType;\n  layout: WidgetLayout | null;\n};\n\n/**\n * The response shape from dashboard list endpoint\n */\nexport type DashboardListItem = {\n  id: string;\n  title: string;\n  widgetDisplay: DisplayType[];\n  widgetPreview: WidgetPreview[];\n  createdBy?: User;\n  dateCreated?: string;\n};\n\n/**\n * Saved dashboard with widgets\n */\nexport type DashboardDetails = {\n  dateCreated: string;\n  id: string;\n  title: string;\n  widgets: Widget[];\n  createdBy?: User;\n};\n\nexport enum DashboardState {\n  VIEW = 'view',\n  EDIT = 'edit',\n  CREATE = 'create',\n  PENDING_DELETE = 'pending_delete',\n  PREVIEW = 'preview',\n}\n\n// where we launch the dashboard widget from\nexport enum DashboardWidgetSource {\n  DISCOVERV2 = 'discoverv2',\n  DASHBOARDS = 'dashboards',\n  LIBRARY = 'library',\n  ISSUE_DETAILS = 'issueDetail',\n}\n"],"names":["DRAG_HANDLE_CLASS","DESKTOP","MOBILE","NUM_DESKTOP_COLS","WIDGET_MARGINS","BOTTOM_MOBILE_VIEW_POSITION","x","y","Number","MAX_SAFE_INTEGER","MOBILE_BREAKPOINT","parseInt","theme","BREAKPOINTS","COLUMNS","Dashboard","Component","constructor","props","super","debounce","this","setState","windowWidth","window","innerWidth","organization","dashboard","selection","handleUpdateWidgetList","handleAddCustomWidget","trackAdvancedAnalyticsEvent","features","includes","openAddDashboardWidgetModal","onAddWidget","onAddLibraryWidget","widgets","source","DashboardWidgetSource","router","location","paramDashboardId","push","pathname","slug","query","prevWidget","nextWidget","isEditing","onUpdate","nextList","updateIndex","indexOf","nextWidgetData","tempId","getDefaultWidgetHeight","displayType","enforceWidgetHeightValues","generateWidgetsAfterCompaction","widgetToDelete","filter","widget","index","widgetCopy","cloneDeep","assignTempId","id","undefined","splice","onSetWidgetToBeUpdated","modalProps","onUpdateWidget","handleUpdateComplete","_","allLayouts","isMobile","state","isNotAddButton","i","ADD_WIDGET_BUTTON_DRAG_ID","newLayouts","columnDepths","calculateColumnDepths","newWidgets","map","gridKey","constructGridItemKey","matchingLayout","find","height","defaultWidgetParams","w","DEFAULT_WIDGET_WIDTH","h","minH","nextPosition","nextColumnDepths","getNextAvailablePosition","mobileLayout","layout","pickDefinedStoreKeys","layouts","setTimeout","forceCheck","newBreakpoint","getMobileLayout","widgetLimitReached","widgetType","WidgetType","items","getWidgetIds","collisionDetection","closestCenter","onDragEnd","over","active","activeDragId","getIndex","bind","activeIndex","overIndex","arrayMove","WidgetContainer","strategy","rectSortingStrategy","renderWidget","orgFeatures","handleStartAdd","onOpenWidgetBuilder","handleOpenWidgetBuilder","isUsingGrid","desktopLayout","getDashboardLayout","dashboardLayout","isEqual","addEventListener","debouncedHandleResize","fetchTags","addNewWidget","fetchMemberList","prevProps","newWidget","projects","componentWillUnmount","removeEventListener","api","fetchOrgMembers","projectId","String","validateWidget","error","addErrorMessage","loadOrganizationTags","generateWidgetId","isPreview","widgetProps","onDelete","handleDeleteWidget","onEdit","handleEditWidget","onDuplicate","handleDuplicateWidget","key","dragId","GridItem","position","isResizable","renderGridDashboard","widgetsWithLayout","assignDefaultLayout","canModifyLayout","GridLayout","breakpoints","cols","rowHeight","margin","draggableHandle","onLayoutChange","handleLayoutChange","onBreakpointChange","handleBreakpointChange","isDraggable","resizeHandle","ResizeHandle","className","useCSSTransforms","isBounded","AddWidgetWrapper","addWidgetLayout","render","renderDndDashboard","withApi","withPageFilters","space","p","background","WidthProvider","Responsive","purple200","MAX_WIDGETS","DisplayType","DashboardState"],"sourceRoot":""}