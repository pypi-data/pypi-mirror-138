{"version":3,"file":"chunks/app_views_performance_landing_widgets_components_performanceWidget_tsx-app_views_performance_-fbdf45.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/performance/landing/widgets/components/performanceWidgetContainer.tsx","webpack:///./app/views/performance/landing/widgets/components/dataStateSwitch.tsx","webpack:///./app/views/performance/landing/widgets/components/queryHandler.tsx","webpack:///./app/views/performance/landing/widgets/components/widgetHeader.tsx","webpack:///./app/views/performance/landing/widgets/components/performanceWidget.tsx","webpack:///./app/views/performance/landing/widgets/components/selectableList.tsx","webpack:///./app/views/performance/landing/widgets/types.tsx","webpack:///./app/views/performance/landing/widgets/widgetDefinitions.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport {Panel} from 'sentry/components/panels';\nimport space from 'sentry/styles/space';\n\nexport type PerformanceWidgetContainerTypes = 'panel' | 'inline';\n\nconst StyledPanel = styled(Panel)`\n  padding-top: ${space(2)};\n  margin-bottom: 0;\n`;\nconst Div = styled('div')``;\n\nconst getPerformanceWidgetContainer = ({\n  containerType,\n}: {\n  containerType: PerformanceWidgetContainerTypes;\n}) => {\n  if (containerType === 'panel') {\n    return StyledPanel;\n  }\n  if (containerType === 'inline') {\n    return Div;\n  }\n  return Div;\n};\n\nexport default getPerformanceWidgetContainer;\n","import {Fragment} from 'react';\n\nexport function DataStateSwitch(props: {\n  dataComponents: JSX.Element[];\n  emptyComponent: JSX.Element;\n  errorComponent: JSX.Element;\n\n  hasData: boolean;\n  isErrored: boolean;\n  isLoading: boolean;\n  loadingComponent?: JSX.Element;\n}): JSX.Element {\n  if (props.isErrored) {\n    return props.errorComponent;\n  }\n  if (props.isLoading && props.loadingComponent) {\n    return props.loadingComponent;\n  }\n  if (!props.hasData) {\n    return props.emptyComponent;\n  }\n  return <Fragment>{props.dataComponents}</Fragment>;\n}\n","import {Fragment, useEffect} from 'react';\n\nimport {getUtcToLocalDateObject} from 'sentry/utils/dates';\n\nimport {QueryDefinitionWithKey, QueryHandlerProps, WidgetDataConstraint} from '../types';\nimport {PerformanceWidgetSetting} from '../widgetDefinitions';\n\n/*\n  Component to handle switching component-style queries over to state. This should be temporary to make it easier to switch away from waterfall style api components.\n*/\nexport function QueryHandler<T extends WidgetDataConstraint>(\n  props: QueryHandlerProps<T>\n) {\n  const children = props.children ?? <Fragment />;\n\n  if (!props.queries.length) {\n    return <Fragment>{children}</Fragment>;\n  }\n\n  return (\n    <Fragment>\n      {props.queries\n        .filter(q => (q.enabled ? q.enabled(props.widgetData) : true))\n        .map(query => (\n          <SingleQueryHandler key={query.queryKey} {...props} query={query} />\n        ))}\n    </Fragment>\n  );\n}\n\nfunction genericQueryReferrer(setting: PerformanceWidgetSetting) {\n  return `api.performance.generic-widget-chart.${setting.replaceAll('_', '-')}`;\n}\n\nfunction SingleQueryHandler<T extends WidgetDataConstraint>(\n  props: QueryHandlerProps<T> & {query: QueryDefinitionWithKey<T>}\n) {\n  const query = props.query;\n  const globalSelection = props.queryProps.eventView.getPageFilters();\n  const start = globalSelection.datetime.start\n    ? getUtcToLocalDateObject(globalSelection.datetime.start)\n    : null;\n\n  const end = globalSelection.datetime.end\n    ? getUtcToLocalDateObject(globalSelection.datetime.end)\n    : null;\n\n  useEffect(\n    () => () => {\n      // Destroy previous data on unmount, in case enabled value changes and unmounts the query component.\n      props.removeWidgetDataForKey(query.queryKey);\n    },\n    []\n  );\n\n  return (\n    <query.component\n      key={query.queryKey}\n      fields={query.fields}\n      yAxis={query.fields}\n      start={start}\n      end={end}\n      period={globalSelection.datetime.period}\n      project={globalSelection.projects}\n      environment={globalSelection.environments}\n      organization={props.queryProps.organization}\n      orgSlug={props.queryProps.organization.slug}\n      eventView={props.queryProps.eventView}\n      query={props.queryProps.eventView.getQueryWithAdditionalConditions()}\n      widgetData={props.widgetData}\n      referrer={genericQueryReferrer(props.queryProps.chartSetting)}\n    >\n      {results => {\n        return (\n          <Fragment>\n            <QueryResultSaver<T> results={results} {...props} query={query} />\n          </Fragment>\n        );\n      }}\n    </query.component>\n  );\n}\n\nfunction QueryResultSaver<T extends WidgetDataConstraint>(\n  props: {\n    // TODO(k-fish): Fix this any.\n    query: QueryDefinitionWithKey<T>;\n    results: any;\n  } & QueryHandlerProps<T>\n) {\n  const {results, query} = props;\n  const transformed = query.transform(props.queryProps, results, props.query);\n\n  useEffect(() => {\n    props.setWidgetDataForKey(query.queryKey, transformed);\n  }, [transformed?.hasData, transformed?.isLoading, transformed?.isErrored]);\n  return <Fragment />;\n}\n","import styled from '@emotion/styled';\n\nimport {HeaderTitleLegend} from 'sentry/components/charts/styles';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport TextOverflow from 'sentry/components/textOverflow';\nimport space from 'sentry/styles/space';\n\nimport {\n  GenericPerformanceWidgetProps,\n  WidgetDataConstraint,\n  WidgetDataProps,\n} from '../types';\n\nexport function WidgetHeader<T extends WidgetDataConstraint>(\n  props: GenericPerformanceWidgetProps<T> & WidgetDataProps<T>\n) {\n  const {title, titleTooltip, Subtitle, HeaderActions} = props;\n  return (\n    <WidgetHeaderContainer>\n      <TitleContainer>\n        <StyledHeaderTitleLegend data-test-id=\"performance-widget-title\">\n          <TextOverflow>{title}</TextOverflow>\n          <QuestionTooltip position=\"top\" size=\"sm\" title={titleTooltip} />\n        </StyledHeaderTitleLegend>\n        {Subtitle ? <Subtitle {...props} /> : null}\n      </TitleContainer>\n      <HeaderActionsContainer>\n        {HeaderActions && <HeaderActions {...props} />}\n      </HeaderActionsContainer>\n    </WidgetHeaderContainer>\n  );\n}\n\nconst StyledHeaderTitleLegend = styled(HeaderTitleLegend)`\n  position: relative;\n  z-index: initial;\n`;\n\nconst TitleContainer = styled('div')`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n`;\n\nconst WidgetHeaderContainer = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  gap: ${space(1)};\n`;\n\nconst HeaderActionsContainer = styled('div')`\n  display: flex;\n  gap: ${space(1)};\n`;\n","import {Fragment, useCallback, useRef, useState} from 'react';\nimport {withRouter} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport ErrorPanel from 'sentry/components/charts/errorPanel';\nimport Placeholder from 'sentry/components/placeholder';\nimport {IconWarning} from 'sentry/icons/iconWarning';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport useApi from 'sentry/utils/useApi';\nimport getPerformanceWidgetContainer from 'sentry/views/performance/landing/widgets/components/performanceWidgetContainer';\n\nimport {\n  GenericPerformanceWidgetProps,\n  WidgetDataConstraint,\n  WidgetDataProps,\n  WidgetDataResult,\n  WidgetPropUnion,\n} from '../types';\nimport {PerformanceWidgetSetting} from '../widgetDefinitions';\n\nimport {DataStateSwitch} from './dataStateSwitch';\nimport {QueryHandler} from './queryHandler';\nimport {WidgetHeader} from './widgetHeader';\n\n// Generic performance widget for type T, where T defines all the data contained in the widget.\nexport function GenericPerformanceWidget<T extends WidgetDataConstraint>(\n  props: WidgetPropUnion<T>\n) {\n  // Use object keyed to chart setting so switching between charts of a similar type doesn't retain data with query components still having inflight requests.\n  const [allWidgetData, setWidgetData] = useState<{[chartSetting: string]: T}>({});\n  const widgetData = allWidgetData[props.chartSetting] ?? {};\n  const widgetDataRef = useRef(widgetData);\n\n  const setWidgetDataForKey = useCallback(\n    (dataKey: string, result?: WidgetDataResult) => {\n      const _widgetData = widgetDataRef.current;\n      const newWidgetData = {..._widgetData, [dataKey]: result};\n      widgetDataRef.current = newWidgetData;\n      setWidgetData({[props.chartSetting]: newWidgetData});\n    },\n    [allWidgetData, setWidgetData]\n  );\n  const removeWidgetDataForKey = useCallback(\n    (dataKey: string) => {\n      const _widgetData = widgetDataRef.current;\n      const newWidgetData = {..._widgetData};\n      delete newWidgetData[dataKey];\n      widgetDataRef.current = newWidgetData;\n      setWidgetData({[props.chartSetting]: newWidgetData});\n    },\n    [allWidgetData, setWidgetData]\n  );\n  const widgetProps = {widgetData, setWidgetDataForKey, removeWidgetDataForKey};\n\n  const queries = Object.entries(props.Queries).map(([key, definition]) => ({\n    ...definition,\n    queryKey: key,\n  }));\n\n  const api = useApi();\n\n  const totalHeight = props.Visualizations.reduce((acc, curr) => acc + curr.height, 0);\n\n  return (\n    <Fragment>\n      <QueryHandler\n        eventView={props.eventView}\n        widgetData={widgetData}\n        setWidgetDataForKey={setWidgetDataForKey}\n        removeWidgetDataForKey={removeWidgetDataForKey}\n        queryProps={props}\n        queries={queries}\n        api={api}\n      />\n      <_DataDisplay<T> {...props} {...widgetProps} totalHeight={totalHeight} />\n    </Fragment>\n  );\n}\n\nfunction trackDataComponentClicks(\n  chartSetting: PerformanceWidgetSetting,\n  organization: Organization\n) {\n  trackAdvancedAnalyticsEvent('performance_views.landingv3.widget.interaction', {\n    organization,\n    widget_type: chartSetting,\n  });\n}\n\nfunction _DataDisplay<T extends WidgetDataConstraint>(\n  props: GenericPerformanceWidgetProps<T> & WidgetDataProps<T> & {totalHeight: number}\n) {\n  const {Visualizations, chartHeight, totalHeight, containerType, EmptyComponent} = props;\n\n  const Container = getPerformanceWidgetContainer({\n    containerType,\n  });\n\n  const numberKeys = Object.keys(props.Queries).length;\n  const missingDataKeys = Object.values(props.widgetData).length !== numberKeys;\n  const hasData =\n    !missingDataKeys && Object.values(props.widgetData).every(d => !d || d.hasData);\n  const isLoading = Object.values(props.widgetData).some(d => !d || d.isLoading);\n  const isErrored =\n    !missingDataKeys && Object.values(props.widgetData).some(d => d && d.isErrored);\n\n  return (\n    <Container data-test-id=\"performance-widget-container\">\n      <ContentContainer>\n        <WidgetHeader<T> {...props} />\n      </ContentContainer>\n      <DataStateSwitch\n        isLoading={isLoading}\n        isErrored={isErrored}\n        hasData={hasData}\n        errorComponent={<DefaultErrorComponent height={totalHeight} />}\n        dataComponents={Visualizations.map((Visualization, index) => (\n          <ContentContainer\n            key={index}\n            noPadding={Visualization.noPadding}\n            bottomPadding={Visualization.bottomPadding}\n            data-test-id=\"widget-state-has-data\"\n            onClick={() =>\n              trackDataComponentClicks(props.chartSetting, props.organization)\n            }\n          >\n            <Visualization.component\n              grid={defaultGrid}\n              queryFields={Visualization.fields}\n              widgetData={props.widgetData}\n              height={chartHeight}\n            />\n          </ContentContainer>\n        ))}\n        loadingComponent={<PerformanceWidgetPlaceholder height={`${totalHeight}px`} />}\n        emptyComponent={\n          EmptyComponent ? (\n            <EmptyComponent />\n          ) : (\n            <PerformanceWidgetPlaceholder height={`${totalHeight}px`} />\n          )\n        }\n      />\n    </Container>\n  );\n}\n\nexport const DataDisplay = withRouter(_DataDisplay);\n\nconst DefaultErrorComponent = (props: {height: number}) => {\n  return (\n    <ErrorPanel data-test-id=\"widget-state-is-errored\" height={`${props.height}px`}>\n      <IconWarning color=\"gray300\" size=\"lg\" />\n    </ErrorPanel>\n  );\n};\n\nconst defaultGrid = {\n  left: space(0),\n  right: space(0),\n  top: space(2),\n  bottom: space(1),\n};\n\nconst ContentContainer = styled('div')<{bottomPadding?: boolean; noPadding?: boolean}>`\n  padding-left: ${p => (p.noPadding ? space(0) : space(2))};\n  padding-right: ${p => (p.noPadding ? space(0) : space(2))};\n  padding-bottom: ${p => (p.bottomPadding ? space(1) : space(0))};\n`;\n\nconst PerformanceWidgetPlaceholder = styled(Placeholder)`\n  border-color: transparent;\n  border-bottom-right-radius: inherit;\n  border-bottom-left-radius: inherit;\n`;\n\nGenericPerformanceWidget.defaultProps = {\n  containerType: 'panel',\n  chartHeight: 200,\n};\n","import styled from '@emotion/styled';\n\nimport EmptyStateWarning from 'sentry/components/emptyStateWarning';\nimport {RadioLineItem} from 'sentry/components/forms/controls/radioGroup';\nimport Link from 'sentry/components/links/link';\nimport Radio from 'sentry/components/radio';\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconClose} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\ntype Props = {\n  items: (() => React.ReactNode)[];\n  selectedIndex: number;\n  setSelectedIndex: (index: number) => void;\n  radioColor?: string;\n};\n\nexport default function SelectableList(props: Props) {\n  return (\n    <div>\n      {props.items.map((item, index) => (\n        <SelectableItem\n          {...props}\n          isSelected={index === props.selectedIndex}\n          currentIndex={index}\n          key={index}\n        >\n          {item()}\n        </SelectableItem>\n      ))}\n    </div>\n  );\n}\n\nfunction SelectableItem({\n  isSelected,\n  currentIndex: index,\n  children,\n  setSelectedIndex,\n  radioColor,\n}: {children: React.ReactNode; currentIndex: number; isSelected: boolean} & Props) {\n  return (\n    <ListItemContainer>\n      <ItemRadioContainer color={radioColor ?? ''}>\n        <RadioLineItem index={index} role=\"radio\">\n          <Radio checked={isSelected} onChange={() => setSelectedIndex(index)} />\n        </RadioLineItem>\n      </ItemRadioContainer>\n      {children}\n    </ListItemContainer>\n  );\n}\n\nexport const RightAlignedCell = styled('div')`\n  text-align: right;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0 ${space(1)};\n`;\n\nexport const Subtitle = styled('span')`\n  color: ${p => p.theme.gray300};\n  font-size: ${p => p.theme.fontSizeMedium};\n  display: inline-block;\n`;\n\nexport const GrowLink = styled(Link)`\n  flex-grow: 1;\n  display: inherit;\n`;\n\nexport const WidgetEmptyStateWarning = () => {\n  return <StyledEmptyStateWarning small>{t('No results')}</StyledEmptyStateWarning>;\n};\n\nexport function ListClose(props: {\n  onClick: () => void;\n  setSelectListIndex: (n: number) => void;\n}) {\n  return (\n    <StyledTooltip title={t('Exclude this transaction from the search filter.')}>\n      <StyledIconClose\n        onClick={() => {\n          props.onClick();\n          props.setSelectListIndex(0);\n        }}\n      />\n    </StyledTooltip>\n  );\n}\n\nconst StyledTooltip = styled(Tooltip)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst StyledIconClose = styled(IconClose)`\n  cursor: pointer;\n  color: ${p => p.theme.gray200};\n`;\n\nconst StyledEmptyStateWarning = styled(EmptyStateWarning)`\n  min-height: 300px;\n  justify-content: center;\n`;\n\nconst ListItemContainer = styled('div')`\n  display: flex;\n  border-top: 1px solid ${p => p.theme.border};\n  padding: ${space(1)} ${space(2)};\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst ItemRadioContainer = styled('div')`\n  grid-row: 1/3;\n  input {\n    cursor: pointer;\n  }\n  input:checked::after {\n    background-color: ${p => p.color};\n  }\n`;\n","import {Location} from 'history';\n\nimport {Client} from 'sentry/api';\nimport BaseChart from 'sentry/components/charts/baseChart';\nimport {RenderProps} from 'sentry/components/charts/eventsRequest';\nimport {DateString, Organization, OrganizationSummary} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\n\nimport {PerformanceWidgetContainerTypes} from './components/performanceWidgetContainer';\nimport {ChartDefinition, PerformanceWidgetSetting} from './widgetDefinitions';\n\nexport enum VisualizationDataState {\n  ERROR = 'error',\n  LOADING = 'loading',\n  EMPTY = 'empty',\n  DATA = 'data',\n}\n\nexport enum GenericPerformanceWidgetDataType {\n  histogram = 'histogram',\n  area = 'area',\n  vitals = 'vitals',\n  line_list = 'line_list',\n  trends = 'trends',\n}\n\nexport type PerformanceWidgetProps = {\n  ContainerActions: React.FC<{isLoading: boolean}>;\n  chartDefinition: ChartDefinition;\n  chartHeight: number;\n\n  chartSetting: PerformanceWidgetSetting;\n  eventView: EventView;\n  fields: string[];\n  location: Location;\n\n  organization: Organization;\n  title: string;\n  titleTooltip: string;\n\n  chartColor?: string;\n};\n\nexport interface WidgetDataResult {\n  hasData: boolean;\n  isErrored: boolean;\n  isLoading: boolean;\n}\nexport interface WidgetDataConstraint {\n  [dataKey: string]: WidgetDataResult | undefined;\n}\n\nexport type QueryChildren = {\n  children: (props: any) => React.ReactNode; // TODO(k-fish): Fix any type.\n};\nexport type QueryFC<T extends WidgetDataConstraint> = React.FC<\n  QueryChildren & {\n    eventView: EventView;\n    orgSlug: string;\n    organization: OrganizationSummary;\n    widgetData: T;\n    end?: DateString;\n    environment?: Readonly<string[]>;\n    fields?: string | string[];\n    period?: string | null;\n    project?: Readonly<number[]>;\n    query?: string;\n    referrer?: string;\n    start?: DateString;\n    team?: Readonly<string | string[]>;\n    yAxis?: string | string[];\n  }\n>;\n\nexport type QueryDefinition<\n  T extends WidgetDataConstraint,\n  S extends WidgetDataResult | undefined\n> = {\n  component: QueryFC<T>;\n  fields: string | string[];\n  transform: (\n    props: GenericPerformanceWidgetProps<T>,\n    results: any,\n    queryDefinition: QueryDefinitionWithKey<T>\n  ) => S; // TODO(k-fish): Fix any type.\n  enabled?: (data: T) => boolean;\n};\nexport type Queries<T extends WidgetDataConstraint> = Record<\n  string,\n  QueryDefinition<T, T[string]>\n>;\n\ntype Visualization<T> = {\n  component: React.FC<{\n    widgetData: T;\n    grid?: React.ComponentProps<typeof BaseChart>['grid'];\n    height?: number;\n    queryFields?: string;\n  }>;\n  height: number;\n  bottomPadding?: boolean;\n  dataState?: (data: T) => VisualizationDataState;\n  fields?: string;\n  noPadding?: boolean;\n  queryFields?: string[]; // Used to determine placeholder and loading sizes. Will also be passed to the component.\n};\n\ntype Visualizations<T extends WidgetDataConstraint> = Readonly<Visualization<T>[]>; // Readonly because of index being used for React key.\n\ntype HeaderActions<T> = React.FC<{\n  widgetData: T;\n}>;\n\ntype Subtitle<T> = React.FC<{\n  widgetData: T;\n}>;\n\nexport type GenericPerformanceWidgetProps<T extends WidgetDataConstraint> = {\n  Queries: Queries<T>;\n  Visualizations: Visualizations<T>;\n\n  chartDefinition: ChartDefinition;\n  chartHeight: number;\n\n  chartSetting: PerformanceWidgetSetting;\n  containerType: PerformanceWidgetContainerTypes;\n  eventView: EventView;\n\n  fields: string[];\n  location: Location;\n  organization: Organization;\n\n  // Header;\n  title: string;\n  titleTooltip: string;\n  EmptyComponent?: React.FC<{height?: number}>;\n\n  HeaderActions?: HeaderActions<T>;\n  // Components\n  Subtitle?: Subtitle<T>;\n};\n\nexport type GenericPerformanceWithData<T extends WidgetDataConstraint> =\n  GenericPerformanceWidgetProps<T> & WidgetDataProps<T>;\n\nexport type WidgetDataProps<T> = {\n  removeWidgetDataForKey: (dataKey: string) => void;\n  setWidgetDataForKey: (dataKey: string, result?: WidgetDataResult) => void;\n  widgetData: T;\n};\n\nexport type EventsRequestChildrenProps = RenderProps;\n\nexport type QueryDefinitionWithKey<T extends WidgetDataConstraint> = QueryDefinition<\n  T,\n  T[string]\n> & {queryKey: string};\n\nexport type QueryHandlerProps<T extends WidgetDataConstraint> = {\n  api: Client;\n  eventView: EventView;\n  queries: QueryDefinitionWithKey<T>[];\n  queryProps: WidgetPropUnion<T>;\n  children?: React.ReactNode;\n} & WidgetDataProps<T>;\n\nexport type WidgetPropUnion<T extends WidgetDataConstraint> =\n  GenericPerformanceWidgetProps<T>;\n","import CHART_PALETTE from 'sentry/constants/chartPalette';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport {TransactionMetric} from 'sentry/utils/metrics/fields';\n\nimport {getTermHelp, PERFORMANCE_TERM} from '../../data';\n\nimport {GenericPerformanceWidgetDataType} from './types';\n\nexport interface ChartDefinition {\n  dataType: GenericPerformanceWidgetDataType;\n  fields: string[];\n\n  title: string;\n  titleTooltip: string; // The first field in the list will be treated as the primary field in most widgets (except for special casing).\n\n  chartColor?: string; // Optional. Will default to colors depending on placement in list or colors from the chart itself.\n\n  vitalStops?: {\n    meh: number;\n    poor: number;\n  };\n}\n\nexport enum PerformanceWidgetSetting {\n  DURATION_HISTOGRAM = 'duration_histogram',\n  LCP_HISTOGRAM = 'lcp_histogram',\n  FCP_HISTOGRAM = 'fcp_histogram',\n  FID_HISTOGRAM = 'fid_histogram',\n  APDEX_AREA = 'apdex_area',\n  P50_DURATION_AREA = 'p50_duration_area',\n  P75_DURATION_AREA = 'p75_duration_area',\n  P95_DURATION_AREA = 'p95_duration_area',\n  P99_DURATION_AREA = 'p99_duration_area',\n  P75_LCP_AREA = 'p75_lcp_area',\n  TPM_AREA = 'tpm_area',\n  FAILURE_RATE_AREA = 'failure_rate_area',\n  USER_MISERY_AREA = 'user_misery_area',\n  WORST_LCP_VITALS = 'worst_lcp_vitals',\n  WORST_FCP_VITALS = 'worst_fcp_vitals',\n  WORST_CLS_VITALS = 'worst_cls_vitals',\n  WORST_FID_VITALS = 'worst_fid_vitals',\n  MOST_IMPROVED = 'most_improved',\n  MOST_REGRESSED = 'most_regressed',\n  MOST_RELATED_ERRORS = 'most_related_errors',\n  MOST_RELATED_ISSUES = 'most_related_issues',\n  SLOW_HTTP_OPS = 'slow_http_ops',\n  SLOW_DB_OPS = 'slow_db_ops',\n  SLOW_RESOURCE_OPS = 'slow_resource_ops',\n  SLOW_BROWSER_OPS = 'slow_browser_ops',\n  COLD_STARTUP_AREA = 'cold_startup_area',\n  WARM_STARTUP_AREA = 'warm_startup_area',\n  SLOW_FRAMES_AREA = 'slow_frames_area',\n  FROZEN_FRAMES_AREA = 'frozen_frames_area',\n  MOST_SLOW_FRAMES = 'most_slow_frames',\n  MOST_FROZEN_FRAMES = 'most_frozen_frames',\n}\n\nconst WIDGET_PALETTE = CHART_PALETTE[5];\nexport const WIDGET_DEFINITIONS: ({\n  organization,\n  isMetricsData,\n}: {\n  organization: Organization;\n  isMetricsData?: boolean;\n}) => Record<PerformanceWidgetSetting, ChartDefinition> = ({\n  organization,\n  isMetricsData,\n}: {\n  organization: Organization;\n  isMetricsData?: boolean;\n}) => ({\n  [PerformanceWidgetSetting.DURATION_HISTOGRAM]: {\n    title: t('Duration Distribution'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.DURATION_DISTRIBUTION),\n    fields: ['transaction.duration'],\n    dataType: GenericPerformanceWidgetDataType.histogram,\n    chartColor: WIDGET_PALETTE[5],\n  },\n  [PerformanceWidgetSetting.LCP_HISTOGRAM]: {\n    title: t('LCP Distribution'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.DURATION_DISTRIBUTION),\n    fields: ['measurements.lcp'],\n    dataType: GenericPerformanceWidgetDataType.histogram,\n    chartColor: WIDGET_PALETTE[5],\n  },\n  [PerformanceWidgetSetting.FCP_HISTOGRAM]: {\n    title: t('FCP Distribution'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.DURATION_DISTRIBUTION),\n    fields: ['measurements.fcp'],\n    dataType: GenericPerformanceWidgetDataType.histogram,\n    chartColor: WIDGET_PALETTE[5],\n  },\n  [PerformanceWidgetSetting.FID_HISTOGRAM]: {\n    title: t('FID Distribution'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.DURATION_DISTRIBUTION),\n    fields: ['measurements.fid'],\n    dataType: GenericPerformanceWidgetDataType.histogram,\n    chartColor: WIDGET_PALETTE[5],\n  },\n  [PerformanceWidgetSetting.WORST_LCP_VITALS]: {\n    title: t('Worst LCP Web Vitals'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.LCP),\n    fields: isMetricsData\n      ? [`count(${TransactionMetric.SENTRY_TRANSACTIONS_MEASUREMENTS_LCP})`]\n      : ['measurements.lcp'],\n    vitalStops: {\n      poor: 4000,\n      meh: 2500,\n    },\n    dataType: GenericPerformanceWidgetDataType.vitals,\n  },\n  [PerformanceWidgetSetting.WORST_FCP_VITALS]: {\n    title: t('Worst FCP Web Vitals'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.FCP),\n    fields: isMetricsData\n      ? [`count(${TransactionMetric.SENTRY_TRANSACTIONS_MEASUREMENTS_FCP})`]\n      : ['measurements.fcp'],\n    vitalStops: {\n      poor: 3000,\n      meh: 1000,\n    },\n    dataType: GenericPerformanceWidgetDataType.vitals,\n  },\n  [PerformanceWidgetSetting.WORST_FID_VITALS]: {\n    title: t('Worst FID Web Vitals'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.FID),\n    fields: isMetricsData\n      ? [`count(${TransactionMetric.SENTRY_TRANSACTIONS_MEASUREMENTS_FID})`]\n      : ['measurements.fid'],\n    vitalStops: {\n      poor: 300,\n      meh: 100,\n    },\n    dataType: GenericPerformanceWidgetDataType.vitals,\n  },\n  [PerformanceWidgetSetting.WORST_CLS_VITALS]: {\n    title: t('Worst CLS Web Vitals'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.CLS),\n    fields: isMetricsData\n      ? [`count(${TransactionMetric.SENTRY_TRANSACTIONS_MEASUREMENTS_CLS})`]\n      : ['measurements.cls'],\n    vitalStops: {\n      poor: 0.25,\n      meh: 0.1,\n    },\n    dataType: GenericPerformanceWidgetDataType.vitals,\n  },\n  [PerformanceWidgetSetting.TPM_AREA]: {\n    title: t('Transactions Per Minute'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.TPM),\n    fields: isMetricsData\n      ? [`count(${TransactionMetric.SENTRY_TRANSACTIONS_TRANSACTION_DURATION})`]\n      : ['tpm()'],\n    dataType: GenericPerformanceWidgetDataType.area,\n    chartColor: WIDGET_PALETTE[1],\n  },\n  [PerformanceWidgetSetting.APDEX_AREA]: {\n    title: t('Apdex'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.APDEX_NEW),\n    fields: ['apdex()'],\n    dataType: GenericPerformanceWidgetDataType.area,\n    chartColor: WIDGET_PALETTE[4],\n  },\n  [PerformanceWidgetSetting.P50_DURATION_AREA]: {\n    title: t('p50 Duration'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.P50),\n    fields: isMetricsData\n      ? [`p50(${TransactionMetric.SENTRY_TRANSACTIONS_TRANSACTION_DURATION})`]\n      : ['p50(transaction.duration)'],\n    dataType: GenericPerformanceWidgetDataType.area,\n    chartColor: WIDGET_PALETTE[3],\n  },\n  [PerformanceWidgetSetting.P75_DURATION_AREA]: {\n    title: t('p75 Duration'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.P75),\n    fields: isMetricsData\n      ? [`p75(${TransactionMetric.SENTRY_TRANSACTIONS_TRANSACTION_DURATION})`]\n      : ['p75(transaction.duration)'],\n    dataType: GenericPerformanceWidgetDataType.area,\n    chartColor: WIDGET_PALETTE[3],\n  },\n  [PerformanceWidgetSetting.P95_DURATION_AREA]: {\n    title: t('p95 Duration'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.P95),\n    fields: isMetricsData\n      ? [`p95(${TransactionMetric.SENTRY_TRANSACTIONS_TRANSACTION_DURATION})`]\n      : ['p95(transaction.duration)'],\n    dataType: GenericPerformanceWidgetDataType.area,\n    chartColor: WIDGET_PALETTE[3],\n  },\n  [PerformanceWidgetSetting.P99_DURATION_AREA]: {\n    title: t('p99 Duration'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.P99),\n    fields: isMetricsData\n      ? [`p99(${TransactionMetric.SENTRY_TRANSACTIONS_TRANSACTION_DURATION})`]\n      : ['p99(transaction.duration)'],\n    dataType: GenericPerformanceWidgetDataType.area,\n    chartColor: WIDGET_PALETTE[3],\n  },\n  [PerformanceWidgetSetting.P75_LCP_AREA]: {\n    title: t('p75 LCP'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.P75),\n    fields: isMetricsData\n      ? [`p75(${TransactionMetric.SENTRY_TRANSACTIONS_MEASUREMENTS_LCP})`]\n      : ['p75(measurements.lcp)'],\n    dataType: GenericPerformanceWidgetDataType.area,\n    chartColor: WIDGET_PALETTE[1],\n  },\n  [PerformanceWidgetSetting.FAILURE_RATE_AREA]: {\n    title: t('Failure Rate'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.FAILURE_RATE),\n    fields: isMetricsData\n      ? [`count(${TransactionMetric.SENTRY_TRANSACTIONS_TRANSACTION_DURATION})`]\n      : ['failure_rate()'],\n    dataType: GenericPerformanceWidgetDataType.area,\n    chartColor: WIDGET_PALETTE[2],\n  },\n  [PerformanceWidgetSetting.USER_MISERY_AREA]: {\n    title: t('User Misery'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.USER_MISERY),\n    fields: [`user_misery()`],\n    dataType: GenericPerformanceWidgetDataType.area,\n    chartColor: WIDGET_PALETTE[0],\n  },\n  [PerformanceWidgetSetting.COLD_STARTUP_AREA]: {\n    title: t('Cold Startup Time'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.APP_START_COLD),\n    fields: isMetricsData\n      ? [`p75(${TransactionMetric.SENTRY_TRANSACTIONS_MEASUREMENTS_APP_START_COLD})`]\n      : ['p75(measurements.app_start_cold)'],\n    dataType: GenericPerformanceWidgetDataType.area,\n    chartColor: WIDGET_PALETTE[4],\n  },\n  [PerformanceWidgetSetting.WARM_STARTUP_AREA]: {\n    title: t('Warm Startup Time'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.APP_START_WARM),\n    fields: isMetricsData\n      ? [`p75(${TransactionMetric.SENTRY_TRANSACTIONS_MEASUREMENTS_APP_START_WARM})`]\n      : ['p75(measurements.app_start_warm)'],\n    dataType: GenericPerformanceWidgetDataType.area,\n    chartColor: WIDGET_PALETTE[3],\n  },\n  [PerformanceWidgetSetting.SLOW_FRAMES_AREA]: {\n    title: t('Slow Frames'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.SLOW_FRAMES),\n    fields: isMetricsData\n      ? [`p75(${TransactionMetric.SENTRY_TRANSACTIONS_MEASUREMENTS_FRAMES_SLOW_RATE})`]\n      : ['p75(measurements.frames_slow_rate)'],\n    dataType: GenericPerformanceWidgetDataType.area,\n    chartColor: WIDGET_PALETTE[0],\n  },\n  [PerformanceWidgetSetting.FROZEN_FRAMES_AREA]: {\n    title: t('Frozen Frames'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.FROZEN_FRAMES),\n    fields: isMetricsData\n      ? [`p75(${TransactionMetric.SENTRY_TRANSACTIONS_MEASUREMENTS_FRAMES_FROZEN_RATE})`]\n      : ['p75(measurements.frames_frozen_rate)'],\n    dataType: GenericPerformanceWidgetDataType.area,\n    chartColor: WIDGET_PALETTE[5],\n  },\n  [PerformanceWidgetSetting.MOST_RELATED_ERRORS]: {\n    title: t('Most Related Errors'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.MOST_ERRORS),\n    fields: [`failure_count()`],\n    dataType: GenericPerformanceWidgetDataType.line_list,\n    chartColor: WIDGET_PALETTE[0],\n  },\n  [PerformanceWidgetSetting.MOST_RELATED_ISSUES]: {\n    title: t('Most Related Issues'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.MOST_ISSUES),\n    fields: [`count()`],\n    dataType: GenericPerformanceWidgetDataType.line_list,\n    chartColor: WIDGET_PALETTE[0],\n  },\n  [PerformanceWidgetSetting.SLOW_HTTP_OPS]: {\n    title: t('Slow HTTP Ops'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.SLOW_HTTP_SPANS),\n    fields: [`p75(spans.http)`],\n    dataType: GenericPerformanceWidgetDataType.line_list,\n    chartColor: WIDGET_PALETTE[0],\n  },\n  [PerformanceWidgetSetting.SLOW_BROWSER_OPS]: {\n    title: t('Slow Browser Ops'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.SLOW_HTTP_SPANS),\n    fields: [`p75(spans.browser)`],\n    dataType: GenericPerformanceWidgetDataType.line_list,\n    chartColor: WIDGET_PALETTE[0],\n  },\n  [PerformanceWidgetSetting.SLOW_RESOURCE_OPS]: {\n    title: t('Slow Resource Ops'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.SLOW_HTTP_SPANS),\n    fields: [`p75(spans.resource)`],\n    dataType: GenericPerformanceWidgetDataType.line_list,\n    chartColor: WIDGET_PALETTE[0],\n  },\n  [PerformanceWidgetSetting.SLOW_DB_OPS]: {\n    title: t('Slow DB Ops'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.SLOW_HTTP_SPANS),\n    fields: [`p75(spans.db)`],\n    dataType: GenericPerformanceWidgetDataType.line_list,\n    chartColor: WIDGET_PALETTE[0],\n  },\n  [PerformanceWidgetSetting.MOST_SLOW_FRAMES]: {\n    title: t('Most Slow Frames'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.SLOW_FRAMES),\n    fields: isMetricsData\n      ? [`avg(${TransactionMetric.SENTRY_TRANSACTIONS_MEASUREMENTS_FRAMES_SLOW})`]\n      : ['avg(measurements.frames_slow)'],\n    dataType: GenericPerformanceWidgetDataType.line_list,\n    chartColor: WIDGET_PALETTE[0],\n  },\n  [PerformanceWidgetSetting.MOST_FROZEN_FRAMES]: {\n    title: t('Most Frozen Frames'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.FROZEN_FRAMES),\n    fields: isMetricsData\n      ? [`avg(${TransactionMetric.SENTRY_TRANSACTIONS_MEASUREMENTS_FRAMES_FROZEN})`]\n      : ['avg(measurements.frames_frozen)'],\n    dataType: GenericPerformanceWidgetDataType.line_list,\n    chartColor: WIDGET_PALETTE[0],\n  },\n  [PerformanceWidgetSetting.MOST_IMPROVED]: {\n    title: t('Most Improved'),\n    titleTooltip: t(\n      'This compares the baseline (%s) of the past with the present.',\n      'improved'\n    ),\n    fields: [],\n    dataType: GenericPerformanceWidgetDataType.trends,\n  },\n  [PerformanceWidgetSetting.MOST_REGRESSED]: {\n    title: t('Most Regressed'),\n    titleTooltip: t(\n      'This compares the baseline (%s) of the past with the present.',\n      'regressed'\n    ),\n    fields: [],\n    dataType: GenericPerformanceWidgetDataType.trends,\n  },\n});\n"],"names":["StyledPanel","Panel","space","Div","DataStateSwitch","props","isErrored","errorComponent","isLoading","loadingComponent","hasData","Fragment","dataComponents","emptyComponent","QueryHandler","children","queries","length","filter","q","enabled","widgetData","map","query","SingleQueryHandler","queryKey","globalSelection","queryProps","eventView","getPageFilters","start","datetime","getUtcToLocalDateObject","end","useEffect","removeWidgetDataForKey","component","fields","yAxis","period","project","projects","environment","environments","organization","orgSlug","slug","getQueryWithAdditionalConditions","referrer","setting","chartSetting","replaceAll","results","QueryResultSaver","transformed","transform","setWidgetDataForKey","WidgetHeader","title","titleTooltip","Subtitle","HeaderActions","WidgetHeaderContainer","TitleContainer","StyledHeaderTitleLegend","position","size","HeaderActionsContainer","HeaderTitleLegend","GenericPerformanceWidget","allWidgetData","setWidgetData","useState","widgetDataRef","useRef","useCallback","dataKey","result","newWidgetData","current","widgetProps","Object","entries","Queries","key","definition","api","useApi","totalHeight","Visualizations","reduce","acc","curr","height","_DataDisplay","chartHeight","containerType","EmptyComponent","Container","getPerformanceWidgetContainer","numberKeys","keys","missingDataKeys","values","every","d","some","ContentContainer","DefaultErrorComponent","Visualization","index","noPadding","bottomPadding","onClick","trackDataComponentClicks","trackAdvancedAnalyticsEvent","widget_type","grid","defaultGrid","queryFields","PerformanceWidgetPlaceholder","withRouter","color","left","right","top","bottom","p","Placeholder","defaultProps","SelectableList","items","item","SelectableItem","isSelected","selectedIndex","currentIndex","setSelectedIndex","radioColor","ListItemContainer","ItemRadioContainer","role","checked","onChange","RightAlignedCell","theme","gray300","fontSizeMedium","GrowLink","Link","WidgetEmptyStateWarning","StyledEmptyStateWarning","small","t","ListClose","StyledTooltip","StyledIconClose","setSelectListIndex","Tooltip","IconClose","gray200","EmptyStateWarning","border","VisualizationDataState","GenericPerformanceWidgetDataType","PerformanceWidgetSetting","WIDGET_PALETTE","CHART_PALETTE","WIDGET_DEFINITIONS","isMetricsData","DURATION_HISTOGRAM","getTermHelp","PERFORMANCE_TERM","dataType","chartColor","LCP_HISTOGRAM","FCP_HISTOGRAM","FID_HISTOGRAM","WORST_LCP_VITALS","TransactionMetric","vitalStops","poor","meh","WORST_FCP_VITALS","WORST_FID_VITALS","WORST_CLS_VITALS","TPM_AREA","APDEX_AREA","P50_DURATION_AREA","P75_DURATION_AREA","P95_DURATION_AREA","P99_DURATION_AREA","P75_LCP_AREA","FAILURE_RATE_AREA","USER_MISERY_AREA","COLD_STARTUP_AREA","WARM_STARTUP_AREA","SLOW_FRAMES_AREA","FROZEN_FRAMES_AREA","MOST_RELATED_ERRORS","MOST_RELATED_ISSUES","SLOW_HTTP_OPS","SLOW_BROWSER_OPS","SLOW_RESOURCE_OPS","SLOW_DB_OPS","MOST_SLOW_FRAMES","MOST_FROZEN_FRAMES","MOST_IMPROVED","MOST_REGRESSED"],"sourceRoot":""}