{"version":3,"file":"chunks/app_actions_organizationActions_tsx-app_components_modals_helpSearchModal_tsx-app_data_forms_-e019ac.xxxxxxxxxxxxxxxxxxxx.js","mappings":"qSAEA,MAEA,E,MAF4BA,GAAAA,cAAqB,CAAC,QAAS,gBAAiB,Y,2XCiC5E,SAASC,EAAT,GAA8D,IAA5B,KAACC,KAASC,GAAkB,EAC5D,MAAMC,UAAsBC,EAAAA,UAAkC,uDAGpD,CACNC,MAAOC,EAAAA,EAAAA,IAAcL,GAAMM,KAAIC,GAAMA,EAAGN,QAJkB,0BAoB9CI,EAAAA,EAAAA,QACZ,CAACG,EAAoBJ,IAA2BK,KAAKC,YAAYF,EAAUJ,SAC3EO,IAfFC,uBACEH,KAAKI,cAGPH,YAAYF,EAAoBJ,GAE1BI,IAAaR,GAIjBS,KAAKK,SAAS,CAACV,MAAOA,EAAME,KAAIC,GAAMA,EAAGN,OAQ3Cc,SACE,MAAM,SAACC,GAAYf,EAEnB,OAAKQ,KAAKQ,MAAMb,OAAUK,KAAKQ,MAAMb,MAAMc,OAInB,mBAAbF,EACFA,EAAS,CAACZ,MAAOK,KAAKQ,MAAMb,QAG9BK,KAAKQ,MAAMb,MAPT,MAWb,OAxCMF,EADsD,oCACtDA,EADsD,cAEpC,QAAOF,OAuCxB,QAACE,EAAD,IAzCAH,EAAAA,YAAAA,OA4CT,W,s4BC5De,SAASoB,EAAT,GAA8D,IAAtC,IAACC,EAAD,WAAMC,EAAN,SAAkBC,GAAoB,EAC3E,MAAM,gBAACC,EAAD,iBAAkBC,GAAoBF,EAEtCG,EAA8B,GACpC,IAAIC,EAAQL,EAGZ,OAAa,CACX,MAAMM,EAAYD,EAAME,QAAQL,GAC1BM,EAAeF,EAAYJ,EAAgBL,OACjD,IAAmB,IAAfS,IAAyD,IAArCD,EAAME,QAAQJ,GACpC,MAEFE,EAAQA,EAAMI,MAAM,EAAGH,GAAaD,EAAMI,MAAMD,GAEhD,MAAME,EAAaL,EAAME,QAAQJ,GAC3BQ,EAAgBD,EAAaP,EAAiBN,OACpDQ,EAAQA,EAAMI,MAAM,EAAGC,GAAcL,EAAMI,MAAME,GAEjDP,EAAQQ,KAAK,CAACN,EAAWI,EAAa,IAGxC,MAAO,CAACX,IAAAA,EAAKM,MAAAA,EAAOD,QAAAA,G,6CCHtB,MAAMS,EAAY,CAChBX,gBAAiB,SACjBC,iBAAkB,WAGpB,MAAMW,UAAmBhC,EAAAA,UAA8B,uDACtC,CACbiC,SAAS,EACTC,QAAS,MAH0C,qBAkB5C,IAAIC,EAAAA,mBAAmB,CAAC,OAAQ,cAAe,UAAW,WAlBd,uBAgC1CC,GAAAA,CAAS9B,KAAK+B,gBAAiB,MA1B1CC,yBAC2B9B,IAArBF,KAAKR,MAAMyC,OACbjC,KAAKkC,SAASlC,KAAKR,MAAMyC,OAI7BE,mBAAmBC,GACbA,EAAUH,QAAUjC,KAAKR,MAAMyC,OACjCjC,KAAKkC,SAASE,EAAUH,OAMP,sBAACA,GACpBjC,KAAKK,SAAS,CAACsB,SAAS,IACxB,MAAM,UAACU,EAAY,IAAMrC,KAAKR,MAKxBoC,EAeV,SAA0BA,GACxB,MAAMU,EAAkB,GAiDxB,OA/CAV,EAAQW,SAAQC,IACd,MAAMC,EAAeD,EAAQE,KAAK7C,KAAY8C,IAAO,UACnD,MAAMC,EAAQlC,EAAe,CAC3BC,IAAK,QACLC,WAAU,UAAE+B,EAAIC,aAAN,QAAe,GACzB/B,SAAUY,IAENoB,EAAcnC,EAAe,CACjCC,IAAK,cACLC,WAAU,UAAE+B,EAAIG,YAAN,QAAc,GACxBjC,SAAUY,IAaZ,MAAO,CAACsB,KAViB,IACpBJ,EACHK,WAAY,OACZC,WAAa,QAAON,EAAIO,OACxBN,MAAOO,IAAAA,SAAA,UAAmBR,EAAIC,aAAvB,QAAgC,IACvCQ,MAAOT,EAAIU,QAAQC,SACnBT,YAAaF,EAAIG,KAAOK,IAAAA,SAAmBR,EAAIG,WAAQ5C,EACvDqD,GAAIZ,EAAIa,KAGIC,QAAS,CAACb,EAAOC,GAAca,MAAO,MAItD,GAAIjB,EAAahC,OAAS,EAKxB,OAJAgC,EAAa,GAAGM,KAAKY,eAAiBnB,EAAQjD,KAC9CkD,EAAa,GAAGM,KAAKa,aAAenB,EAAahC,YAEjD6B,EAAMd,QAAQiB,GAKhB,MAAMoB,EAA8B,CAClCb,WAAY,OACZC,WAAa,QAAOT,EAAQU,OAC5BN,MAAQ,iBAAgBJ,EAAQjD,OAChCoE,eAAgBnB,EAAQjD,KACxBuE,OAAO,GAGTxB,EAAMd,KAAK,CAACuB,KAAMc,EAAiBH,MAAO,OAGrCpB,EAjEWyB,OAHY/D,KAAKgE,OAAO/B,MAAMA,EAAO,CACnDI,UAAWA,EAAUxC,KAAIoE,IAAQ,wBAAIC,EAAAA,EAAAA,iBAAgBD,UAApB,aAAI,EAA2BE,WAIlEnE,KAAKK,SAAS,CAACsB,SAAS,EAAOC,QAAAA,IAKjCtB,SACE,OAAON,KAAKR,MAAMe,SAAS,CACzB6D,UAAWpE,KAAKQ,MAAMmB,QACtBC,QAAS5B,KAAKQ,MAAMoB,WArCpBF,EAAAA,YAAAA,aAgGN,SAAe2C,EAAAA,EAAAA,IAAkBC,EAAAA,EAAAA,YAAW5C,I,uLCtH5C,MAAM6C,EAAe,IAA8D,UAA7D,KAACxB,EAAD,QAAOU,EAAP,UAAgBe,EAAhB,YAA2BC,GAAkC,EACjF,MAAMd,OACoBzD,IAAxB6C,EAAKY,gBACH,QAACe,EAAD,YACE,QAAC,KAAD,KACCC,EAAAA,EAAAA,GAAE,UAAW5B,EAAKY,iBACnB,QAACiB,EAAD,WAAQC,EAAAA,EAAAA,IAAG,YAAa,aAAd,UAA4B9B,EAAKa,oBAAjC,QAAiD,QAE3D,KAEN,OAAIb,EAAKe,OAEL,QAAC,WAAD,WACGH,GACD,QAACmB,EAAD,WAAQH,EAAAA,EAAAA,GAAE,qBAAsB5B,EAAKY,sBAMzC,QAAC,WAAD,WACGA,GACD,QAAC,IAAD,IAAyBa,EAAWC,YAAaA,EAAjD,UACE,QAAC,IAAD,CAAcA,YAAaA,EAAa1B,KAAMA,EAAMU,QAASA,UAvB/Dc,EAAAA,YAAAA,eA8BN,MAAMQ,EAAavF,IACjB,QAAC,IAAD,IACMA,EACJwF,QAAS,CAACtD,GACVuD,UAAW,EACXC,eAAe,EACfC,WAAYZ,IANVQ,EAAAA,YAAAA,aAUN,MAAML,GAAiB,OAAO,MAAP,sBAAH,uEAGXU,EAAAA,EAAAA,GAAM,GAHK,mCAKJC,GAAKA,EAAEC,MAAMC,qBALT,aAMPH,EAAAA,EAAAA,GAAM,GANC,KAMKA,EAAAA,EAAAA,GAAM,GANX,gDASQC,GAAKA,EAAEC,MAAME,aATrB,MAadZ,GAAQ,OAAO,MAAP,sBAAH,cACIS,GAAKA,EAAEC,MAAMG,eADjB,WAEAJ,GAAKA,EAAEC,MAAMI,SAFb,KAKLZ,GAAQ,OAAO,MAAP,sBAAH,4CAGEM,EAAAA,EAAAA,GAAM,GAHR,WAIAC,GAAKA,EAAEC,MAAMK,SAJb,eAKIN,GAAKA,EAAEC,MAAMM,gBALjB,0BAMeP,GAAKA,EAAEC,MAAME,aAN5B,KASX,I,6ECxEA,SAASK,EAAT,GAMU,IANe,KACvBC,EADuB,WAEvBC,EAFuB,aAGvBC,EAHuB,YAIvBC,GAActB,EAAAA,EAAAA,GAAE,oDACbnF,GACK,EACR,MAAM8F,GAAQY,EAAAA,EAAAA,KAEd,OACE,QAACJ,EAAD,WACE,QAAC,KAAD,UACG,QAAEK,IAAKC,GAAP,SACC,QAAC,EAAD,IACM5G,EACJ6G,WAAW,eACXC,cAAeF,CAAY;;;;;;;wCAOCd,EAAMiB;gBAElCC,YAAa,QAAC,cAACC,GAAF,SACX,QAACC,EAAD,WACE,QAACC,EAAD,CACEC,WAAS,KACLH,EAAc,CAACI,KAAM,OAAQC,MAAOb,EAAaA,YAAAA,SAI3Dc,cACE,QAAC,IAAD,CAAMxH,KAAK,oBAAyByG,aAAAA,EAAcD,WAAAA,WAlCvDF,EAAAA,YAAAA,kBA2CT,MAAMa,GAAe,OAAO,MAAP,qBAAH,YACLtB,EAAAA,EAAAA,GAAM,KADD,KAIZuB,GAAQ,OAAO,QAAP,qBAAH,uBAEEvB,EAAAA,EAAAA,GAAM,GAFR,sEAYE4B,EAAW,CAAH,uDAMrB,GAAeC,EAAAA,EAAAA,GAAiBpB,I,sGC9EzB,MAAMqB,EAAQ,4BAqBrB,EAnBqC,CACnC,CAEEtE,MAAO,uBACPuE,OAAQ,CACN,CACE5H,KAAM,QACNsH,KAAM,SAGNC,MAAO,mBACPb,YAAa,6BACbmB,KAAM,kDACNC,kBAAkB,O,2MCC1B,MAAMC,EAAoE,CACxEC,YAAa,C,4CAACC,GAEdhH,MAAO,GACPiH,QAAQ,EAGRC,kBACE,OAAO1H,KAAKQ,OAGdmH,OACE3H,KAAKQ,MAAQ,GACbR,KAAKyH,QAAS,GAGhBG,SAASC,GACP7H,KAAK8H,IAAID,IAGXE,aAAaC,EAAoBC,GAC3BD,EAAK7D,OAAS8D,EAAK9D,OAIvBnE,KAAKkI,OAAOF,EAAK7D,MACjBnE,KAAK8H,IAAIG,KAGXE,gBAAgBhE,GACdnE,KAAKkI,OAAO/D,IAGdiE,IAAIjE,GACF,OAAOnE,KAAKQ,MAAM6H,MAAMtF,GAAuBA,EAAKoB,OAASA,KAG/DmE,SACE,OAAOtI,KAAKQ,OAGd0H,OAAO/D,GACLnE,KAAKQ,MAAQR,KAAKQ,MAAM+H,QAAOxF,GAAQoB,IAASpB,EAAKoB,OACrDnE,KAAKwI,QAAQxI,KAAKQ,QAGpBsH,IAAI/E,GACF,IAAI0F,GAAQ,EACZzI,KAAKQ,MAAM+B,SAAQ,CAACmG,EAAUC,KACxBD,EAASE,KAAO7F,EAAK6F,KACvB7F,EAAO,IAAI2F,KAAa3F,GACxB/C,KAAKQ,MAAMmI,GAAO5F,EAClB0F,GAAQ,MAGPA,IACHzI,KAAKQ,MAAQ,IAAIR,KAAKQ,MAAOuC,IAE/B/C,KAAKwI,QAAQxI,KAAKQ,QAGpBqI,KAAKvG,GACHtC,KAAKQ,MAAQ8B,EACbtC,KAAKyH,QAAS,EACdzH,KAAKwI,QAAQlG,KAOjB,EAH2BjD,IAAAA,YAAmBiI,I,mRC9C9C,MAAMA,EAA2E,CAC/EwB,UAAW,GACXnH,SAAS,EAETgG,OACE3H,KAAK+I,QAEL/I,KAAKgJ,SAASC,EAAAA,EAAAA,eAA+BjJ,KAAKkJ,WAClDlJ,KAAKgJ,SAASC,EAAAA,EAAAA,WAA2BjJ,KAAK+H,cAC9C/H,KAAKgJ,SAASC,EAAAA,EAAAA,cAA8BjJ,KAAKmJ,iBACjDnJ,KAAKgJ,SAASC,EAAAA,EAAAA,aAA6BjJ,KAAKoJ,iBAChDpJ,KAAKgJ,SAASC,EAAAA,EAAAA,iBAAiCjJ,KAAKqJ,oBACpDrJ,KAAKgJ,SAASC,EAAAA,EAAAA,kBAAkCjJ,KAAKsJ,cACrDtJ,KAAKgJ,SAASC,EAAAA,EAAAA,MAAsBjJ,KAAK+I,OACzC/I,KAAKgJ,SAASC,EAAAA,EAAAA,cAA8BjJ,KAAKuJ,iBAEjDvJ,KAAKgJ,SAASQ,EAAAA,EAAAA,kBAA+BxJ,KAAKyJ,eAGpDV,QACE/I,KAAK8I,UAAY,GACjB9I,KAAK2B,SAAU,GAGjByH,gBAAgB9G,GACd,MAAMoH,EAAUpH,EAAMzC,KAAI8J,GAAW,CAACA,EAAQf,GAAIe,KAElD3J,KAAK8I,UAAYc,OAAOC,YAAYH,GACpC1J,KAAK2B,SAAU,EAEf3B,KAAKwI,QAAQ,IAAIsB,IAAIF,OAAOG,KAAK/J,KAAK8I,cAGxCf,aAAaiC,EAAkBC,GAC7B,MAAMC,EAAclK,KAAKmK,UAAUH,GAEnC,IAAKE,EACH,OAGF,MAAME,EAAa,IAAIF,EAAa/F,KAAM8F,GAE1CjK,KAAK8I,UAAY,IAAI9I,KAAK8I,UAAW,CAACsB,EAAWxB,IAAKwB,GACtDpK,KAAKwI,QAAQ,IAAIsB,IAAI,CAACI,EAAYtB,OAGpCO,gBAAgBQ,GACd3J,KAAK8I,UAAY,IAAI9I,KAAK8I,UAAW,CAACa,EAAQf,IAAKe,GACnD3J,KAAKwI,QAAQ,IAAIsB,IAAI,CAACH,EAAQf,OAGhCW,gBAAgBc,GACd,MAAMV,EAAU3J,KAAKsK,QAAQD,EAAKzB,IAElC,IAAKe,EACH,OAGF,MAAMS,EAAa,IAAIT,KAAYU,GAEnCrK,KAAK8I,UAAY,IAAI9I,KAAK8I,UAAW,CAACa,EAAQf,IAAKwB,GACnDpK,KAAKwI,QAAQ,IAAIsB,IAAI,CAACO,EAAKzB,OAG7BS,mBAAmBgB,GACjB,MAAME,EAAUX,OAAOW,QAAQF,GAAQ,IAAI9B,QACzC,QAAEiC,GAAF,SAAiBA,KAAaxK,KAAK8I,aAIrCyB,EAAQhI,SAAQ,IAAwB,IAAtBiI,EAAWC,GAAW,EACtCzK,KAAK8I,UAAU0B,GAAWC,MAAQA,KAGpC,MAAMC,EAAaH,EAAQ1K,KAAI,QAAE2K,GAAF,SAAiBA,KAChDxK,KAAKwI,QAAQ,IAAIsB,IAAIY,KAQvBjB,aAAakB,GAEX,MAAMC,EAAW5K,KAAKsI,SAASC,QAAO,QAAC,MAACsC,GAAF,SACpCA,EAAMxC,MAAK,QAAC,KAAClE,GAAF,SAAYA,IAASwG,QAGlCC,EAASrI,SAAQoH,GAAW3J,KAAK8K,sBAAsBH,EAAUhB,KAEjE,MAAMoB,EAAqBH,EAAS/K,KAAI8J,GAAWA,EAAQf,KAC3D5I,KAAKwI,QAAQ,IAAIsB,IAAIiB,KAGvBzB,aAAaqB,EAAkBK,GAC7B,MAAMrB,EAAU3J,KAAKmK,UAAUa,GAE1BrB,IAIL3J,KAAK8K,sBAAsBH,EAAUhB,GACrC3J,KAAKwI,QAAQ,IAAIsB,IAAI,CAACH,EAAQf,QAGhCM,UAAU+B,EAAYD,GACpB,MAAMrB,EAAU3J,KAAKmK,UAAUa,GAG/B,IAAKrB,EACH,OAGF,MAAMS,EAAa,IAAIT,EAASkB,MAAO,IAAIlB,EAAQkB,MAAOI,IAE1DjL,KAAK8I,UAAY,IAAI9I,KAAK8I,UAAW,CAACa,EAAQf,IAAKwB,GACnDpK,KAAKwI,QAAQ,IAAIsB,IAAI,CAACH,EAAQf,OAIhCkC,sBAAsBH,EAAkBhB,GACtC,MAAMuB,EAAWvB,EAAQkB,MAAMtC,QAAO,QAAC,KAACpE,GAAF,SAAYA,IAASwG,KACrDP,EAAa,IAAIT,EAASkB,MAAOK,GAEvClL,KAAK8I,UAAY,IAAI9I,KAAK8I,UAAW,CAACa,EAAQf,IAAKwB,IAGrDhG,YACE,OAAOpE,KAAK2B,SAGd2G,SACE,OAAOsB,OAAOuB,OAAOnL,KAAK8I,WAAWsC,MAAK,CAACC,EAAGC,IAAMD,EAAElH,KAAKoH,cAAcD,EAAEnH,SAG7EmG,QAAQ1B,GACN,OAAO5I,KAAKsI,SAASD,MAAKsB,GAAWA,EAAQf,KAAOA,KAGtDuB,UAAUhG,GACR,OAAOnE,KAAKsI,SAASD,MAAKsB,GAAWA,EAAQxF,OAASA,KAGxDqH,WACE,MAAO,CACLZ,SAAU5K,KAAKsI,SACf3G,QAAS3B,KAAK2B,WAQpB,EAHsBtC,IAAAA,YAAmBiI,I","sources":["webpack:///./app/actions/organizationActions.tsx","webpack:///./app/components/hook.tsx","webpack:///./app/utils/parseHtmlMarks.tsx","webpack:///./app/components/search/sources/helpSource.tsx","webpack:///./app/components/helpSearch.tsx","webpack:///./app/components/modals/helpSearchModal.tsx","webpack:///./app/data/forms/accountEmails.tsx","webpack:///./app/stores/organizationsStore.tsx","webpack:///./app/stores/projectsStore.tsx"],"sourcesContent":["import Reflux from 'reflux';\n\nconst OrganizationActions = Reflux.createActions(['reset', 'fetchOrgError', 'update']);\n\nexport default OrganizationActions;\n","import * as React from 'react';\n\nimport HookStore from 'sentry/stores/hookStore';\nimport {HookName, Hooks} from 'sentry/types/hooks';\n\ntype Props<H extends HookName> = {\n  /**\n   * The name of the hook as listed in hookstore.add(hookName, callback)\n   */\n  name: H;\n  /**\n   * If children are provided as a function to the Hook, the hooks will be\n   * passed down as a render prop.\n   */\n  children?: (opts: {hooks: Array<Hooks[H]>}) => React.ReactNode;\n} & Omit<Parameters<Hooks[H]>[0], 'name'>;\n\ntype HookState<H extends HookName> = {\n  hooks: Array<Hooks[H]>;\n};\n\n/**\n * Instead of accessing the HookStore directly, use this.\n *\n * If the hook slot needs to perform anything w/ the hooks, you can pass a\n * function as a child and you will receive an object with a `hooks` key\n *\n * Example:\n *\n *   <Hook name=\"my-hook\">\n *     {({hooks}) => hooks.map(hook => (\n *       <Wrapper>{hook}</Wrapper>\n *     ))}\n *   </Hook>\n */\nfunction Hook<H extends HookName>({name, ...props}: Props<H>) {\n  class HookComponent extends React.Component<{}, HookState<H>> {\n    static displayName = `Hook(${name})`;\n\n    state = {\n      hooks: HookStore.get(name).map(cb => cb(props)),\n    };\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    handleHooks(hookName: HookName, hooks: Array<Hooks[H]>) {\n      // Make sure that the incoming hook update matches this component's hook name\n      if (hookName !== name) {\n        return;\n      }\n\n      this.setState({hooks: hooks.map(cb => cb(props))});\n    }\n\n    unsubscribe = HookStore.listen(\n      (hookName: HookName, hooks: Array<Hooks[H]>) => this.handleHooks(hookName, hooks),\n      undefined\n    );\n\n    render() {\n      const {children} = props;\n\n      if (!this.state.hooks || !this.state.hooks.length) {\n        return null;\n      }\n\n      if (typeof children === 'function') {\n        return children({hooks: this.state.hooks});\n      }\n\n      return this.state.hooks;\n    }\n  }\n\n  return <HookComponent />;\n}\n\nexport default Hook;\n","type Options = {\n  htmlString: string;\n  key: string;\n  markTags: {\n    highlightPostTag: string;\n    highlightPreTag: string;\n  };\n};\n\n/**\n * Parses the \"marked\" html strings into a {key, value, indices} (similar to\n * Fuse.js) object, where the indices are a set of zero indexed [start, end]\n * indices for what should be highlighted.\n *\n * @param key The key of the field, this mimics the Fuse match object\n * @param htmlString The html string to parse\n * @param markTags.highlightPreTag The left tag\n * @param markTags.highlightPostTag The right tag\n */\nexport default function parseHtmlMarks({key, htmlString, markTags}: Options) {\n  const {highlightPreTag, highlightPostTag} = markTags;\n\n  const indices: [number, number][] = [];\n  let value = htmlString;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const openIndex = value.indexOf(highlightPreTag);\n    const openIndexEnd = openIndex + highlightPreTag.length;\n    if (openIndex === -1 || value.indexOf(highlightPostTag) === -1) {\n      break;\n    }\n    value = value.slice(0, openIndex) + value.slice(openIndexEnd);\n\n    const closeIndex = value.indexOf(highlightPostTag);\n    const closeIndexEnd = closeIndex + highlightPostTag.length;\n    value = value.slice(0, closeIndex) + value.slice(closeIndexEnd);\n\n    indices.push([openIndex, closeIndex - 1]);\n  }\n\n  return {key, value, indices};\n}\n","import * as React from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport {\n  Result as SearchResult,\n  SentryGlobalSearch,\n  standardSDKSlug,\n} from '@sentry-internal/global-search';\nimport dompurify from 'dompurify';\nimport debounce from 'lodash/debounce';\n\nimport {Organization, Project} from 'sentry/types';\nimport parseHtmlMarks from 'sentry/utils/parseHtmlMarks';\nimport withLatestContext from 'sentry/utils/withLatestContext';\n\nimport {ChildProps, Result, ResultItem} from './types';\n\ntype Props = WithRouterProps & {\n  /**\n   * Render function that renders the global search result\n   */\n  children: (props: ChildProps) => React.ReactNode;\n  organization: Organization;\n  /**\n   * Specific platforms to filter reults to\n   */\n  platforms: string[];\n  project: Project;\n  /**\n   * The string to search the navigation routes for\n   */\n  query: string;\n};\n\ntype State = {\n  loading: boolean;\n  results: Result[];\n};\n\nconst MARK_TAGS = {\n  highlightPreTag: '<mark>',\n  highlightPostTag: '</mark>',\n};\n\nclass HelpSource extends React.Component<Props, State> {\n  state: State = {\n    loading: false,\n    results: [],\n  };\n\n  componentDidMount() {\n    if (this.props.query !== undefined) {\n      this.doSearch(this.props.query);\n    }\n  }\n\n  componentDidUpdate(nextProps: Props) {\n    if (nextProps.query !== this.props.query) {\n      this.doSearch(nextProps.query);\n    }\n  }\n\n  search = new SentryGlobalSearch(['docs', 'help-center', 'develop', 'blog']);\n\n  async unbouncedSearch(query: string) {\n    this.setState({loading: true});\n    const {platforms = []} = this.props;\n\n    const searchResults = await this.search.query(query, {\n      platforms: platforms.map(platform => standardSDKSlug(platform)?.slug!),\n    });\n    const results = mapSearchResults(searchResults);\n\n    this.setState({loading: false, results});\n  }\n\n  doSearch = debounce(this.unbouncedSearch, 300);\n\n  render() {\n    return this.props.children({\n      isLoading: this.state.loading,\n      results: this.state.results,\n    });\n  }\n}\n\nfunction mapSearchResults(results: SearchResult[]) {\n  const items: Result[] = [];\n\n  results.forEach(section => {\n    const sectionItems = section.hits.map<Result>(hit => {\n      const title = parseHtmlMarks({\n        key: 'title',\n        htmlString: hit.title ?? '',\n        markTags: MARK_TAGS,\n      });\n      const description = parseHtmlMarks({\n        key: 'description',\n        htmlString: hit.text ?? '',\n        markTags: MARK_TAGS,\n      });\n\n      const item: ResultItem = {\n        ...hit,\n        sourceType: 'help',\n        resultType: `help-${hit.site}` as ResultItem['resultType'],\n        title: dompurify.sanitize(hit.title ?? ''),\n        extra: hit.context.context1,\n        description: hit.text ? dompurify.sanitize(hit.text) : undefined,\n        to: hit.url,\n      };\n\n      return {item, matches: [title, description], score: 1};\n    });\n\n    // The first element should indicate the section.\n    if (sectionItems.length > 0) {\n      sectionItems[0].item.sectionHeading = section.name;\n      sectionItems[0].item.sectionCount = sectionItems.length;\n\n      items.push(...sectionItems);\n      return;\n    }\n\n    // If we didn't have any results for this section mark it as empty\n    const emptyHeaderItem: ResultItem = {\n      sourceType: 'help',\n      resultType: `help-${section.site}` as ResultItem['resultType'],\n      title: `No results in ${section.name}`,\n      sectionHeading: section.name,\n      empty: true,\n    };\n\n    items.push({item: emptyHeaderItem, score: 1});\n  });\n\n  return items;\n}\n\nexport {HelpSource};\nexport default withLatestContext(withRouter(HelpSource));\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Search} from 'sentry/components/search';\nimport SearchResult from 'sentry/components/search/searchResult';\nimport SearchResultWrapper from 'sentry/components/search/searchResultWrapper';\nimport HelpSource from 'sentry/components/search/sources/helpSource';\nimport {IconWindow} from 'sentry/icons';\nimport {t, tn} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\ntype HelpResult = Parameters<\n  React.ComponentProps<typeof HelpSource>['children']\n>[0]['results'][0];\n\ntype ResultItemProps = HelpResult & {\n  highlighted: boolean;\n  // TODO(ts): Improve types when we've typed more of the search components\n  itemProps: any;\n};\n\nconst renderResult = ({item, matches, itemProps, highlighted}: ResultItemProps) => {\n  const sectionHeading =\n    item.sectionHeading !== undefined ? (\n      <SectionHeading>\n        <IconWindow />\n        {t('From %s', item.sectionHeading)}\n        <Count>{tn('%s result', '%s results', item.sectionCount ?? 0)}</Count>\n      </SectionHeading>\n    ) : null;\n\n  if (item.empty) {\n    return (\n      <React.Fragment>\n        {sectionHeading}\n        <Empty>{t('No results from %s', item.sectionHeading)}</Empty>\n      </React.Fragment>\n    );\n  }\n\n  return (\n    <React.Fragment>\n      {sectionHeading}\n      <SearchResultWrapper {...itemProps} highlighted={highlighted}>\n        <SearchResult highlighted={highlighted} item={item} matches={matches} />\n      </SearchResultWrapper>\n    </React.Fragment>\n  );\n};\n\n// TODO(ts): Type based on Search props once that has types\nconst HelpSearch = props => (\n  <Search\n    {...props}\n    sources={[HelpSource]}\n    minSearch={3}\n    closeOnSelect={false}\n    renderItem={renderResult}\n  />\n);\n\nconst SectionHeading = styled('div')`\n  display: grid;\n  grid-template-columns: max-content 1fr max-content;\n  gap: ${space(1)};\n  align-items: center;\n  background: ${p => p.theme.backgroundSecondary};\n  padding: ${space(1)} ${space(2)};\n\n  &:not(:first-of-type) {\n    border-top: 1px solid ${p => p.theme.innerBorder};\n  }\n`;\n\nconst Count = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  color: ${p => p.theme.gray300};\n`;\n\nconst Empty = styled('div')`\n  display: flex;\n  align-items: center;\n  padding: ${space(2)};\n  color: ${p => p.theme.subText};\n  font-size: ${p => p.theme.fontSizeMedium};\n  border-top: 1px solid ${p => p.theme.innerBorder};\n`;\n\nexport default HelpSearch;\n","import {ClassNames, css, useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport HelpSearch from 'sentry/components/helpSearch';\nimport Hook from 'sentry/components/hook';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype Props = ModalRenderProps & {\n  organization: Organization;\n  placeholder?: string;\n};\n\nfunction HelpSearchModal({\n  Body,\n  closeModal,\n  organization,\n  placeholder = t('Search for documentation, FAQs, blog posts...'),\n  ...props\n}: Props) {\n  const theme = useTheme();\n\n  return (\n    <Body>\n      <ClassNames>\n        {({css: injectedCss}) => (\n          <HelpSearch\n            {...props}\n            entryPoint=\"sidebar_help\"\n            dropdownStyle={injectedCss`\n                width: 100%;\n                border: transparent;\n                border-top-left-radius: 0;\n                border-top-right-radius: 0;\n                position: initial;\n                box-shadow: none;\n                border-top: 1px solid ${theme.border};\n              `}\n            renderInput={({getInputProps}) => (\n              <InputWrapper>\n                <Input\n                  autoFocus\n                  {...getInputProps({type: 'text', label: placeholder, placeholder})}\n                />\n              </InputWrapper>\n            )}\n            resultFooter={\n              <Hook name=\"help-modal:footer\" {...{organization, closeModal}} />\n            }\n          />\n        )}\n      </ClassNames>\n    </Body>\n  );\n}\n\nconst InputWrapper = styled('div')`\n  padding: ${space(0.25)};\n`;\n\nconst Input = styled('input')`\n  width: 100%;\n  padding: ${space(1)};\n  border: none;\n  border-radius: 8px;\n  outline: none;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nexport const modalCss = css`\n  [role='document'] {\n    padding: 0;\n  }\n`;\n\nexport default withOrganization(HelpSearchModal);\n","import {JsonFormObject} from 'sentry/components/forms/type';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/account/emails/';\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'Add Secondary Emails',\n    fields: [\n      {\n        name: 'email',\n        type: 'string',\n\n        // additional data/props that is related to rendering of form field rather than data\n        label: 'Additional Email',\n        placeholder: 'e.g. secondary@example.com',\n        help: 'Designate an alternative email for this account',\n        showReturnButton: true,\n      },\n    ],\n  },\n];\n\nexport default formGroups;\n","import Reflux from 'reflux';\n\nimport OrganizationsActions from 'sentry/actions/organizationsActions';\nimport {Organization} from 'sentry/types';\n\ntype OrganizationsStoreInterface = {\n  add(item: Organization): void;\n  get(slug: string): Organization | undefined;\n\n  getAll(): Organization[];\n  load(items: Organization[]): void;\n  loaded: boolean;\n  onChangeSlug(prev: Organization, next: Organization): void;\n  onRemoveSuccess(slug: string): void;\n  onUpdate(org: Organization): void;\n  remove(slug: string): void;\n  state: Organization[];\n};\n\nconst storeConfig: Reflux.StoreDefinition & OrganizationsStoreInterface = {\n  listenables: [OrganizationsActions],\n\n  state: [],\n  loaded: false,\n\n  // So we can use Reflux.connect in a component mixin\n  getInitialState() {\n    return this.state;\n  },\n\n  init() {\n    this.state = [];\n    this.loaded = false;\n  },\n\n  onUpdate(org: Organization) {\n    this.add(org);\n  },\n\n  onChangeSlug(prev: Organization, next: Organization) {\n    if (prev.slug === next.slug) {\n      return;\n    }\n\n    this.remove(prev.slug);\n    this.add(next);\n  },\n\n  onRemoveSuccess(slug: string) {\n    this.remove(slug);\n  },\n\n  get(slug: Organization['slug']) {\n    return this.state.find((item: Organization) => item.slug === slug);\n  },\n\n  getAll() {\n    return this.state;\n  },\n\n  remove(slug: Organization['slug']) {\n    this.state = this.state.filter(item => slug !== item.slug);\n    this.trigger(this.state);\n  },\n\n  add(item: Organization) {\n    let match = false;\n    this.state.forEach((existing, idx) => {\n      if (existing.id === item.id) {\n        item = {...existing, ...item};\n        this.state[idx] = item;\n        match = true;\n      }\n    });\n    if (!match) {\n      this.state = [...this.state, item];\n    }\n    this.trigger(this.state);\n  },\n\n  load(items: Organization[]) {\n    this.state = items;\n    this.loaded = true;\n    this.trigger(items);\n  },\n};\n\nconst OrganizationsStore = Reflux.createStore(storeConfig) as Reflux.Store &\n  OrganizationsStoreInterface;\n\nexport default OrganizationsStore;\n","import Reflux from 'reflux';\n\nimport ProjectActions from 'sentry/actions/projectActions';\nimport TeamActions from 'sentry/actions/teamActions';\nimport {Project, Team} from 'sentry/types';\n\nimport {CommonStoreInterface} from './types';\n\ntype State = {\n  loading: boolean;\n  projects: Project[];\n};\n\ntype StatsData = Record<string, Project['stats']>;\n\n/**\n * Attributes that need typing but aren't part of the external interface,\n */\ntype Internals = {\n  itemsById: Record<string, Project>;\n  loading: boolean;\n  removeTeamFromProject(teamSlug: string, project: Project): void;\n};\n\ntype ProjectsStoreInterface = CommonStoreInterface<State> & {\n  getAll(): Project[];\n  getById(id?: string): Project | undefined;\n  getBySlug(slug?: string): Project | undefined;\n  init(): void;\n  isLoading(): boolean;\n  loadInitialData(projects: Project[]): void;\n  onAddTeam(team: Team, projectSlug: string): void;\n  onChangeSlug(prevSlug: string, newSlug: string): void;\n  onCreateSuccess(project: Project): void;\n  onDeleteTeam(slug: string): void;\n  onRemoveTeam(teamSlug: string, projectSlug: string): void;\n  onStatsLoadSuccess(data: StatsData): void;\n  onUpdateSuccess(data: Partial<Project>): void;\n  reset(): void;\n};\n\nconst storeConfig: Reflux.StoreDefinition & Internals & ProjectsStoreInterface = {\n  itemsById: {},\n  loading: true,\n\n  init() {\n    this.reset();\n\n    this.listenTo(ProjectActions.addTeamSuccess, this.onAddTeam);\n    this.listenTo(ProjectActions.changeSlug, this.onChangeSlug);\n    this.listenTo(ProjectActions.createSuccess, this.onCreateSuccess);\n    this.listenTo(ProjectActions.loadProjects, this.loadInitialData);\n    this.listenTo(ProjectActions.loadStatsSuccess, this.onStatsLoadSuccess);\n    this.listenTo(ProjectActions.removeTeamSuccess, this.onRemoveTeam);\n    this.listenTo(ProjectActions.reset, this.reset);\n    this.listenTo(ProjectActions.updateSuccess, this.onUpdateSuccess);\n\n    this.listenTo(TeamActions.removeTeamSuccess, this.onDeleteTeam);\n  },\n\n  reset() {\n    this.itemsById = {};\n    this.loading = true;\n  },\n\n  loadInitialData(items: Project[]) {\n    const mapping = items.map(project => [project.id, project] as const);\n\n    this.itemsById = Object.fromEntries(mapping);\n    this.loading = false;\n\n    this.trigger(new Set(Object.keys(this.itemsById)));\n  },\n\n  onChangeSlug(prevSlug: string, newSlug: string) {\n    const prevProject = this.getBySlug(prevSlug);\n\n    if (!prevProject) {\n      return;\n    }\n\n    const newProject = {...prevProject, slug: newSlug};\n\n    this.itemsById = {...this.itemsById, [newProject.id]: newProject};\n    this.trigger(new Set([prevProject.id]));\n  },\n\n  onCreateSuccess(project: Project) {\n    this.itemsById = {...this.itemsById, [project.id]: project};\n    this.trigger(new Set([project.id]));\n  },\n\n  onUpdateSuccess(data: Partial<Project>) {\n    const project = this.getById(data.id);\n\n    if (!project) {\n      return;\n    }\n\n    const newProject = {...project, ...data};\n\n    this.itemsById = {...this.itemsById, [project.id]: newProject};\n    this.trigger(new Set([data.id]));\n  },\n\n  onStatsLoadSuccess(data) {\n    const entries = Object.entries(data || {}).filter(\n      ([projectId]) => projectId in this.itemsById\n    );\n\n    // Assign stats into projects\n    entries.forEach(([projectId, stats]) => {\n      this.itemsById[projectId].stats = stats;\n    });\n\n    const touchedIds = entries.map(([projectId]) => projectId);\n    this.trigger(new Set(touchedIds));\n  },\n\n  /**\n   * Listener for when a team is completely removed\n   *\n   * @param teamSlug Team Slug\n   */\n  onDeleteTeam(teamSlug: string) {\n    // Look for team in all projects\n    const projects = this.getAll().filter(({teams}) =>\n      teams.find(({slug}) => slug === teamSlug)\n    );\n\n    projects.forEach(project => this.removeTeamFromProject(teamSlug, project));\n\n    const affectedProjectIds = projects.map(project => project.id);\n    this.trigger(new Set(affectedProjectIds));\n  },\n\n  onRemoveTeam(teamSlug: string, projectSlug: string) {\n    const project = this.getBySlug(projectSlug);\n\n    if (!project) {\n      return;\n    }\n\n    this.removeTeamFromProject(teamSlug, project);\n    this.trigger(new Set([project.id]));\n  },\n\n  onAddTeam(team: Team, projectSlug: string) {\n    const project = this.getBySlug(projectSlug);\n\n    // Don't do anything if we can't find a project\n    if (!project) {\n      return;\n    }\n\n    const newProject = {...project, teams: [...project.teams, team]};\n\n    this.itemsById = {...this.itemsById, [project.id]: newProject};\n    this.trigger(new Set([project.id]));\n  },\n\n  // Internal method, does not trigger\n  removeTeamFromProject(teamSlug: string, project: Project) {\n    const newTeams = project.teams.filter(({slug}) => slug !== teamSlug);\n    const newProject = {...project, teams: newTeams};\n\n    this.itemsById = {...this.itemsById, [project.id]: newProject};\n  },\n\n  isLoading() {\n    return this.loading;\n  },\n\n  getAll() {\n    return Object.values(this.itemsById).sort((a, b) => a.slug.localeCompare(b.slug));\n  },\n\n  getById(id) {\n    return this.getAll().find(project => project.id === id);\n  },\n\n  getBySlug(slug) {\n    return this.getAll().find(project => project.slug === slug);\n  },\n\n  getState() {\n    return {\n      projects: this.getAll(),\n      loading: this.loading,\n    };\n  },\n};\n\nconst ProjectsStore = Reflux.createStore(storeConfig) as Reflux.Store &\n  ProjectsStoreInterface;\n\nexport default ProjectsStore;\n"],"names":["Reflux","Hook","name","props","HookComponent","React","hooks","HookStore","map","cb","hookName","this","handleHooks","undefined","componentWillUnmount","unsubscribe","setState","render","children","state","length","parseHtmlMarks","key","htmlString","markTags","highlightPreTag","highlightPostTag","indices","value","openIndex","indexOf","openIndexEnd","slice","closeIndex","closeIndexEnd","push","MARK_TAGS","HelpSource","loading","results","SentryGlobalSearch","debounce","unbouncedSearch","componentDidMount","query","doSearch","componentDidUpdate","nextProps","platforms","items","forEach","section","sectionItems","hits","hit","title","description","text","item","sourceType","resultType","site","dompurify","extra","context","context1","to","url","matches","score","sectionHeading","sectionCount","emptyHeaderItem","empty","mapSearchResults","search","platform","standardSDKSlug","slug","isLoading","withLatestContext","withRouter","renderResult","itemProps","highlighted","SectionHeading","t","Count","tn","Empty","HelpSearch","sources","minSearch","closeOnSelect","renderItem","space","p","theme","backgroundSecondary","innerBorder","fontSizeSmall","gray300","subText","fontSizeMedium","HelpSearchModal","Body","closeModal","organization","placeholder","useTheme","css","injectedCss","entryPoint","dropdownStyle","border","renderInput","getInputProps","InputWrapper","Input","autoFocus","type","label","resultFooter","modalCss","withOrganization","route","fields","help","showReturnButton","storeConfig","listenables","OrganizationsActions","loaded","getInitialState","init","onUpdate","org","add","onChangeSlug","prev","next","remove","onRemoveSuccess","get","find","getAll","filter","trigger","match","existing","idx","id","load","itemsById","reset","listenTo","ProjectActions","onAddTeam","onCreateSuccess","loadInitialData","onStatsLoadSuccess","onRemoveTeam","onUpdateSuccess","TeamActions","onDeleteTeam","mapping","project","Object","fromEntries","Set","keys","prevSlug","newSlug","prevProject","getBySlug","newProject","data","getById","entries","projectId","stats","touchedIds","teamSlug","projects","teams","removeTeamFromProject","affectedProjectIds","projectSlug","team","newTeams","values","sort","a","b","localeCompare","getState"],"sourceRoot":""}