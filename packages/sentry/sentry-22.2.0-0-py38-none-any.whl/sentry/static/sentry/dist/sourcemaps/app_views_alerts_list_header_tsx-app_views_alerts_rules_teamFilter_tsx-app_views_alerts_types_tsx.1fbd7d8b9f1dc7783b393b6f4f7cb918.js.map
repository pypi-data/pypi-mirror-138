{"version":3,"file":"chunks/app_views_alerts_list_header_tsx-app_views_alerts_rules_teamFilter_tsx-app_views_alerts_types_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/alerts/list/header.tsx","webpack:///./app/components/deprecatedforms/input.tsx","webpack:///./app/views/alerts/rules/filter.tsx","webpack:///./app/views/alerts/rules/teamFilter.tsx","webpack:///./app/views/alerts/types.tsx"],"sourcesContent":["import * as React from 'react';\nimport {InjectedRouter} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {navigateTo} from 'sentry/actionCreators/navigation';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport CreateAlertButton from 'sentry/components/createAlertButton';\nimport GlobalSelectionLink from 'sentry/components/globalSelectionLink';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport {IconSettings} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\n\ntype Props = {\n  activeTab: 'stream' | 'rules';\n  organization: Organization;\n  router: InjectedRouter;\n};\n\nconst AlertHeader = ({router, organization, activeTab}: Props) => {\n  /**\n   * Incidents list is currently at the organization level, but the link needs to\n   * go down to a specific project scope.\n   */\n  const handleNavigateToSettings = (e: React.MouseEvent) => {\n    e.preventDefault();\n    navigateTo(`/settings/${organization.slug}/projects/:projectId/alerts/`, router);\n  };\n\n  const alertRulesLink = (\n    <li className={activeTab === 'rules' ? 'active' : ''}>\n      <GlobalSelectionLink to={`/organizations/${organization.slug}/alerts/rules/`}>\n        {t('Alert Rules')}\n      </GlobalSelectionLink>\n    </li>\n  );\n\n  return (\n    <Layout.Header>\n      <Layout.HeaderContent>\n        <StyledLayoutTitle>{t('Alerts')}</StyledLayoutTitle>\n      </Layout.HeaderContent>\n      <Layout.HeaderActions>\n        <Actions gap={1}>\n          <CreateAlertButton\n            organization={organization}\n            iconProps={{size: 'sm'}}\n            priority=\"primary\"\n            referrer=\"alert_stream\"\n            showPermissionGuide\n          >\n            {t('Create Alert')}\n          </CreateAlertButton>\n          <Button\n            onClick={handleNavigateToSettings}\n            href=\"#\"\n            icon={<IconSettings size=\"sm\" />}\n            aria-label={t('Settings')}\n          />\n        </Actions>\n      </Layout.HeaderActions>\n      <Layout.HeaderNavTabs underlined>\n        {alertRulesLink}\n        <li className={activeTab === 'stream' ? 'active' : ''}>\n          <GlobalSelectionLink to={`/organizations/${organization.slug}/alerts/`}>\n            {t('History')}\n          </GlobalSelectionLink>\n        </li>\n      </Layout.HeaderNavTabs>\n    </Layout.Header>\n  );\n};\n\nexport default AlertHeader;\n\nconst StyledLayoutTitle = styled(Layout.Title)`\n  margin-top: ${space(0.5)};\n`;\n\nconst Actions = styled(ButtonBar)`\n  height: 32px;\n`;\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport omit from 'lodash/omit';\n\ntype Props = {\n  className?: string;\n} & React.HTMLProps<HTMLInputElement>;\n\nexport default function Input({className, ...otherProps}: Props) {\n  return (\n    <input\n      className={classNames('form-control', className)}\n      {...omit(otherProps, 'children')}\n    />\n  );\n}\n","import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport CheckboxFancy from 'sentry/components/checkboxFancy/checkboxFancy';\nimport DropdownButton from 'sentry/components/dropdownButton';\nimport DropdownControl, {Content} from 'sentry/components/dropdownControl';\nimport {IconFilter} from 'sentry/icons';\nimport {t, tn} from 'sentry/locale';\nimport overflowEllipsis from 'sentry/styles/overflowEllipsis';\nimport space from 'sentry/styles/space';\n\ntype DropdownButtonProps = React.ComponentProps<typeof DropdownButton>;\n\ntype DropdownSection = {\n  id: string;\n  items: Array<{checked: boolean; filtered: boolean; label: string; value: string}>;\n  label: string;\n};\n\ntype SectionProps = DropdownSection & {\n  toggleFilter: (section: string, value: string) => void;\n  toggleSection: (id: string) => void;\n};\n\nfunction FilterSection({id, label, items, toggleSection, toggleFilter}: SectionProps) {\n  const checkedItemsCount = items.filter(item => item.checked).length;\n  return (\n    <Fragment>\n      <Header>\n        <span>{label}</span>\n        <CheckboxFancy\n          isChecked={checkedItemsCount === items.length}\n          isIndeterminate={checkedItemsCount > 0 && checkedItemsCount !== items.length}\n          onClick={event => {\n            event.stopPropagation();\n            toggleSection(id);\n          }}\n        />\n      </Header>\n      {items\n        .filter(item => !item.filtered)\n        .map(item => (\n          <ListItem\n            key={item.value}\n            isChecked={item.checked}\n            onClick={event => {\n              event.stopPropagation();\n              toggleFilter(id, item.value);\n            }}\n          >\n            <TeamName>{item.label}</TeamName>\n            <CheckboxFancy isChecked={item.checked} />\n          </ListItem>\n        ))}\n    </Fragment>\n  );\n}\n\ntype Props = {\n  dropdownSections: DropdownSection[];\n  header: React.ReactElement;\n  onFilterChange: (section: string, filterSelection: Set<string>) => void;\n};\n\nclass Filter extends Component<Props> {\n  toggleFilter = (sectionId: string, value: string) => {\n    const {onFilterChange, dropdownSections} = this.props;\n    const section = dropdownSections.find(\n      dropdownSection => dropdownSection.id === sectionId\n    )!;\n    const newSelection = new Set(\n      section.items.filter(item => item.checked).map(item => item.value)\n    );\n    if (newSelection.has(value)) {\n      newSelection.delete(value);\n    } else {\n      newSelection.add(value);\n    }\n    onFilterChange(sectionId, newSelection);\n  };\n\n  toggleSection = (sectionId: string) => {\n    const {onFilterChange} = this.props;\n    const section = this.props.dropdownSections.find(\n      dropdownSection => dropdownSection.id === sectionId\n    )!;\n    const activeItems = section.items.filter(item => item.checked);\n\n    const newSelection =\n      section.items.length === activeItems.length\n        ? new Set<string>()\n        : new Set(section.items.map(item => item.value));\n\n    onFilterChange(sectionId, newSelection);\n  };\n\n  getNumberOfActiveFilters = (): number => {\n    return this.props.dropdownSections\n      .map(section => section.items)\n      .flat()\n      .filter(item => item.checked).length;\n  };\n\n  render() {\n    const {dropdownSections: dropdownItems, header} = this.props;\n    const checkedQuantity = this.getNumberOfActiveFilters();\n\n    const dropDownButtonProps: Pick<DropdownButtonProps, 'children' | 'priority'> & {\n      hasDarkBorderBottomColor: boolean;\n    } = {\n      children: t('Filter'),\n      priority: 'default',\n      hasDarkBorderBottomColor: false,\n    };\n\n    if (checkedQuantity > 0) {\n      dropDownButtonProps.children = tn(\n        '%s Active Filter',\n        '%s Active Filters',\n        checkedQuantity\n      );\n      dropDownButtonProps.hasDarkBorderBottomColor = true;\n    }\n\n    return (\n      <DropdownControl\n        menuWidth=\"240px\"\n        blendWithActor\n        alwaysRenderMenu={false}\n        button={({isOpen, getActorProps}) => (\n          <StyledDropdownButton\n            {...getActorProps()}\n            showChevron={false}\n            isOpen={isOpen}\n            icon={<IconFilter size=\"xs\" />}\n            hasDarkBorderBottomColor={dropDownButtonProps.hasDarkBorderBottomColor}\n            priority={dropDownButtonProps.priority as DropdownButtonProps['priority']}\n            data-test-id=\"filter-button\"\n          >\n            {dropDownButtonProps.children}\n          </StyledDropdownButton>\n        )}\n      >\n        {({isOpen, getMenuProps}) => (\n          <MenuContent\n            {...getMenuProps()}\n            isOpen={isOpen}\n            blendCorner\n            alignMenu=\"left\"\n            width=\"240px\"\n          >\n            <List>\n              {header}\n              {dropdownItems.map(section => (\n                <FilterSection\n                  key={section.id}\n                  {...section}\n                  toggleSection={this.toggleSection}\n                  toggleFilter={this.toggleFilter}\n                />\n              ))}\n            </List>\n          </MenuContent>\n        )}\n      </DropdownControl>\n    );\n  }\n}\n\nconst MenuContent = styled(Content)`\n  max-height: 290px;\n  overflow-y: auto;\n`;\n\nconst Header = styled('div')`\n  display: grid;\n  grid-template-columns: auto min-content;\n  grid-column-gap: ${space(1)};\n  align-items: center;\n\n  margin: 0;\n  background-color: ${p => p.theme.backgroundSecondary};\n  color: ${p => p.theme.gray300};\n  font-weight: normal;\n  font-size: ${p => p.theme.fontSizeMedium};\n  padding: ${space(1)} ${space(2)};\n  border-bottom: 1px solid ${p => p.theme.border};\n`;\n\nconst StyledDropdownButton = styled(DropdownButton)<{hasDarkBorderBottomColor?: boolean}>`\n  white-space: nowrap;\n  max-width: 200px;\n\n  z-index: ${p => p.theme.zIndex.dropdown};\n`;\n\nconst List = styled('ul')`\n  list-style: none;\n  margin: 0;\n  padding: 0;\n`;\n\nconst ListItem = styled('li')<{isChecked?: boolean}>`\n  display: grid;\n  grid-template-columns: 1fr max-content;\n  grid-column-gap: ${space(1)};\n  align-items: center;\n  padding: ${space(1)} ${space(2)};\n  border-bottom: 1px solid ${p => p.theme.border};\n  :hover {\n    background-color: ${p => p.theme.backgroundSecondary};\n  }\n  ${CheckboxFancy} {\n    opacity: ${p => (p.isChecked ? 1 : 0.3)};\n  }\n\n  &:hover ${CheckboxFancy} {\n    opacity: 1;\n  }\n\n  &:hover span {\n    color: ${p => p.theme.blue300};\n    text-decoration: underline;\n  }\n`;\n\nconst TeamName = styled('div')`\n  font-size: ${p => p.theme.fontSizeMedium};\n  ${overflowEllipsis};\n`;\n\nexport default Filter;\n","import {useState} from 'react';\nimport styled from '@emotion/styled';\nimport debounce from 'lodash/debounce';\n\nimport Input from 'sentry/components/deprecatedforms/input';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {DEFAULT_DEBOUNCE_DURATION} from 'sentry/constants';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport useTeams from 'sentry/utils/useTeams';\n\nimport Filter from './filter';\n\nconst ALERT_LIST_QUERY_DEFAULT_TEAMS = ['myteams', 'unassigned'];\n\ntype Props = {\n  handleChangeFilter: (sectionId: string, activeFilters: Set<string>) => void;\n  selectedTeams: Set<string>;\n  selectedStatus?: Set<string>;\n  showStatus?: boolean;\n};\n\nexport function getTeamParams(team?: string | string[]): string[] {\n  if (team === undefined) {\n    return ALERT_LIST_QUERY_DEFAULT_TEAMS;\n  }\n\n  if (team === '') {\n    return [];\n  }\n\n  if (Array.isArray(team)) {\n    return team;\n  }\n\n  return [team];\n}\n\nfunction TeamFilter({\n  selectedTeams,\n  showStatus = false,\n  selectedStatus = new Set(),\n  handleChangeFilter,\n}: Props) {\n  const {teams, onSearch, fetching} = useTeams();\n  const debouncedSearch = debounce(onSearch, DEFAULT_DEBOUNCE_DURATION);\n  const [teamFilterSearch, setTeamFilterSearch] = useState<string | undefined>();\n\n  const statusOptions = [\n    {\n      label: t('Unresolved'),\n      value: 'open',\n      checked: selectedStatus.has('open'),\n      filtered: false,\n    },\n    {\n      label: t('Resolved'),\n      value: 'closed',\n      checked: selectedStatus.has('closed'),\n      filtered: false,\n    },\n  ];\n\n  const additionalOptions = [\n    {\n      label: t('My Teams'),\n      value: 'myteams',\n      checked: selectedTeams.has('myteams'),\n      filtered: false,\n    },\n    {\n      label: t('Unassigned'),\n      value: 'unassigned',\n      checked: selectedTeams.has('unassigned'),\n      filtered: false,\n    },\n  ];\n  const teamItems = teams.map(({id, slug}) => ({\n    label: slug,\n    value: id,\n    filtered: teamFilterSearch\n      ? !slug.toLowerCase().includes(teamFilterSearch.toLowerCase())\n      : false,\n    checked: selectedTeams.has(id),\n  }));\n\n  return (\n    <Filter\n      header={\n        <InputWrapper>\n          <StyledInput\n            autoFocus\n            placeholder={t('Filter by team slug')}\n            onClick={event => {\n              event.stopPropagation();\n            }}\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n              const search = event.target.value;\n              setTeamFilterSearch(search);\n              debouncedSearch(search);\n            }}\n            value={teamFilterSearch || ''}\n          />\n          {fetching && <StyledLoadingIndicator size={16} mini />}\n        </InputWrapper>\n      }\n      onFilterChange={handleChangeFilter}\n      dropdownSections={[\n        ...(showStatus\n          ? [\n              {\n                id: 'status',\n                label: t('Status'),\n                items: statusOptions,\n              },\n            ]\n          : []),\n        {\n          id: 'teams',\n          label: t('Teams'),\n          items: [...additionalOptions, ...teamItems],\n        },\n      ]}\n    />\n  );\n}\n\nexport default TeamFilter;\n\nconst InputWrapper = styled('div')`\n  position: relative;\n`;\n\nconst StyledInput = styled(Input)`\n  border: none;\n  border-bottom: 1px solid transparent;\n  border-radius: 0;\n`;\n\nconst StyledLoadingIndicator = styled(LoadingIndicator)`\n  position: absolute;\n  right: 0;\n  top: ${space(0.75)};\n`;\n","import {User} from 'sentry/types';\nimport {IssueAlertRule} from 'sentry/types/alerts';\nimport {IncidentRule} from 'sentry/views/alerts/incidentRules/types';\n\ntype Data = [number, {count: number}[]][];\n\nexport type Incident = {\n  alertRule: IncidentRule;\n  dateClosed: string | null;\n  dateCreated: string;\n  dateDetected: string;\n  dateStarted: string;\n  // Array of group ids\n  discoverQuery: string;\n  groups: string[];\n  hasSeen: boolean;\n  id: string;\n  identifier: string;\n  isSubscribed: boolean;\n  organizationId: string;\n  projects: string[];\n  // Array of slugs\n  seenBy: User[];\n  status: IncidentStatus;\n  statusMethod: IncidentStatusMethod;\n  title: string;\n  activities?: ActivityType[];\n};\n\nexport type IncidentStats = {\n  eventStats: {\n    data: Data;\n  };\n  totalEvents: number;\n  uniqueUsers: number;\n};\n\nexport type ActivityTypeDraft = {\n  comment: null | string;\n  dateCreated: string;\n  id: string;\n  incidentIdentifier: string;\n  type: IncidentActivityType;\n  user: User | null;\n};\n\nexport type ActivityType = ActivityTypeDraft & {\n  previousValue: string | null;\n  value: string | null;\n  eventStats?: {data: Data};\n};\n\nexport enum IncidentActivityType {\n  CREATED = 0,\n  DETECTED = 1,\n  STATUS_CHANGE = 2,\n  COMMENT = 3,\n  STARTED = 4,\n}\n\nexport enum IncidentStatus {\n  OPENED = 1,\n  CLOSED = 2,\n  WARNING = 10,\n  CRITICAL = 20,\n}\n\nexport enum IncidentStatusMethod {\n  MANUAL = 1,\n  RULE_UPDATED = 2,\n  RULE_TRIGGERED = 3,\n}\n\nexport enum AlertRuleStatus {\n  PENDING = 0,\n  SNAPSHOT = 4,\n  DISABLED = 5,\n}\n\nexport type CombinedMetricIssueAlerts = (IssueAlertRule | IncidentRule) & {\n  type: string;\n  latestIncident?: Incident | null;\n};\n"],"names":["AlertHeader","router","organization","activeTab","alertRulesLink","className","to","slug","t","StyledLayoutTitle","Actions","gap","iconProps","size","priority","referrer","showPermissionGuide","onClick","e","preventDefault","navigateTo","href","icon","underlined","Layout","space","ButtonBar","Input","otherProps","classNames","omit","FilterSection","id","label","items","toggleSection","toggleFilter","checkedItemsCount","filter","item","checked","length","Fragment","Header","isChecked","isIndeterminate","event","stopPropagation","filtered","map","ListItem","value","TeamName","Filter","Component","sectionId","onFilterChange","dropdownSections","this","props","section","find","dropdownSection","newSelection","Set","has","delete","add","activeItems","flat","render","dropdownItems","header","checkedQuantity","getNumberOfActiveFilters","dropDownButtonProps","children","hasDarkBorderBottomColor","tn","menuWidth","blendWithActor","alwaysRenderMenu","button","isOpen","getActorProps","StyledDropdownButton","showChevron","getMenuProps","MenuContent","blendCorner","alignMenu","width","List","Content","p","theme","backgroundSecondary","gray300","fontSizeMedium","border","DropdownButton","zIndex","dropdown","CheckboxFancy","blue300","overflowEllipsis","ALERT_LIST_QUERY_DEFAULT_TEAMS","getTeamParams","team","undefined","Array","isArray","TeamFilter","selectedTeams","showStatus","selectedStatus","handleChangeFilter","teams","onSearch","fetching","useTeams","debouncedSearch","debounce","DEFAULT_DEBOUNCE_DURATION","teamFilterSearch","setTeamFilterSearch","useState","statusOptions","additionalOptions","teamItems","toLowerCase","includes","InputWrapper","StyledInput","autoFocus","placeholder","onChange","search","target","StyledLoadingIndicator","mini","LoadingIndicator","IncidentActivityType","IncidentStatus","IncidentStatusMethod","AlertRuleStatus"],"sourceRoot":""}