{"version":3,"file":"chunks/app_views_alerts_wizard_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/alerts/wizard/radioPanelGroup.tsx","webpack:///./app/views/alerts/wizard/index.tsx"],"sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport Radio from 'sentry/components/radio';\nimport space from 'sentry/styles/space';\n\ntype RadioPanelGroupProps<C extends string> = {\n  /**\n   * An array of [id, name]\n   */\n  choices: [C, React.ReactNode, React.ReactNode?][];\n  label: string;\n  onChange: (id: C, e: React.FormEvent<HTMLInputElement>) => void;\n  value: string | null;\n};\n\ntype Props<C extends string> = RadioPanelGroupProps<C> &\n  Omit<React.HTMLAttributes<HTMLDivElement>, keyof RadioPanelGroupProps<C>>;\n\nconst RadioPanelGroup = <C extends string>({\n  value,\n  choices,\n  label,\n  onChange,\n  ...props\n}: Props<C>) => (\n  <Container {...props} role=\"radiogroup\" aria-labelledby={label}>\n    {(choices || []).map(([id, name, extraContent], index) => (\n      <RadioPanel key={index}>\n        <RadioLineItem role=\"radio\" index={index} aria-checked={value === id}>\n          <Radio\n            radioSize=\"small\"\n            aria-label={id}\n            checked={value === id}\n            onChange={(e: React.FormEvent<HTMLInputElement>) => onChange(id, e)}\n          />\n          <div>{name}</div>\n          {extraContent}\n        </RadioLineItem>\n      </RadioPanel>\n    ))}\n  </Container>\n);\n\nexport default RadioPanelGroup;\n\nconst Container = styled('div')`\n  display: grid;\n  gap: ${space(1)};\n  grid-auto-flow: row;\n  grid-auto-rows: max-content;\n  grid-auto-columns: auto;\n`;\n\nconst RadioLineItem = styled('label')<{\n  index: number;\n}>`\n  display: grid;\n  gap: ${space(0.25)} ${space(1)};\n  grid-template-columns: max-content auto max-content;\n  align-items: center;\n  cursor: pointer;\n  outline: none;\n  font-weight: normal;\n  margin: 0;\n  color: ${p => p.theme.subText};\n  transition: color 0.3s ease-in;\n  padding: 0;\n  position: relative;\n\n  &:hover,\n  &:focus {\n    color: ${p => p.theme.textColor};\n  }\n\n  svg {\n    display: none;\n    opacity: 0;\n  }\n\n  &[aria-checked='true'] {\n    color: ${p => p.theme.textColor};\n  }\n`;\n\nconst RadioPanel = styled('div')`\n  margin: 0;\n`;\n","import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport Feature from 'sentry/components/acl/feature';\nimport FeatureDisabled from 'sentry/components/acl/featureDisabled';\nimport CreateAlertButton from 'sentry/components/createAlertButton';\nimport FeatureBadge from 'sentry/components/featureBadge';\nimport {Hovercard} from 'sentry/components/hovercard';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport List from 'sentry/components/list';\nimport ListItem from 'sentry/components/list/listItem';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport BuilderBreadCrumbs from 'sentry/views/alerts/builder/builderBreadCrumbs';\nimport {Dataset} from 'sentry/views/alerts/incidentRules/types';\n\nimport {\n  AlertType,\n  AlertWizardAlertNames,\n  AlertWizardPanelContent,\n  AlertWizardRuleTemplates,\n  getAlertWizardCategories,\n} from './options';\nimport RadioPanelGroup from './radioPanelGroup';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  organization: Organization;\n  project: Project;\n};\n\ntype State = {\n  alertOption: AlertType;\n};\n\nconst DEFAULT_ALERT_OPTION = 'issues';\n\nclass AlertWizard extends Component<Props, State> {\n  state: State = {\n    alertOption: DEFAULT_ALERT_OPTION,\n  };\n\n  componentDidMount() {\n    // capture landing on the alert wizard page and viewing the issue alert by default\n    const {organization} = this.props;\n    trackAnalyticsEvent({\n      eventKey: 'alert_wizard.option_viewed',\n      eventName: 'Alert Wizard: Option Viewed',\n      organization_id: organization.id,\n      alert_type: DEFAULT_ALERT_OPTION,\n    });\n  }\n\n  handleChangeAlertOption = (alertOption: AlertType) => {\n    const {organization} = this.props;\n    this.setState({alertOption});\n    trackAnalyticsEvent({\n      eventKey: 'alert_wizard.option_viewed',\n      eventName: 'Alert Wizard: Option Viewed',\n      organization_id: organization.id,\n      alert_type: alertOption,\n    });\n  };\n\n  renderCreateAlertButton() {\n    const {\n      organization,\n      location,\n      params: {projectId},\n    } = this.props;\n    const {alertOption} = this.state;\n    const metricRuleTemplate = AlertWizardRuleTemplates[alertOption];\n    const isMetricAlert = !!metricRuleTemplate;\n    const isTransactionDataset = metricRuleTemplate?.dataset === Dataset.TRANSACTIONS;\n\n    const to = {\n      pathname: `/organizations/${organization.slug}/alerts/${projectId}/new/`,\n      query: {\n        ...(metricRuleTemplate && metricRuleTemplate),\n        createFromWizard: true,\n        referrer: location?.query?.referrer,\n      },\n    };\n\n    const noFeatureMessage = t('Requires incidents feature.');\n    const renderNoAccess = p => (\n      <Hovercard\n        body={\n          <FeatureDisabled\n            features={p.features}\n            hideHelpToggle\n            message={noFeatureMessage}\n            featureName={noFeatureMessage}\n          />\n        }\n      >\n        {p.children(p)}\n      </Hovercard>\n    );\n\n    return (\n      <Feature\n        features={\n          isTransactionDataset\n            ? ['incidents', 'performance-view']\n            : isMetricAlert\n            ? ['incidents']\n            : []\n        }\n        requireAll\n        organization={organization}\n        hookName=\"feature-disabled:alert-wizard-performance\"\n        renderDisabled={renderNoAccess}\n      >\n        {({hasFeature}) => (\n          <WizardButtonContainer\n            onClick={() =>\n              trackAnalyticsEvent({\n                eventKey: 'alert_wizard.option_selected',\n                eventName: 'Alert Wizard: Option Selected',\n                organization_id: organization.id,\n                alert_type: alertOption,\n              })\n            }\n          >\n            <CreateAlertButton\n              organization={organization}\n              projectSlug={projectId}\n              disabled={!hasFeature}\n              priority=\"primary\"\n              to={to}\n              hideIcon\n            >\n              {t('Set Conditions')}\n            </CreateAlertButton>\n          </WizardButtonContainer>\n        )}\n      </Feature>\n    );\n  }\n\n  render() {\n    const {\n      organization,\n      params: {projectId},\n      routes,\n      location,\n    } = this.props;\n    const {alertOption} = this.state;\n    const title = t('Alert Creation Wizard');\n    const panelContent = AlertWizardPanelContent[alertOption];\n    return (\n      <Fragment>\n        <SentryDocumentTitle title={title} projectSlug={projectId} />\n\n        <Layout.Header>\n          <StyledHeaderContent>\n            <BuilderBreadCrumbs\n              orgSlug={organization.slug}\n              projectSlug={projectId}\n              title={t('Select Alert')}\n              routes={routes}\n              location={location}\n              canChangeProject\n            />\n            <Layout.Title>{t('Select Alert')}</Layout.Title>\n          </StyledHeaderContent>\n        </Layout.Header>\n        <StyledLayoutBody>\n          <Layout.Main fullWidth>\n            <WizardBody>\n              <WizardOptions>\n                <CategoryTitle>{t('Errors')}</CategoryTitle>\n                {getAlertWizardCategories(organization).map(\n                  ({categoryHeading, options, featureBadgeType}, i) => (\n                    <OptionsWrapper key={categoryHeading}>\n                      {i > 0 && (\n                        <CategoryTitle>\n                          {categoryHeading}{' '}\n                          {featureBadgeType && <FeatureBadge type={featureBadgeType} />}\n                        </CategoryTitle>\n                      )}\n                      <RadioPanelGroup\n                        choices={options.map(alertType => {\n                          return [alertType, AlertWizardAlertNames[alertType]];\n                        })}\n                        onChange={this.handleChangeAlertOption}\n                        value={alertOption}\n                        label=\"alert-option\"\n                      />\n                    </OptionsWrapper>\n                  )\n                )}\n              </WizardOptions>\n              <WizardPanel visible={!!panelContent && !!alertOption}>\n                <WizardPanelBody>\n                  <div>\n                    <PanelHeader>{AlertWizardAlertNames[alertOption]}</PanelHeader>\n                    <PanelBody withPadding>\n                      <PanelDescription>\n                        {panelContent.description}{' '}\n                        {panelContent.docsLink && (\n                          <ExternalLink href={panelContent.docsLink}>\n                            {t('Learn more')}\n                          </ExternalLink>\n                        )}\n                      </PanelDescription>\n                      <WizardImage src={panelContent.illustration} />\n                      <ExampleHeader>{t('Examples')}</ExampleHeader>\n                      <ExampleList symbol=\"bullet\">\n                        {panelContent.examples.map((example, i) => (\n                          <ExampleItem key={i}>{example}</ExampleItem>\n                        ))}\n                      </ExampleList>\n                    </PanelBody>\n                  </div>\n                  <WizardFooter>{this.renderCreateAlertButton()}</WizardFooter>\n                </WizardPanelBody>\n              </WizardPanel>\n            </WizardBody>\n          </Layout.Main>\n        </StyledLayoutBody>\n      </Fragment>\n    );\n  }\n}\n\nconst StyledLayoutBody = styled(Layout.Body)`\n  margin-bottom: -${space(3)};\n`;\n\nconst StyledHeaderContent = styled(Layout.HeaderContent)`\n  overflow: visible;\n`;\n\nconst CategoryTitle = styled('h2')`\n  font-weight: normal;\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  margin-bottom: ${space(1)} !important;\n`;\n\nconst WizardBody = styled('div')`\n  display: flex;\n  padding-top: ${space(1)};\n`;\n\nconst WizardOptions = styled('div')`\n  flex: 3;\n  margin-right: ${space(3)};\n  padding-right: ${space(3)};\n  max-width: 300px;\n`;\n\nconst WizardImage = styled('img')`\n  max-height: 300px;\n`;\n\nconst WizardPanel = styled(Panel)<{visible?: boolean}>`\n  max-width: 700px;\n  position: sticky;\n  top: 20px;\n  flex: 5;\n  display: flex;\n  ${p => !p.visible && 'visibility: hidden'};\n  flex-direction: column;\n  align-items: start;\n  align-self: flex-start;\n  ${p => p.visible && 'animation: 0.6s pop ease forwards'};\n\n  @keyframes pop {\n    0% {\n      transform: translateY(30px);\n      opacity: 0;\n    }\n    100% {\n      transform: translateY(0);\n      opacity: 1;\n    }\n  }\n`;\n\nconst ExampleList = styled(List)`\n  margin-bottom: ${space(2)} !important;\n`;\n\nconst WizardPanelBody = styled(PanelBody)`\n  flex: 1;\n  min-width: 100%;\n`;\n\nconst PanelDescription = styled('p')`\n  margin-bottom: ${space(2)};\n`;\n\nconst ExampleHeader = styled('div')`\n  margin: 0 0 ${space(1)} 0;\n  font-size: ${p => p.theme.fontSizeLarge};\n`;\n\nconst ExampleItem = styled(ListItem)`\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst OptionsWrapper = styled('div')`\n  margin-bottom: ${space(4)};\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nconst WizardFooter = styled('div')`\n  border-top: 1px solid ${p => p.theme.border};\n  padding: ${space(1.5)} ${space(1.5)} ${space(1.5)} ${space(1.5)};\n`;\n\nconst WizardButtonContainer = styled('div')`\n  display: flex;\n  justify-content: flex-end;\n`;\n\nexport default AlertWizard;\n"],"names":["RadioPanelGroup","value","choices","label","onChange","props","Container","role","map","index","id","name","extraContent","RadioPanel","RadioLineItem","radioSize","checked","e","space","p","theme","subText","textColor","DEFAULT_ALERT_OPTION","AlertWizard","Component","alertOption","organization","this","setState","trackAnalyticsEvent","eventKey","eventName","organization_id","alert_type","componentDidMount","renderCreateAlertButton","location","params","projectId","state","metricRuleTemplate","AlertWizardRuleTemplates","isMetricAlert","isTransactionDataset","dataset","Dataset","to","pathname","slug","query","createFromWizard","referrer","noFeatureMessage","t","features","requireAll","hookName","renderDisabled","body","hideHelpToggle","message","featureName","children","hasFeature","WizardButtonContainer","onClick","projectSlug","disabled","priority","hideIcon","render","routes","title","panelContent","AlertWizardPanelContent","Fragment","StyledHeaderContent","orgSlug","canChangeProject","StyledLayoutBody","fullWidth","WizardBody","WizardOptions","CategoryTitle","getAlertWizardCategories","i","categoryHeading","options","featureBadgeType","OptionsWrapper","type","alertType","AlertWizardAlertNames","handleChangeAlertOption","WizardPanel","visible","WizardPanelBody","withPadding","PanelDescription","description","docsLink","href","WizardImage","src","illustration","ExampleHeader","ExampleList","symbol","examples","example","ExampleItem","WizardFooter","Layout","fontSizeExtraLarge","Panel","List","PanelBody","fontSizeLarge","ListItem","fontSizeMedium","border"],"sourceRoot":""}