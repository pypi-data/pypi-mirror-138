{"version":3,"file":"chunks/app_views_settings_organizationTeams_teamProjects_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"msBAiBA,MAAMA,UAAoBC,EAAAA,UAAwB,uDACjC,CACbC,aAAcC,KAAKC,MAAMC,QAAQH,gBAFa,oCAKxBA,IACtBC,KAAKG,SAAS,CAACJ,aAAAA,OAGjBK,SACE,MAAM,QAACF,EAAD,aAAUG,GAAgBL,KAAKC,MAErC,OACE,QAACK,EAAD,YACE,QAACC,EAAD,CACEF,aAAcA,EACdH,QAASA,EACTH,aAAcC,KAAKQ,MAAMT,aACzBU,SAAUT,KAAKU,wBAEjB,QAAC,IAAD,CACEC,GAAK,aAAYN,EAAaO,iBAAiBV,EAAQU,QACvDC,WAAY,GACZX,QAASA,QAvBbL,EAAAA,YAAAA,cA8BN,MAAMS,GAAU,OAAO,MAAP,qBAAH,0DAKPC,GAAe,OAAOO,EAAAA,EAAP,qBAAH,iBACAC,EAAAA,EAAAA,GAAM,GADN,iBAEDA,EAAAA,EAAAA,GAAM,KAFL,KAKlB,K,uqCChBA,MAAMC,UAAqBC,EAAAA,UAA8B,uDACxC,CACbC,OAAO,EACPC,SAAS,EACTC,UAAW,KACXC,iBAAkB,GAClBC,eAAgB,MANqC,wBA0B5C,KACTtB,KAAKuB,oBACLvB,KAAKwB,4BA5BgD,iCA4EnC,CAACtB,EAAkBuB,KACrC,MAAM,MAACC,EAAD,OAAQC,GAAU3B,KAAKC,MAAM2B,OACnC5B,KAAKC,MAAM4B,IAAIC,QAAS,aAAYJ,KAASxB,EAAQU,cAAce,KAAW,CAC5EI,OAAmB,QAAXN,EAAmB,OAAS,SACpCO,QAASC,IACPjC,KAAKkC,WACLC,EAAAA,EAAAA,cAA6BF,IAC7BG,EAAAA,EAAAA,IACa,QAAXX,GACIY,EAAAA,EAAAA,GAAE,wCACFA,EAAAA,EAAAA,GAAE,4CAGVnB,MAAO,MACLoB,EAAAA,EAAAA,KAAgBD,EAAAA,EAAAA,GAAE,sDA1F+B,qCA+F9BE,IACvB,MAAMrC,EAAUF,KAAKQ,MAAMa,iBAAiBmB,MAAKC,GAAKA,EAAEC,KAAOH,EAAUI,QACrEzC,GACFF,KAAK4C,kBAAkB1C,EAAS,WAlGmB,iCAsGlC2C,IACnB7C,KAAKwB,sBAAsBqB,EAAIC,OAAOH,UA9FxCI,oBACE/C,KAAKkC,WAGPc,mBAAmBC,GAEfA,EAAUrB,OAAOF,QAAU1B,KAAKC,MAAM2B,OAAOF,OAC7CuB,EAAUrB,OAAOD,SAAW3B,KAAKC,MAAM2B,OAAOD,QAE9C3B,KAAKkC,WAGHe,EAAUC,WAAalD,KAAKC,MAAMiD,UACpClD,KAAKuB,oBASTA,oBACE,MAAM,SACJ2B,EACAtB,QAAQ,MAACF,EAAD,OAAQC,IACd3B,KAAKC,MAETD,KAAKG,SAAS,CAACgB,SAAS,IAExBnB,KAAKC,MAAM4B,IACRsB,eAAgB,kBAAiBzB,cAAmB,CACnD0B,MAAO,CACLA,MAAQ,QAAOzB,IACf0B,OAAQH,EAASE,MAAMC,QAAU,IAEnCC,gBAAgB,IAEjBC,MAAK,IAA+B,UAA7BjC,EAAgBkC,EAAGvB,GAAU,EACnCjC,KAAKG,SAAS,CACZgB,SAAS,EACTD,OAAO,EACPI,eAAAA,EACAF,UAAS,UAAEa,MAAAA,OAAF,EAAEA,EAAMwB,kBAAkB,eAA1B,QAAqC,UAGjDC,OAAM,KACL1D,KAAKG,SAAS,CAACgB,SAAS,EAAOD,OAAO,OAI5CM,wBAAkC,IAAZ4B,EAAY,uDAAJ,GAC5B,MACExB,QAAQ,MAACF,EAAD,OAAQC,IACd3B,KAAKC,MAETD,KAAKC,MAAM4B,IACRsB,eAAgB,kBAAiBzB,cAAmB,CACnD0B,MAAO,CACLA,MAAOA,EAAS,SAAQzB,KAAUyB,IAAW,SAAQzB,OAGxD4B,MAAKlC,IACJrB,KAAKG,SAAS,CAACkB,iBAAAA,OAkCrBsC,qBAAqBC,GACnB,MAAM,aAACvD,GAAgBL,KAAKC,MAEtB4D,EADS,IAAIC,IAAIzD,EAAa0D,QACZC,IAAI,aAE5B,OAAOJ,EAASK,QACdC,EAAAA,EAAAA,IAAaN,GAAUO,KAAIjE,IACzB,QAACkE,EAAD,YACE,QAAC,IAAD,CAAiBlE,QAASA,EAASG,aAAcA,KACjD,QAAC,IAAD,CACEgE,SAAUR,EACVS,OAAOjC,EAAAA,EAAAA,GAAE,oEAFX,UAIE,QAAC,KAAD,CACEkC,KAAK,QACLF,UAAWR,EACXW,MAAM,QAAC,KAAD,CAAcC,WAAS,EAACF,KAAK,OACnCG,QAAS,KACP1E,KAAK4C,kBAAkB1C,EAAS,WALpC,UAQGmC,EAAAA,EAAAA,GAAE,gBAdanC,EAAQwC,OAoBhC,QAAC,IAAD,CAAc6B,KAAK,QAAQC,MAAM,QAAC,KAAD,CAAUD,KAAK,OAAhD,UACGlC,EAAAA,EAAAA,GAAE,oDAKTjC,SACE,MAAM,eAACkB,EAAD,iBAAiBD,EAAjB,MAAmCH,EAAnC,QAA0CC,GAAWnB,KAAKQ,MAEhE,GAAIU,EACF,OAAO,QAAC,IAAD,CAAcyD,QAAS,IAAM3E,KAAKkC,aAG3C,GAAIf,EACF,OAAO,QAAC,IAAD,IAGT,MAAM4C,EAAS,IAAID,IAAI9D,KAAKC,MAAMI,aAAa0D,QAEzCa,EAAgBvD,EAAiB8C,KAAI1B,IAAK,CAC9CE,MAAOF,EAAEC,GACTmC,UAAWpC,EAAE7B,KACbkE,OAAO,QAACC,EAAD,UAAqBtC,EAAE7B,WAGhC,OACE,QAAC,WAAD,YACE,QAAC,KAAD,YACE,QAAC,KAAD,CAAaoE,YAAU,EAAvB,WACE,yBAAM3C,EAAAA,EAAAA,GAAE,eACR,eAAK4C,MAAO,CAACC,cAAe,QAA5B,SACInB,EAAOC,IAAI,cASX,QAAC,IAAD,CACEmB,MAAOP,EACPQ,SAAUpF,KAAKqF,kBACfC,SAAUtF,KAAKuF,sBACfC,cAAcnD,EAAAA,EAAAA,GAAE,eAChBoD,UAAU,QALZ,SAOG,QAAC,OAACC,GAAF,SACC,QAAC,IAAD,CAAgBA,OAAQA,EAAQnB,KAAK,SAArC,UACGlC,EAAAA,EAAAA,GAAE,qBAjBT,QAAC,IAAD,CACEgC,UAAQ,EACRC,OAAOjC,EAAAA,EAAAA,GAAE,6DACTkC,KAAK,SAHP,UAKGlC,EAAAA,EAAAA,GAAE,uBAmBX,QAAC,IAAD,UAAYrC,KAAK2D,qBAAqBrC,SAExC,QAAC,IAAD,CAAYF,UAAWpB,KAAKQ,MAAMY,aAAepB,KAAKC,YA/LxDe,EAAAA,YAAAA,eAqMN,MAAMoD,GAAkB,OAAOuB,EAAAA,GAAP,oBAAH,0EAIR5E,EAAAA,EAAAA,GAAM,GAJE,KAOfgE,GAAqB,OAAO,MAAP,oBAAH,YACXhE,EAAAA,EAAAA,GAAM,KADK,OAMxB,GAAe6E,EAAAA,EAAAA,IAAQC,EAAAA,EAAAA,GAAiB7E","sources":["webpack:///./app/views/settings/components/settingsProjectItem.tsx","webpack:///./app/views/settings/organizationTeams/teamProjects.tsx"],"sourcesContent":["import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport ProjectBadge from 'sentry/components/idBadge/projectBadge';\nimport BookmarkStar from 'sentry/components/projects/bookmarkStar';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n};\n\ntype State = {\n  isBookmarked: boolean;\n};\n\nclass ProjectItem extends Component<Props, State> {\n  state: State = {\n    isBookmarked: this.props.project.isBookmarked,\n  };\n\n  handleToggleBookmark = (isBookmarked: State['isBookmarked']) => {\n    this.setState({isBookmarked});\n  };\n\n  render() {\n    const {project, organization} = this.props;\n\n    return (\n      <Wrapper>\n        <BookmarkLink\n          organization={organization}\n          project={project}\n          isBookmarked={this.state.isBookmarked}\n          onToggle={this.handleToggleBookmark}\n        />\n        <ProjectBadge\n          to={`/settings/${organization.slug}/projects/${project.slug}/`}\n          avatarSize={18}\n          project={project}\n        />\n      </Wrapper>\n    );\n  }\n}\n\nconst Wrapper = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst BookmarkLink = styled(BookmarkStar)`\n  margin-right: ${space(1)};\n  margin-top: -${space(0.25)};\n`;\n\nexport default ProjectItem;\n","import * as React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport ProjectActions from 'sentry/actions/projectActions';\nimport {Client} from 'sentry/api';\nimport Button from 'sentry/components/button';\nimport DropdownAutoComplete from 'sentry/components/dropdownAutoComplete';\nimport DropdownButton from 'sentry/components/dropdownButton';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport Pagination from 'sentry/components/pagination';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'sentry/components/panels';\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconFlag, IconSubtract} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {sortProjects} from 'sentry/utils';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport EmptyMessage from 'sentry/views/settings/components/emptyMessage';\nimport ProjectListItem from 'sentry/views/settings/components/settingsProjectItem';\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n} & RouteComponentProps<{orgId: string; teamId: string}, {}>;\n\ntype State = {\n  error: boolean;\n  linkedProjects: Project[];\n  loading: boolean;\n  pageLinks: null | string;\n  unlinkedProjects: Project[];\n};\n\ntype DropdownAutoCompleteProps = React.ComponentProps<typeof DropdownAutoComplete>;\ntype Item = Parameters<NonNullable<DropdownAutoCompleteProps['onSelect']>>[0];\n\nclass TeamProjects extends React.Component<Props, State> {\n  state: State = {\n    error: false,\n    loading: true,\n    pageLinks: null,\n    unlinkedProjects: [],\n    linkedProjects: [],\n  };\n\n  componentDidMount() {\n    this.fetchAll();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      prevProps.params.orgId !== this.props.params.orgId ||\n      prevProps.params.teamId !== this.props.params.teamId\n    ) {\n      this.fetchAll();\n    }\n\n    if (prevProps.location !== this.props.location) {\n      this.fetchTeamProjects();\n    }\n  }\n\n  fetchAll = () => {\n    this.fetchTeamProjects();\n    this.fetchUnlinkedProjects();\n  };\n\n  fetchTeamProjects() {\n    const {\n      location,\n      params: {orgId, teamId},\n    } = this.props;\n\n    this.setState({loading: true});\n\n    this.props.api\n      .requestPromise(`/organizations/${orgId}/projects/`, {\n        query: {\n          query: `team:${teamId}`,\n          cursor: location.query.cursor || '',\n        },\n        includeAllArgs: true,\n      })\n      .then(([linkedProjects, _, resp]) => {\n        this.setState({\n          loading: false,\n          error: false,\n          linkedProjects,\n          pageLinks: resp?.getResponseHeader('Link') ?? null,\n        });\n      })\n      .catch(() => {\n        this.setState({loading: false, error: true});\n      });\n  }\n\n  fetchUnlinkedProjects(query = '') {\n    const {\n      params: {orgId, teamId},\n    } = this.props;\n\n    this.props.api\n      .requestPromise(`/organizations/${orgId}/projects/`, {\n        query: {\n          query: query ? `!team:${teamId} ${query}` : `!team:${teamId}`,\n        },\n      })\n      .then(unlinkedProjects => {\n        this.setState({unlinkedProjects});\n      });\n  }\n\n  handleLinkProject = (project: Project, action: string) => {\n    const {orgId, teamId} = this.props.params;\n    this.props.api.request(`/projects/${orgId}/${project.slug}/teams/${teamId}/`, {\n      method: action === 'add' ? 'POST' : 'DELETE',\n      success: resp => {\n        this.fetchAll();\n        ProjectActions.updateSuccess(resp);\n        addSuccessMessage(\n          action === 'add'\n            ? t('Successfully added project to team.')\n            : t('Successfully removed project from team')\n        );\n      },\n      error: () => {\n        addErrorMessage(t(\"Wasn't able to change project association.\"));\n      },\n    });\n  };\n\n  handleProjectSelected = (selection: Item) => {\n    const project = this.state.unlinkedProjects.find(p => p.id === selection.value);\n    if (project) {\n      this.handleLinkProject(project, 'add');\n    }\n  };\n\n  handleQueryUpdate = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    this.fetchUnlinkedProjects(evt.target.value);\n  };\n\n  projectPanelContents(projects: Project[]) {\n    const {organization} = this.props;\n    const access = new Set(organization.access);\n    const canWrite = access.has('org:write');\n\n    return projects.length ? (\n      sortProjects(projects).map(project => (\n        <StyledPanelItem key={project.id}>\n          <ProjectListItem project={project} organization={organization} />\n          <Tooltip\n            disabled={canWrite}\n            title={t('You do not have enough permission to change project association.')}\n          >\n            <Button\n              size=\"small\"\n              disabled={!canWrite}\n              icon={<IconSubtract isCircled size=\"xs\" />}\n              onClick={() => {\n                this.handleLinkProject(project, 'remove');\n              }}\n            >\n              {t('Remove')}\n            </Button>\n          </Tooltip>\n        </StyledPanelItem>\n      ))\n    ) : (\n      <EmptyMessage size=\"large\" icon={<IconFlag size=\"xl\" />}>\n        {t(\"This team doesn't have access to any projects.\")}\n      </EmptyMessage>\n    );\n  }\n\n  render() {\n    const {linkedProjects, unlinkedProjects, error, loading} = this.state;\n\n    if (error) {\n      return <LoadingError onRetry={() => this.fetchAll()} />;\n    }\n\n    if (loading) {\n      return <LoadingIndicator />;\n    }\n\n    const access = new Set(this.props.organization.access);\n\n    const otherProjects = unlinkedProjects.map(p => ({\n      value: p.id,\n      searchKey: p.slug,\n      label: <ProjectListElement>{p.slug}</ProjectListElement>,\n    }));\n\n    return (\n      <React.Fragment>\n        <Panel>\n          <PanelHeader hasButtons>\n            <div>{t('Projects')}</div>\n            <div style={{textTransform: 'none'}}>\n              {!access.has('org:write') ? (\n                <DropdownButton\n                  disabled\n                  title={t('You do not have enough permission to associate a project.')}\n                  size=\"xsmall\"\n                >\n                  {t('Add Project')}\n                </DropdownButton>\n              ) : (\n                <DropdownAutoComplete\n                  items={otherProjects}\n                  onChange={this.handleQueryUpdate}\n                  onSelect={this.handleProjectSelected}\n                  emptyMessage={t('No projects')}\n                  alignMenu=\"right\"\n                >\n                  {({isOpen}) => (\n                    <DropdownButton isOpen={isOpen} size=\"xsmall\">\n                      {t('Add Project')}\n                    </DropdownButton>\n                  )}\n                </DropdownAutoComplete>\n              )}\n            </div>\n          </PanelHeader>\n          <PanelBody>{this.projectPanelContents(linkedProjects)}</PanelBody>\n        </Panel>\n        <Pagination pageLinks={this.state.pageLinks} {...this.props} />\n      </React.Fragment>\n    );\n  }\n}\n\nconst StyledPanelItem = styled(PanelItem)`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: ${space(2)};\n`;\n\nconst ProjectListElement = styled('div')`\n  padding: ${space(0.25)} 0;\n`;\n\nexport {TeamProjects};\n\nexport default withApi(withOrganization(TeamProjects));\n"],"names":["ProjectItem","Component","isBookmarked","this","props","project","setState","render","organization","Wrapper","BookmarkLink","state","onToggle","handleToggleBookmark","to","slug","avatarSize","BookmarkStar","space","TeamProjects","React","error","loading","pageLinks","unlinkedProjects","linkedProjects","fetchTeamProjects","fetchUnlinkedProjects","action","orgId","teamId","params","api","request","method","success","resp","fetchAll","ProjectActions","addSuccessMessage","t","addErrorMessage","selection","find","p","id","value","handleLinkProject","evt","target","componentDidMount","componentDidUpdate","prevProps","location","requestPromise","query","cursor","includeAllArgs","then","_","getResponseHeader","catch","projectPanelContents","projects","canWrite","Set","access","has","length","sortProjects","map","StyledPanelItem","disabled","title","size","icon","isCircled","onClick","onRetry","otherProjects","searchKey","label","ProjectListElement","hasButtons","style","textTransform","items","onChange","handleQueryUpdate","onSelect","handleProjectSelected","emptyMessage","alignMenu","isOpen","PanelItem","withApi","withOrganization"],"sourceRoot":""}