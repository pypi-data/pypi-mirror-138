{"version":3,"file":"chunks/app_views_alerts_edit_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"w6BA0BA,MAAMA,UAA6BC,EAAAA,EAAwB,sEAoBnC,KACpB,MAAM,OAACC,EAAD,QAASC,GAAWC,KAAKC,OACzB,MAACC,GAASF,KAAKC,MAAME,OAE3BC,EAAAA,GAAAA,eAAsB,CAACC,KAAM,kBAC7BP,EAAOQ,KAAK,CACVC,SAAW,kBAAiBL,kBAC5BM,MAAO,CAACT,QAASA,EAAQU,SA1B7BC,kBACE,MAAO,IACFC,MAAMD,kBACTE,QAAS,IAAIC,KAIjBC,eACE,MAAM,MAACZ,EAAD,OAAQa,GAAUf,KAAKC,MAAME,OAEnC,MAAO,CAAC,CAAC,OAAS,kBAAiBD,iBAAqBa,OAG1DC,iBAAiB,GAAkB,IAAlB,SAACC,EAAD,KAAWC,GAAO,EAChB,SAAbD,GAAuBC,EAAKb,MAC9BL,KAAKC,MAAMkB,cAAcD,EAAKb,MAelCe,aACE,MAAM,OAACL,GAAUf,KAAKC,MAAME,QACtB,KAACkB,GAAQrB,KAAKsB,MAEpB,OACE,QAAC,IAAD,IACMtB,KAAKC,MACTc,OAAQA,EACRM,KAAMA,EACNE,gBAAiBvB,KAAKwB,uBAM9B,U,wDCxCA,MAAMC,UAA4BC,EAAAA,UAAwB,uDACzC,CACbC,SAAU,MAF4C,iCAiBnCA,IACnB3B,KAAK4B,SAAS,CAACD,SAAAA,OAbjBE,oBACE,MAAM,aAACC,EAAD,QAAe/B,GAAWC,KAAKC,OAErC8B,EAAAA,EAAAA,IAAoB,CAClBC,SAAU,yBACVC,UAAW,0BACXC,gBAAiBJ,EAAarB,GAC9B0B,WAAYpC,EAAQU,GACpB2B,WAAYpC,KAAKqC,iBAQrBC,WACE,MAAM,SAACX,GAAY3B,KAAKsB,MACxB,MAAQ,GAAEK,IAGZU,eACE,OAAOE,SAAShC,SAASiC,SAAS,yBAA2B,SAAW,QAG1EC,SACE,MAAM,gBAACC,EAAD,SAAkBH,EAAlB,aAA4BT,EAA5B,QAA0C/B,EAA1C,OAAmD4C,GAAU3C,KAAKC,MAClE2C,EAAY5C,KAAKqC,eAEvB,OACE,QAAC,EAAAQ,SAAD,YACE,QAAC,IAAD,CACEC,MAAO9C,KAAKsC,WACZS,QAASjB,EAAakB,KACtBC,YAAalD,EAAQiD,QAEvB,QAAC,KAAD,WACE,QAAC,KAAD,YACE,QAAC,IAAD,CACED,QAASjB,EAAakB,KACtBF,OAAOI,EAAAA,EAAAA,GAAE,mBACTD,YAAalD,EAAQiD,KACrBL,OAAQA,EACRJ,SAAUA,KAEZ,QAAC,KAAD,UAAevC,KAAKsC,mBAGxB,QAACa,EAAD,WACE,QAAC,KAAD,CAAaC,WAAS,EAAtB,UACE,QAAC,IAAD,CAAOC,kBAAgB,EAAvB,SACG,QAAC,MAACC,EAAD,gBAAQC,GAAT,SACCA,GACE,QAAC,EAAAV,SAAD,aACKH,GAAiC,UAAdE,KACpB,QAAC,IAAD,IACM5C,KAAKC,MACTF,QAASA,EACToB,cAAenB,KAAKwD,kBACpBC,YAAaH,EAAMI,KAAI,QAAC,GAACjD,GAAF,SAAUA,OAGpCiC,GAAiC,WAAdE,IAClB,QAAC,EAAD,IACM5C,KAAKC,MACTF,QAASA,EACToB,cAAenB,KAAKwD,kBACpBC,YAAaH,EAAMI,KAAI,QAAC,GAACjD,GAAF,SAAUA,WAKvC,QAAC,IAAD,eA7EZgB,EAAAA,YAAAA,sBAwFN,MAAM0B,GAAqB,OAAOQ,EAAAA,GAAP,qBAAH,mBACJC,EAAAA,EAAAA,GAAM,GADF,kCAQxB","sources":["webpack:///./app/views/alerts/incidentRules/details.tsx","webpack:///./app/views/alerts/edit.tsx"],"sourcesContent":["import {RouteComponentProps} from 'react-router';\n\nimport {Organization, Project} from 'sentry/types';\nimport {metric} from 'sentry/utils/analytics';\nimport RuleForm from 'sentry/views/alerts/incidentRules/ruleForm';\nimport {IncidentRule} from 'sentry/views/alerts/incidentRules/types';\nimport AsyncView from 'sentry/views/asyncView';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n  ruleId: string;\n};\n\ntype Props = {\n  onChangeTitle: (data: string) => void;\n  organization: Organization;\n  project: Project;\n  userTeamIds: string[];\n} & RouteComponentProps<RouteParams, {}>;\n\ntype State = {\n  actions: Map<string, any>;\n  rule: IncidentRule; // This is temp\n} & AsyncView['state'];\n\nclass IncidentRulesDetails extends AsyncView<Props, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      actions: new Map(),\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId, ruleId} = this.props.params;\n\n    return [['rule', `/organizations/${orgId}/alert-rules/${ruleId}/`]];\n  }\n\n  onRequestSuccess({stateKey, data}) {\n    if (stateKey === 'rule' && data.name) {\n      this.props.onChangeTitle(data.name);\n    }\n  }\n\n  handleSubmitSuccess = () => {\n    const {router, project} = this.props;\n    const {orgId} = this.props.params;\n\n    metric.endTransaction({name: 'saveAlertRule'});\n    router.push({\n      pathname: `/organizations/${orgId}/alerts/rules/`,\n      query: {project: project.id},\n    });\n  };\n\n  renderBody() {\n    const {ruleId} = this.props.params;\n    const {rule} = this.state;\n\n    return (\n      <RuleForm\n        {...this.props}\n        ruleId={ruleId}\n        rule={rule}\n        onSubmitSuccess={this.handleSubmitSuccess}\n      />\n    );\n  }\n}\n\nexport default IncidentRulesDetails;\n","import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport Teams from 'sentry/utils/teams';\nimport BuilderBreadCrumbs from 'sentry/views/alerts/builder/builderBreadCrumbs';\nimport IncidentRulesDetails from 'sentry/views/alerts/incidentRules/details';\nimport IssueEditor from 'sentry/views/alerts/issueRuleEditor';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n  ruleId: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  hasMetricAlerts: boolean;\n  organization: Organization;\n  project: Project;\n};\n\ntype State = {\n  ruleName: string;\n};\n\nclass ProjectAlertsEditor extends Component<Props, State> {\n  state: State = {\n    ruleName: '',\n  };\n\n  componentDidMount() {\n    const {organization, project} = this.props;\n\n    trackAnalyticsEvent({\n      eventKey: 'edit_alert_rule.viewed',\n      eventName: 'Edit Alert Rule: Viewed',\n      organization_id: organization.id,\n      project_id: project.id,\n      alert_type: this.getAlertType(),\n    });\n  }\n\n  handleChangeTitle = (ruleName: string) => {\n    this.setState({ruleName});\n  };\n\n  getTitle() {\n    const {ruleName} = this.state;\n    return `${ruleName}`;\n  }\n\n  getAlertType(): 'metric' | 'issue' {\n    return location.pathname.includes('/alerts/metric-rules/') ? 'metric' : 'issue';\n  }\n\n  render() {\n    const {hasMetricAlerts, location, organization, project, routes} = this.props;\n    const alertType = this.getAlertType();\n\n    return (\n      <Fragment>\n        <SentryDocumentTitle\n          title={this.getTitle()}\n          orgSlug={organization.slug}\n          projectSlug={project.slug}\n        />\n        <Layout.Header>\n          <Layout.HeaderContent>\n            <BuilderBreadCrumbs\n              orgSlug={organization.slug}\n              title={t('Edit Alert Rule')}\n              projectSlug={project.slug}\n              routes={routes}\n              location={location}\n            />\n            <Layout.Title>{this.getTitle()}</Layout.Title>\n          </Layout.HeaderContent>\n        </Layout.Header>\n        <EditConditionsBody>\n          <Layout.Main fullWidth>\n            <Teams provideUserTeams>\n              {({teams, initiallyLoaded}) =>\n                initiallyLoaded ? (\n                  <Fragment>\n                    {(!hasMetricAlerts || alertType === 'issue') && (\n                      <IssueEditor\n                        {...this.props}\n                        project={project}\n                        onChangeTitle={this.handleChangeTitle}\n                        userTeamIds={teams.map(({id}) => id)}\n                      />\n                    )}\n                    {hasMetricAlerts && alertType === 'metric' && (\n                      <IncidentRulesDetails\n                        {...this.props}\n                        project={project}\n                        onChangeTitle={this.handleChangeTitle}\n                        userTeamIds={teams.map(({id}) => id)}\n                      />\n                    )}\n                  </Fragment>\n                ) : (\n                  <LoadingIndicator />\n                )\n              }\n            </Teams>\n          </Layout.Main>\n        </EditConditionsBody>\n      </Fragment>\n    );\n  }\n}\n\nconst EditConditionsBody = styled(Layout.Body)`\n  margin-bottom: -${space(3)};\n\n  *:not(img) {\n    max-width: 1000px;\n  }\n`;\n\nexport default ProjectAlertsEditor;\n"],"names":["IncidentRulesDetails","AsyncView","router","project","this","props","orgId","params","metric","name","push","pathname","query","id","getDefaultState","super","actions","Map","getEndpoints","ruleId","onRequestSuccess","stateKey","data","onChangeTitle","renderBody","rule","state","onSubmitSuccess","handleSubmitSuccess","ProjectAlertsEditor","Component","ruleName","setState","componentDidMount","organization","trackAnalyticsEvent","eventKey","eventName","organization_id","project_id","alert_type","getAlertType","getTitle","location","includes","render","hasMetricAlerts","routes","alertType","Fragment","title","orgSlug","slug","projectSlug","t","EditConditionsBody","fullWidth","provideUserTeams","teams","initiallyLoaded","handleChangeTitle","userTeamIds","map","Layout","space"],"sourceRoot":""}