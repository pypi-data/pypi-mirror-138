{"version":3,"file":"chunks/app_views_alerts_builder_builderBreadCrumbs_tsx-app_views_alerts_wizard_options_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/views/alerts/builder/builderBreadCrumbs.tsx","webpack:///./app/views/alerts/wizard/options.tsx","webpack:///./app/views/settings/components/settingsBreadcrumb/menuItem.tsx"],"sourcesContent":["import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'sentry/utils/replaceRouterParams';\nimport {RouteWithName} from 'sentry/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  routes: RouteWithName[];\n\n  location?: Location;\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","import {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport Breadcrumbs, {Crumb, CrumbDropdown} from 'sentry/components/breadcrumbs';\nimport IdBadge from 'sentry/components/idBadge';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Project} from 'sentry/types';\nimport {isActiveSuperuser} from 'sentry/utils/isActiveSuperuser';\nimport recreateRoute from 'sentry/utils/recreateRoute';\nimport withProjects from 'sentry/utils/withProjects';\nimport MenuItem from 'sentry/views/settings/components/settingsBreadcrumb/menuItem';\nimport {RouteWithName} from 'sentry/views/settings/components/settingsBreadcrumb/types';\n\ntype Props = {\n  location: Location;\n  orgSlug: string;\n  projectSlug: string;\n  projects: Project[];\n  routes: RouteWithName[];\n  title: string;\n  alertName?: string;\n  canChangeProject?: boolean;\n};\n\nfunction BuilderBreadCrumbs(props: Props) {\n  const {\n    orgSlug,\n    title,\n    alertName,\n    projectSlug,\n    projects,\n    routes,\n    canChangeProject,\n    location,\n  } = props;\n  const project = projects.find(({slug}) => projectSlug === slug);\n  const isSuperuser = isActiveSuperuser();\n\n  const label = (\n    <IdBadge project={project ?? {slug: projectSlug}} avatarSize={18} disableLink />\n  );\n\n  const projectCrumbLink = {\n    to: `/organizations/${orgSlug}/alerts/rules/?project=${project?.id}`,\n    label,\n    preserveGlobalSelection: true,\n  };\n  const projectCrumbDropdown = {\n    onSelect: ({value}) => {\n      browserHistory.push(\n        recreateRoute('', {\n          routes,\n          params: {orgId: orgSlug, projectId: value},\n          location,\n        })\n      );\n    },\n    label,\n    items: projects\n      .filter(proj => proj.isMember || isSuperuser)\n      .map((proj, index) => ({\n        index,\n        value: proj.slug,\n        label: (\n          <MenuItem>\n            <IdBadge\n              project={proj}\n              avatarProps={{consistentWidth: true}}\n              avatarSize={18}\n              disableLink\n            />\n          </MenuItem>\n        ),\n        searchKey: proj.slug,\n      })),\n  };\n  const projectCrumb = canChangeProject ? projectCrumbDropdown : projectCrumbLink;\n\n  const crumbs: (Crumb | CrumbDropdown)[] = [\n    {\n      to: `/organizations/${orgSlug}/alerts/rules/`,\n      label: t('Alerts'),\n      preservePageFilters: true,\n    },\n    projectCrumb,\n    {\n      label: title,\n      ...(alertName\n        ? {\n            to: `/organizations/${orgSlug}/alerts/${projectSlug}/wizard`,\n            preservePageFilters: true,\n          }\n        : {}),\n    },\n  ];\n  if (alertName) {\n    crumbs.push({label: alertName});\n  }\n\n  return <StyledBreadcrumbs crumbs={crumbs} />;\n}\n\nconst StyledBreadcrumbs = styled(Breadcrumbs)`\n  font-size: 18px;\n  margin-bottom: ${space(3)};\n`;\n\nexport default withProjects(BuilderBreadCrumbs);\n","import diagramApdex from 'sentry-images/spot/alerts-wizard-apdex.svg';\nimport diagramCLS from 'sentry-images/spot/alerts-wizard-cls.svg';\nimport diagramCrashFreeSessions from 'sentry-images/spot/alerts-wizard-crash-free-sessions.svg';\nimport diagramCrashFreeUsers from 'sentry-images/spot/alerts-wizard-crash-free-users.svg';\nimport diagramCustom from 'sentry-images/spot/alerts-wizard-custom.svg';\nimport diagramErrors from 'sentry-images/spot/alerts-wizard-errors.svg';\nimport diagramFailureRate from 'sentry-images/spot/alerts-wizard-failure-rate.svg';\nimport diagramFID from 'sentry-images/spot/alerts-wizard-fid.svg';\nimport diagramIssues from 'sentry-images/spot/alerts-wizard-issues.svg';\nimport diagramLCP from 'sentry-images/spot/alerts-wizard-lcp.svg';\nimport diagramThroughput from 'sentry-images/spot/alerts-wizard-throughput.svg';\nimport diagramTransactionDuration from 'sentry-images/spot/alerts-wizard-transaction-duration.svg';\nimport diagramUsers from 'sentry-images/spot/alerts-wizard-users-experiencing-errors.svg';\n\nimport FeatureBadge from 'sentry/components/featureBadge';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport {\n  Dataset,\n  EventTypes,\n  SessionsAggregate,\n} from 'sentry/views/alerts/incidentRules/types';\n\nexport type AlertType =\n  | 'issues'\n  | 'num_errors'\n  | 'users_experiencing_errors'\n  | 'throughput'\n  | 'trans_duration'\n  | 'apdex'\n  | 'failure_rate'\n  | 'lcp'\n  | 'fid'\n  | 'cls'\n  | 'custom'\n  | 'crash_free_sessions'\n  | 'crash_free_users';\n\nexport const WebVitalAlertTypes = new Set(['lcp', 'fid', 'cls', 'fcp']);\n\nexport const AlertWizardAlertNames: Record<AlertType, string> = {\n  issues: t('Issues'),\n  num_errors: t('Number of Errors'),\n  users_experiencing_errors: t('Users Experiencing Errors'),\n  throughput: t('Throughput'),\n  trans_duration: t('Transaction Duration'),\n  apdex: t('Apdex'),\n  failure_rate: t('Failure Rate'),\n  lcp: t('Largest Contentful Paint'),\n  fid: t('First Input Delay'),\n  cls: t('Cumulative Layout Shift'),\n  custom: t('Custom Metric'),\n  crash_free_sessions: t('Crash Free Session Rate'),\n  crash_free_users: t('Crash Free User Rate'),\n};\n\ntype AlertWizardCategory = {\n  categoryHeading: string;\n  options: AlertType[];\n  featureBadgeType?: React.ComponentProps<typeof FeatureBadge>['type'];\n};\nexport const getAlertWizardCategories = (org: Organization): AlertWizardCategory[] => [\n  {\n    categoryHeading: t('Errors'),\n    options: ['issues', 'num_errors', 'users_experiencing_errors'],\n  },\n  ...(org.features.includes('crash-rate-alerts')\n    ? [\n        {\n          categoryHeading: t('Sessions'),\n          options: ['crash_free_sessions', 'crash_free_users'] as AlertType[],\n          featureBadgeType: 'new' as const,\n        },\n      ]\n    : []),\n  {\n    categoryHeading: t('Performance'),\n    options: [\n      'throughput',\n      'trans_duration',\n      'apdex',\n      'failure_rate',\n      'lcp',\n      'fid',\n      'cls',\n    ],\n  },\n  {\n    categoryHeading: t('Other'),\n    options: ['custom'],\n  },\n];\n\ntype PanelContent = {\n  description: string;\n  examples: string[];\n  docsLink?: string;\n  illustration?: string;\n};\n\nexport const AlertWizardPanelContent: Record<AlertType, PanelContent> = {\n  issues: {\n    description: t(\n      'Issues are groups of errors that have a similar stacktrace. Set an alert for new issues, when an issue changes state, frequency of errors, or users affected by an issue.'\n    ),\n    examples: [\n      t(\"When the triggering event's level is fatal.\"),\n      t('When an issue was seen 100 times in the last 2 days.'),\n      t(\n        'Create a JIRA ticket when an issue changes state from resolved to unresolved and is unassigned.'\n      ),\n    ],\n    illustration: diagramIssues,\n  },\n  num_errors: {\n    description: t(\n      'Alert when the number of errors in a project matching your filters crosses a threshold. This is useful for monitoring the overall level or errors in your project or errors occurring in specific parts of your app.'\n    ),\n    examples: [\n      t('When the signup page has more than 10k errors in 5 minutes.'),\n      t('When there are more than 500k errors in 10 minutes from a specific file.'),\n    ],\n    illustration: diagramErrors,\n  },\n  users_experiencing_errors: {\n    description: t(\n      'Alert when the number of users affected by errors in your project crosses a threshold.'\n    ),\n    examples: [\n      t('When 100k users experience an error in 1 hour.'),\n      t('When 100 users experience a problem on the Checkout page.'),\n    ],\n    illustration: diagramUsers,\n  },\n  throughput: {\n    description: t(\n      'Throughput is the total number of transactions in a project and you can alert when it reaches a threshold within a period of time.'\n    ),\n    examples: [\n      t('When number of transactions on a key page exceeds 100k per minute.'),\n      t('When number of transactions drops below a threshold.'),\n    ],\n    illustration: diagramThroughput,\n  },\n  trans_duration: {\n    description: t(\n      'Monitor how long it takes for transactions to complete. Use flexible aggregates like percentiles, averages, and min/max.'\n    ),\n    examples: [\n      t('When any transaction is slower than 3 seconds.'),\n      t('When the 75th percentile response time is higher than 250 milliseconds.'),\n    ],\n    illustration: diagramTransactionDuration,\n  },\n  apdex: {\n    description: t(\n      'Apdex is a metric used to track and measure user satisfaction based on your application response times. The Apdex score provides the ratio of satisfactory, tolerable, and frustrated requests in a specific transaction or endpoint.'\n    ),\n    examples: [t('When apdex is below 300.')],\n    docsLink: 'https://docs.sentry.io/product/performance/metrics/#apdex',\n    illustration: diagramApdex,\n  },\n  failure_rate: {\n    description: t(\n      'Failure rate is the percentage of unsuccessful transactions. Sentry treats transactions with a status other than “ok,” “canceled,” and “unknown” as failures.'\n    ),\n    examples: [t('When the failure rate for an important endpoint reaches 10%.')],\n    docsLink: 'https://docs.sentry.io/product/performance/metrics/#failure-rate',\n    illustration: diagramFailureRate,\n  },\n  lcp: {\n    description: t(\n      'Largest Contentful Paint (LCP) measures loading performance. It marks the point when the largest image or text block is visible within the viewport. A fast LCP helps reassure the user that the page is useful, and so we recommend an LCP of less than 2.5 seconds.'\n    ),\n    examples: [\n      t('When the 75th percentile LCP of your homepage is longer than 2.5 seconds.'),\n    ],\n    docsLink: 'https://docs.sentry.io/product/performance/web-vitals',\n    illustration: diagramLCP,\n  },\n  fid: {\n    description: t(\n      'First Input Delay (FID) measures interactivity as the response time when the user tries to interact with the viewport. A low FID helps ensure that a page is useful, and we recommend a FID of less than 100 milliseconds.'\n    ),\n    examples: [t('When the average FID of a page is longer than 4 seconds.')],\n    docsLink: 'https://docs.sentry.io/product/performance/web-vitals',\n    illustration: diagramFID,\n  },\n  cls: {\n    description: t(\n      'Cumulative Layout Shift (CLS) measures visual stability by quantifying unexpected layout shifts that occur during the entire lifespan of the page. A CLS of less than 0.1 is a good user experience, while anything greater than 0.25 is poor.'\n    ),\n    examples: [t('When the CLS of a page is more than 0.5.')],\n    docsLink: 'https://docs.sentry.io/product/performance/web-vitals',\n    illustration: diagramCLS,\n  },\n  custom: {\n    description: t(\n      'Alert on metrics which are not listed above, such as first paint (FP), first contentful paint (FCP), and time to first byte (TTFB).'\n    ),\n    examples: [\n      t('When the 95th percentile FP of a page is longer than 250 milliseconds.'),\n      t('When the average TTFB of a page is longer than 600 millliseconds.'),\n    ],\n    illustration: diagramCustom,\n  },\n  crash_free_sessions: {\n    description: t(\n      'A session begins when a user starts the application and ends when it’s closed or sent to the background. A crash is when a session ends due to an error and this type of alert lets you monitor when those crashed sessions exceed a threshold. This lets you get a better picture of the health of your app.'\n    ),\n    examples: [\n      t('When the Crash Free Rate is below 98%, send a Slack notification to the team.'),\n    ],\n    illustration: diagramCrashFreeSessions,\n  },\n  crash_free_users: {\n    description: t(\n      'Crash Free Users is the percentage of distinct users that haven’t experienced a crash and so this type of alert tells you when the overall user experience dips below a certain unacceptable threshold.'\n    ),\n    examples: [\n      t('When the Crash Free Rate is below 97%, send an email notification to yourself.'),\n    ],\n    illustration: diagramCrashFreeUsers,\n  },\n};\n\nexport type WizardRuleTemplate = {\n  aggregate: string;\n  dataset: Dataset;\n  eventTypes: EventTypes;\n};\n\nexport const AlertWizardRuleTemplates: Record<\n  Exclude<AlertType, 'issues'>,\n  WizardRuleTemplate\n> = {\n  num_errors: {\n    aggregate: 'count()',\n    dataset: Dataset.ERRORS,\n    eventTypes: EventTypes.ERROR,\n  },\n  users_experiencing_errors: {\n    aggregate: 'count_unique(user)',\n    dataset: Dataset.ERRORS,\n    eventTypes: EventTypes.ERROR,\n  },\n  throughput: {\n    aggregate: 'count()',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  trans_duration: {\n    aggregate: 'p95(transaction.duration)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  apdex: {\n    aggregate: 'apdex(300)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  failure_rate: {\n    aggregate: 'failure_rate()',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  lcp: {\n    aggregate: 'p95(measurements.lcp)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  fid: {\n    aggregate: 'p95(measurements.fid)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  cls: {\n    aggregate: 'p95(measurements.cls)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  custom: {\n    aggregate: 'p95(measurements.fp)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  crash_free_sessions: {\n    aggregate: SessionsAggregate.CRASH_FREE_SESSIONS,\n    dataset: Dataset.SESSIONS,\n    eventTypes: EventTypes.SESSION,\n  },\n  crash_free_users: {\n    aggregate: SessionsAggregate.CRASH_FREE_USERS,\n    dataset: Dataset.SESSIONS,\n    eventTypes: EventTypes.USER,\n  },\n};\n\nexport const hidePrimarySelectorSet = new Set<AlertType>([\n  'num_errors',\n  'users_experiencing_errors',\n  'throughput',\n  'apdex',\n  'failure_rate',\n  'crash_free_sessions',\n  'crash_free_users',\n]);\n\nexport const hideParameterSelectorSet = new Set<AlertType>([\n  'trans_duration',\n  'lcp',\n  'fid',\n  'cls',\n]);\n\nexport function getFunctionHelpText(alertType: AlertType): {\n  labelText: string;\n  timeWindowText?: string;\n} {\n  const timeWindowText = t('over');\n  if (alertType === 'apdex') {\n    return {\n      labelText: t('Select apdex threshold and time interval'),\n      timeWindowText,\n    };\n  }\n  if (hidePrimarySelectorSet.has(alertType)) {\n    return {\n      labelText: t('Select time interval'),\n    };\n  }\n  return {\n    labelText: t('Select function and time interval'),\n    timeWindowText,\n  };\n}\n","import styled from '@emotion/styled';\n\nimport overflowEllipsis from 'sentry/styles/overflowEllipsis';\n\nconst MenuItem = styled('div')`\n  font-size: 14px;\n  ${overflowEllipsis};\n`;\n\nexport default MenuItem;\n"],"names":["recreateRoute","to","options","routes","params","location","stepBack","paths","map","path","lastRootIndex","routeIndex","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","BuilderBreadCrumbs","props","orgSlug","title","alertName","projectSlug","projects","canChangeProject","project","find","slug","isSuperuser","isActiveSuperuser","label","avatarSize","disableLink","projectCrumbLink","id","preserveGlobalSelection","projectCrumbDropdown","onSelect","value","browserHistory","orgId","projectId","items","filter","proj","isMember","index","avatarProps","consistentWidth","searchKey","projectCrumb","crumbs","t","preservePageFilters","push","StyledBreadcrumbs","Breadcrumbs","space","withProjects","Set","AlertWizardAlertNames","issues","num_errors","users_experiencing_errors","throughput","trans_duration","apdex","failure_rate","lcp","fid","cls","custom","crash_free_sessions","crash_free_users","getAlertWizardCategories","org","categoryHeading","features","includes","featureBadgeType","AlertWizardPanelContent","description","examples","illustration","diagramIssues","diagramErrors","diagramUsers","diagramThroughput","diagramTransactionDuration","docsLink","diagramApdex","diagramFailureRate","diagramLCP","diagramFID","diagramCLS","diagramCustom","diagramCrashFreeSessions","diagramCrashFreeUsers","AlertWizardRuleTemplates","aggregate","dataset","Dataset","eventTypes","EventTypes","SessionsAggregate","hidePrimarySelectorSet","hideParameterSelectorSet","getFunctionHelpText","alertType","timeWindowText","labelText","has","overflowEllipsis"],"sourceRoot":""}