{"version":3,"file":"chunks/app_components_globalSdkUpdateAlert_tsx-app_utils_performance_histogram_utils_tsx-app_views_p-c41a2d.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/globalSdkUpdateAlert.tsx","webpack:///./app/utils/performance/histogram/utils.tsx","webpack:///./app/views/performance/metricsSwitch.tsx","webpack:///./app/views/performance/transactionSummary/transactionEvents/utils.tsx","webpack:///./app/views/performance/transactionSummary/transactionThresholdModal.tsx"],"sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport {promptsCheck, promptsUpdate} from 'sentry/actionCreators/prompts';\nimport SidebarPanelActions from 'sentry/actions/sidebarPanelActions';\nimport {Client} from 'sentry/api';\nimport Alert from 'sentry/components/alert';\nimport {ALL_ACCESS_PROJECTS} from 'sentry/constants/pageFilters';\nimport {IconUpgrade} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {\n  Organization,\n  PageFilters,\n  ProjectSdkUpdates,\n  SDKUpdatesSuggestion,\n} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport {promptIsDismissed} from 'sentry/utils/promptIsDismissed';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withPageFilters from 'sentry/utils/withPageFilters';\nimport withSdkUpdates from 'sentry/utils/withSdkUpdates';\n\nimport {SidebarPanelKey} from './sidebar/types';\nimport Button from './button';\n\ntype Props = React.ComponentProps<typeof Alert> & {\n  api: Client;\n  organization: Organization;\n  Wrapper?: React.ComponentType;\n  sdkUpdates?: ProjectSdkUpdates[] | null;\n  selection?: PageFilters;\n};\n\ntype State = {\n  isDismissed: boolean | null;\n};\n\ntype AnalyticsOpts = {\n  organization: Organization;\n};\n\nconst recordAnalyticsSeen = ({organization}: AnalyticsOpts) =>\n  trackAdvancedAnalyticsEvent('sdk_updates.seen', {organization});\n\nconst recordAnalyticsSnoozed = ({organization}: AnalyticsOpts) =>\n  trackAdvancedAnalyticsEvent('sdk_updates.snoozed', {organization});\n\nconst recordAnalyticsClicked = ({organization}: AnalyticsOpts) =>\n  trackAdvancedAnalyticsEvent('sdk_updates.clicked', {organization});\n\nconst flattenSuggestions = (list: ProjectSdkUpdates[]) =>\n  list.reduce<SDKUpdatesSuggestion[]>(\n    (suggestions, sdk) => [...suggestions, ...sdk.suggestions],\n    []\n  );\n\nclass InnerGlobalSdkSuggestions extends React.Component<Props, State> {\n  state: State = {\n    isDismissed: null,\n  };\n\n  componentDidMount() {\n    this.promptsCheck();\n    recordAnalyticsSeen({organization: this.props.organization});\n  }\n\n  async promptsCheck() {\n    const {api, organization} = this.props;\n\n    const prompt = await promptsCheck(api, {\n      organizationId: organization.id,\n      feature: 'sdk_updates',\n    });\n\n    this.setState({\n      isDismissed: promptIsDismissed(prompt),\n    });\n  }\n\n  snoozePrompt = () => {\n    const {api, organization} = this.props;\n    promptsUpdate(api, {\n      organizationId: organization.id,\n      feature: 'sdk_updates',\n      status: 'snoozed',\n    });\n\n    this.setState({isDismissed: true});\n    recordAnalyticsSnoozed({organization: this.props.organization});\n  };\n\n  render() {\n    const {\n      api: _api,\n      selection,\n      sdkUpdates,\n      organization,\n      Wrapper,\n      ...props\n    } = this.props;\n\n    const {isDismissed} = this.state;\n\n    if (!sdkUpdates || isDismissed === null || isDismissed) {\n      return null;\n    }\n\n    // withSdkUpdates explicitly only queries My Projects. This means that when\n    // looking at any projects outside of My Projects (like All Projects), this\n    // will only show the updates relevant to the to user.\n    const projectSpecificUpdates =\n      selection?.projects.length === 0 || selection?.projects === [ALL_ACCESS_PROJECTS]\n        ? sdkUpdates\n        : sdkUpdates.filter(update =>\n            selection?.projects?.includes(parseInt(update.projectId, 10))\n          );\n\n    // Are there any updates?\n    if (flattenSuggestions(projectSpecificUpdates).length === 0) {\n      return null;\n    }\n\n    const showBroadcastsPanel = (\n      <Button\n        priority=\"link\"\n        size=\"zero\"\n        onClick={() => {\n          SidebarPanelActions.activatePanel(SidebarPanelKey.Broadcasts);\n          recordAnalyticsClicked({organization});\n        }}\n      >\n        {t('Review updates')}\n      </Button>\n    );\n\n    const notice = (\n      <Alert type=\"info\" icon={<IconUpgrade />} {...props}>\n        <Content>\n          {t(\n            `You have outdated SDKs in your projects. Update them for important fixes and features.`\n          )}\n          <Actions>\n            <Button\n              priority=\"link\"\n              size=\"zero\"\n              title={t('Dismiss for the next two weeks')}\n              onClick={this.snoozePrompt}\n            >\n              {t('Remind me later')}\n            </Button>\n            |{showBroadcastsPanel}\n          </Actions>\n        </Content>\n      </Alert>\n    );\n\n    return Wrapper ? <Wrapper>{notice}</Wrapper> : notice;\n  }\n}\n\nconst Content = styled('div')`\n  display: flex;\n  flex-wrap: wrap;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    justify-content: space-between;\n  }\n`;\n\nconst Actions = styled('div')`\n  display: grid;\n  grid-template-columns: repeat(3, max-content);\n  gap: ${space(1)};\n`;\n\nconst GlobalSdkSuggestions = withOrganization(\n  withSdkUpdates(withPageFilters(withApi(InnerGlobalSdkSuggestions)))\n);\n\nexport default GlobalSdkSuggestions;\n","import {ColumnType} from 'sentry/utils/discover/fields';\nimport {getDuration} from 'sentry/utils/formatters';\n\nimport {HistogramData} from './types';\n\nexport function getBucketWidth(data: HistogramData) {\n  // We can assume that all buckets are of equal width, use the first two\n  // buckets to get the width. The value of each histogram function indicates\n  // the beginning of the bucket.\n  return data.length >= 2 ? data[1].bin - data[0].bin : 0;\n}\n\nexport function computeBuckets(data: HistogramData) {\n  const width = getBucketWidth(data);\n\n  return data.map(item => {\n    const bucket = item.bin;\n    return {\n      start: bucket,\n      end: bucket + width,\n    };\n  });\n}\n\nexport function formatHistogramData(\n  data: HistogramData,\n  {\n    precision,\n    type,\n    additionalFieldsFn,\n  }: {\n    additionalFieldsFn?: any;\n    precision?: number;\n    type?: ColumnType;\n  } = {}\n) {\n  const formatter = (value: number): string => {\n    switch (type) {\n      case 'duration':\n        const decimalPlaces = precision ?? (value < 1000 ? 0 : 3);\n        return getDuration(value / 1000, decimalPlaces, true);\n      case 'number':\n        // This is trying to avoid some of potential rounding errors that cause bins\n        // have the same label, if the number of bins doesn't visually match what is\n        // expected, check that this rounding is correct. If this issue persists,\n        // consider formatting the bin as a string in the response\n        const factor = 10 ** (precision ?? 0);\n        return (Math.round((value + Number.EPSILON) * factor) / factor).toLocaleString();\n      default:\n        throw new Error(`Unable to format type: ${type}`);\n    }\n  };\n  return data.map(item => {\n    return {\n      value: item.count,\n      name: formatter(item.bin),\n      ...(additionalFieldsFn?.(item.bin) ?? {}),\n    };\n  });\n}\n","import {createContext, useContext, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport Feature from 'sentry/components/acl/feature';\nimport Switch from 'sentry/components/switchButton';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport localStorage from 'sentry/utils/localStorage';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nconst FEATURE_FLAG = 'metrics-performance-ui';\n\n/**\n * This is a temporary component used for debugging metrics data on performance pages.\n * Visible only to small amount of internal users.\n */\nfunction MetricsSwitch({onSwitch}: {onSwitch: () => void}) {\n  const organization = useOrganization();\n  const {isMetricsData, setIsMetricsData} = useMetricsSwitch();\n\n  function handleToggle() {\n    onSwitch();\n    setIsMetricsData(!isMetricsData);\n  }\n\n  return (\n    <Feature features={[FEATURE_FLAG]} organization={organization}>\n      <Label>\n        {t('Metrics Data')}\n        <Switch isActive={isMetricsData} toggle={handleToggle} size=\"lg\" />\n      </Label>\n    </Feature>\n  );\n}\n\nconst Label = styled('label')`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 0;\n  gap: ${space(1)};\n  font-weight: normal;\n`;\n\nconst MetricsSwitchContext = createContext({\n  isMetricsData: false,\n  setIsMetricsData: (_isMetricsData: boolean) => {},\n});\n\nfunction MetricsSwitchContextContainer({children}: {children: React.ReactNode}) {\n  const organization = useOrganization();\n  const localStorageKey = `metrics.performance:${organization.slug}`;\n  const [isMetricsData, setIsMetricsData] = useState(\n    localStorage.getItem(localStorageKey) === 'true'\n  );\n\n  function handleSetIsMetricsData(value: boolean) {\n    localStorage.setItem(localStorageKey, value.toString());\n    setIsMetricsData(value);\n  }\n\n  return (\n    <MetricsSwitchContext.Provider\n      value={{\n        isMetricsData: isMetricsData && organization.features.includes(FEATURE_FLAG),\n        setIsMetricsData: handleSetIsMetricsData,\n      }}\n    >\n      {children}\n    </MetricsSwitchContext.Provider>\n  );\n}\n\nfunction useMetricsSwitch() {\n  const contextValue = useContext(MetricsSwitchContext);\n\n  return contextValue;\n}\n\nexport {\n  MetricsSwitch,\n  MetricsSwitchContextContainer,\n  useMetricsSwitch,\n  MetricsSwitchContext,\n};\n","import {Location, Query} from 'history';\n\nimport {t} from 'sentry/locale';\nimport {decodeScalar} from 'sentry/utils/queryString';\n\nimport {filterToField, SpanOperationBreakdownFilter} from '../filter';\nimport {TransactionFilterOptions} from '../utils';\n\nexport enum EventsDisplayFilterName {\n  p50 = 'p50',\n  p75 = 'p75',\n  p95 = 'p95',\n  p99 = 'p99',\n  p100 = 'p100',\n}\n\nexport type EventsDisplayFilter = {\n  label: string;\n  name: EventsDisplayFilterName;\n  query?: string[][];\n  sort?: {field: string; kind: 'desc' | 'asc'};\n};\n\nexport type EventsFilterOptions = {\n  [name in EventsDisplayFilterName]: EventsDisplayFilter;\n};\n\nexport type EventsFilterPercentileValues = {\n  [name in Exclude<EventsDisplayFilterName, EventsDisplayFilterName.p100>]: number;\n};\n\nexport function getEventsFilterOptions(\n  spanOperationBreakdownFilter: SpanOperationBreakdownFilter,\n  percentileValues?: EventsFilterPercentileValues\n): EventsFilterOptions {\n  const {p99, p95, p75, p50} = percentileValues\n    ? percentileValues\n    : {p99: 0, p95: 0, p75: 0, p50: 0};\n  return {\n    [EventsDisplayFilterName.p50]: {\n      name: EventsDisplayFilterName.p50,\n      query: p50 ? [['transaction.duration', `<=${p50.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p50'),\n    },\n    [EventsDisplayFilterName.p75]: {\n      name: EventsDisplayFilterName.p75,\n      query: p75 ? [['transaction.duration', `<=${p75.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p75'),\n    },\n    [EventsDisplayFilterName.p95]: {\n      name: EventsDisplayFilterName.p95,\n      query: p95 ? [['transaction.duration', `<=${p95.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p95'),\n    },\n    [EventsDisplayFilterName.p99]: {\n      name: EventsDisplayFilterName.p99,\n      query: p99 ? [['transaction.duration', `<=${p99.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p99'),\n    },\n    [EventsDisplayFilterName.p100]: {\n      name: EventsDisplayFilterName.p100,\n      label: t('p100'),\n    },\n  };\n}\n\nexport function eventsRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n}: {\n  orgSlug: string;\n  query: Query;\n  transaction: string;\n  projectID?: string | string[];\n}) {\n  const pathname = `/organizations/${orgSlug}/performance/summary/events/`;\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n    },\n  };\n}\n\nfunction stringToFilter(option: string) {\n  if (\n    Object.values(EventsDisplayFilterName).includes(option as EventsDisplayFilterName)\n  ) {\n    return option as EventsDisplayFilterName;\n  }\n\n  return EventsDisplayFilterName.p100;\n}\nexport function decodeEventsDisplayFilterFromLocation(location: Location) {\n  return stringToFilter(\n    decodeScalar(location.query.showTransactions, EventsDisplayFilterName.p100)\n  );\n}\n\nexport function filterEventsDisplayToLocationQuery(\n  option: EventsDisplayFilterName,\n  spanOperationBreakdownFilter: SpanOperationBreakdownFilter\n) {\n  const eventsFilterOptions = getEventsFilterOptions(spanOperationBreakdownFilter);\n  const kind = eventsFilterOptions[option].sort?.kind;\n  const field = eventsFilterOptions[option].sort?.field;\n\n  const query: {showTransactions: string; sort?: string} = {\n    showTransactions: option,\n  };\n  if (kind && field) {\n    query.sort = `${kind === 'desc' ? '-' : ''}${field}`;\n  }\n  return query;\n}\n\nexport function mapShowTransactionToPercentile(\n  showTransaction\n): EventsDisplayFilterName | undefined {\n  switch (showTransaction) {\n    case TransactionFilterOptions.OUTLIER:\n      return EventsDisplayFilterName.p100;\n    case TransactionFilterOptions.SLOW:\n      return EventsDisplayFilterName.p95;\n    default:\n      return undefined;\n  }\n}\n","import * as React from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport cloneDeep from 'lodash/cloneDeep';\nimport set from 'lodash/set';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport {Client} from 'sentry/api';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport Input from 'sentry/components/forms/controls/input';\nimport Field from 'sentry/components/forms/field';\nimport SelectControl from 'sentry/components/forms/selectControl';\nimport Link from 'sentry/components/links/link';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport EventView from 'sentry/utils/discover/eventView';\nimport withApi from 'sentry/utils/withApi';\nimport withProjects from 'sentry/utils/withProjects';\n\nimport {transactionSummaryRouteWithQuery} from './utils';\n\nexport enum TransactionThresholdMetric {\n  TRANSACTION_DURATION = 'duration',\n  LARGEST_CONTENTFUL_PAINT = 'lcp',\n}\n\nexport const METRIC_CHOICES = [\n  {label: t('Transaction Duration'), value: 'duration'},\n  {label: t('Largest Contentful Paint'), value: 'lcp'},\n];\n\ntype Props = {\n  api: Client;\n  eventView: EventView;\n  organization: Organization;\n  projects: Project[];\n  transactionName: string;\n  transactionThreshold: number | undefined;\n  transactionThresholdMetric: TransactionThresholdMetric | undefined;\n  onApply?: (threshold, metric) => void;\n  project?: string;\n} & ModalRenderProps;\n\ntype State = {\n  error: string | null;\n  metric: TransactionThresholdMetric | undefined;\n  threshold: number | undefined;\n};\n\nclass TransactionThresholdModal extends React.Component<Props, State> {\n  state: State = {\n    threshold: this.props.transactionThreshold,\n    metric: this.props.transactionThresholdMetric,\n    error: null,\n  };\n\n  getProject() {\n    const {projects, eventView, project} = this.props;\n\n    if (defined(project)) {\n      return projects.find(proj => proj.id === project);\n    }\n    const projectId = String(eventView.project[0]);\n    return projects.find(proj => proj.id === projectId);\n  }\n\n  handleApply = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const {api, closeModal, organization, transactionName, onApply} = this.props;\n\n    const project = this.getProject();\n    if (!defined(project)) {\n      return;\n    }\n\n    const transactionThresholdUrl = `/organizations/${organization.slug}/project-transaction-threshold-override/`;\n\n    api\n      .requestPromise(transactionThresholdUrl, {\n        method: 'POST',\n        includeAllArgs: true,\n        query: {\n          project: project.id,\n        },\n        data: {\n          transaction: transactionName,\n          threshold: this.state.threshold,\n          metric: this.state.metric,\n        },\n      })\n      .then(() => {\n        closeModal();\n        if (onApply) {\n          onApply(this.state.threshold, this.state.metric);\n        }\n      })\n      .catch(err => {\n        this.setState({\n          error: err,\n        });\n        const errorMessage =\n          err.responseJSON?.threshold ?? err.responseJSON?.non_field_errors ?? null;\n        addErrorMessage(errorMessage);\n      });\n  };\n\n  handleFieldChange = (field: string) => (value: string) => {\n    this.setState(prevState => {\n      const newState = cloneDeep(prevState);\n      set(newState, field, value);\n\n      return {...newState, errors: undefined};\n    });\n  };\n\n  handleReset = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const {api, closeModal, organization, transactionName, onApply} = this.props;\n\n    const project = this.getProject();\n    if (!defined(project)) {\n      return;\n    }\n\n    const transactionThresholdUrl = `/organizations/${organization.slug}/project-transaction-threshold-override/`;\n\n    api\n      .requestPromise(transactionThresholdUrl, {\n        method: 'DELETE',\n        includeAllArgs: true,\n        query: {\n          project: project.id,\n        },\n        data: {\n          transaction: transactionName,\n        },\n      })\n      .then(() => {\n        const projectThresholdUrl = `/projects/${organization.slug}/${project.slug}/transaction-threshold/configure/`;\n        this.props.api\n          .requestPromise(projectThresholdUrl, {\n            method: 'GET',\n            includeAllArgs: true,\n            query: {\n              project: project.id,\n            },\n          })\n          .then(([data]) => {\n            this.setState({\n              threshold: data.threshold,\n              metric: data.metric,\n            });\n            closeModal();\n            if (onApply) {\n              onApply(this.state.threshold, this.state.metric);\n            }\n          })\n          .catch(err => {\n            const errorMessage = err.responseJSON?.threshold ?? null;\n            addErrorMessage(errorMessage);\n          });\n      })\n      .catch(err => {\n        this.setState({\n          error: err,\n        });\n      });\n  };\n\n  renderModalFields() {\n    return (\n      <React.Fragment>\n        <Field\n          data-test-id=\"response-metric\"\n          label={t('Calculation Method')}\n          inline={false}\n          help={t(\n            'This determines which duration metric is used for the Response Time Threshold.'\n          )}\n          showHelpInTooltip\n          flexibleControlStateSize\n          stacked\n          required\n        >\n          <SelectControl\n            required\n            options={METRIC_CHOICES.slice()}\n            name=\"responseMetric\"\n            label={t('Calculation Method')}\n            value={this.state.metric}\n            onChange={(option: {label: string; value: string}) => {\n              this.handleFieldChange('metric')(option.value);\n            }}\n          />\n        </Field>\n        <Field\n          data-test-id=\"response-time-threshold\"\n          label={t('Response Time Threshold (ms)')}\n          inline={false}\n          help={t(\n            'The satisfactory response time for the calculation method defined above. This is used to calculate Apdex and User Misery scores.'\n          )}\n          showHelpInTooltip\n          flexibleControlStateSize\n          stacked\n          required\n        >\n          <Input\n            type=\"number\"\n            name=\"threshold\"\n            required\n            pattern=\"[0-9]*(\\.[0-9]*)?\"\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n              this.handleFieldChange('threshold')(event.target.value);\n            }}\n            value={this.state.threshold}\n            step={100}\n            min={100}\n          />\n        </Field>\n      </React.Fragment>\n    );\n  }\n\n  render() {\n    const {Header, Body, Footer, organization, transactionName, eventView} = this.props;\n\n    const project = this.getProject();\n\n    const summaryView = eventView.clone();\n    summaryView.query = summaryView.getQueryWithAdditionalConditions();\n    const target = transactionSummaryRouteWithQuery({\n      orgSlug: organization.slug,\n      transaction: transactionName,\n      query: summaryView.generateQueryStringObject(),\n      projectID: project?.id,\n    });\n\n    return (\n      <React.Fragment>\n        <Header closeButton>\n          <h4>{t('Transaction Settings')}</h4>\n        </Header>\n        <Body>\n          <Instruction>\n            {tct(\n              'The changes below will only be applied to [transaction]. To set it at a more global level, go to [projectSettings: Project Settings].',\n              {\n                transaction: <Link to={target}>{transactionName}</Link>,\n                projectSettings: (\n                  <Link\n                    to={`/settings/${organization.slug}/projects/${project?.slug}/performance/`}\n                  />\n                ),\n              }\n            )}\n          </Instruction>\n          {this.renderModalFields()}\n        </Body>\n        <Footer>\n          <ButtonBar gap={1}>\n            <Button\n              priority=\"default\"\n              onClick={this.handleReset}\n              data-test-id=\"reset-all\"\n            >\n              {t('Reset All')}\n            </Button>\n            <Button\n              aria-label={t('Apply')}\n              priority=\"primary\"\n              onClick={this.handleApply}\n              data-test-id=\"apply-threshold\"\n            >\n              {t('Apply')}\n            </Button>\n          </ButtonBar>\n        </Footer>\n      </React.Fragment>\n    );\n  }\n}\n\nconst Instruction = styled('div')`\n  margin-bottom: ${space(4)};\n`;\n\nexport const modalCss = css`\n  width: 100%;\n  max-width: 650px;\n  margin: 70px auto;\n`;\n\nexport default withApi(withProjects(TransactionThresholdModal));\n"],"names":["InnerGlobalSdkSuggestions","React","isDismissed","api","organization","this","props","promptsUpdate","organizationId","id","feature","status","setState","trackAdvancedAnalyticsEvent","recordAnalyticsSnoozed","componentDidMount","promptsCheck","recordAnalyticsSeen","prompt","promptIsDismissed","render","_api","selection","sdkUpdates","Wrapper","state","list","projects","length","ALL_ACCESS_PROJECTS","filter","update","includes","parseInt","projectId","reduce","suggestions","sdk","showBroadcastsPanel","priority","size","onClick","SidebarPanelActions","SidebarPanelKey","recordAnalyticsClicked","t","notice","type","icon","Content","Actions","title","snoozePrompt","p","theme","breakpoints","space","withOrganization","withSdkUpdates","withPageFilters","withApi","getBucketWidth","data","bin","computeBuckets","width","map","item","bucket","start","end","formatHistogramData","precision","additionalFieldsFn","formatter","value","decimalPlaces","getDuration","factor","Math","round","Number","EPSILON","toLocaleString","Error","count","name","FEATURE_FLAG","MetricsSwitch","onSwitch","useOrganization","isMetricsData","setIsMetricsData","useMetricsSwitch","features","Label","isActive","toggle","MetricsSwitchContext","createContext","_isMetricsData","MetricsSwitchContextContainer","children","localStorageKey","slug","useState","localStorage","Provider","toString","useContext","EventsDisplayFilterName","getEventsFilterOptions","spanOperationBreakdownFilter","percentileValues","p99","p95","p75","p50","query","toFixed","undefined","sort","kind","field","filterToField","label","p100","eventsRouteWithQuery","orgSlug","transaction","projectID","pathname","project","environment","statsPeriod","decodeEventsDisplayFilterFromLocation","location","option","decodeScalar","showTransactions","Object","values","filterEventsDisplayToLocationQuery","eventsFilterOptions","mapShowTransactionToPercentile","showTransaction","TransactionFilterOptions","TransactionThresholdMetric","METRIC_CHOICES","TransactionThresholdModal","threshold","transactionThreshold","metric","transactionThresholdMetric","error","async","event","preventDefault","closeModal","transactionName","onApply","getProject","defined","transactionThresholdUrl","requestPromise","method","includeAllArgs","then","catch","err","errorMessage","responseJSON","non_field_errors","addErrorMessage","prevState","newState","cloneDeep","set","errors","projectThresholdUrl","eventView","find","proj","String","renderModalFields","inline","help","showHelpInTooltip","flexibleControlStateSize","stacked","required","options","slice","onChange","handleFieldChange","pattern","target","step","min","Header","Body","Footer","summaryView","clone","getQueryWithAdditionalConditions","transactionSummaryRouteWithQuery","generateQueryStringObject","closeButton","Instruction","tct","to","projectSettings","gap","handleReset","handleApply","modalCss","withProjects"],"sourceRoot":""}