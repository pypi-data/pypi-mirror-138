{"version":3,"file":"chunks/app_views_alerts_details_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"mvBAkBO,MAAMA,EAAmB,CAACC,EAA4BC,IAC1D,kBAAiBD,EAAaE,6BAC7BD,EAASE,UAAUC,SAAWC,EAAAA,GAAAA,UAC9BJ,EAASE,UAAUG,oBACfL,EAASE,UAAUG,oBACnBL,EAASE,UAAUI,MAG3B,SAASC,EAAT,GAAwD,IAA/B,aAACR,EAAD,OAAeS,GAAgB,EACtD,MAAMC,GAAMC,EAAAA,EAAAA,MACLC,EAAUC,IAAeC,EAAAA,EAAAA,WAAS,GAWnCC,EAAYC,UAChBH,GAAY,GAEZ,IACE,MAAMZ,QAAiBgB,EAAAA,EAAAA,IAAcP,EAAKD,EAAOS,MAAOT,EAAOU,SAC/DC,EAAAA,eAAAA,QAAuB,CACrBC,SAAUtB,EAAiBC,EAAcC,GACzCqB,MAAO,CAACC,MAAOtB,EAASuB,cAE1B,MAAOC,GACPZ,GAAY,KAShB,OALAa,EAAAA,EAAAA,YAAU,KACRX,KAvBAY,EAAAA,EAAAA,IAAoB,CAClBC,SAAU,uBACVC,UAAW,wBACXC,gBAAiBC,SAAS/B,EAAaO,GAAI,IAC3CyB,SAAUD,SAAStB,EAAOU,QAAS,QAqBpC,IAECP,GACK,QAAC,IAAD,CAAcqB,QAASlB,KAGzB,QAAC,IAAD,IApCAP,EAAAA,YAAAA,kBAuCT,W,yCCbO,IAAK0B,EAQAC,EAOAC,EAMA/B,E,sDArBA6B,GAAAA,EAAAA,EAAAA,QAAAA,GAAAA,UAAAA,EAAAA,EAAAA,SAAAA,GAAAA,WAAAA,EAAAA,EAAAA,cAAAA,GAAAA,gBAAAA,EAAAA,EAAAA,QAAAA,GAAAA,UAAAA,EAAAA,EAAAA,QAAAA,GAAAA,U,CAAAA,IAAAA,EAAAA,K,SAQAC,GAAAA,EAAAA,EAAAA,OAAAA,GAAAA,SAAAA,EAAAA,EAAAA,OAAAA,GAAAA,SAAAA,EAAAA,EAAAA,QAAAA,IAAAA,UAAAA,EAAAA,EAAAA,SAAAA,IAAAA,W,CAAAA,IAAAA,EAAAA,K,SAOAC,GAAAA,EAAAA,EAAAA,OAAAA,GAAAA,SAAAA,EAAAA,EAAAA,aAAAA,GAAAA,eAAAA,EAAAA,EAAAA,eAAAA,GAAAA,iB,CAAAA,IAAAA,EAAAA,K,SAMA/B,GAAAA,EAAAA,EAAAA,QAAAA,GAAAA,UAAAA,EAAAA,EAAAA,SAAAA,GAAAA,WAAAA,EAAAA,EAAAA,SAAAA,GAAAA,W,CAAAA,IAAAA,EAAAA","sources":["webpack:///./app/views/alerts/details/index.tsx","webpack:///./app/views/alerts/types.tsx"],"sourcesContent":["import {useEffect, useState} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\n\nimport {Client} from 'sentry/api';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {Organization} from 'sentry/types';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport useApi from 'sentry/utils/useApi';\n\nimport {AlertRuleStatus, Incident} from '../types';\nimport {fetchIncident} from '../utils';\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n} & RouteComponentProps<{alertId: string; orgId: string}, {}>;\n\nexport const alertDetailsLink = (organization: Organization, incident: Incident) =>\n  `/organizations/${organization.slug}/alerts/rules/details/${\n    incident.alertRule.status === AlertRuleStatus.SNAPSHOT &&\n    incident.alertRule.originalAlertRuleId\n      ? incident.alertRule.originalAlertRuleId\n      : incident.alertRule.id\n  }/`;\n\nfunction IncidentDetails({organization, params}: Props) {\n  const api = useApi();\n  const [hasError, setHasError] = useState(false);\n\n  const track = () => {\n    trackAnalyticsEvent({\n      eventKey: 'alert_details.viewed',\n      eventName: 'Alert Details: Viewed',\n      organization_id: parseInt(organization.id, 10),\n      alert_id: parseInt(params.alertId, 10),\n    });\n  };\n\n  const fetchData = async () => {\n    setHasError(false);\n\n    try {\n      const incident = await fetchIncident(api, params.orgId, params.alertId);\n      browserHistory.replace({\n        pathname: alertDetailsLink(organization, incident),\n        query: {alert: incident.identifier},\n      });\n    } catch (err) {\n      setHasError(true);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n    track();\n  }, []);\n\n  if (hasError) {\n    return <LoadingError onRetry={fetchData} />;\n  }\n\n  return <LoadingIndicator />;\n}\n\nexport default IncidentDetails;\n","import {User} from 'sentry/types';\nimport {IssueAlertRule} from 'sentry/types/alerts';\nimport {IncidentRule} from 'sentry/views/alerts/incidentRules/types';\n\ntype Data = [number, {count: number}[]][];\n\nexport type Incident = {\n  alertRule: IncidentRule;\n  dateClosed: string | null;\n  dateCreated: string;\n  dateDetected: string;\n  dateStarted: string;\n  // Array of group ids\n  discoverQuery: string;\n  groups: string[];\n  hasSeen: boolean;\n  id: string;\n  identifier: string;\n  isSubscribed: boolean;\n  organizationId: string;\n  projects: string[];\n  // Array of slugs\n  seenBy: User[];\n  status: IncidentStatus;\n  statusMethod: IncidentStatusMethod;\n  title: string;\n  activities?: ActivityType[];\n};\n\nexport type IncidentStats = {\n  eventStats: {\n    data: Data;\n  };\n  totalEvents: number;\n  uniqueUsers: number;\n};\n\nexport type ActivityTypeDraft = {\n  comment: null | string;\n  dateCreated: string;\n  id: string;\n  incidentIdentifier: string;\n  type: IncidentActivityType;\n  user: User | null;\n};\n\nexport type ActivityType = ActivityTypeDraft & {\n  previousValue: string | null;\n  value: string | null;\n  eventStats?: {data: Data};\n};\n\nexport enum IncidentActivityType {\n  CREATED = 0,\n  DETECTED = 1,\n  STATUS_CHANGE = 2,\n  COMMENT = 3,\n  STARTED = 4,\n}\n\nexport enum IncidentStatus {\n  OPENED = 1,\n  CLOSED = 2,\n  WARNING = 10,\n  CRITICAL = 20,\n}\n\nexport enum IncidentStatusMethod {\n  MANUAL = 1,\n  RULE_UPDATED = 2,\n  RULE_TRIGGERED = 3,\n}\n\nexport enum AlertRuleStatus {\n  PENDING = 0,\n  SNAPSHOT = 4,\n  DISABLED = 5,\n}\n\nexport type CombinedMetricIssueAlerts = (IssueAlertRule | IncidentRule) & {\n  type: string;\n  latestIncident?: Incident | null;\n};\n"],"names":["alertDetailsLink","organization","incident","slug","alertRule","status","AlertRuleStatus","originalAlertRuleId","id","IncidentDetails","params","api","useApi","hasError","setHasError","useState","fetchData","async","fetchIncident","orgId","alertId","browserHistory","pathname","query","alert","identifier","err","useEffect","trackAnalyticsEvent","eventKey","eventName","organization_id","parseInt","alert_id","onRetry","IncidentActivityType","IncidentStatus","IncidentStatusMethod"],"sourceRoot":""}