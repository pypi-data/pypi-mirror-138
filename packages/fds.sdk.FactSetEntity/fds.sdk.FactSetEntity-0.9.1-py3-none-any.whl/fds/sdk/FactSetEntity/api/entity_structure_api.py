"""
    FactSet Entity API

    Using an entity centric data model, FactSet's Entity API provides access to FactSet's complete security and entity level symbology, comprehensive entity reference data, and all of the necessary relationships and connections to create a foundation that tightly correlates disparate sources of information to a master entity identifier. Use this API to quickly understand the full entity structure and related securities.   # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Contact: api@factset.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from fds.sdk.FactSetEntity.api_client import ApiClient, Endpoint as _Endpoint
from fds.sdk.FactSetEntity.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from fds.sdk.FactSetEntity.model.entity_structure_request import EntityStructureRequest
from fds.sdk.FactSetEntity.model.entity_structure_response import EntityStructureResponse
from fds.sdk.FactSetEntity.model.error_response import ErrorResponse
from fds.sdk.FactSetEntity.model.ultimate_entity_structure_request import UltimateEntityStructureRequest
from fds.sdk.FactSetEntity.model.ultimate_entity_structure_response import UltimateEntityStructureResponse


class EntityStructureApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.get_entity_structure_endpoint = _Endpoint(
            settings={
                'response_type': (EntityStructureResponse,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/factset-entity/v1/entity-structures',
                'operation_id': 'get_entity_structure',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'ids',
                    'level',
                    'active',
                ],
                'required': [
                    'ids',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'ids',
                    'active',
                ]
            },
            root_map={
                'validations': {
                    ('ids',): {

                        'max_items': 100,
                        'min_items': 1,
                    },
                    ('active',): {

                        'inclusive_maximum': 1,
                        'inclusive_minimum': -1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ids':
                        ([str],),
                    'level':
                        (int,),
                    'active':
                        (int,),
                },
                'attribute_map': {
                    'ids': 'ids',
                    'level': 'level',
                    'active': 'active',
                },
                'location_map': {
                    'ids': 'query',
                    'level': 'query',
                    'active': 'query',
                },
                'collection_format_map': {
                    'ids': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_ultimate_entity_structure_endpoint = _Endpoint(
            settings={
                'response_type': (UltimateEntityStructureResponse,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/factset-entity/v1/ultimate-entity-structures',
                'operation_id': 'get_ultimate_entity_structure',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'ids',
                    'level',
                    'active',
                ],
                'required': [
                    'ids',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'ids',
                    'active',
                ]
            },
            root_map={
                'validations': {
                    ('ids',): {

                        'max_items': 100,
                        'min_items': 1,
                    },
                    ('active',): {

                        'inclusive_maximum': 1,
                        'inclusive_minimum': -1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ids':
                        ([str],),
                    'level':
                        (int,),
                    'active':
                        (int,),
                },
                'attribute_map': {
                    'ids': 'ids',
                    'level': 'level',
                    'active': 'active',
                },
                'location_map': {
                    'ids': 'query',
                    'level': 'query',
                    'active': 'query',
                },
                'collection_format_map': {
                    'ids': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.post_entity_structure_endpoint = _Endpoint(
            settings={
                'response_type': (EntityStructureResponse,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/factset-entity/v1/entity-structures',
                'operation_id': 'post_entity_structure',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'entity_structure_request',
                ],
                'required': [
                    'entity_structure_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'entity_structure_request':
                        (EntityStructureRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'entity_structure_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.post_ultimate_entity_structure_endpoint = _Endpoint(
            settings={
                'response_type': (UltimateEntityStructureResponse,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/factset-entity/v1/ultimate-entity-structures',
                'operation_id': 'post_ultimate_entity_structure',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'ultimate_entity_structure_request',
                ],
                'required': [
                    'ultimate_entity_structure_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ultimate_entity_structure_request':
                        (UltimateEntityStructureRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'ultimate_entity_structure_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def get_entity_structure(
        self,
        ids,
        **kwargs
    ):
        """Returns all active or inactive entities and respective levels below the requested entity id.  # noqa: E501

        Returns all active or inactive entities below the requested entity id.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_entity_structure(ids, async_req=True)
        >>> result = thread.get()

        Args:
            ids ([str]): The requested Market Identifier. Accepted input identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, or FactSet Permanent Ids, such as -R, -L, or -E.<p>**Max Ids Limit set to 100 in a single request**</p>   *<p>Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\"POST\\\" method.</p>* 

        Keyword Args:
            level (int): Controls the levels returned in the hierarchy. Use -1 to return all levels, or 1-n for a specific level.. [optional] if omitted the server will use the default value of -1
            active (int): Controls active or inactive securities returned in the hierarchy. Enter 1 to return only active entities, 0 for inactive entities, and -1 for all active and inactive.. [optional] if omitted the server will use the default value of -1
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            EntityStructureResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['ids'] = \
            ids
        return self.get_entity_structure_endpoint.call_with_http_info(**kwargs)

    def get_ultimate_entity_structure(
        self,
        ids,
        **kwargs
    ):
        """Returns the full ultimate parent entity hiearachy. Control levels and active status of underlying entities.  # noqa: E501

        Returns full ultimate entity structure including ultimate parent and all subordinates. Will accept entity from any level of entity structure or active vs. inactive status of entity.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_ultimate_entity_structure(ids, async_req=True)
        >>> result = thread.get()

        Args:
            ids ([str]): The requested Market Identifier. Accepted input identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, or FactSet Permanent Ids, such as -R, -L, or -E.<p>**Max Ids Limit set to 100 in a single request**</p>   *<p>Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\"POST\\\" method.</p>* 

        Keyword Args:
            level (int): Controls the levels returned in the hierarchy. Use -1 to return all levels, or 1-n for a specific level.. [optional] if omitted the server will use the default value of -1
            active (int): Controls active or inactive securities returned in the hierarchy. Enter 1 to return only active entities, 0 for inactive entities, and -1 for all active and inactive.. [optional] if omitted the server will use the default value of -1
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            UltimateEntityStructureResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['ids'] = \
            ids
        return self.get_ultimate_entity_structure_endpoint.call_with_http_info(**kwargs)

    def post_entity_structure(
        self,
        entity_structure_request,
        **kwargs
    ):
        """Returns all active or inactive entities below the requested entity id.  # noqa: E501

        Returns all active or inactive entities and respective levels below the requested entity id.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_entity_structure(entity_structure_request, async_req=True)
        >>> result = thread.get()

        Args:
            entity_structure_request (EntityStructureRequest): Request Body to request a list of Entity Structure objects.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            EntityStructureResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['entity_structure_request'] = \
            entity_structure_request
        return self.post_entity_structure_endpoint.call_with_http_info(**kwargs)

    def post_ultimate_entity_structure(
        self,
        ultimate_entity_structure_request,
        **kwargs
    ):
        """Returns all active or inactive entities and respective levels below the requested entity id.  # noqa: E501

        Returns all active or inactive entities and respective levels below the requested entity id.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_ultimate_entity_structure(ultimate_entity_structure_request, async_req=True)
        >>> result = thread.get()

        Args:
            ultimate_entity_structure_request (UltimateEntityStructureRequest): Request Body to request a list of Ultimate Entity Structure objects.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            UltimateEntityStructureResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['ultimate_entity_structure_request'] = \
            ultimate_entity_structure_request
        return self.post_ultimate_entity_structure_endpoint.call_with_http_info(**kwargs)

