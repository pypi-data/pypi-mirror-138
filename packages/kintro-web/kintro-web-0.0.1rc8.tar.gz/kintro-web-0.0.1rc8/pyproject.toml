[build-system]
requires = ["setuptools>=55", "wheel", "setuptools_scm>=6.3"]

[tool.setuptools_scm]
write_to = "kintro_web/_version.py"

[tool.black]
line-length = 120
target-version = ["py36", "py37", "py38", "py39", "py310"]
extend-exclude = """
/(
   | .cache
   | .env_cache
   | .direnv
)/
"""
experimental-string-processing = true

[tool.flakeheaven]
max_line_length = 120
exclude = [
  ".git",
  "__pycache__",
  ".direnv",
  ".cache",
  ".env_cache",
  ".envrc",
  "build",
]
filename = [
  "*.py",
]
count = true
show_source = true

[tool.flakeheaven.plugins]
## Style Related ignores
pycodestyle = [
  # E231: missing whitespace after ','
  "-E231",
  # E241: multiple spaces after ','
  "-E241",
  # E261: at least two spaces before inline comment
  "-E261",
  # E272: multiple spaces before keyword
  "-E272",
  # W503: line break before binary operator
  "-W503",
  # W504: line break after binary operator
  "-W504",
  # E121: continuation line under-indented for hanging indent
  "-E121",
  # E122: continuation line missing indentation or outdented
  "-E122",
  # E123: closing bracket does not match indentation of opening bracketâ€™s line
  "-E123",
  # E124: closing bracket does not match visual indentation
  "-E124",
  # E125: continuation line with same indent as next logical line
  "-E125",
  # E126: continuation line over-indented for hanging indent
  "-E126",
  # E129: visually indented line with same indent as next logical line
  "-E129",
  # E131: continuation line unaligned for hanging indent
  "-E131",
### This is a very very very dumb lint
  # E731: variable assigned lambda
  "-E731",
]
pyflakes = [
]
### Use parens, please do not use line breaks, this isn't bash
flake8-broken-line = [
  # Found backslash that is used for line breaking
  "+N400",
]
## These are generally opinionated or helpful or optimizations
flake8-bugbear = [
  # Do not use bare except:, it also catches unexpected events like memory errors, interrupts, system exit, and so on.
  # Prefer except Exception:. If you're sure what you're doing, be explicit and write except BaseException
  # :. Disable E722 to avoid duplicate warnings
  "+B001",
  # Python does not support the unary prefix increment.
  # Writing ++n is equivalent to +(+(n)), which equals n. You meant n += 1
  "+B002",
  # Assigning to os.environ doesn't clear the environment.
  # Subprocesses are going to see outdated variables, in disagreement with the current process.
  # Use os.environ.clear() or the env= argument to Popen
  "+B003",
  # Use of break, continue or return inside finally blocks will silence exceptions or override
  # return values from the try or except blocks.
  # To silence an exception, do it explicitly in the except block.
  # To properly use a break, continue or return refactor your code so these statements are not in the finally block
  "+B012",
  # Redundant exception types in except (Exception, TypeError):.
  # Write except Exception:, which catches exactly the same exceptions
  "+B014",
  # Using return x in a generator function used to be syntactically invalid in Python 2.
  # In Python 3 return x can be used in a generator as a return value in conjunction with yield from.
  # Users coming from Python 2 may expect the old behavior which might lead to bugs.
  # Use native async def coroutines or mark intentional return x usage with # noqa on the same line
  "+B901",
  # Invalid first argument used for method.
  # Use self for instance methods, and cls for class methods (which includes __new__ and __init_subclass__)
  # or instance methods of metaclasses (detected as classes directly inheriting from type)
  "+B902",
  # Use collections.namedtuple (or typing.NamedTuple) for data classes that only set attributes in
  # an __init__ method, and do nothing else. If the attributes should be mutable, define the attributes in __slots__
  # to save per-instance memory and to prevent accidentally creating additional attributes on instances
  "+B903",
  # Line too long. This is a pragmatic equivalent of pycodestyle's E501: it considers "max-line-length"
  # but only triggers when the value has been exceeded by more than 10%.
  # You will no longer be forced to reformat code due to the closing parenthesis being one
  # character too far to satisfy the linter.
  # At the same time, if you do significantly violate the line length, you will receive a message that
  # states what the actual limit is.
  # This is inspired by Raymond Hettinger's "Beyond PEP 8" talk and highway patrol not stopping you
  # if you drive < 5mph too fast. Disable E501 to avoid duplicate warnings
  "+B950",
]
## These help with refactor cleanness
flake8-commas = [
  # missing trailing comma
  # "+C812",
  # missing trailing comma in Python 3.6+
  "+C816",
### This catches implicit (by mistake) tuples
### ex a = call.function(b, ),
###                          ^
  # trailing comma on bare tuple prohibited
  "+C818",
## C812 and C816 subsume these, and C819 makes unrefactorable diffs
  # missing trailing comma in Python 3
  "-C813",
  # missing trailing comma in Python 2
  "-C814",
  # trailing comma prohibited
  "-C819",
]
## This helps for code cleanliness
flake8-eradicate = [
  # Found commented out code
  "+E800",
]
## This helps with some black incompatibility
flake8-implicit-str-concat = [
  # Same line implicit concat
  "+ISC001",
  # Multiline line implicit concat
  "+ISC002",
  # Multiline should be implict concat
  "+ISC003",
]
## Early warning of isort issues, isort precommit hook SHOULD autofix
flake8-isort = [
  # isort found an import in the wrong position
  "+I001",
  # no configuration found (.isort.cfg or [isort] in configs)
  "+I002",
  # isort expected 1 blank line in imports, found 0
  "+I003",
  # isort found an unexpected blank line in imports
  "+I004",
  # isort found an unexpected missing import
  "+I005",
]
## This is ALWAYS a bug
## def fn(a={}):     or       def fn(a=[]):         or def fn(a=set())
##          ^                          ^                        ^
## Those are ONLY ALLOCATED ONCE at file load time, so if you mutate them they leak between calls
flake8-mutable = [
  # mutable default arg of type
  "+M511",
]
## More refactor freindlyness
flake8-strict = [
  # First argument on the same line
  "+S100",
  # Multi-line construct missing trailing comma
  # "+S101",
]

[tool.isort]
default_section = "LOCALFOLDER"
force_grid_wrap = 2
force_sort_within_sections = true
include_trailing_comma = true
indent = "    "
known_first_party = [
  "kintro_web",
]
length_sort = false
line_length = 120
lines_after_imports = 2
multi_line_output = 3
sections = [
  "FUTURE",
  "STDLIB",
  "THIRDPARTY",
  "FIRSTPARTY",
  "LOCALFOLDER",
]
use_parentheses = true
skip_gitignore = true

[tool.mypy]
exclude = ".git|build|__pycache__|.direnv|.cache|.env_cache|.envrc|setup.py"
show_error_codes = true
mypy_path = ""
strict = true
strict_optional = true
no_implicit_optional = true
