# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TeamsAccountArgs', 'TeamsAccount']

@pulumi.input_type
class TeamsAccountArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[str],
                 activity_log_enabled: Optional[pulumi.Input[bool]] = None,
                 antivirus: Optional[pulumi.Input['TeamsAccountAntivirusArgs']] = None,
                 block_page: Optional[pulumi.Input['TeamsAccountBlockPageArgs']] = None,
                 tls_decrypt_enabled: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a TeamsAccount resource.
        :param pulumi.Input[str] account_id: The account to which the teams location should be added.
        :param pulumi.Input['TeamsAccountAntivirusArgs'] antivirus: Configuration for antivirus traffic scanning.
        :param pulumi.Input['TeamsAccountBlockPageArgs'] block_page: Configuration for a custom block page.
        :param pulumi.Input[bool] tls_decrypt_enabled: Indicator that decryption of TLS traffic is enabled.
        """
        pulumi.set(__self__, "account_id", account_id)
        if activity_log_enabled is not None:
            pulumi.set(__self__, "activity_log_enabled", activity_log_enabled)
        if antivirus is not None:
            pulumi.set(__self__, "antivirus", antivirus)
        if block_page is not None:
            pulumi.set(__self__, "block_page", block_page)
        if tls_decrypt_enabled is not None:
            pulumi.set(__self__, "tls_decrypt_enabled", tls_decrypt_enabled)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[str]:
        """
        The account to which the teams location should be added.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="activityLogEnabled")
    def activity_log_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "activity_log_enabled")

    @activity_log_enabled.setter
    def activity_log_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "activity_log_enabled", value)

    @property
    @pulumi.getter
    def antivirus(self) -> Optional[pulumi.Input['TeamsAccountAntivirusArgs']]:
        """
        Configuration for antivirus traffic scanning.
        """
        return pulumi.get(self, "antivirus")

    @antivirus.setter
    def antivirus(self, value: Optional[pulumi.Input['TeamsAccountAntivirusArgs']]):
        pulumi.set(self, "antivirus", value)

    @property
    @pulumi.getter(name="blockPage")
    def block_page(self) -> Optional[pulumi.Input['TeamsAccountBlockPageArgs']]:
        """
        Configuration for a custom block page.
        """
        return pulumi.get(self, "block_page")

    @block_page.setter
    def block_page(self, value: Optional[pulumi.Input['TeamsAccountBlockPageArgs']]):
        pulumi.set(self, "block_page", value)

    @property
    @pulumi.getter(name="tlsDecryptEnabled")
    def tls_decrypt_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicator that decryption of TLS traffic is enabled.
        """
        return pulumi.get(self, "tls_decrypt_enabled")

    @tls_decrypt_enabled.setter
    def tls_decrypt_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tls_decrypt_enabled", value)


@pulumi.input_type
class _TeamsAccountState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 activity_log_enabled: Optional[pulumi.Input[bool]] = None,
                 antivirus: Optional[pulumi.Input['TeamsAccountAntivirusArgs']] = None,
                 block_page: Optional[pulumi.Input['TeamsAccountBlockPageArgs']] = None,
                 tls_decrypt_enabled: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering TeamsAccount resources.
        :param pulumi.Input[str] account_id: The account to which the teams location should be added.
        :param pulumi.Input['TeamsAccountAntivirusArgs'] antivirus: Configuration for antivirus traffic scanning.
        :param pulumi.Input['TeamsAccountBlockPageArgs'] block_page: Configuration for a custom block page.
        :param pulumi.Input[bool] tls_decrypt_enabled: Indicator that decryption of TLS traffic is enabled.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if activity_log_enabled is not None:
            pulumi.set(__self__, "activity_log_enabled", activity_log_enabled)
        if antivirus is not None:
            pulumi.set(__self__, "antivirus", antivirus)
        if block_page is not None:
            pulumi.set(__self__, "block_page", block_page)
        if tls_decrypt_enabled is not None:
            pulumi.set(__self__, "tls_decrypt_enabled", tls_decrypt_enabled)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The account to which the teams location should be added.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="activityLogEnabled")
    def activity_log_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "activity_log_enabled")

    @activity_log_enabled.setter
    def activity_log_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "activity_log_enabled", value)

    @property
    @pulumi.getter
    def antivirus(self) -> Optional[pulumi.Input['TeamsAccountAntivirusArgs']]:
        """
        Configuration for antivirus traffic scanning.
        """
        return pulumi.get(self, "antivirus")

    @antivirus.setter
    def antivirus(self, value: Optional[pulumi.Input['TeamsAccountAntivirusArgs']]):
        pulumi.set(self, "antivirus", value)

    @property
    @pulumi.getter(name="blockPage")
    def block_page(self) -> Optional[pulumi.Input['TeamsAccountBlockPageArgs']]:
        """
        Configuration for a custom block page.
        """
        return pulumi.get(self, "block_page")

    @block_page.setter
    def block_page(self, value: Optional[pulumi.Input['TeamsAccountBlockPageArgs']]):
        pulumi.set(self, "block_page", value)

    @property
    @pulumi.getter(name="tlsDecryptEnabled")
    def tls_decrypt_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicator that decryption of TLS traffic is enabled.
        """
        return pulumi.get(self, "tls_decrypt_enabled")

    @tls_decrypt_enabled.setter
    def tls_decrypt_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tls_decrypt_enabled", value)


class TeamsAccount(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 activity_log_enabled: Optional[pulumi.Input[bool]] = None,
                 antivirus: Optional[pulumi.Input[pulumi.InputType['TeamsAccountAntivirusArgs']]] = None,
                 block_page: Optional[pulumi.Input[pulumi.InputType['TeamsAccountBlockPageArgs']]] = None,
                 tls_decrypt_enabled: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Provides a Cloudflare Teams Account resource. The Teams Account resource defines configuration for secure web gateway.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_cloudflare as cloudflare

        main = cloudflare.TeamsAccount("main",
            account_id="1d5fdc9e88c8a8c4518b068cd94331fe",
            block_page=cloudflare.TeamsAccountBlockPageArgs(
                background_color="#000000",
                footer_text="hello",
                header_text="hello",
                logo_path="https://google.com",
            ),
            tls_decrypt_enabled=True)
        ```

        ## Import

        Since a Teams account does not have a unique resource ID, configuration can be imported using the account ID.

        ```sh
         $ pulumi import cloudflare:index/teamsAccount:TeamsAccount example cb029e245cfdd66dc8d2e570d5dd3322
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_id: The account to which the teams location should be added.
        :param pulumi.Input[pulumi.InputType['TeamsAccountAntivirusArgs']] antivirus: Configuration for antivirus traffic scanning.
        :param pulumi.Input[pulumi.InputType['TeamsAccountBlockPageArgs']] block_page: Configuration for a custom block page.
        :param pulumi.Input[bool] tls_decrypt_enabled: Indicator that decryption of TLS traffic is enabled.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TeamsAccountArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a Cloudflare Teams Account resource. The Teams Account resource defines configuration for secure web gateway.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_cloudflare as cloudflare

        main = cloudflare.TeamsAccount("main",
            account_id="1d5fdc9e88c8a8c4518b068cd94331fe",
            block_page=cloudflare.TeamsAccountBlockPageArgs(
                background_color="#000000",
                footer_text="hello",
                header_text="hello",
                logo_path="https://google.com",
            ),
            tls_decrypt_enabled=True)
        ```

        ## Import

        Since a Teams account does not have a unique resource ID, configuration can be imported using the account ID.

        ```sh
         $ pulumi import cloudflare:index/teamsAccount:TeamsAccount example cb029e245cfdd66dc8d2e570d5dd3322
        ```

        :param str resource_name: The name of the resource.
        :param TeamsAccountArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TeamsAccountArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 activity_log_enabled: Optional[pulumi.Input[bool]] = None,
                 antivirus: Optional[pulumi.Input[pulumi.InputType['TeamsAccountAntivirusArgs']]] = None,
                 block_page: Optional[pulumi.Input[pulumi.InputType['TeamsAccountBlockPageArgs']]] = None,
                 tls_decrypt_enabled: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TeamsAccountArgs.__new__(TeamsAccountArgs)

            if account_id is None and not opts.urn:
                raise TypeError("Missing required property 'account_id'")
            __props__.__dict__["account_id"] = account_id
            __props__.__dict__["activity_log_enabled"] = activity_log_enabled
            __props__.__dict__["antivirus"] = antivirus
            __props__.__dict__["block_page"] = block_page
            __props__.__dict__["tls_decrypt_enabled"] = tls_decrypt_enabled
        super(TeamsAccount, __self__).__init__(
            'cloudflare:index/teamsAccount:TeamsAccount',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[str]] = None,
            activity_log_enabled: Optional[pulumi.Input[bool]] = None,
            antivirus: Optional[pulumi.Input[pulumi.InputType['TeamsAccountAntivirusArgs']]] = None,
            block_page: Optional[pulumi.Input[pulumi.InputType['TeamsAccountBlockPageArgs']]] = None,
            tls_decrypt_enabled: Optional[pulumi.Input[bool]] = None) -> 'TeamsAccount':
        """
        Get an existing TeamsAccount resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_id: The account to which the teams location should be added.
        :param pulumi.Input[pulumi.InputType['TeamsAccountAntivirusArgs']] antivirus: Configuration for antivirus traffic scanning.
        :param pulumi.Input[pulumi.InputType['TeamsAccountBlockPageArgs']] block_page: Configuration for a custom block page.
        :param pulumi.Input[bool] tls_decrypt_enabled: Indicator that decryption of TLS traffic is enabled.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TeamsAccountState.__new__(_TeamsAccountState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["activity_log_enabled"] = activity_log_enabled
        __props__.__dict__["antivirus"] = antivirus
        __props__.__dict__["block_page"] = block_page
        __props__.__dict__["tls_decrypt_enabled"] = tls_decrypt_enabled
        return TeamsAccount(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[str]:
        """
        The account to which the teams location should be added.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="activityLogEnabled")
    def activity_log_enabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "activity_log_enabled")

    @property
    @pulumi.getter
    def antivirus(self) -> pulumi.Output[Optional['outputs.TeamsAccountAntivirus']]:
        """
        Configuration for antivirus traffic scanning.
        """
        return pulumi.get(self, "antivirus")

    @property
    @pulumi.getter(name="blockPage")
    def block_page(self) -> pulumi.Output[Optional['outputs.TeamsAccountBlockPage']]:
        """
        Configuration for a custom block page.
        """
        return pulumi.get(self, "block_page")

    @property
    @pulumi.getter(name="tlsDecryptEnabled")
    def tls_decrypt_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicator that decryption of TLS traffic is enabled.
        """
        return pulumi.get(self, "tls_decrypt_enabled")

