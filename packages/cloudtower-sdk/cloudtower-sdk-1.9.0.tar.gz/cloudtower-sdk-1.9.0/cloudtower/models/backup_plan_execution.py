# coding: utf-8

"""
    CloudTower APIs

    cloudtower operation API and SDK  # noqa: E501

    The version of the OpenAPI document: 1.9.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cloudtower.configuration import Configuration


class BackupPlanExecution(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'backup_plan': 'NestedBackupPlan',
        'backup_restore_points': 'list[NestedBackupRestorePoint]',
        'backup_target_executions': 'list[NestedBackupTargetExecution]',
        'duration': 'int',
        'entity_async_status': 'EntityAsyncStatus',
        'executed_at': 'str',
        'id': 'str',
        'local_created_at': 'str',
        'local_id': 'str',
        'method': 'BackupExecutionMethod',
        'status': 'BackupPlanExecutionStatus',
        'success_job_count': 'int',
        'total_job_count': 'int',
        'type': 'BackupExecutionType'
    }

    attribute_map = {
        'backup_plan': 'backup_plan',
        'backup_restore_points': 'backup_restore_points',
        'backup_target_executions': 'backup_target_executions',
        'duration': 'duration',
        'entity_async_status': 'entityAsyncStatus',
        'executed_at': 'executed_at',
        'id': 'id',
        'local_created_at': 'local_created_at',
        'local_id': 'local_id',
        'method': 'method',
        'status': 'status',
        'success_job_count': 'success_job_count',
        'total_job_count': 'total_job_count',
        'type': 'type'
    }

    def __init__(self, backup_plan=None, backup_restore_points=None, backup_target_executions=None, duration=None, entity_async_status=None, executed_at=None, id=None, local_created_at=None, local_id=None, method=None, status=None, success_job_count=None, total_job_count=None, type=None, local_vars_configuration=None):  # noqa: E501
        """BackupPlanExecution - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._backup_plan = None
        self._backup_restore_points = None
        self._backup_target_executions = None
        self._duration = None
        self._entity_async_status = None
        self._executed_at = None
        self._id = None
        self._local_created_at = None
        self._local_id = None
        self._method = None
        self._status = None
        self._success_job_count = None
        self._total_job_count = None
        self._type = None
        self.discriminator = None

        self.backup_plan = backup_plan
        self.backup_restore_points = backup_restore_points
        self.backup_target_executions = backup_target_executions
        self.duration = duration
        self.entity_async_status = entity_async_status
        self.executed_at = executed_at
        self.id = id
        self.local_created_at = local_created_at
        self.local_id = local_id
        self.method = method
        self.status = status
        self.success_job_count = success_job_count
        self.total_job_count = total_job_count
        self.type = type

    @property
    def backup_plan(self):
        """Gets the backup_plan of this BackupPlanExecution.  # noqa: E501


        :return: The backup_plan of this BackupPlanExecution.  # noqa: E501
        :rtype: NestedBackupPlan
        """
        return self._backup_plan

    @backup_plan.setter
    def backup_plan(self, backup_plan):
        """Sets the backup_plan of this BackupPlanExecution.


        :param backup_plan: The backup_plan of this BackupPlanExecution.  # noqa: E501
        :type backup_plan: NestedBackupPlan
        """

        self._backup_plan = backup_plan

    @property
    def backup_restore_points(self):
        """Gets the backup_restore_points of this BackupPlanExecution.  # noqa: E501


        :return: The backup_restore_points of this BackupPlanExecution.  # noqa: E501
        :rtype: list[NestedBackupRestorePoint]
        """
        return self._backup_restore_points

    @backup_restore_points.setter
    def backup_restore_points(self, backup_restore_points):
        """Sets the backup_restore_points of this BackupPlanExecution.


        :param backup_restore_points: The backup_restore_points of this BackupPlanExecution.  # noqa: E501
        :type backup_restore_points: list[NestedBackupRestorePoint]
        """

        self._backup_restore_points = backup_restore_points

    @property
    def backup_target_executions(self):
        """Gets the backup_target_executions of this BackupPlanExecution.  # noqa: E501


        :return: The backup_target_executions of this BackupPlanExecution.  # noqa: E501
        :rtype: list[NestedBackupTargetExecution]
        """
        return self._backup_target_executions

    @backup_target_executions.setter
    def backup_target_executions(self, backup_target_executions):
        """Sets the backup_target_executions of this BackupPlanExecution.


        :param backup_target_executions: The backup_target_executions of this BackupPlanExecution.  # noqa: E501
        :type backup_target_executions: list[NestedBackupTargetExecution]
        """

        self._backup_target_executions = backup_target_executions

    @property
    def duration(self):
        """Gets the duration of this BackupPlanExecution.  # noqa: E501


        :return: The duration of this BackupPlanExecution.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this BackupPlanExecution.


        :param duration: The duration of this BackupPlanExecution.  # noqa: E501
        :type duration: int
        """

        self._duration = duration

    @property
    def entity_async_status(self):
        """Gets the entity_async_status of this BackupPlanExecution.  # noqa: E501


        :return: The entity_async_status of this BackupPlanExecution.  # noqa: E501
        :rtype: EntityAsyncStatus
        """
        return self._entity_async_status

    @entity_async_status.setter
    def entity_async_status(self, entity_async_status):
        """Sets the entity_async_status of this BackupPlanExecution.


        :param entity_async_status: The entity_async_status of this BackupPlanExecution.  # noqa: E501
        :type entity_async_status: EntityAsyncStatus
        """

        self._entity_async_status = entity_async_status

    @property
    def executed_at(self):
        """Gets the executed_at of this BackupPlanExecution.  # noqa: E501


        :return: The executed_at of this BackupPlanExecution.  # noqa: E501
        :rtype: str
        """
        return self._executed_at

    @executed_at.setter
    def executed_at(self, executed_at):
        """Sets the executed_at of this BackupPlanExecution.


        :param executed_at: The executed_at of this BackupPlanExecution.  # noqa: E501
        :type executed_at: str
        """

        self._executed_at = executed_at

    @property
    def id(self):
        """Gets the id of this BackupPlanExecution.  # noqa: E501


        :return: The id of this BackupPlanExecution.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BackupPlanExecution.


        :param id: The id of this BackupPlanExecution.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def local_created_at(self):
        """Gets the local_created_at of this BackupPlanExecution.  # noqa: E501


        :return: The local_created_at of this BackupPlanExecution.  # noqa: E501
        :rtype: str
        """
        return self._local_created_at

    @local_created_at.setter
    def local_created_at(self, local_created_at):
        """Sets the local_created_at of this BackupPlanExecution.


        :param local_created_at: The local_created_at of this BackupPlanExecution.  # noqa: E501
        :type local_created_at: str
        """
        if self.local_vars_configuration.client_side_validation and local_created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `local_created_at`, must not be `None`")  # noqa: E501

        self._local_created_at = local_created_at

    @property
    def local_id(self):
        """Gets the local_id of this BackupPlanExecution.  # noqa: E501


        :return: The local_id of this BackupPlanExecution.  # noqa: E501
        :rtype: str
        """
        return self._local_id

    @local_id.setter
    def local_id(self, local_id):
        """Sets the local_id of this BackupPlanExecution.


        :param local_id: The local_id of this BackupPlanExecution.  # noqa: E501
        :type local_id: str
        """
        if self.local_vars_configuration.client_side_validation and local_id is None:  # noqa: E501
            raise ValueError("Invalid value for `local_id`, must not be `None`")  # noqa: E501

        self._local_id = local_id

    @property
    def method(self):
        """Gets the method of this BackupPlanExecution.  # noqa: E501


        :return: The method of this BackupPlanExecution.  # noqa: E501
        :rtype: BackupExecutionMethod
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this BackupPlanExecution.


        :param method: The method of this BackupPlanExecution.  # noqa: E501
        :type method: BackupExecutionMethod
        """
        if self.local_vars_configuration.client_side_validation and method is None:  # noqa: E501
            raise ValueError("Invalid value for `method`, must not be `None`")  # noqa: E501

        self._method = method

    @property
    def status(self):
        """Gets the status of this BackupPlanExecution.  # noqa: E501


        :return: The status of this BackupPlanExecution.  # noqa: E501
        :rtype: BackupPlanExecutionStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BackupPlanExecution.


        :param status: The status of this BackupPlanExecution.  # noqa: E501
        :type status: BackupPlanExecutionStatus
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def success_job_count(self):
        """Gets the success_job_count of this BackupPlanExecution.  # noqa: E501


        :return: The success_job_count of this BackupPlanExecution.  # noqa: E501
        :rtype: int
        """
        return self._success_job_count

    @success_job_count.setter
    def success_job_count(self, success_job_count):
        """Sets the success_job_count of this BackupPlanExecution.


        :param success_job_count: The success_job_count of this BackupPlanExecution.  # noqa: E501
        :type success_job_count: int
        """

        self._success_job_count = success_job_count

    @property
    def total_job_count(self):
        """Gets the total_job_count of this BackupPlanExecution.  # noqa: E501


        :return: The total_job_count of this BackupPlanExecution.  # noqa: E501
        :rtype: int
        """
        return self._total_job_count

    @total_job_count.setter
    def total_job_count(self, total_job_count):
        """Sets the total_job_count of this BackupPlanExecution.


        :param total_job_count: The total_job_count of this BackupPlanExecution.  # noqa: E501
        :type total_job_count: int
        """

        self._total_job_count = total_job_count

    @property
    def type(self):
        """Gets the type of this BackupPlanExecution.  # noqa: E501


        :return: The type of this BackupPlanExecution.  # noqa: E501
        :rtype: BackupExecutionType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BackupPlanExecution.


        :param type: The type of this BackupPlanExecution.  # noqa: E501
        :type type: BackupExecutionType
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BackupPlanExecution):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BackupPlanExecution):
            return True

        return self.to_dict() != other.to_dict()
