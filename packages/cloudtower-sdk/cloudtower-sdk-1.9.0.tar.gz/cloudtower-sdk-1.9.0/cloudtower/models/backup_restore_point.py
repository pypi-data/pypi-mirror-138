# coding: utf-8

"""
    CloudTower APIs

    cloudtower operation API and SDK  # noqa: E501

    The version of the OpenAPI document: 1.9.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cloudtower.configuration import Configuration


class BackupRestorePoint(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'backup_plan': 'NestedBackupPlan',
        'backup_service': 'NestedBackupService',
        'backup_store_repository': 'NestedBackupStoreRepository',
        'backup_target_execution': 'NestedBackupTargetExecution',
        'cluster_local_id': 'str',
        'compression_ratio': 'float',
        'creation': 'BackupRestorePointCreation',
        'entity_async_status': 'EntityAsyncStatus',
        'id': 'str',
        'local_created_at': 'str',
        'local_id': 'str',
        'logical_size': 'float',
        'parent_restore_point': 'str',
        'physical_size': 'float',
        'size': 'float',
        'slice': 'str',
        'type': 'BackupRestorePointType',
        'valid_capacity': 'float',
        'valid_size': 'float',
        'vm': 'NestedVm',
        'vm_local_id': 'str',
        'vm_name': 'str'
    }

    attribute_map = {
        'backup_plan': 'backup_plan',
        'backup_service': 'backup_service',
        'backup_store_repository': 'backup_store_repository',
        'backup_target_execution': 'backup_target_execution',
        'cluster_local_id': 'cluster_local_id',
        'compression_ratio': 'compression_ratio',
        'creation': 'creation',
        'entity_async_status': 'entityAsyncStatus',
        'id': 'id',
        'local_created_at': 'local_created_at',
        'local_id': 'local_id',
        'logical_size': 'logical_size',
        'parent_restore_point': 'parent_restore_point',
        'physical_size': 'physical_size',
        'size': 'size',
        'slice': 'slice',
        'type': 'type',
        'valid_capacity': 'valid_capacity',
        'valid_size': 'valid_size',
        'vm': 'vm',
        'vm_local_id': 'vm_local_id',
        'vm_name': 'vm_name'
    }

    def __init__(self, backup_plan=None, backup_service=None, backup_store_repository=None, backup_target_execution=None, cluster_local_id=None, compression_ratio=None, creation=None, entity_async_status=None, id=None, local_created_at=None, local_id=None, logical_size=None, parent_restore_point=None, physical_size=None, size=None, slice=None, type=None, valid_capacity=None, valid_size=None, vm=None, vm_local_id=None, vm_name=None, local_vars_configuration=None):  # noqa: E501
        """BackupRestorePoint - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._backup_plan = None
        self._backup_service = None
        self._backup_store_repository = None
        self._backup_target_execution = None
        self._cluster_local_id = None
        self._compression_ratio = None
        self._creation = None
        self._entity_async_status = None
        self._id = None
        self._local_created_at = None
        self._local_id = None
        self._logical_size = None
        self._parent_restore_point = None
        self._physical_size = None
        self._size = None
        self._slice = None
        self._type = None
        self._valid_capacity = None
        self._valid_size = None
        self._vm = None
        self._vm_local_id = None
        self._vm_name = None
        self.discriminator = None

        self.backup_plan = backup_plan
        self.backup_service = backup_service
        self.backup_store_repository = backup_store_repository
        self.backup_target_execution = backup_target_execution
        self.cluster_local_id = cluster_local_id
        self.compression_ratio = compression_ratio
        self.creation = creation
        self.entity_async_status = entity_async_status
        self.id = id
        self.local_created_at = local_created_at
        self.local_id = local_id
        self.logical_size = logical_size
        self.parent_restore_point = parent_restore_point
        self.physical_size = physical_size
        self.size = size
        self.slice = slice
        self.type = type
        self.valid_capacity = valid_capacity
        self.valid_size = valid_size
        self.vm = vm
        self.vm_local_id = vm_local_id
        self.vm_name = vm_name

    @property
    def backup_plan(self):
        """Gets the backup_plan of this BackupRestorePoint.  # noqa: E501


        :return: The backup_plan of this BackupRestorePoint.  # noqa: E501
        :rtype: NestedBackupPlan
        """
        return self._backup_plan

    @backup_plan.setter
    def backup_plan(self, backup_plan):
        """Sets the backup_plan of this BackupRestorePoint.


        :param backup_plan: The backup_plan of this BackupRestorePoint.  # noqa: E501
        :type backup_plan: NestedBackupPlan
        """
        if self.local_vars_configuration.client_side_validation and backup_plan is None:  # noqa: E501
            raise ValueError("Invalid value for `backup_plan`, must not be `None`")  # noqa: E501

        self._backup_plan = backup_plan

    @property
    def backup_service(self):
        """Gets the backup_service of this BackupRestorePoint.  # noqa: E501


        :return: The backup_service of this BackupRestorePoint.  # noqa: E501
        :rtype: NestedBackupService
        """
        return self._backup_service

    @backup_service.setter
    def backup_service(self, backup_service):
        """Sets the backup_service of this BackupRestorePoint.


        :param backup_service: The backup_service of this BackupRestorePoint.  # noqa: E501
        :type backup_service: NestedBackupService
        """
        if self.local_vars_configuration.client_side_validation and backup_service is None:  # noqa: E501
            raise ValueError("Invalid value for `backup_service`, must not be `None`")  # noqa: E501

        self._backup_service = backup_service

    @property
    def backup_store_repository(self):
        """Gets the backup_store_repository of this BackupRestorePoint.  # noqa: E501


        :return: The backup_store_repository of this BackupRestorePoint.  # noqa: E501
        :rtype: NestedBackupStoreRepository
        """
        return self._backup_store_repository

    @backup_store_repository.setter
    def backup_store_repository(self, backup_store_repository):
        """Sets the backup_store_repository of this BackupRestorePoint.


        :param backup_store_repository: The backup_store_repository of this BackupRestorePoint.  # noqa: E501
        :type backup_store_repository: NestedBackupStoreRepository
        """
        if self.local_vars_configuration.client_side_validation and backup_store_repository is None:  # noqa: E501
            raise ValueError("Invalid value for `backup_store_repository`, must not be `None`")  # noqa: E501

        self._backup_store_repository = backup_store_repository

    @property
    def backup_target_execution(self):
        """Gets the backup_target_execution of this BackupRestorePoint.  # noqa: E501


        :return: The backup_target_execution of this BackupRestorePoint.  # noqa: E501
        :rtype: NestedBackupTargetExecution
        """
        return self._backup_target_execution

    @backup_target_execution.setter
    def backup_target_execution(self, backup_target_execution):
        """Sets the backup_target_execution of this BackupRestorePoint.


        :param backup_target_execution: The backup_target_execution of this BackupRestorePoint.  # noqa: E501
        :type backup_target_execution: NestedBackupTargetExecution
        """
        if self.local_vars_configuration.client_side_validation and backup_target_execution is None:  # noqa: E501
            raise ValueError("Invalid value for `backup_target_execution`, must not be `None`")  # noqa: E501

        self._backup_target_execution = backup_target_execution

    @property
    def cluster_local_id(self):
        """Gets the cluster_local_id of this BackupRestorePoint.  # noqa: E501


        :return: The cluster_local_id of this BackupRestorePoint.  # noqa: E501
        :rtype: str
        """
        return self._cluster_local_id

    @cluster_local_id.setter
    def cluster_local_id(self, cluster_local_id):
        """Sets the cluster_local_id of this BackupRestorePoint.


        :param cluster_local_id: The cluster_local_id of this BackupRestorePoint.  # noqa: E501
        :type cluster_local_id: str
        """

        self._cluster_local_id = cluster_local_id

    @property
    def compression_ratio(self):
        """Gets the compression_ratio of this BackupRestorePoint.  # noqa: E501


        :return: The compression_ratio of this BackupRestorePoint.  # noqa: E501
        :rtype: float
        """
        return self._compression_ratio

    @compression_ratio.setter
    def compression_ratio(self, compression_ratio):
        """Sets the compression_ratio of this BackupRestorePoint.


        :param compression_ratio: The compression_ratio of this BackupRestorePoint.  # noqa: E501
        :type compression_ratio: float
        """

        self._compression_ratio = compression_ratio

    @property
    def creation(self):
        """Gets the creation of this BackupRestorePoint.  # noqa: E501


        :return: The creation of this BackupRestorePoint.  # noqa: E501
        :rtype: BackupRestorePointCreation
        """
        return self._creation

    @creation.setter
    def creation(self, creation):
        """Sets the creation of this BackupRestorePoint.


        :param creation: The creation of this BackupRestorePoint.  # noqa: E501
        :type creation: BackupRestorePointCreation
        """

        self._creation = creation

    @property
    def entity_async_status(self):
        """Gets the entity_async_status of this BackupRestorePoint.  # noqa: E501


        :return: The entity_async_status of this BackupRestorePoint.  # noqa: E501
        :rtype: EntityAsyncStatus
        """
        return self._entity_async_status

    @entity_async_status.setter
    def entity_async_status(self, entity_async_status):
        """Sets the entity_async_status of this BackupRestorePoint.


        :param entity_async_status: The entity_async_status of this BackupRestorePoint.  # noqa: E501
        :type entity_async_status: EntityAsyncStatus
        """

        self._entity_async_status = entity_async_status

    @property
    def id(self):
        """Gets the id of this BackupRestorePoint.  # noqa: E501


        :return: The id of this BackupRestorePoint.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BackupRestorePoint.


        :param id: The id of this BackupRestorePoint.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def local_created_at(self):
        """Gets the local_created_at of this BackupRestorePoint.  # noqa: E501


        :return: The local_created_at of this BackupRestorePoint.  # noqa: E501
        :rtype: str
        """
        return self._local_created_at

    @local_created_at.setter
    def local_created_at(self, local_created_at):
        """Sets the local_created_at of this BackupRestorePoint.


        :param local_created_at: The local_created_at of this BackupRestorePoint.  # noqa: E501
        :type local_created_at: str
        """

        self._local_created_at = local_created_at

    @property
    def local_id(self):
        """Gets the local_id of this BackupRestorePoint.  # noqa: E501


        :return: The local_id of this BackupRestorePoint.  # noqa: E501
        :rtype: str
        """
        return self._local_id

    @local_id.setter
    def local_id(self, local_id):
        """Sets the local_id of this BackupRestorePoint.


        :param local_id: The local_id of this BackupRestorePoint.  # noqa: E501
        :type local_id: str
        """
        if self.local_vars_configuration.client_side_validation and local_id is None:  # noqa: E501
            raise ValueError("Invalid value for `local_id`, must not be `None`")  # noqa: E501

        self._local_id = local_id

    @property
    def logical_size(self):
        """Gets the logical_size of this BackupRestorePoint.  # noqa: E501


        :return: The logical_size of this BackupRestorePoint.  # noqa: E501
        :rtype: float
        """
        return self._logical_size

    @logical_size.setter
    def logical_size(self, logical_size):
        """Sets the logical_size of this BackupRestorePoint.


        :param logical_size: The logical_size of this BackupRestorePoint.  # noqa: E501
        :type logical_size: float
        """

        self._logical_size = logical_size

    @property
    def parent_restore_point(self):
        """Gets the parent_restore_point of this BackupRestorePoint.  # noqa: E501


        :return: The parent_restore_point of this BackupRestorePoint.  # noqa: E501
        :rtype: str
        """
        return self._parent_restore_point

    @parent_restore_point.setter
    def parent_restore_point(self, parent_restore_point):
        """Sets the parent_restore_point of this BackupRestorePoint.


        :param parent_restore_point: The parent_restore_point of this BackupRestorePoint.  # noqa: E501
        :type parent_restore_point: str
        """

        self._parent_restore_point = parent_restore_point

    @property
    def physical_size(self):
        """Gets the physical_size of this BackupRestorePoint.  # noqa: E501


        :return: The physical_size of this BackupRestorePoint.  # noqa: E501
        :rtype: float
        """
        return self._physical_size

    @physical_size.setter
    def physical_size(self, physical_size):
        """Sets the physical_size of this BackupRestorePoint.


        :param physical_size: The physical_size of this BackupRestorePoint.  # noqa: E501
        :type physical_size: float
        """

        self._physical_size = physical_size

    @property
    def size(self):
        """Gets the size of this BackupRestorePoint.  # noqa: E501


        :return: The size of this BackupRestorePoint.  # noqa: E501
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this BackupRestorePoint.


        :param size: The size of this BackupRestorePoint.  # noqa: E501
        :type size: float
        """

        self._size = size

    @property
    def slice(self):
        """Gets the slice of this BackupRestorePoint.  # noqa: E501


        :return: The slice of this BackupRestorePoint.  # noqa: E501
        :rtype: str
        """
        return self._slice

    @slice.setter
    def slice(self, slice):
        """Sets the slice of this BackupRestorePoint.


        :param slice: The slice of this BackupRestorePoint.  # noqa: E501
        :type slice: str
        """
        if self.local_vars_configuration.client_side_validation and slice is None:  # noqa: E501
            raise ValueError("Invalid value for `slice`, must not be `None`")  # noqa: E501

        self._slice = slice

    @property
    def type(self):
        """Gets the type of this BackupRestorePoint.  # noqa: E501


        :return: The type of this BackupRestorePoint.  # noqa: E501
        :rtype: BackupRestorePointType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BackupRestorePoint.


        :param type: The type of this BackupRestorePoint.  # noqa: E501
        :type type: BackupRestorePointType
        """

        self._type = type

    @property
    def valid_capacity(self):
        """Gets the valid_capacity of this BackupRestorePoint.  # noqa: E501


        :return: The valid_capacity of this BackupRestorePoint.  # noqa: E501
        :rtype: float
        """
        return self._valid_capacity

    @valid_capacity.setter
    def valid_capacity(self, valid_capacity):
        """Sets the valid_capacity of this BackupRestorePoint.


        :param valid_capacity: The valid_capacity of this BackupRestorePoint.  # noqa: E501
        :type valid_capacity: float
        """

        self._valid_capacity = valid_capacity

    @property
    def valid_size(self):
        """Gets the valid_size of this BackupRestorePoint.  # noqa: E501


        :return: The valid_size of this BackupRestorePoint.  # noqa: E501
        :rtype: float
        """
        return self._valid_size

    @valid_size.setter
    def valid_size(self, valid_size):
        """Sets the valid_size of this BackupRestorePoint.


        :param valid_size: The valid_size of this BackupRestorePoint.  # noqa: E501
        :type valid_size: float
        """

        self._valid_size = valid_size

    @property
    def vm(self):
        """Gets the vm of this BackupRestorePoint.  # noqa: E501


        :return: The vm of this BackupRestorePoint.  # noqa: E501
        :rtype: NestedVm
        """
        return self._vm

    @vm.setter
    def vm(self, vm):
        """Sets the vm of this BackupRestorePoint.


        :param vm: The vm of this BackupRestorePoint.  # noqa: E501
        :type vm: NestedVm
        """

        self._vm = vm

    @property
    def vm_local_id(self):
        """Gets the vm_local_id of this BackupRestorePoint.  # noqa: E501


        :return: The vm_local_id of this BackupRestorePoint.  # noqa: E501
        :rtype: str
        """
        return self._vm_local_id

    @vm_local_id.setter
    def vm_local_id(self, vm_local_id):
        """Sets the vm_local_id of this BackupRestorePoint.


        :param vm_local_id: The vm_local_id of this BackupRestorePoint.  # noqa: E501
        :type vm_local_id: str
        """

        self._vm_local_id = vm_local_id

    @property
    def vm_name(self):
        """Gets the vm_name of this BackupRestorePoint.  # noqa: E501


        :return: The vm_name of this BackupRestorePoint.  # noqa: E501
        :rtype: str
        """
        return self._vm_name

    @vm_name.setter
    def vm_name(self, vm_name):
        """Sets the vm_name of this BackupRestorePoint.


        :param vm_name: The vm_name of this BackupRestorePoint.  # noqa: E501
        :type vm_name: str
        """

        self._vm_name = vm_name

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BackupRestorePoint):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BackupRestorePoint):
            return True

        return self.to_dict() != other.to_dict()
