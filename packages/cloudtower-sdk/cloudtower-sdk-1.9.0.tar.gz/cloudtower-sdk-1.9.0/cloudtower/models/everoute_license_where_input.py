# coding: utf-8

"""
    CloudTower APIs

    cloudtower operation API and SDK  # noqa: E501

    The version of the OpenAPI document: 1.9.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cloudtower.configuration import Configuration


class EverouteLicenseWhereInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        '_and': 'list[EverouteLicenseWhereInput]',
        'code': 'str',
        'code_contains': 'str',
        'code_ends_with': 'str',
        'code_gt': 'str',
        'code_gte': 'str',
        'code_in': 'list[str]',
        'code_lt': 'str',
        'code_lte': 'str',
        'code_not': 'str',
        'code_not_contains': 'str',
        'code_not_ends_with': 'str',
        'code_not_in': 'list[str]',
        'code_not_starts_with': 'str',
        'code_starts_with': 'str',
        'expire_date': 'str',
        'expire_date_gt': 'str',
        'expire_date_gte': 'str',
        'expire_date_in': 'list[str]',
        'expire_date_lt': 'str',
        'expire_date_lte': 'str',
        'expire_date_not': 'str',
        'expire_date_not_in': 'list[str]',
        'id': 'str',
        'id_contains': 'str',
        'id_ends_with': 'str',
        'id_gt': 'str',
        'id_gte': 'str',
        'id_in': 'list[str]',
        'id_lt': 'str',
        'id_lte': 'str',
        'id_not': 'str',
        'id_not_contains': 'str',
        'id_not_ends_with': 'str',
        'id_not_in': 'list[str]',
        'id_not_starts_with': 'str',
        'id_starts_with': 'str',
        'max_socket_num': 'int',
        'max_socket_num_gt': 'int',
        'max_socket_num_gte': 'int',
        'max_socket_num_in': 'list[int]',
        'max_socket_num_lt': 'int',
        'max_socket_num_lte': 'int',
        'max_socket_num_not': 'int',
        'max_socket_num_not_in': 'list[int]',
        '_not': 'list[EverouteLicenseWhereInput]',
        '_or': 'list[EverouteLicenseWhereInput]',
        'serial': 'str',
        'serial_contains': 'str',
        'serial_ends_with': 'str',
        'serial_gt': 'str',
        'serial_gte': 'str',
        'serial_in': 'list[str]',
        'serial_lt': 'str',
        'serial_lte': 'str',
        'serial_not': 'str',
        'serial_not_contains': 'str',
        'serial_not_ends_with': 'str',
        'serial_not_in': 'list[str]',
        'serial_not_starts_with': 'str',
        'serial_starts_with': 'str',
        'sign_date': 'str',
        'sign_date_gt': 'str',
        'sign_date_gte': 'str',
        'sign_date_in': 'list[str]',
        'sign_date_lt': 'str',
        'sign_date_lte': 'str',
        'sign_date_not': 'str',
        'sign_date_not_in': 'list[str]',
        'software_edition': 'SoftwareEdition',
        'software_edition_in': 'list[SoftwareEdition]',
        'software_edition_not': 'SoftwareEdition',
        'software_edition_not_in': 'list[SoftwareEdition]',
        'type': 'LicenseType',
        'type_in': 'list[LicenseType]',
        'type_not': 'LicenseType',
        'type_not_in': 'list[LicenseType]',
        'uid': 'str',
        'uid_contains': 'str',
        'uid_ends_with': 'str',
        'uid_gt': 'str',
        'uid_gte': 'str',
        'uid_in': 'list[str]',
        'uid_lt': 'str',
        'uid_lte': 'str',
        'uid_not': 'str',
        'uid_not_contains': 'str',
        'uid_not_ends_with': 'str',
        'uid_not_in': 'list[str]',
        'uid_not_starts_with': 'str',
        'uid_starts_with': 'str'
    }

    attribute_map = {
        '_and': 'AND',
        'code': 'code',
        'code_contains': 'code_contains',
        'code_ends_with': 'code_ends_with',
        'code_gt': 'code_gt',
        'code_gte': 'code_gte',
        'code_in': 'code_in',
        'code_lt': 'code_lt',
        'code_lte': 'code_lte',
        'code_not': 'code_not',
        'code_not_contains': 'code_not_contains',
        'code_not_ends_with': 'code_not_ends_with',
        'code_not_in': 'code_not_in',
        'code_not_starts_with': 'code_not_starts_with',
        'code_starts_with': 'code_starts_with',
        'expire_date': 'expire_date',
        'expire_date_gt': 'expire_date_gt',
        'expire_date_gte': 'expire_date_gte',
        'expire_date_in': 'expire_date_in',
        'expire_date_lt': 'expire_date_lt',
        'expire_date_lte': 'expire_date_lte',
        'expire_date_not': 'expire_date_not',
        'expire_date_not_in': 'expire_date_not_in',
        'id': 'id',
        'id_contains': 'id_contains',
        'id_ends_with': 'id_ends_with',
        'id_gt': 'id_gt',
        'id_gte': 'id_gte',
        'id_in': 'id_in',
        'id_lt': 'id_lt',
        'id_lte': 'id_lte',
        'id_not': 'id_not',
        'id_not_contains': 'id_not_contains',
        'id_not_ends_with': 'id_not_ends_with',
        'id_not_in': 'id_not_in',
        'id_not_starts_with': 'id_not_starts_with',
        'id_starts_with': 'id_starts_with',
        'max_socket_num': 'max_socket_num',
        'max_socket_num_gt': 'max_socket_num_gt',
        'max_socket_num_gte': 'max_socket_num_gte',
        'max_socket_num_in': 'max_socket_num_in',
        'max_socket_num_lt': 'max_socket_num_lt',
        'max_socket_num_lte': 'max_socket_num_lte',
        'max_socket_num_not': 'max_socket_num_not',
        'max_socket_num_not_in': 'max_socket_num_not_in',
        '_not': 'NOT',
        '_or': 'OR',
        'serial': 'serial',
        'serial_contains': 'serial_contains',
        'serial_ends_with': 'serial_ends_with',
        'serial_gt': 'serial_gt',
        'serial_gte': 'serial_gte',
        'serial_in': 'serial_in',
        'serial_lt': 'serial_lt',
        'serial_lte': 'serial_lte',
        'serial_not': 'serial_not',
        'serial_not_contains': 'serial_not_contains',
        'serial_not_ends_with': 'serial_not_ends_with',
        'serial_not_in': 'serial_not_in',
        'serial_not_starts_with': 'serial_not_starts_with',
        'serial_starts_with': 'serial_starts_with',
        'sign_date': 'sign_date',
        'sign_date_gt': 'sign_date_gt',
        'sign_date_gte': 'sign_date_gte',
        'sign_date_in': 'sign_date_in',
        'sign_date_lt': 'sign_date_lt',
        'sign_date_lte': 'sign_date_lte',
        'sign_date_not': 'sign_date_not',
        'sign_date_not_in': 'sign_date_not_in',
        'software_edition': 'software_edition',
        'software_edition_in': 'software_edition_in',
        'software_edition_not': 'software_edition_not',
        'software_edition_not_in': 'software_edition_not_in',
        'type': 'type',
        'type_in': 'type_in',
        'type_not': 'type_not',
        'type_not_in': 'type_not_in',
        'uid': 'uid',
        'uid_contains': 'uid_contains',
        'uid_ends_with': 'uid_ends_with',
        'uid_gt': 'uid_gt',
        'uid_gte': 'uid_gte',
        'uid_in': 'uid_in',
        'uid_lt': 'uid_lt',
        'uid_lte': 'uid_lte',
        'uid_not': 'uid_not',
        'uid_not_contains': 'uid_not_contains',
        'uid_not_ends_with': 'uid_not_ends_with',
        'uid_not_in': 'uid_not_in',
        'uid_not_starts_with': 'uid_not_starts_with',
        'uid_starts_with': 'uid_starts_with'
    }

    def __init__(self, _and=None, code=None, code_contains=None, code_ends_with=None, code_gt=None, code_gte=None, code_in=None, code_lt=None, code_lte=None, code_not=None, code_not_contains=None, code_not_ends_with=None, code_not_in=None, code_not_starts_with=None, code_starts_with=None, expire_date=None, expire_date_gt=None, expire_date_gte=None, expire_date_in=None, expire_date_lt=None, expire_date_lte=None, expire_date_not=None, expire_date_not_in=None, id=None, id_contains=None, id_ends_with=None, id_gt=None, id_gte=None, id_in=None, id_lt=None, id_lte=None, id_not=None, id_not_contains=None, id_not_ends_with=None, id_not_in=None, id_not_starts_with=None, id_starts_with=None, max_socket_num=None, max_socket_num_gt=None, max_socket_num_gte=None, max_socket_num_in=None, max_socket_num_lt=None, max_socket_num_lte=None, max_socket_num_not=None, max_socket_num_not_in=None, _not=None, _or=None, serial=None, serial_contains=None, serial_ends_with=None, serial_gt=None, serial_gte=None, serial_in=None, serial_lt=None, serial_lte=None, serial_not=None, serial_not_contains=None, serial_not_ends_with=None, serial_not_in=None, serial_not_starts_with=None, serial_starts_with=None, sign_date=None, sign_date_gt=None, sign_date_gte=None, sign_date_in=None, sign_date_lt=None, sign_date_lte=None, sign_date_not=None, sign_date_not_in=None, software_edition=None, software_edition_in=None, software_edition_not=None, software_edition_not_in=None, type=None, type_in=None, type_not=None, type_not_in=None, uid=None, uid_contains=None, uid_ends_with=None, uid_gt=None, uid_gte=None, uid_in=None, uid_lt=None, uid_lte=None, uid_not=None, uid_not_contains=None, uid_not_ends_with=None, uid_not_in=None, uid_not_starts_with=None, uid_starts_with=None, local_vars_configuration=None):  # noqa: E501
        """EverouteLicenseWhereInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self.__and = None
        self._code = None
        self._code_contains = None
        self._code_ends_with = None
        self._code_gt = None
        self._code_gte = None
        self._code_in = None
        self._code_lt = None
        self._code_lte = None
        self._code_not = None
        self._code_not_contains = None
        self._code_not_ends_with = None
        self._code_not_in = None
        self._code_not_starts_with = None
        self._code_starts_with = None
        self._expire_date = None
        self._expire_date_gt = None
        self._expire_date_gte = None
        self._expire_date_in = None
        self._expire_date_lt = None
        self._expire_date_lte = None
        self._expire_date_not = None
        self._expire_date_not_in = None
        self._id = None
        self._id_contains = None
        self._id_ends_with = None
        self._id_gt = None
        self._id_gte = None
        self._id_in = None
        self._id_lt = None
        self._id_lte = None
        self._id_not = None
        self._id_not_contains = None
        self._id_not_ends_with = None
        self._id_not_in = None
        self._id_not_starts_with = None
        self._id_starts_with = None
        self._max_socket_num = None
        self._max_socket_num_gt = None
        self._max_socket_num_gte = None
        self._max_socket_num_in = None
        self._max_socket_num_lt = None
        self._max_socket_num_lte = None
        self._max_socket_num_not = None
        self._max_socket_num_not_in = None
        self.__not = None
        self.__or = None
        self._serial = None
        self._serial_contains = None
        self._serial_ends_with = None
        self._serial_gt = None
        self._serial_gte = None
        self._serial_in = None
        self._serial_lt = None
        self._serial_lte = None
        self._serial_not = None
        self._serial_not_contains = None
        self._serial_not_ends_with = None
        self._serial_not_in = None
        self._serial_not_starts_with = None
        self._serial_starts_with = None
        self._sign_date = None
        self._sign_date_gt = None
        self._sign_date_gte = None
        self._sign_date_in = None
        self._sign_date_lt = None
        self._sign_date_lte = None
        self._sign_date_not = None
        self._sign_date_not_in = None
        self._software_edition = None
        self._software_edition_in = None
        self._software_edition_not = None
        self._software_edition_not_in = None
        self._type = None
        self._type_in = None
        self._type_not = None
        self._type_not_in = None
        self._uid = None
        self._uid_contains = None
        self._uid_ends_with = None
        self._uid_gt = None
        self._uid_gte = None
        self._uid_in = None
        self._uid_lt = None
        self._uid_lte = None
        self._uid_not = None
        self._uid_not_contains = None
        self._uid_not_ends_with = None
        self._uid_not_in = None
        self._uid_not_starts_with = None
        self._uid_starts_with = None
        self.discriminator = None

        self._and = _and
        self.code = code
        self.code_contains = code_contains
        self.code_ends_with = code_ends_with
        self.code_gt = code_gt
        self.code_gte = code_gte
        self.code_in = code_in
        self.code_lt = code_lt
        self.code_lte = code_lte
        self.code_not = code_not
        self.code_not_contains = code_not_contains
        self.code_not_ends_with = code_not_ends_with
        self.code_not_in = code_not_in
        self.code_not_starts_with = code_not_starts_with
        self.code_starts_with = code_starts_with
        self.expire_date = expire_date
        self.expire_date_gt = expire_date_gt
        self.expire_date_gte = expire_date_gte
        self.expire_date_in = expire_date_in
        self.expire_date_lt = expire_date_lt
        self.expire_date_lte = expire_date_lte
        self.expire_date_not = expire_date_not
        self.expire_date_not_in = expire_date_not_in
        self.id = id
        self.id_contains = id_contains
        self.id_ends_with = id_ends_with
        self.id_gt = id_gt
        self.id_gte = id_gte
        self.id_in = id_in
        self.id_lt = id_lt
        self.id_lte = id_lte
        self.id_not = id_not
        self.id_not_contains = id_not_contains
        self.id_not_ends_with = id_not_ends_with
        self.id_not_in = id_not_in
        self.id_not_starts_with = id_not_starts_with
        self.id_starts_with = id_starts_with
        self.max_socket_num = max_socket_num
        self.max_socket_num_gt = max_socket_num_gt
        self.max_socket_num_gte = max_socket_num_gte
        self.max_socket_num_in = max_socket_num_in
        self.max_socket_num_lt = max_socket_num_lt
        self.max_socket_num_lte = max_socket_num_lte
        self.max_socket_num_not = max_socket_num_not
        self.max_socket_num_not_in = max_socket_num_not_in
        self._not = _not
        self._or = _or
        self.serial = serial
        self.serial_contains = serial_contains
        self.serial_ends_with = serial_ends_with
        self.serial_gt = serial_gt
        self.serial_gte = serial_gte
        self.serial_in = serial_in
        self.serial_lt = serial_lt
        self.serial_lte = serial_lte
        self.serial_not = serial_not
        self.serial_not_contains = serial_not_contains
        self.serial_not_ends_with = serial_not_ends_with
        self.serial_not_in = serial_not_in
        self.serial_not_starts_with = serial_not_starts_with
        self.serial_starts_with = serial_starts_with
        self.sign_date = sign_date
        self.sign_date_gt = sign_date_gt
        self.sign_date_gte = sign_date_gte
        self.sign_date_in = sign_date_in
        self.sign_date_lt = sign_date_lt
        self.sign_date_lte = sign_date_lte
        self.sign_date_not = sign_date_not
        self.sign_date_not_in = sign_date_not_in
        self.software_edition = software_edition
        self.software_edition_in = software_edition_in
        self.software_edition_not = software_edition_not
        self.software_edition_not_in = software_edition_not_in
        self.type = type
        self.type_in = type_in
        self.type_not = type_not
        self.type_not_in = type_not_in
        self.uid = uid
        self.uid_contains = uid_contains
        self.uid_ends_with = uid_ends_with
        self.uid_gt = uid_gt
        self.uid_gte = uid_gte
        self.uid_in = uid_in
        self.uid_lt = uid_lt
        self.uid_lte = uid_lte
        self.uid_not = uid_not
        self.uid_not_contains = uid_not_contains
        self.uid_not_ends_with = uid_not_ends_with
        self.uid_not_in = uid_not_in
        self.uid_not_starts_with = uid_not_starts_with
        self.uid_starts_with = uid_starts_with

    @property
    def _and(self):
        """Gets the _and of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The _and of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: list[EverouteLicenseWhereInput]
        """
        return self.__and

    @_and.setter
    def _and(self, _and):
        """Sets the _and of this EverouteLicenseWhereInput.


        :param _and: The _and of this EverouteLicenseWhereInput.  # noqa: E501
        :type _and: list[EverouteLicenseWhereInput]
        """

        self.__and = _and

    @property
    def code(self):
        """Gets the code of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The code of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this EverouteLicenseWhereInput.


        :param code: The code of this EverouteLicenseWhereInput.  # noqa: E501
        :type code: str
        """

        self._code = code

    @property
    def code_contains(self):
        """Gets the code_contains of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The code_contains of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._code_contains

    @code_contains.setter
    def code_contains(self, code_contains):
        """Sets the code_contains of this EverouteLicenseWhereInput.


        :param code_contains: The code_contains of this EverouteLicenseWhereInput.  # noqa: E501
        :type code_contains: str
        """

        self._code_contains = code_contains

    @property
    def code_ends_with(self):
        """Gets the code_ends_with of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The code_ends_with of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._code_ends_with

    @code_ends_with.setter
    def code_ends_with(self, code_ends_with):
        """Sets the code_ends_with of this EverouteLicenseWhereInput.


        :param code_ends_with: The code_ends_with of this EverouteLicenseWhereInput.  # noqa: E501
        :type code_ends_with: str
        """

        self._code_ends_with = code_ends_with

    @property
    def code_gt(self):
        """Gets the code_gt of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The code_gt of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._code_gt

    @code_gt.setter
    def code_gt(self, code_gt):
        """Sets the code_gt of this EverouteLicenseWhereInput.


        :param code_gt: The code_gt of this EverouteLicenseWhereInput.  # noqa: E501
        :type code_gt: str
        """

        self._code_gt = code_gt

    @property
    def code_gte(self):
        """Gets the code_gte of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The code_gte of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._code_gte

    @code_gte.setter
    def code_gte(self, code_gte):
        """Sets the code_gte of this EverouteLicenseWhereInput.


        :param code_gte: The code_gte of this EverouteLicenseWhereInput.  # noqa: E501
        :type code_gte: str
        """

        self._code_gte = code_gte

    @property
    def code_in(self):
        """Gets the code_in of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The code_in of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._code_in

    @code_in.setter
    def code_in(self, code_in):
        """Sets the code_in of this EverouteLicenseWhereInput.


        :param code_in: The code_in of this EverouteLicenseWhereInput.  # noqa: E501
        :type code_in: list[str]
        """

        self._code_in = code_in

    @property
    def code_lt(self):
        """Gets the code_lt of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The code_lt of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._code_lt

    @code_lt.setter
    def code_lt(self, code_lt):
        """Sets the code_lt of this EverouteLicenseWhereInput.


        :param code_lt: The code_lt of this EverouteLicenseWhereInput.  # noqa: E501
        :type code_lt: str
        """

        self._code_lt = code_lt

    @property
    def code_lte(self):
        """Gets the code_lte of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The code_lte of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._code_lte

    @code_lte.setter
    def code_lte(self, code_lte):
        """Sets the code_lte of this EverouteLicenseWhereInput.


        :param code_lte: The code_lte of this EverouteLicenseWhereInput.  # noqa: E501
        :type code_lte: str
        """

        self._code_lte = code_lte

    @property
    def code_not(self):
        """Gets the code_not of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The code_not of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._code_not

    @code_not.setter
    def code_not(self, code_not):
        """Sets the code_not of this EverouteLicenseWhereInput.


        :param code_not: The code_not of this EverouteLicenseWhereInput.  # noqa: E501
        :type code_not: str
        """

        self._code_not = code_not

    @property
    def code_not_contains(self):
        """Gets the code_not_contains of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The code_not_contains of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._code_not_contains

    @code_not_contains.setter
    def code_not_contains(self, code_not_contains):
        """Sets the code_not_contains of this EverouteLicenseWhereInput.


        :param code_not_contains: The code_not_contains of this EverouteLicenseWhereInput.  # noqa: E501
        :type code_not_contains: str
        """

        self._code_not_contains = code_not_contains

    @property
    def code_not_ends_with(self):
        """Gets the code_not_ends_with of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The code_not_ends_with of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._code_not_ends_with

    @code_not_ends_with.setter
    def code_not_ends_with(self, code_not_ends_with):
        """Sets the code_not_ends_with of this EverouteLicenseWhereInput.


        :param code_not_ends_with: The code_not_ends_with of this EverouteLicenseWhereInput.  # noqa: E501
        :type code_not_ends_with: str
        """

        self._code_not_ends_with = code_not_ends_with

    @property
    def code_not_in(self):
        """Gets the code_not_in of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The code_not_in of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._code_not_in

    @code_not_in.setter
    def code_not_in(self, code_not_in):
        """Sets the code_not_in of this EverouteLicenseWhereInput.


        :param code_not_in: The code_not_in of this EverouteLicenseWhereInput.  # noqa: E501
        :type code_not_in: list[str]
        """

        self._code_not_in = code_not_in

    @property
    def code_not_starts_with(self):
        """Gets the code_not_starts_with of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The code_not_starts_with of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._code_not_starts_with

    @code_not_starts_with.setter
    def code_not_starts_with(self, code_not_starts_with):
        """Sets the code_not_starts_with of this EverouteLicenseWhereInput.


        :param code_not_starts_with: The code_not_starts_with of this EverouteLicenseWhereInput.  # noqa: E501
        :type code_not_starts_with: str
        """

        self._code_not_starts_with = code_not_starts_with

    @property
    def code_starts_with(self):
        """Gets the code_starts_with of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The code_starts_with of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._code_starts_with

    @code_starts_with.setter
    def code_starts_with(self, code_starts_with):
        """Sets the code_starts_with of this EverouteLicenseWhereInput.


        :param code_starts_with: The code_starts_with of this EverouteLicenseWhereInput.  # noqa: E501
        :type code_starts_with: str
        """

        self._code_starts_with = code_starts_with

    @property
    def expire_date(self):
        """Gets the expire_date of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The expire_date of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._expire_date

    @expire_date.setter
    def expire_date(self, expire_date):
        """Sets the expire_date of this EverouteLicenseWhereInput.


        :param expire_date: The expire_date of this EverouteLicenseWhereInput.  # noqa: E501
        :type expire_date: str
        """

        self._expire_date = expire_date

    @property
    def expire_date_gt(self):
        """Gets the expire_date_gt of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The expire_date_gt of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._expire_date_gt

    @expire_date_gt.setter
    def expire_date_gt(self, expire_date_gt):
        """Sets the expire_date_gt of this EverouteLicenseWhereInput.


        :param expire_date_gt: The expire_date_gt of this EverouteLicenseWhereInput.  # noqa: E501
        :type expire_date_gt: str
        """

        self._expire_date_gt = expire_date_gt

    @property
    def expire_date_gte(self):
        """Gets the expire_date_gte of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The expire_date_gte of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._expire_date_gte

    @expire_date_gte.setter
    def expire_date_gte(self, expire_date_gte):
        """Sets the expire_date_gte of this EverouteLicenseWhereInput.


        :param expire_date_gte: The expire_date_gte of this EverouteLicenseWhereInput.  # noqa: E501
        :type expire_date_gte: str
        """

        self._expire_date_gte = expire_date_gte

    @property
    def expire_date_in(self):
        """Gets the expire_date_in of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The expire_date_in of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._expire_date_in

    @expire_date_in.setter
    def expire_date_in(self, expire_date_in):
        """Sets the expire_date_in of this EverouteLicenseWhereInput.


        :param expire_date_in: The expire_date_in of this EverouteLicenseWhereInput.  # noqa: E501
        :type expire_date_in: list[str]
        """

        self._expire_date_in = expire_date_in

    @property
    def expire_date_lt(self):
        """Gets the expire_date_lt of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The expire_date_lt of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._expire_date_lt

    @expire_date_lt.setter
    def expire_date_lt(self, expire_date_lt):
        """Sets the expire_date_lt of this EverouteLicenseWhereInput.


        :param expire_date_lt: The expire_date_lt of this EverouteLicenseWhereInput.  # noqa: E501
        :type expire_date_lt: str
        """

        self._expire_date_lt = expire_date_lt

    @property
    def expire_date_lte(self):
        """Gets the expire_date_lte of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The expire_date_lte of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._expire_date_lte

    @expire_date_lte.setter
    def expire_date_lte(self, expire_date_lte):
        """Sets the expire_date_lte of this EverouteLicenseWhereInput.


        :param expire_date_lte: The expire_date_lte of this EverouteLicenseWhereInput.  # noqa: E501
        :type expire_date_lte: str
        """

        self._expire_date_lte = expire_date_lte

    @property
    def expire_date_not(self):
        """Gets the expire_date_not of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The expire_date_not of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._expire_date_not

    @expire_date_not.setter
    def expire_date_not(self, expire_date_not):
        """Sets the expire_date_not of this EverouteLicenseWhereInput.


        :param expire_date_not: The expire_date_not of this EverouteLicenseWhereInput.  # noqa: E501
        :type expire_date_not: str
        """

        self._expire_date_not = expire_date_not

    @property
    def expire_date_not_in(self):
        """Gets the expire_date_not_in of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The expire_date_not_in of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._expire_date_not_in

    @expire_date_not_in.setter
    def expire_date_not_in(self, expire_date_not_in):
        """Sets the expire_date_not_in of this EverouteLicenseWhereInput.


        :param expire_date_not_in: The expire_date_not_in of this EverouteLicenseWhereInput.  # noqa: E501
        :type expire_date_not_in: list[str]
        """

        self._expire_date_not_in = expire_date_not_in

    @property
    def id(self):
        """Gets the id of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The id of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EverouteLicenseWhereInput.


        :param id: The id of this EverouteLicenseWhereInput.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def id_contains(self):
        """Gets the id_contains of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The id_contains of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_contains

    @id_contains.setter
    def id_contains(self, id_contains):
        """Sets the id_contains of this EverouteLicenseWhereInput.


        :param id_contains: The id_contains of this EverouteLicenseWhereInput.  # noqa: E501
        :type id_contains: str
        """

        self._id_contains = id_contains

    @property
    def id_ends_with(self):
        """Gets the id_ends_with of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The id_ends_with of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_ends_with

    @id_ends_with.setter
    def id_ends_with(self, id_ends_with):
        """Sets the id_ends_with of this EverouteLicenseWhereInput.


        :param id_ends_with: The id_ends_with of this EverouteLicenseWhereInput.  # noqa: E501
        :type id_ends_with: str
        """

        self._id_ends_with = id_ends_with

    @property
    def id_gt(self):
        """Gets the id_gt of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The id_gt of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_gt

    @id_gt.setter
    def id_gt(self, id_gt):
        """Sets the id_gt of this EverouteLicenseWhereInput.


        :param id_gt: The id_gt of this EverouteLicenseWhereInput.  # noqa: E501
        :type id_gt: str
        """

        self._id_gt = id_gt

    @property
    def id_gte(self):
        """Gets the id_gte of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The id_gte of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_gte

    @id_gte.setter
    def id_gte(self, id_gte):
        """Sets the id_gte of this EverouteLicenseWhereInput.


        :param id_gte: The id_gte of this EverouteLicenseWhereInput.  # noqa: E501
        :type id_gte: str
        """

        self._id_gte = id_gte

    @property
    def id_in(self):
        """Gets the id_in of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The id_in of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._id_in

    @id_in.setter
    def id_in(self, id_in):
        """Sets the id_in of this EverouteLicenseWhereInput.


        :param id_in: The id_in of this EverouteLicenseWhereInput.  # noqa: E501
        :type id_in: list[str]
        """

        self._id_in = id_in

    @property
    def id_lt(self):
        """Gets the id_lt of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The id_lt of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_lt

    @id_lt.setter
    def id_lt(self, id_lt):
        """Sets the id_lt of this EverouteLicenseWhereInput.


        :param id_lt: The id_lt of this EverouteLicenseWhereInput.  # noqa: E501
        :type id_lt: str
        """

        self._id_lt = id_lt

    @property
    def id_lte(self):
        """Gets the id_lte of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The id_lte of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_lte

    @id_lte.setter
    def id_lte(self, id_lte):
        """Sets the id_lte of this EverouteLicenseWhereInput.


        :param id_lte: The id_lte of this EverouteLicenseWhereInput.  # noqa: E501
        :type id_lte: str
        """

        self._id_lte = id_lte

    @property
    def id_not(self):
        """Gets the id_not of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The id_not of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_not

    @id_not.setter
    def id_not(self, id_not):
        """Sets the id_not of this EverouteLicenseWhereInput.


        :param id_not: The id_not of this EverouteLicenseWhereInput.  # noqa: E501
        :type id_not: str
        """

        self._id_not = id_not

    @property
    def id_not_contains(self):
        """Gets the id_not_contains of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The id_not_contains of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_not_contains

    @id_not_contains.setter
    def id_not_contains(self, id_not_contains):
        """Sets the id_not_contains of this EverouteLicenseWhereInput.


        :param id_not_contains: The id_not_contains of this EverouteLicenseWhereInput.  # noqa: E501
        :type id_not_contains: str
        """

        self._id_not_contains = id_not_contains

    @property
    def id_not_ends_with(self):
        """Gets the id_not_ends_with of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The id_not_ends_with of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_not_ends_with

    @id_not_ends_with.setter
    def id_not_ends_with(self, id_not_ends_with):
        """Sets the id_not_ends_with of this EverouteLicenseWhereInput.


        :param id_not_ends_with: The id_not_ends_with of this EverouteLicenseWhereInput.  # noqa: E501
        :type id_not_ends_with: str
        """

        self._id_not_ends_with = id_not_ends_with

    @property
    def id_not_in(self):
        """Gets the id_not_in of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The id_not_in of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._id_not_in

    @id_not_in.setter
    def id_not_in(self, id_not_in):
        """Sets the id_not_in of this EverouteLicenseWhereInput.


        :param id_not_in: The id_not_in of this EverouteLicenseWhereInput.  # noqa: E501
        :type id_not_in: list[str]
        """

        self._id_not_in = id_not_in

    @property
    def id_not_starts_with(self):
        """Gets the id_not_starts_with of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The id_not_starts_with of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_not_starts_with

    @id_not_starts_with.setter
    def id_not_starts_with(self, id_not_starts_with):
        """Sets the id_not_starts_with of this EverouteLicenseWhereInput.


        :param id_not_starts_with: The id_not_starts_with of this EverouteLicenseWhereInput.  # noqa: E501
        :type id_not_starts_with: str
        """

        self._id_not_starts_with = id_not_starts_with

    @property
    def id_starts_with(self):
        """Gets the id_starts_with of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The id_starts_with of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_starts_with

    @id_starts_with.setter
    def id_starts_with(self, id_starts_with):
        """Sets the id_starts_with of this EverouteLicenseWhereInput.


        :param id_starts_with: The id_starts_with of this EverouteLicenseWhereInput.  # noqa: E501
        :type id_starts_with: str
        """

        self._id_starts_with = id_starts_with

    @property
    def max_socket_num(self):
        """Gets the max_socket_num of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The max_socket_num of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._max_socket_num

    @max_socket_num.setter
    def max_socket_num(self, max_socket_num):
        """Sets the max_socket_num of this EverouteLicenseWhereInput.


        :param max_socket_num: The max_socket_num of this EverouteLicenseWhereInput.  # noqa: E501
        :type max_socket_num: int
        """

        self._max_socket_num = max_socket_num

    @property
    def max_socket_num_gt(self):
        """Gets the max_socket_num_gt of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The max_socket_num_gt of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._max_socket_num_gt

    @max_socket_num_gt.setter
    def max_socket_num_gt(self, max_socket_num_gt):
        """Sets the max_socket_num_gt of this EverouteLicenseWhereInput.


        :param max_socket_num_gt: The max_socket_num_gt of this EverouteLicenseWhereInput.  # noqa: E501
        :type max_socket_num_gt: int
        """

        self._max_socket_num_gt = max_socket_num_gt

    @property
    def max_socket_num_gte(self):
        """Gets the max_socket_num_gte of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The max_socket_num_gte of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._max_socket_num_gte

    @max_socket_num_gte.setter
    def max_socket_num_gte(self, max_socket_num_gte):
        """Sets the max_socket_num_gte of this EverouteLicenseWhereInput.


        :param max_socket_num_gte: The max_socket_num_gte of this EverouteLicenseWhereInput.  # noqa: E501
        :type max_socket_num_gte: int
        """

        self._max_socket_num_gte = max_socket_num_gte

    @property
    def max_socket_num_in(self):
        """Gets the max_socket_num_in of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The max_socket_num_in of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: list[int]
        """
        return self._max_socket_num_in

    @max_socket_num_in.setter
    def max_socket_num_in(self, max_socket_num_in):
        """Sets the max_socket_num_in of this EverouteLicenseWhereInput.


        :param max_socket_num_in: The max_socket_num_in of this EverouteLicenseWhereInput.  # noqa: E501
        :type max_socket_num_in: list[int]
        """

        self._max_socket_num_in = max_socket_num_in

    @property
    def max_socket_num_lt(self):
        """Gets the max_socket_num_lt of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The max_socket_num_lt of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._max_socket_num_lt

    @max_socket_num_lt.setter
    def max_socket_num_lt(self, max_socket_num_lt):
        """Sets the max_socket_num_lt of this EverouteLicenseWhereInput.


        :param max_socket_num_lt: The max_socket_num_lt of this EverouteLicenseWhereInput.  # noqa: E501
        :type max_socket_num_lt: int
        """

        self._max_socket_num_lt = max_socket_num_lt

    @property
    def max_socket_num_lte(self):
        """Gets the max_socket_num_lte of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The max_socket_num_lte of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._max_socket_num_lte

    @max_socket_num_lte.setter
    def max_socket_num_lte(self, max_socket_num_lte):
        """Sets the max_socket_num_lte of this EverouteLicenseWhereInput.


        :param max_socket_num_lte: The max_socket_num_lte of this EverouteLicenseWhereInput.  # noqa: E501
        :type max_socket_num_lte: int
        """

        self._max_socket_num_lte = max_socket_num_lte

    @property
    def max_socket_num_not(self):
        """Gets the max_socket_num_not of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The max_socket_num_not of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._max_socket_num_not

    @max_socket_num_not.setter
    def max_socket_num_not(self, max_socket_num_not):
        """Sets the max_socket_num_not of this EverouteLicenseWhereInput.


        :param max_socket_num_not: The max_socket_num_not of this EverouteLicenseWhereInput.  # noqa: E501
        :type max_socket_num_not: int
        """

        self._max_socket_num_not = max_socket_num_not

    @property
    def max_socket_num_not_in(self):
        """Gets the max_socket_num_not_in of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The max_socket_num_not_in of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: list[int]
        """
        return self._max_socket_num_not_in

    @max_socket_num_not_in.setter
    def max_socket_num_not_in(self, max_socket_num_not_in):
        """Sets the max_socket_num_not_in of this EverouteLicenseWhereInput.


        :param max_socket_num_not_in: The max_socket_num_not_in of this EverouteLicenseWhereInput.  # noqa: E501
        :type max_socket_num_not_in: list[int]
        """

        self._max_socket_num_not_in = max_socket_num_not_in

    @property
    def _not(self):
        """Gets the _not of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The _not of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: list[EverouteLicenseWhereInput]
        """
        return self.__not

    @_not.setter
    def _not(self, _not):
        """Sets the _not of this EverouteLicenseWhereInput.


        :param _not: The _not of this EverouteLicenseWhereInput.  # noqa: E501
        :type _not: list[EverouteLicenseWhereInput]
        """

        self.__not = _not

    @property
    def _or(self):
        """Gets the _or of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The _or of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: list[EverouteLicenseWhereInput]
        """
        return self.__or

    @_or.setter
    def _or(self, _or):
        """Sets the _or of this EverouteLicenseWhereInput.


        :param _or: The _or of this EverouteLicenseWhereInput.  # noqa: E501
        :type _or: list[EverouteLicenseWhereInput]
        """

        self.__or = _or

    @property
    def serial(self):
        """Gets the serial of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The serial of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this EverouteLicenseWhereInput.


        :param serial: The serial of this EverouteLicenseWhereInput.  # noqa: E501
        :type serial: str
        """

        self._serial = serial

    @property
    def serial_contains(self):
        """Gets the serial_contains of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The serial_contains of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._serial_contains

    @serial_contains.setter
    def serial_contains(self, serial_contains):
        """Sets the serial_contains of this EverouteLicenseWhereInput.


        :param serial_contains: The serial_contains of this EverouteLicenseWhereInput.  # noqa: E501
        :type serial_contains: str
        """

        self._serial_contains = serial_contains

    @property
    def serial_ends_with(self):
        """Gets the serial_ends_with of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The serial_ends_with of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._serial_ends_with

    @serial_ends_with.setter
    def serial_ends_with(self, serial_ends_with):
        """Sets the serial_ends_with of this EverouteLicenseWhereInput.


        :param serial_ends_with: The serial_ends_with of this EverouteLicenseWhereInput.  # noqa: E501
        :type serial_ends_with: str
        """

        self._serial_ends_with = serial_ends_with

    @property
    def serial_gt(self):
        """Gets the serial_gt of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The serial_gt of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._serial_gt

    @serial_gt.setter
    def serial_gt(self, serial_gt):
        """Sets the serial_gt of this EverouteLicenseWhereInput.


        :param serial_gt: The serial_gt of this EverouteLicenseWhereInput.  # noqa: E501
        :type serial_gt: str
        """

        self._serial_gt = serial_gt

    @property
    def serial_gte(self):
        """Gets the serial_gte of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The serial_gte of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._serial_gte

    @serial_gte.setter
    def serial_gte(self, serial_gte):
        """Sets the serial_gte of this EverouteLicenseWhereInput.


        :param serial_gte: The serial_gte of this EverouteLicenseWhereInput.  # noqa: E501
        :type serial_gte: str
        """

        self._serial_gte = serial_gte

    @property
    def serial_in(self):
        """Gets the serial_in of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The serial_in of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._serial_in

    @serial_in.setter
    def serial_in(self, serial_in):
        """Sets the serial_in of this EverouteLicenseWhereInput.


        :param serial_in: The serial_in of this EverouteLicenseWhereInput.  # noqa: E501
        :type serial_in: list[str]
        """

        self._serial_in = serial_in

    @property
    def serial_lt(self):
        """Gets the serial_lt of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The serial_lt of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._serial_lt

    @serial_lt.setter
    def serial_lt(self, serial_lt):
        """Sets the serial_lt of this EverouteLicenseWhereInput.


        :param serial_lt: The serial_lt of this EverouteLicenseWhereInput.  # noqa: E501
        :type serial_lt: str
        """

        self._serial_lt = serial_lt

    @property
    def serial_lte(self):
        """Gets the serial_lte of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The serial_lte of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._serial_lte

    @serial_lte.setter
    def serial_lte(self, serial_lte):
        """Sets the serial_lte of this EverouteLicenseWhereInput.


        :param serial_lte: The serial_lte of this EverouteLicenseWhereInput.  # noqa: E501
        :type serial_lte: str
        """

        self._serial_lte = serial_lte

    @property
    def serial_not(self):
        """Gets the serial_not of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The serial_not of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._serial_not

    @serial_not.setter
    def serial_not(self, serial_not):
        """Sets the serial_not of this EverouteLicenseWhereInput.


        :param serial_not: The serial_not of this EverouteLicenseWhereInput.  # noqa: E501
        :type serial_not: str
        """

        self._serial_not = serial_not

    @property
    def serial_not_contains(self):
        """Gets the serial_not_contains of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The serial_not_contains of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._serial_not_contains

    @serial_not_contains.setter
    def serial_not_contains(self, serial_not_contains):
        """Sets the serial_not_contains of this EverouteLicenseWhereInput.


        :param serial_not_contains: The serial_not_contains of this EverouteLicenseWhereInput.  # noqa: E501
        :type serial_not_contains: str
        """

        self._serial_not_contains = serial_not_contains

    @property
    def serial_not_ends_with(self):
        """Gets the serial_not_ends_with of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The serial_not_ends_with of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._serial_not_ends_with

    @serial_not_ends_with.setter
    def serial_not_ends_with(self, serial_not_ends_with):
        """Sets the serial_not_ends_with of this EverouteLicenseWhereInput.


        :param serial_not_ends_with: The serial_not_ends_with of this EverouteLicenseWhereInput.  # noqa: E501
        :type serial_not_ends_with: str
        """

        self._serial_not_ends_with = serial_not_ends_with

    @property
    def serial_not_in(self):
        """Gets the serial_not_in of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The serial_not_in of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._serial_not_in

    @serial_not_in.setter
    def serial_not_in(self, serial_not_in):
        """Sets the serial_not_in of this EverouteLicenseWhereInput.


        :param serial_not_in: The serial_not_in of this EverouteLicenseWhereInput.  # noqa: E501
        :type serial_not_in: list[str]
        """

        self._serial_not_in = serial_not_in

    @property
    def serial_not_starts_with(self):
        """Gets the serial_not_starts_with of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The serial_not_starts_with of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._serial_not_starts_with

    @serial_not_starts_with.setter
    def serial_not_starts_with(self, serial_not_starts_with):
        """Sets the serial_not_starts_with of this EverouteLicenseWhereInput.


        :param serial_not_starts_with: The serial_not_starts_with of this EverouteLicenseWhereInput.  # noqa: E501
        :type serial_not_starts_with: str
        """

        self._serial_not_starts_with = serial_not_starts_with

    @property
    def serial_starts_with(self):
        """Gets the serial_starts_with of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The serial_starts_with of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._serial_starts_with

    @serial_starts_with.setter
    def serial_starts_with(self, serial_starts_with):
        """Sets the serial_starts_with of this EverouteLicenseWhereInput.


        :param serial_starts_with: The serial_starts_with of this EverouteLicenseWhereInput.  # noqa: E501
        :type serial_starts_with: str
        """

        self._serial_starts_with = serial_starts_with

    @property
    def sign_date(self):
        """Gets the sign_date of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The sign_date of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._sign_date

    @sign_date.setter
    def sign_date(self, sign_date):
        """Sets the sign_date of this EverouteLicenseWhereInput.


        :param sign_date: The sign_date of this EverouteLicenseWhereInput.  # noqa: E501
        :type sign_date: str
        """

        self._sign_date = sign_date

    @property
    def sign_date_gt(self):
        """Gets the sign_date_gt of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The sign_date_gt of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._sign_date_gt

    @sign_date_gt.setter
    def sign_date_gt(self, sign_date_gt):
        """Sets the sign_date_gt of this EverouteLicenseWhereInput.


        :param sign_date_gt: The sign_date_gt of this EverouteLicenseWhereInput.  # noqa: E501
        :type sign_date_gt: str
        """

        self._sign_date_gt = sign_date_gt

    @property
    def sign_date_gte(self):
        """Gets the sign_date_gte of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The sign_date_gte of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._sign_date_gte

    @sign_date_gte.setter
    def sign_date_gte(self, sign_date_gte):
        """Sets the sign_date_gte of this EverouteLicenseWhereInput.


        :param sign_date_gte: The sign_date_gte of this EverouteLicenseWhereInput.  # noqa: E501
        :type sign_date_gte: str
        """

        self._sign_date_gte = sign_date_gte

    @property
    def sign_date_in(self):
        """Gets the sign_date_in of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The sign_date_in of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._sign_date_in

    @sign_date_in.setter
    def sign_date_in(self, sign_date_in):
        """Sets the sign_date_in of this EverouteLicenseWhereInput.


        :param sign_date_in: The sign_date_in of this EverouteLicenseWhereInput.  # noqa: E501
        :type sign_date_in: list[str]
        """

        self._sign_date_in = sign_date_in

    @property
    def sign_date_lt(self):
        """Gets the sign_date_lt of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The sign_date_lt of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._sign_date_lt

    @sign_date_lt.setter
    def sign_date_lt(self, sign_date_lt):
        """Sets the sign_date_lt of this EverouteLicenseWhereInput.


        :param sign_date_lt: The sign_date_lt of this EverouteLicenseWhereInput.  # noqa: E501
        :type sign_date_lt: str
        """

        self._sign_date_lt = sign_date_lt

    @property
    def sign_date_lte(self):
        """Gets the sign_date_lte of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The sign_date_lte of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._sign_date_lte

    @sign_date_lte.setter
    def sign_date_lte(self, sign_date_lte):
        """Sets the sign_date_lte of this EverouteLicenseWhereInput.


        :param sign_date_lte: The sign_date_lte of this EverouteLicenseWhereInput.  # noqa: E501
        :type sign_date_lte: str
        """

        self._sign_date_lte = sign_date_lte

    @property
    def sign_date_not(self):
        """Gets the sign_date_not of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The sign_date_not of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._sign_date_not

    @sign_date_not.setter
    def sign_date_not(self, sign_date_not):
        """Sets the sign_date_not of this EverouteLicenseWhereInput.


        :param sign_date_not: The sign_date_not of this EverouteLicenseWhereInput.  # noqa: E501
        :type sign_date_not: str
        """

        self._sign_date_not = sign_date_not

    @property
    def sign_date_not_in(self):
        """Gets the sign_date_not_in of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The sign_date_not_in of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._sign_date_not_in

    @sign_date_not_in.setter
    def sign_date_not_in(self, sign_date_not_in):
        """Sets the sign_date_not_in of this EverouteLicenseWhereInput.


        :param sign_date_not_in: The sign_date_not_in of this EverouteLicenseWhereInput.  # noqa: E501
        :type sign_date_not_in: list[str]
        """

        self._sign_date_not_in = sign_date_not_in

    @property
    def software_edition(self):
        """Gets the software_edition of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The software_edition of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: SoftwareEdition
        """
        return self._software_edition

    @software_edition.setter
    def software_edition(self, software_edition):
        """Sets the software_edition of this EverouteLicenseWhereInput.


        :param software_edition: The software_edition of this EverouteLicenseWhereInput.  # noqa: E501
        :type software_edition: SoftwareEdition
        """

        self._software_edition = software_edition

    @property
    def software_edition_in(self):
        """Gets the software_edition_in of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The software_edition_in of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: list[SoftwareEdition]
        """
        return self._software_edition_in

    @software_edition_in.setter
    def software_edition_in(self, software_edition_in):
        """Sets the software_edition_in of this EverouteLicenseWhereInput.


        :param software_edition_in: The software_edition_in of this EverouteLicenseWhereInput.  # noqa: E501
        :type software_edition_in: list[SoftwareEdition]
        """

        self._software_edition_in = software_edition_in

    @property
    def software_edition_not(self):
        """Gets the software_edition_not of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The software_edition_not of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: SoftwareEdition
        """
        return self._software_edition_not

    @software_edition_not.setter
    def software_edition_not(self, software_edition_not):
        """Sets the software_edition_not of this EverouteLicenseWhereInput.


        :param software_edition_not: The software_edition_not of this EverouteLicenseWhereInput.  # noqa: E501
        :type software_edition_not: SoftwareEdition
        """

        self._software_edition_not = software_edition_not

    @property
    def software_edition_not_in(self):
        """Gets the software_edition_not_in of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The software_edition_not_in of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: list[SoftwareEdition]
        """
        return self._software_edition_not_in

    @software_edition_not_in.setter
    def software_edition_not_in(self, software_edition_not_in):
        """Sets the software_edition_not_in of this EverouteLicenseWhereInput.


        :param software_edition_not_in: The software_edition_not_in of this EverouteLicenseWhereInput.  # noqa: E501
        :type software_edition_not_in: list[SoftwareEdition]
        """

        self._software_edition_not_in = software_edition_not_in

    @property
    def type(self):
        """Gets the type of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The type of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: LicenseType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EverouteLicenseWhereInput.


        :param type: The type of this EverouteLicenseWhereInput.  # noqa: E501
        :type type: LicenseType
        """

        self._type = type

    @property
    def type_in(self):
        """Gets the type_in of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The type_in of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: list[LicenseType]
        """
        return self._type_in

    @type_in.setter
    def type_in(self, type_in):
        """Sets the type_in of this EverouteLicenseWhereInput.


        :param type_in: The type_in of this EverouteLicenseWhereInput.  # noqa: E501
        :type type_in: list[LicenseType]
        """

        self._type_in = type_in

    @property
    def type_not(self):
        """Gets the type_not of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The type_not of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: LicenseType
        """
        return self._type_not

    @type_not.setter
    def type_not(self, type_not):
        """Sets the type_not of this EverouteLicenseWhereInput.


        :param type_not: The type_not of this EverouteLicenseWhereInput.  # noqa: E501
        :type type_not: LicenseType
        """

        self._type_not = type_not

    @property
    def type_not_in(self):
        """Gets the type_not_in of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The type_not_in of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: list[LicenseType]
        """
        return self._type_not_in

    @type_not_in.setter
    def type_not_in(self, type_not_in):
        """Sets the type_not_in of this EverouteLicenseWhereInput.


        :param type_not_in: The type_not_in of this EverouteLicenseWhereInput.  # noqa: E501
        :type type_not_in: list[LicenseType]
        """

        self._type_not_in = type_not_in

    @property
    def uid(self):
        """Gets the uid of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The uid of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this EverouteLicenseWhereInput.


        :param uid: The uid of this EverouteLicenseWhereInput.  # noqa: E501
        :type uid: str
        """

        self._uid = uid

    @property
    def uid_contains(self):
        """Gets the uid_contains of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The uid_contains of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._uid_contains

    @uid_contains.setter
    def uid_contains(self, uid_contains):
        """Sets the uid_contains of this EverouteLicenseWhereInput.


        :param uid_contains: The uid_contains of this EverouteLicenseWhereInput.  # noqa: E501
        :type uid_contains: str
        """

        self._uid_contains = uid_contains

    @property
    def uid_ends_with(self):
        """Gets the uid_ends_with of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The uid_ends_with of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._uid_ends_with

    @uid_ends_with.setter
    def uid_ends_with(self, uid_ends_with):
        """Sets the uid_ends_with of this EverouteLicenseWhereInput.


        :param uid_ends_with: The uid_ends_with of this EverouteLicenseWhereInput.  # noqa: E501
        :type uid_ends_with: str
        """

        self._uid_ends_with = uid_ends_with

    @property
    def uid_gt(self):
        """Gets the uid_gt of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The uid_gt of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._uid_gt

    @uid_gt.setter
    def uid_gt(self, uid_gt):
        """Sets the uid_gt of this EverouteLicenseWhereInput.


        :param uid_gt: The uid_gt of this EverouteLicenseWhereInput.  # noqa: E501
        :type uid_gt: str
        """

        self._uid_gt = uid_gt

    @property
    def uid_gte(self):
        """Gets the uid_gte of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The uid_gte of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._uid_gte

    @uid_gte.setter
    def uid_gte(self, uid_gte):
        """Sets the uid_gte of this EverouteLicenseWhereInput.


        :param uid_gte: The uid_gte of this EverouteLicenseWhereInput.  # noqa: E501
        :type uid_gte: str
        """

        self._uid_gte = uid_gte

    @property
    def uid_in(self):
        """Gets the uid_in of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The uid_in of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._uid_in

    @uid_in.setter
    def uid_in(self, uid_in):
        """Sets the uid_in of this EverouteLicenseWhereInput.


        :param uid_in: The uid_in of this EverouteLicenseWhereInput.  # noqa: E501
        :type uid_in: list[str]
        """

        self._uid_in = uid_in

    @property
    def uid_lt(self):
        """Gets the uid_lt of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The uid_lt of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._uid_lt

    @uid_lt.setter
    def uid_lt(self, uid_lt):
        """Sets the uid_lt of this EverouteLicenseWhereInput.


        :param uid_lt: The uid_lt of this EverouteLicenseWhereInput.  # noqa: E501
        :type uid_lt: str
        """

        self._uid_lt = uid_lt

    @property
    def uid_lte(self):
        """Gets the uid_lte of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The uid_lte of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._uid_lte

    @uid_lte.setter
    def uid_lte(self, uid_lte):
        """Sets the uid_lte of this EverouteLicenseWhereInput.


        :param uid_lte: The uid_lte of this EverouteLicenseWhereInput.  # noqa: E501
        :type uid_lte: str
        """

        self._uid_lte = uid_lte

    @property
    def uid_not(self):
        """Gets the uid_not of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The uid_not of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._uid_not

    @uid_not.setter
    def uid_not(self, uid_not):
        """Sets the uid_not of this EverouteLicenseWhereInput.


        :param uid_not: The uid_not of this EverouteLicenseWhereInput.  # noqa: E501
        :type uid_not: str
        """

        self._uid_not = uid_not

    @property
    def uid_not_contains(self):
        """Gets the uid_not_contains of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The uid_not_contains of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._uid_not_contains

    @uid_not_contains.setter
    def uid_not_contains(self, uid_not_contains):
        """Sets the uid_not_contains of this EverouteLicenseWhereInput.


        :param uid_not_contains: The uid_not_contains of this EverouteLicenseWhereInput.  # noqa: E501
        :type uid_not_contains: str
        """

        self._uid_not_contains = uid_not_contains

    @property
    def uid_not_ends_with(self):
        """Gets the uid_not_ends_with of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The uid_not_ends_with of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._uid_not_ends_with

    @uid_not_ends_with.setter
    def uid_not_ends_with(self, uid_not_ends_with):
        """Sets the uid_not_ends_with of this EverouteLicenseWhereInput.


        :param uid_not_ends_with: The uid_not_ends_with of this EverouteLicenseWhereInput.  # noqa: E501
        :type uid_not_ends_with: str
        """

        self._uid_not_ends_with = uid_not_ends_with

    @property
    def uid_not_in(self):
        """Gets the uid_not_in of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The uid_not_in of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._uid_not_in

    @uid_not_in.setter
    def uid_not_in(self, uid_not_in):
        """Sets the uid_not_in of this EverouteLicenseWhereInput.


        :param uid_not_in: The uid_not_in of this EverouteLicenseWhereInput.  # noqa: E501
        :type uid_not_in: list[str]
        """

        self._uid_not_in = uid_not_in

    @property
    def uid_not_starts_with(self):
        """Gets the uid_not_starts_with of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The uid_not_starts_with of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._uid_not_starts_with

    @uid_not_starts_with.setter
    def uid_not_starts_with(self, uid_not_starts_with):
        """Sets the uid_not_starts_with of this EverouteLicenseWhereInput.


        :param uid_not_starts_with: The uid_not_starts_with of this EverouteLicenseWhereInput.  # noqa: E501
        :type uid_not_starts_with: str
        """

        self._uid_not_starts_with = uid_not_starts_with

    @property
    def uid_starts_with(self):
        """Gets the uid_starts_with of this EverouteLicenseWhereInput.  # noqa: E501


        :return: The uid_starts_with of this EverouteLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._uid_starts_with

    @uid_starts_with.setter
    def uid_starts_with(self, uid_starts_with):
        """Sets the uid_starts_with of this EverouteLicenseWhereInput.


        :param uid_starts_with: The uid_starts_with of this EverouteLicenseWhereInput.  # noqa: E501
        :type uid_starts_with: str
        """

        self._uid_starts_with = uid_starts_with

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EverouteLicenseWhereInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EverouteLicenseWhereInput):
            return True

        return self.to_dict() != other.to_dict()
