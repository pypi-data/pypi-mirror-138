# coding: utf-8

"""
    CloudTower APIs

    cloudtower operation API and SDK  # noqa: E501

    The version of the OpenAPI document: 1.9.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cloudtower.configuration import Configuration


class BackupService(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'backup_clusters': 'list[NestedCluster]',
        'backup_package': 'NestedBackupPackage',
        'backup_plans': 'list[NestedBackupPlan]',
        'backup_store_repositories': 'list[NestedBackupStoreRepository]',
        'description': 'str',
        'entity_async_status': 'EntityAsyncStatus',
        'gateway': 'str',
        'id': 'str',
        'iops_limit': 'int',
        'ip': 'str',
        'kube_config': 'str',
        'max_job_retry_times': 'int',
        'max_parallel_backup_jobs': 'int',
        'max_parallel_restore_jobs': 'int',
        'name': 'str',
        'network_status': 'list[NestedBackupServiceNetworkStatus]',
        'retry_interval': 'int',
        'running_vm': 'NestedVm',
        'status': 'BackupServiceStatus',
        'subnet_mask': 'str'
    }

    attribute_map = {
        'backup_clusters': 'backup_clusters',
        'backup_package': 'backup_package',
        'backup_plans': 'backup_plans',
        'backup_store_repositories': 'backup_store_repositories',
        'description': 'description',
        'entity_async_status': 'entityAsyncStatus',
        'gateway': 'gateway',
        'id': 'id',
        'iops_limit': 'iops_limit',
        'ip': 'ip',
        'kube_config': 'kube_config',
        'max_job_retry_times': 'max_job_retry_times',
        'max_parallel_backup_jobs': 'max_parallel_backup_jobs',
        'max_parallel_restore_jobs': 'max_parallel_restore_jobs',
        'name': 'name',
        'network_status': 'network_status',
        'retry_interval': 'retry_interval',
        'running_vm': 'running_vm',
        'status': 'status',
        'subnet_mask': 'subnet_mask'
    }

    def __init__(self, backup_clusters=None, backup_package=None, backup_plans=None, backup_store_repositories=None, description=None, entity_async_status=None, gateway=None, id=None, iops_limit=None, ip=None, kube_config=None, max_job_retry_times=None, max_parallel_backup_jobs=None, max_parallel_restore_jobs=None, name=None, network_status=None, retry_interval=None, running_vm=None, status=None, subnet_mask=None, local_vars_configuration=None):  # noqa: E501
        """BackupService - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._backup_clusters = None
        self._backup_package = None
        self._backup_plans = None
        self._backup_store_repositories = None
        self._description = None
        self._entity_async_status = None
        self._gateway = None
        self._id = None
        self._iops_limit = None
        self._ip = None
        self._kube_config = None
        self._max_job_retry_times = None
        self._max_parallel_backup_jobs = None
        self._max_parallel_restore_jobs = None
        self._name = None
        self._network_status = None
        self._retry_interval = None
        self._running_vm = None
        self._status = None
        self._subnet_mask = None
        self.discriminator = None

        self.backup_clusters = backup_clusters
        self.backup_package = backup_package
        self.backup_plans = backup_plans
        self.backup_store_repositories = backup_store_repositories
        self.description = description
        self.entity_async_status = entity_async_status
        self.gateway = gateway
        self.id = id
        self.iops_limit = iops_limit
        self.ip = ip
        self.kube_config = kube_config
        self.max_job_retry_times = max_job_retry_times
        self.max_parallel_backup_jobs = max_parallel_backup_jobs
        self.max_parallel_restore_jobs = max_parallel_restore_jobs
        self.name = name
        self.network_status = network_status
        self.retry_interval = retry_interval
        self.running_vm = running_vm
        self.status = status
        self.subnet_mask = subnet_mask

    @property
    def backup_clusters(self):
        """Gets the backup_clusters of this BackupService.  # noqa: E501


        :return: The backup_clusters of this BackupService.  # noqa: E501
        :rtype: list[NestedCluster]
        """
        return self._backup_clusters

    @backup_clusters.setter
    def backup_clusters(self, backup_clusters):
        """Sets the backup_clusters of this BackupService.


        :param backup_clusters: The backup_clusters of this BackupService.  # noqa: E501
        :type backup_clusters: list[NestedCluster]
        """

        self._backup_clusters = backup_clusters

    @property
    def backup_package(self):
        """Gets the backup_package of this BackupService.  # noqa: E501


        :return: The backup_package of this BackupService.  # noqa: E501
        :rtype: NestedBackupPackage
        """
        return self._backup_package

    @backup_package.setter
    def backup_package(self, backup_package):
        """Sets the backup_package of this BackupService.


        :param backup_package: The backup_package of this BackupService.  # noqa: E501
        :type backup_package: NestedBackupPackage
        """
        if self.local_vars_configuration.client_side_validation and backup_package is None:  # noqa: E501
            raise ValueError("Invalid value for `backup_package`, must not be `None`")  # noqa: E501

        self._backup_package = backup_package

    @property
    def backup_plans(self):
        """Gets the backup_plans of this BackupService.  # noqa: E501


        :return: The backup_plans of this BackupService.  # noqa: E501
        :rtype: list[NestedBackupPlan]
        """
        return self._backup_plans

    @backup_plans.setter
    def backup_plans(self, backup_plans):
        """Sets the backup_plans of this BackupService.


        :param backup_plans: The backup_plans of this BackupService.  # noqa: E501
        :type backup_plans: list[NestedBackupPlan]
        """

        self._backup_plans = backup_plans

    @property
    def backup_store_repositories(self):
        """Gets the backup_store_repositories of this BackupService.  # noqa: E501


        :return: The backup_store_repositories of this BackupService.  # noqa: E501
        :rtype: list[NestedBackupStoreRepository]
        """
        return self._backup_store_repositories

    @backup_store_repositories.setter
    def backup_store_repositories(self, backup_store_repositories):
        """Sets the backup_store_repositories of this BackupService.


        :param backup_store_repositories: The backup_store_repositories of this BackupService.  # noqa: E501
        :type backup_store_repositories: list[NestedBackupStoreRepository]
        """

        self._backup_store_repositories = backup_store_repositories

    @property
    def description(self):
        """Gets the description of this BackupService.  # noqa: E501


        :return: The description of this BackupService.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BackupService.


        :param description: The description of this BackupService.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def entity_async_status(self):
        """Gets the entity_async_status of this BackupService.  # noqa: E501


        :return: The entity_async_status of this BackupService.  # noqa: E501
        :rtype: EntityAsyncStatus
        """
        return self._entity_async_status

    @entity_async_status.setter
    def entity_async_status(self, entity_async_status):
        """Sets the entity_async_status of this BackupService.


        :param entity_async_status: The entity_async_status of this BackupService.  # noqa: E501
        :type entity_async_status: EntityAsyncStatus
        """

        self._entity_async_status = entity_async_status

    @property
    def gateway(self):
        """Gets the gateway of this BackupService.  # noqa: E501


        :return: The gateway of this BackupService.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this BackupService.


        :param gateway: The gateway of this BackupService.  # noqa: E501
        :type gateway: str
        """

        self._gateway = gateway

    @property
    def id(self):
        """Gets the id of this BackupService.  # noqa: E501


        :return: The id of this BackupService.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BackupService.


        :param id: The id of this BackupService.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def iops_limit(self):
        """Gets the iops_limit of this BackupService.  # noqa: E501


        :return: The iops_limit of this BackupService.  # noqa: E501
        :rtype: int
        """
        return self._iops_limit

    @iops_limit.setter
    def iops_limit(self, iops_limit):
        """Sets the iops_limit of this BackupService.


        :param iops_limit: The iops_limit of this BackupService.  # noqa: E501
        :type iops_limit: int
        """

        self._iops_limit = iops_limit

    @property
    def ip(self):
        """Gets the ip of this BackupService.  # noqa: E501


        :return: The ip of this BackupService.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this BackupService.


        :param ip: The ip of this BackupService.  # noqa: E501
        :type ip: str
        """

        self._ip = ip

    @property
    def kube_config(self):
        """Gets the kube_config of this BackupService.  # noqa: E501


        :return: The kube_config of this BackupService.  # noqa: E501
        :rtype: str
        """
        return self._kube_config

    @kube_config.setter
    def kube_config(self, kube_config):
        """Sets the kube_config of this BackupService.


        :param kube_config: The kube_config of this BackupService.  # noqa: E501
        :type kube_config: str
        """
        if self.local_vars_configuration.client_side_validation and kube_config is None:  # noqa: E501
            raise ValueError("Invalid value for `kube_config`, must not be `None`")  # noqa: E501

        self._kube_config = kube_config

    @property
    def max_job_retry_times(self):
        """Gets the max_job_retry_times of this BackupService.  # noqa: E501


        :return: The max_job_retry_times of this BackupService.  # noqa: E501
        :rtype: int
        """
        return self._max_job_retry_times

    @max_job_retry_times.setter
    def max_job_retry_times(self, max_job_retry_times):
        """Sets the max_job_retry_times of this BackupService.


        :param max_job_retry_times: The max_job_retry_times of this BackupService.  # noqa: E501
        :type max_job_retry_times: int
        """

        self._max_job_retry_times = max_job_retry_times

    @property
    def max_parallel_backup_jobs(self):
        """Gets the max_parallel_backup_jobs of this BackupService.  # noqa: E501


        :return: The max_parallel_backup_jobs of this BackupService.  # noqa: E501
        :rtype: int
        """
        return self._max_parallel_backup_jobs

    @max_parallel_backup_jobs.setter
    def max_parallel_backup_jobs(self, max_parallel_backup_jobs):
        """Sets the max_parallel_backup_jobs of this BackupService.


        :param max_parallel_backup_jobs: The max_parallel_backup_jobs of this BackupService.  # noqa: E501
        :type max_parallel_backup_jobs: int
        """

        self._max_parallel_backup_jobs = max_parallel_backup_jobs

    @property
    def max_parallel_restore_jobs(self):
        """Gets the max_parallel_restore_jobs of this BackupService.  # noqa: E501


        :return: The max_parallel_restore_jobs of this BackupService.  # noqa: E501
        :rtype: int
        """
        return self._max_parallel_restore_jobs

    @max_parallel_restore_jobs.setter
    def max_parallel_restore_jobs(self, max_parallel_restore_jobs):
        """Sets the max_parallel_restore_jobs of this BackupService.


        :param max_parallel_restore_jobs: The max_parallel_restore_jobs of this BackupService.  # noqa: E501
        :type max_parallel_restore_jobs: int
        """

        self._max_parallel_restore_jobs = max_parallel_restore_jobs

    @property
    def name(self):
        """Gets the name of this BackupService.  # noqa: E501


        :return: The name of this BackupService.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BackupService.


        :param name: The name of this BackupService.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def network_status(self):
        """Gets the network_status of this BackupService.  # noqa: E501


        :return: The network_status of this BackupService.  # noqa: E501
        :rtype: list[NestedBackupServiceNetworkStatus]
        """
        return self._network_status

    @network_status.setter
    def network_status(self, network_status):
        """Sets the network_status of this BackupService.


        :param network_status: The network_status of this BackupService.  # noqa: E501
        :type network_status: list[NestedBackupServiceNetworkStatus]
        """

        self._network_status = network_status

    @property
    def retry_interval(self):
        """Gets the retry_interval of this BackupService.  # noqa: E501


        :return: The retry_interval of this BackupService.  # noqa: E501
        :rtype: int
        """
        return self._retry_interval

    @retry_interval.setter
    def retry_interval(self, retry_interval):
        """Sets the retry_interval of this BackupService.


        :param retry_interval: The retry_interval of this BackupService.  # noqa: E501
        :type retry_interval: int
        """

        self._retry_interval = retry_interval

    @property
    def running_vm(self):
        """Gets the running_vm of this BackupService.  # noqa: E501


        :return: The running_vm of this BackupService.  # noqa: E501
        :rtype: NestedVm
        """
        return self._running_vm

    @running_vm.setter
    def running_vm(self, running_vm):
        """Sets the running_vm of this BackupService.


        :param running_vm: The running_vm of this BackupService.  # noqa: E501
        :type running_vm: NestedVm
        """

        self._running_vm = running_vm

    @property
    def status(self):
        """Gets the status of this BackupService.  # noqa: E501


        :return: The status of this BackupService.  # noqa: E501
        :rtype: BackupServiceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BackupService.


        :param status: The status of this BackupService.  # noqa: E501
        :type status: BackupServiceStatus
        """

        self._status = status

    @property
    def subnet_mask(self):
        """Gets the subnet_mask of this BackupService.  # noqa: E501


        :return: The subnet_mask of this BackupService.  # noqa: E501
        :rtype: str
        """
        return self._subnet_mask

    @subnet_mask.setter
    def subnet_mask(self, subnet_mask):
        """Sets the subnet_mask of this BackupService.


        :param subnet_mask: The subnet_mask of this BackupService.  # noqa: E501
        :type subnet_mask: str
        """

        self._subnet_mask = subnet_mask

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BackupService):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BackupService):
            return True

        return self.to_dict() != other.to_dict()
