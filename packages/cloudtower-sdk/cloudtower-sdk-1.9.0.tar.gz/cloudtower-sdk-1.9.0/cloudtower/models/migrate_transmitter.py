# coding: utf-8

"""
    CloudTower APIs

    cloudtower operation API and SDK  # noqa: E501

    The version of the OpenAPI document: 1.9.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cloudtower.configuration import Configuration


class MigrateTransmitter(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_at': 'str',
        'entity_async_status': 'EntityAsyncStatus',
        'id': 'str',
        'ip': 'str',
        'migrating': 'bool',
        'name': 'str',
        'password': 'str',
        'username': 'str'
    }

    attribute_map = {
        'created_at': 'createdAt',
        'entity_async_status': 'entityAsyncStatus',
        'id': 'id',
        'ip': 'ip',
        'migrating': 'migrating',
        'name': 'name',
        'password': 'password',
        'username': 'username'
    }

    def __init__(self, created_at=None, entity_async_status=None, id=None, ip=None, migrating=None, name=None, password=None, username=None, local_vars_configuration=None):  # noqa: E501
        """MigrateTransmitter - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._created_at = None
        self._entity_async_status = None
        self._id = None
        self._ip = None
        self._migrating = None
        self._name = None
        self._password = None
        self._username = None
        self.discriminator = None

        self.created_at = created_at
        self.entity_async_status = entity_async_status
        self.id = id
        self.ip = ip
        self.migrating = migrating
        self.name = name
        self.password = password
        self.username = username

    @property
    def created_at(self):
        """Gets the created_at of this MigrateTransmitter.  # noqa: E501


        :return: The created_at of this MigrateTransmitter.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MigrateTransmitter.


        :param created_at: The created_at of this MigrateTransmitter.  # noqa: E501
        :type created_at: str
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def entity_async_status(self):
        """Gets the entity_async_status of this MigrateTransmitter.  # noqa: E501


        :return: The entity_async_status of this MigrateTransmitter.  # noqa: E501
        :rtype: EntityAsyncStatus
        """
        return self._entity_async_status

    @entity_async_status.setter
    def entity_async_status(self, entity_async_status):
        """Sets the entity_async_status of this MigrateTransmitter.


        :param entity_async_status: The entity_async_status of this MigrateTransmitter.  # noqa: E501
        :type entity_async_status: EntityAsyncStatus
        """

        self._entity_async_status = entity_async_status

    @property
    def id(self):
        """Gets the id of this MigrateTransmitter.  # noqa: E501


        :return: The id of this MigrateTransmitter.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MigrateTransmitter.


        :param id: The id of this MigrateTransmitter.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def ip(self):
        """Gets the ip of this MigrateTransmitter.  # noqa: E501


        :return: The ip of this MigrateTransmitter.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this MigrateTransmitter.


        :param ip: The ip of this MigrateTransmitter.  # noqa: E501
        :type ip: str
        """
        if self.local_vars_configuration.client_side_validation and ip is None:  # noqa: E501
            raise ValueError("Invalid value for `ip`, must not be `None`")  # noqa: E501

        self._ip = ip

    @property
    def migrating(self):
        """Gets the migrating of this MigrateTransmitter.  # noqa: E501


        :return: The migrating of this MigrateTransmitter.  # noqa: E501
        :rtype: bool
        """
        return self._migrating

    @migrating.setter
    def migrating(self, migrating):
        """Sets the migrating of this MigrateTransmitter.


        :param migrating: The migrating of this MigrateTransmitter.  # noqa: E501
        :type migrating: bool
        """
        if self.local_vars_configuration.client_side_validation and migrating is None:  # noqa: E501
            raise ValueError("Invalid value for `migrating`, must not be `None`")  # noqa: E501

        self._migrating = migrating

    @property
    def name(self):
        """Gets the name of this MigrateTransmitter.  # noqa: E501


        :return: The name of this MigrateTransmitter.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MigrateTransmitter.


        :param name: The name of this MigrateTransmitter.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def password(self):
        """Gets the password of this MigrateTransmitter.  # noqa: E501


        :return: The password of this MigrateTransmitter.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this MigrateTransmitter.


        :param password: The password of this MigrateTransmitter.  # noqa: E501
        :type password: str
        """
        if self.local_vars_configuration.client_side_validation and password is None:  # noqa: E501
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def username(self):
        """Gets the username of this MigrateTransmitter.  # noqa: E501


        :return: The username of this MigrateTransmitter.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this MigrateTransmitter.


        :param username: The username of this MigrateTransmitter.  # noqa: E501
        :type username: str
        """
        if self.local_vars_configuration.client_side_validation and username is None:  # noqa: E501
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MigrateTransmitter):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MigrateTransmitter):
            return True

        return self.to_dict() != other.to_dict()
