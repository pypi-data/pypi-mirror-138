"""
    IRN API v1

    Allows users to create, update and configure IRN data.  # noqa: E501

    The version of the OpenAPI document: 1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from fds.sdk.IRNContacts.api_client import ApiClient, Endpoint as _Endpoint
from fds.sdk.IRNContacts.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from fds.sdk.IRNContacts.model.contact_relationship_two_sided_dto import ContactRelationshipTwoSidedDto
from fds.sdk.IRNContacts.model.contact_relationship_two_sided_save_dto import ContactRelationshipTwoSidedSaveDto
from fds.sdk.IRNContacts.model.operation import Operation
from fds.sdk.IRNContacts.model.problem_details import ProblemDetails


class ContactRelationshipsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.v1_contact_relationships_contact_relationship_id_delete_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/v1/contact-relationships/{contactRelationshipId}',
                'operation_id': 'v1_contact_relationships_contact_relationship_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'contact_relationship_id',
                ],
                'required': [
                    'contact_relationship_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'contact_relationship_id':
                        (str,),
                },
                'attribute_map': {
                    'contact_relationship_id': 'contactRelationshipId',
                },
                'location_map': {
                    'contact_relationship_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.v1_contact_relationships_contact_relationship_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (ContactRelationshipTwoSidedDto,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/v1/contact-relationships/{contactRelationshipId}',
                'operation_id': 'v1_contact_relationships_contact_relationship_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'contact_relationship_id',
                ],
                'required': [
                    'contact_relationship_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'contact_relationship_id':
                        (str,),
                },
                'attribute_map': {
                    'contact_relationship_id': 'contactRelationshipId',
                },
                'location_map': {
                    'contact_relationship_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.v1_contact_relationships_contact_relationship_id_patch_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/v1/contact-relationships/{contactRelationshipId}',
                'operation_id': 'v1_contact_relationships_contact_relationship_id_patch',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'contact_relationship_id',
                    'operation',
                ],
                'required': [
                    'contact_relationship_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'contact_relationship_id':
                        (str,),
                    'operation':
                        ([Operation],),
                },
                'attribute_map': {
                    'contact_relationship_id': 'contactRelationshipId',
                },
                'location_map': {
                    'contact_relationship_id': 'path',
                    'operation': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client
        )
        self.v1_contact_relationships_get_endpoint = _Endpoint(
            settings={
                'response_type': ([ContactRelationshipTwoSidedDto],),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/v1/contact-relationships',
                'operation_id': 'v1_contact_relationships_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'symbol',
                    'contact_id',
                    'relationship_id',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'symbol':
                        (str,),
                    'contact_id':
                        (str,),
                    'relationship_id':
                        (str,),
                },
                'attribute_map': {
                    'symbol': 'symbol',
                    'contact_id': 'contactId',
                    'relationship_id': 'relationshipId',
                },
                'location_map': {
                    'symbol': 'query',
                    'contact_id': 'query',
                    'relationship_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.v1_contact_relationships_post_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/v1/contact-relationships',
                'operation_id': 'v1_contact_relationships_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'contact_relationship_two_sided_save_dto',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'contact_relationship_two_sided_save_dto':
                        (ContactRelationshipTwoSidedSaveDto,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'contact_relationship_two_sided_save_dto': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client
        )

    def v1_contact_relationships_contact_relationship_id_delete(
        self,
        contact_relationship_id,
        **kwargs
    ):
        """Delete a contact relationship  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_contact_relationships_contact_relationship_id_delete(contact_relationship_id, async_req=True)
        >>> result = thread.get()

        Args:
            contact_relationship_id (str): contactRelationshipId to delete associated record

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['contact_relationship_id'] = \
            contact_relationship_id
        return self.v1_contact_relationships_contact_relationship_id_delete_endpoint.call_with_http_info(**kwargs)

    def v1_contact_relationships_contact_relationship_id_get(
        self,
        contact_relationship_id,
        **kwargs
    ):
        """Get details on a specific contact relationship  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_contact_relationships_contact_relationship_id_get(contact_relationship_id, async_req=True)
        >>> result = thread.get()

        Args:
            contact_relationship_id (str): contactRelationshipId to get associated record

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ContactRelationshipTwoSidedDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['contact_relationship_id'] = \
            contact_relationship_id
        return self.v1_contact_relationships_contact_relationship_id_get_endpoint.call_with_http_info(**kwargs)

    def v1_contact_relationships_contact_relationship_id_patch(
        self,
        contact_relationship_id,
        **kwargs
    ):
        """Update a contact relationship  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_contact_relationships_contact_relationship_id_patch(contact_relationship_id, async_req=True)
        >>> result = thread.get()

        Args:
            contact_relationship_id (str): contactRelationshipId to update associated record

        Keyword Args:
            operation ([Operation]): contactRelationshipPatch object to update. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['contact_relationship_id'] = \
            contact_relationship_id
        return self.v1_contact_relationships_contact_relationship_id_patch_endpoint.call_with_http_info(**kwargs)

    def v1_contact_relationships_get(
        self,
        **kwargs
    ):
        """Get all the relationships where the given symbol or contact identifier has been tagged in a relationship  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_contact_relationships_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            symbol (str): [optional]
            contact_id (str): [optional]
            relationship_id (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [ContactRelationshipTwoSidedDto]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.v1_contact_relationships_get_endpoint.call_with_http_info(**kwargs)

    def v1_contact_relationships_post(
        self,
        **kwargs
    ):
        """Create a contact relationship  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_contact_relationships_post(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            contact_relationship_two_sided_save_dto (ContactRelationshipTwoSidedSaveDto): contactRelationship object to save. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.v1_contact_relationships_post_endpoint.call_with_http_info(**kwargs)

