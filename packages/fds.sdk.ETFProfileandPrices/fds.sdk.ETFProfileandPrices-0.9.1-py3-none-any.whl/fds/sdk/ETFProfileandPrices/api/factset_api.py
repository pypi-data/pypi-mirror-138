"""
    Prime Developer Trial

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from fds.sdk.ETFProfileandPrices.api_client import ApiClient, Endpoint as _Endpoint
from fds.sdk.ETFProfileandPrices.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from fds.sdk.ETFProfileandPrices.model.inline_response200 import InlineResponse200
from fds.sdk.ETFProfileandPrices.model.inline_response2001 import InlineResponse2001
from fds.sdk.ETFProfileandPrices.model.inline_response20010 import InlineResponse20010
from fds.sdk.ETFProfileandPrices.model.inline_response20011 import InlineResponse20011
from fds.sdk.ETFProfileandPrices.model.inline_response20012 import InlineResponse20012
from fds.sdk.ETFProfileandPrices.model.inline_response20013 import InlineResponse20013
from fds.sdk.ETFProfileandPrices.model.inline_response20014 import InlineResponse20014
from fds.sdk.ETFProfileandPrices.model.inline_response20015 import InlineResponse20015
from fds.sdk.ETFProfileandPrices.model.inline_response20016 import InlineResponse20016
from fds.sdk.ETFProfileandPrices.model.inline_response20017 import InlineResponse20017
from fds.sdk.ETFProfileandPrices.model.inline_response20018 import InlineResponse20018
from fds.sdk.ETFProfileandPrices.model.inline_response20019 import InlineResponse20019
from fds.sdk.ETFProfileandPrices.model.inline_response2002 import InlineResponse2002
from fds.sdk.ETFProfileandPrices.model.inline_response20020 import InlineResponse20020
from fds.sdk.ETFProfileandPrices.model.inline_response20021 import InlineResponse20021
from fds.sdk.ETFProfileandPrices.model.inline_response20022 import InlineResponse20022
from fds.sdk.ETFProfileandPrices.model.inline_response2003 import InlineResponse2003
from fds.sdk.ETFProfileandPrices.model.inline_response2004 import InlineResponse2004
from fds.sdk.ETFProfileandPrices.model.inline_response2005 import InlineResponse2005
from fds.sdk.ETFProfileandPrices.model.inline_response2006 import InlineResponse2006
from fds.sdk.ETFProfileandPrices.model.inline_response2007 import InlineResponse2007
from fds.sdk.ETFProfileandPrices.model.inline_response2008 import InlineResponse2008
from fds.sdk.ETFProfileandPrices.model.inline_response2009 import InlineResponse2009


class FactsetApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.factset_etf_allocation_asset_list_by_symbol_get_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse2001,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/factset/etf/allocation/asset/listBySymbol',
                'operation_id': 'factset_etf_allocation_asset_list_by_symbol_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'symbol',
                    'attributes',
                    'pagination_offset',
                    'pagination_limit',
                ],
                'required': [
                    'symbol',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'symbol',
                    'attributes',
                    'pagination_offset',
                    'pagination_limit',
                ]
            },
            root_map={
                'validations': {
                    ('symbol',): {
                        'max_length': 10,
                    },
                    ('attributes',): {

                        'max_items': 50,
                    },
                    ('pagination_offset',): {

                        'inclusive_minimum': 0,
                    },
                    ('pagination_limit',): {

                        'inclusive_maximum': 500,
                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'symbol':
                        (str,),
                    'attributes':
                        ([str],),
                    'pagination_offset':
                        (float,),
                    'pagination_limit':
                        (float,),
                },
                'attribute_map': {
                    'symbol': 'symbol',
                    'attributes': '_attributes',
                    'pagination_offset': '_paginationOffset',
                    'pagination_limit': '_paginationLimit',
                },
                'location_map': {
                    'symbol': 'query',
                    'attributes': 'query',
                    'pagination_offset': 'query',
                    'pagination_limit': 'query',
                },
                'collection_format_map': {
                    'attributes': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.factset_etf_allocation_country_list_by_symbol_get_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse2002,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/factset/etf/allocation/country/listBySymbol',
                'operation_id': 'factset_etf_allocation_country_list_by_symbol_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'symbol',
                    'attributes',
                    'pagination_offset',
                    'pagination_limit',
                ],
                'required': [
                    'symbol',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'symbol',
                    'attributes',
                    'pagination_offset',
                    'pagination_limit',
                ]
            },
            root_map={
                'validations': {
                    ('symbol',): {
                        'max_length': 10,
                    },
                    ('attributes',): {

                        'max_items': 50,
                    },
                    ('pagination_offset',): {

                        'inclusive_minimum': 0,
                    },
                    ('pagination_limit',): {

                        'inclusive_maximum': 500,
                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'symbol':
                        (str,),
                    'attributes':
                        ([str],),
                    'pagination_offset':
                        (float,),
                    'pagination_limit':
                        (float,),
                },
                'attribute_map': {
                    'symbol': 'symbol',
                    'attributes': '_attributes',
                    'pagination_offset': '_paginationOffset',
                    'pagination_limit': '_paginationLimit',
                },
                'location_map': {
                    'symbol': 'query',
                    'attributes': 'query',
                    'pagination_offset': 'query',
                    'pagination_limit': 'query',
                },
                'collection_format_map': {
                    'attributes': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.factset_etf_allocation_exchange_list_by_symbol_get_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse2003,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/factset/etf/allocation/exchange/listBySymbol',
                'operation_id': 'factset_etf_allocation_exchange_list_by_symbol_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'symbol',
                    'attributes',
                    'pagination_offset',
                    'pagination_limit',
                ],
                'required': [
                    'symbol',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'symbol',
                    'attributes',
                    'pagination_offset',
                    'pagination_limit',
                ]
            },
            root_map={
                'validations': {
                    ('symbol',): {
                        'max_length': 10,
                    },
                    ('attributes',): {

                        'max_items': 50,
                    },
                    ('pagination_offset',): {

                        'inclusive_minimum': 0,
                    },
                    ('pagination_limit',): {

                        'inclusive_maximum': 500,
                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'symbol':
                        (str,),
                    'attributes':
                        ([str],),
                    'pagination_offset':
                        (float,),
                    'pagination_limit':
                        (float,),
                },
                'attribute_map': {
                    'symbol': 'symbol',
                    'attributes': '_attributes',
                    'pagination_offset': '_paginationOffset',
                    'pagination_limit': '_paginationLimit',
                },
                'location_map': {
                    'symbol': 'query',
                    'attributes': 'query',
                    'pagination_offset': 'query',
                    'pagination_limit': 'query',
                },
                'collection_format_map': {
                    'attributes': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.factset_etf_allocation_region_list_by_symbol_get_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse2004,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/factset/etf/allocation/region/listBySymbol',
                'operation_id': 'factset_etf_allocation_region_list_by_symbol_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'symbol',
                    'attributes',
                    'pagination_offset',
                    'pagination_limit',
                ],
                'required': [
                    'symbol',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'symbol',
                    'attributes',
                    'pagination_offset',
                    'pagination_limit',
                ]
            },
            root_map={
                'validations': {
                    ('symbol',): {
                        'max_length': 10,
                    },
                    ('attributes',): {

                        'max_items': 50,
                    },
                    ('pagination_offset',): {

                        'inclusive_minimum': 0,
                    },
                    ('pagination_limit',): {

                        'inclusive_maximum': 500,
                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'symbol':
                        (str,),
                    'attributes':
                        ([str],),
                    'pagination_offset':
                        (float,),
                    'pagination_limit':
                        (float,),
                },
                'attribute_map': {
                    'symbol': 'symbol',
                    'attributes': '_attributes',
                    'pagination_offset': '_paginationOffset',
                    'pagination_limit': '_paginationLimit',
                },
                'location_map': {
                    'symbol': 'query',
                    'attributes': 'query',
                    'pagination_offset': 'query',
                    'pagination_limit': 'query',
                },
                'collection_format_map': {
                    'attributes': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.factset_etf_allocation_sector_list_by_symbol_get_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse2005,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/factset/etf/allocation/sector/listBySymbol',
                'operation_id': 'factset_etf_allocation_sector_list_by_symbol_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'symbol',
                    'attributes',
                    'pagination_offset',
                    'pagination_limit',
                ],
                'required': [
                    'symbol',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'symbol',
                    'attributes',
                    'pagination_offset',
                    'pagination_limit',
                ]
            },
            root_map={
                'validations': {
                    ('symbol',): {
                        'max_length': 10,
                    },
                    ('attributes',): {

                        'max_items': 50,
                    },
                    ('pagination_offset',): {

                        'inclusive_minimum': 0,
                    },
                    ('pagination_limit',): {

                        'inclusive_maximum': 500,
                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'symbol':
                        (str,),
                    'attributes':
                        ([str],),
                    'pagination_offset':
                        (float,),
                    'pagination_limit':
                        (float,),
                },
                'attribute_map': {
                    'symbol': 'symbol',
                    'attributes': '_attributes',
                    'pagination_offset': '_paginationOffset',
                    'pagination_limit': '_paginationLimit',
                },
                'location_map': {
                    'symbol': 'query',
                    'attributes': 'query',
                    'pagination_offset': 'query',
                    'pagination_limit': 'query',
                },
                'collection_format_map': {
                    'attributes': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.factset_etf_characteristics_get_by_symbol_get_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse2006,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/factset/etf/characteristics/getBySymbol',
                'operation_id': 'factset_etf_characteristics_get_by_symbol_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'symbol',
                    'attributes',
                ],
                'required': [
                    'symbol',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'symbol',
                    'attributes',
                ]
            },
            root_map={
                'validations': {
                    ('symbol',): {
                        'max_length': 10,
                    },
                    ('attributes',): {

                        'max_items': 50,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'symbol':
                        (str,),
                    'attributes':
                        ([str],),
                },
                'attribute_map': {
                    'symbol': 'symbol',
                    'attributes': '_attributes',
                },
                'location_map': {
                    'symbol': 'query',
                    'attributes': 'query',
                },
                'collection_format_map': {
                    'attributes': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.factset_etf_class_category_broad_list_get_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse2008,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/factset/etf/class/category/broad/list',
                'operation_id': 'factset_etf_class_category_broad_list_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'attributes',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'attributes',
                ]
            },
            root_map={
                'validations': {
                    ('attributes',): {

                        'max_items': 50,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'attributes':
                        ([str],),
                },
                'attribute_map': {
                    'attributes': '_attributes',
                },
                'location_map': {
                    'attributes': 'query',
                },
                'collection_format_map': {
                    'attributes': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.factset_etf_class_category_focus_list_get_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse2009,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/factset/etf/class/category/focus/list',
                'operation_id': 'factset_etf_class_category_focus_list_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'attributes',
                    'pagination_offset',
                    'pagination_limit',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'attributes',
                    'pagination_offset',
                    'pagination_limit',
                ]
            },
            root_map={
                'validations': {
                    ('attributes',): {

                        'max_items': 50,
                    },
                    ('pagination_offset',): {

                        'inclusive_minimum': 0,
                    },
                    ('pagination_limit',): {

                        'inclusive_maximum': 500,
                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'attributes':
                        ([str],),
                    'pagination_offset':
                        (float,),
                    'pagination_limit':
                        (float,),
                },
                'attribute_map': {
                    'attributes': '_attributes',
                    'pagination_offset': '_paginationOffset',
                    'pagination_limit': '_paginationLimit',
                },
                'location_map': {
                    'attributes': 'query',
                    'pagination_offset': 'query',
                    'pagination_limit': 'query',
                },
                'collection_format_map': {
                    'attributes': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.factset_etf_class_category_niche_list_get_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse20010,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/factset/etf/class/category/niche/list',
                'operation_id': 'factset_etf_class_category_niche_list_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'attributes',
                    'pagination_offset',
                    'pagination_limit',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'attributes',
                    'pagination_offset',
                    'pagination_limit',
                ]
            },
            root_map={
                'validations': {
                    ('attributes',): {

                        'max_items': 50,
                    },
                    ('pagination_offset',): {

                        'inclusive_minimum': 0,
                    },
                    ('pagination_limit',): {

                        'inclusive_maximum': 500,
                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'attributes':
                        ([str],),
                    'pagination_offset':
                        (float,),
                    'pagination_limit':
                        (float,),
                },
                'attribute_map': {
                    'attributes': '_attributes',
                    'pagination_offset': '_paginationOffset',
                    'pagination_limit': '_paginationLimit',
                },
                'location_map': {
                    'attributes': 'query',
                    'pagination_offset': 'query',
                    'pagination_limit': 'query',
                },
                'collection_format_map': {
                    'attributes': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.factset_etf_class_geography_list_get_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse20011,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/factset/etf/class/geography/list',
                'operation_id': 'factset_etf_class_geography_list_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'attributes',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'attributes',
                ]
            },
            root_map={
                'validations': {
                    ('attributes',): {

                        'max_items': 50,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'attributes':
                        ([str],),
                },
                'attribute_map': {
                    'attributes': '_attributes',
                },
                'location_map': {
                    'attributes': 'query',
                },
                'collection_format_map': {
                    'attributes': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.factset_etf_class_get_by_symbol_get_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse2007,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/factset/etf/class/getBySymbol',
                'operation_id': 'factset_etf_class_get_by_symbol_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'symbol',
                    'attributes',
                ],
                'required': [
                    'symbol',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'symbol',
                    'attributes',
                ]
            },
            root_map={
                'validations': {
                    ('symbol',): {
                        'max_length': 10,
                    },
                    ('attributes',): {

                        'max_items': 50,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'symbol':
                        (str,),
                    'attributes':
                        ([str],),
                },
                'attribute_map': {
                    'symbol': 'symbol',
                    'attributes': '_attributes',
                },
                'location_map': {
                    'symbol': 'query',
                    'attributes': 'query',
                },
                'collection_format_map': {
                    'attributes': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.factset_etf_distribution_get_by_symbol_get_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse20012,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/factset/etf/distribution/getBySymbol',
                'operation_id': 'factset_etf_distribution_get_by_symbol_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'symbol',
                    'attributes',
                ],
                'required': [
                    'symbol',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'symbol',
                    'attributes',
                ]
            },
            root_map={
                'validations': {
                    ('symbol',): {
                        'max_length': 10,
                    },
                    ('attributes',): {

                        'max_items': 50,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'symbol':
                        (str,),
                    'attributes':
                        ([str],),
                },
                'attribute_map': {
                    'symbol': 'symbol',
                    'attributes': '_attributes',
                },
                'location_map': {
                    'symbol': 'query',
                    'attributes': 'query',
                },
                'collection_format_map': {
                    'attributes': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.factset_etf_fund_flows_get_by_symbol_get_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse20013,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/factset/etf/fundFlows/getBySymbol',
                'operation_id': 'factset_etf_fund_flows_get_by_symbol_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'symbol',
                    'attributes',
                ],
                'required': [
                    'symbol',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'symbol',
                    'attributes',
                ]
            },
            root_map={
                'validations': {
                    ('symbol',): {
                        'max_length': 10,
                    },
                    ('attributes',): {

                        'max_items': 50,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'symbol':
                        (str,),
                    'attributes':
                        ([str],),
                },
                'attribute_map': {
                    'symbol': 'symbol',
                    'attributes': '_attributes',
                },
                'location_map': {
                    'symbol': 'query',
                    'attributes': 'query',
                },
                'collection_format_map': {
                    'attributes': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.factset_etf_get_by_symbol_get_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse200,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/factset/etf/getBySymbol',
                'operation_id': 'factset_etf_get_by_symbol_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'symbol',
                    'attributes',
                ],
                'required': [
                    'symbol',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'symbol',
                    'attributes',
                ]
            },
            root_map={
                'validations': {
                    ('symbol',): {
                        'max_length': 10,
                    },
                    ('attributes',): {

                        'max_items': 50,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'symbol':
                        (str,),
                    'attributes':
                        ([str],),
                },
                'attribute_map': {
                    'symbol': 'symbol',
                    'attributes': '_attributes',
                },
                'location_map': {
                    'symbol': 'query',
                    'attributes': 'query',
                },
                'collection_format_map': {
                    'attributes': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.factset_etf_growth_of_ten_k_list_by_symbol_get_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse20014,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/factset/etf/growthOfTenK/listBySymbol',
                'operation_id': 'factset_etf_growth_of_ten_k_list_by_symbol_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'symbol',
                    'time_period',
                    'calculation_type',
                    'attributes',
                    'pagination_offset',
                    'pagination_limit',
                ],
                'required': [
                    'symbol',
                ],
                'nullable': [
                ],
                'enum': [
                    'time_period',
                    'calculation_type',
                ],
                'validation': [
                    'symbol',
                    'attributes',
                    'pagination_offset',
                    'pagination_limit',
                ]
            },
            root_map={
                'validations': {
                    ('symbol',): {
                        'max_length': 10,
                    },
                    ('attributes',): {

                        'max_items': 50,
                    },
                    ('pagination_offset',): {

                        'inclusive_minimum': 0,
                    },
                    ('pagination_limit',): {

                        'inclusive_maximum': 500,
                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                    ('time_period',): {

                        "1M": "1M",
                        "3M": "3M",
                        "6M": "6M",
                        "YTD": "YTD",
                        "1Y": "1Y",
                        "3Y": "3Y",
                        "5Y": "5Y",
                        "10Y": "10Y",
                        "SI": "SI"
                    },
                    ('calculation_type',): {

                        "I": "I",
                        "SI": "SI"
                    },
                },
                'openapi_types': {
                    'symbol':
                        (str,),
                    'time_period':
                        (str,),
                    'calculation_type':
                        (str,),
                    'attributes':
                        ([str],),
                    'pagination_offset':
                        (float,),
                    'pagination_limit':
                        (float,),
                },
                'attribute_map': {
                    'symbol': 'symbol',
                    'time_period': 'timePeriod',
                    'calculation_type': 'calculationType',
                    'attributes': '_attributes',
                    'pagination_offset': '_paginationOffset',
                    'pagination_limit': '_paginationLimit',
                },
                'location_map': {
                    'symbol': 'query',
                    'time_period': 'query',
                    'calculation_type': 'query',
                    'attributes': 'query',
                    'pagination_offset': 'query',
                    'pagination_limit': 'query',
                },
                'collection_format_map': {
                    'attributes': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.factset_etf_holdings_list_by_symbol_get_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse20015,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/factset/etf/holdings/listBySymbol',
                'operation_id': 'factset_etf_holdings_list_by_symbol_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'symbol',
                    'attributes',
                    'pagination_offset',
                    'pagination_limit',
                ],
                'required': [
                    'symbol',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'symbol',
                    'attributes',
                    'pagination_offset',
                    'pagination_limit',
                ]
            },
            root_map={
                'validations': {
                    ('symbol',): {
                        'max_length': 10,
                    },
                    ('attributes',): {

                        'max_items': 50,
                    },
                    ('pagination_offset',): {

                        'inclusive_minimum': 0,
                    },
                    ('pagination_limit',): {

                        'inclusive_maximum': 500,
                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'symbol':
                        (str,),
                    'attributes':
                        ([str],),
                    'pagination_offset':
                        (float,),
                    'pagination_limit':
                        (float,),
                },
                'attribute_map': {
                    'symbol': 'symbol',
                    'attributes': '_attributes',
                    'pagination_offset': '_paginationOffset',
                    'pagination_limit': '_paginationLimit',
                },
                'location_map': {
                    'symbol': 'query',
                    'attributes': 'query',
                    'pagination_offset': 'query',
                    'pagination_limit': 'query',
                },
                'collection_format_map': {
                    'attributes': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.factset_etf_price_get_by_symbol_get_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse20016,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/factset/etf/price/getBySymbol',
                'operation_id': 'factset_etf_price_get_by_symbol_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'symbol',
                    'attributes',
                ],
                'required': [
                    'symbol',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'symbol',
                    'attributes',
                ]
            },
            root_map={
                'validations': {
                    ('symbol',): {
                        'max_length': 10,
                    },
                    ('attributes',): {

                        'max_items': 50,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'symbol':
                        (str,),
                    'attributes':
                        ([str],),
                },
                'attribute_map': {
                    'symbol': 'symbol',
                    'attributes': '_attributes',
                },
                'location_map': {
                    'symbol': 'query',
                    'attributes': 'query',
                },
                'collection_format_map': {
                    'attributes': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.factset_etf_returns_get_by_symbol_get_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse20017,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/factset/etf/returns/getBySymbol',
                'operation_id': 'factset_etf_returns_get_by_symbol_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'symbol',
                    'return_type',
                    'attributes',
                ],
                'required': [
                    'symbol',
                ],
                'nullable': [
                ],
                'enum': [
                    'return_type',
                ],
                'validation': [
                    'symbol',
                    'return_type',
                    'attributes',
                ]
            },
            root_map={
                'validations': {
                    ('symbol',): {
                        'max_length': 10,
                    },
                    ('return_type',): {
                        'max_length': 5,
                    },
                    ('attributes',): {

                        'max_items': 50,
                    },
                },
                'allowed_values': {
                    ('return_type',): {

                        "PRICE": "price",
                        "NAV": "nav"
                    },
                },
                'openapi_types': {
                    'symbol':
                        (str,),
                    'return_type':
                        (str,),
                    'attributes':
                        ([str],),
                },
                'attribute_map': {
                    'symbol': 'symbol',
                    'return_type': 'returnType',
                    'attributes': '_attributes',
                },
                'location_map': {
                    'symbol': 'query',
                    'return_type': 'query',
                    'attributes': 'query',
                },
                'collection_format_map': {
                    'attributes': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.factset_etf_strategy_get_by_symbol_get_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse20018,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/factset/etf/strategy/getBySymbol',
                'operation_id': 'factset_etf_strategy_get_by_symbol_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'symbol',
                    'attributes',
                ],
                'required': [
                    'symbol',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'symbol',
                    'attributes',
                ]
            },
            root_map={
                'validations': {
                    ('symbol',): {
                        'max_length': 10,
                    },
                    ('attributes',): {

                        'max_items': 50,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'symbol':
                        (str,),
                    'attributes':
                        ([str],),
                },
                'attribute_map': {
                    'symbol': 'symbol',
                    'attributes': '_attributes',
                },
                'location_map': {
                    'symbol': 'query',
                    'attributes': 'query',
                },
                'collection_format_map': {
                    'attributes': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.factset_etf_strategy_segment_list_get_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse20019,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/factset/etf/strategy/segment/list',
                'operation_id': 'factset_etf_strategy_segment_list_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'attributes',
                    'pagination_offset',
                    'pagination_limit',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'attributes',
                    'pagination_offset',
                    'pagination_limit',
                ]
            },
            root_map={
                'validations': {
                    ('attributes',): {

                        'max_items': 50,
                    },
                    ('pagination_offset',): {

                        'inclusive_minimum': 0,
                    },
                    ('pagination_limit',): {

                        'inclusive_maximum': 500,
                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'attributes':
                        ([str],),
                    'pagination_offset':
                        (float,),
                    'pagination_limit':
                        (float,),
                },
                'attribute_map': {
                    'attributes': '_attributes',
                    'pagination_offset': '_paginationOffset',
                    'pagination_limit': '_paginationLimit',
                },
                'location_map': {
                    'attributes': 'query',
                    'pagination_offset': 'query',
                    'pagination_limit': 'query',
                },
                'collection_format_map': {
                    'attributes': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.factset_etf_structure_get_by_symbol_get_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse20020,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/factset/etf/structure/getBySymbol',
                'operation_id': 'factset_etf_structure_get_by_symbol_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'symbol',
                    'attributes',
                ],
                'required': [
                    'symbol',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'symbol',
                    'attributes',
                ]
            },
            root_map={
                'validations': {
                    ('symbol',): {
                        'max_length': 10,
                    },
                    ('attributes',): {

                        'max_items': 50,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'symbol':
                        (str,),
                    'attributes':
                        ([str],),
                },
                'attribute_map': {
                    'symbol': 'symbol',
                    'attributes': '_attributes',
                },
                'location_map': {
                    'symbol': 'query',
                    'attributes': 'query',
                },
                'collection_format_map': {
                    'attributes': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.factset_etf_taxes_and_fees_us_get_by_symbol_get_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse20021,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/factset/etf/taxesAndFees/us/getBySymbol',
                'operation_id': 'factset_etf_taxes_and_fees_us_get_by_symbol_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'symbol',
                    'attributes',
                ],
                'required': [
                    'symbol',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'symbol',
                    'attributes',
                ]
            },
            root_map={
                'validations': {
                    ('symbol',): {
                        'max_length': 10,
                    },
                    ('attributes',): {

                        'max_items': 50,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'symbol':
                        (str,),
                    'attributes':
                        ([str],),
                },
                'attribute_map': {
                    'symbol': 'symbol',
                    'attributes': '_attributes',
                },
                'location_map': {
                    'symbol': 'query',
                    'attributes': 'query',
                },
                'collection_format_map': {
                    'attributes': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.factset_etf_time_series_list_by_symbol_get_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse20022,),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/factset/etf/timeSeries/listBySymbol',
                'operation_id': 'factset_etf_time_series_list_by_symbol_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'symbol',
                    'time_period',
                    'attributes',
                    'pagination_offset',
                    'pagination_limit',
                ],
                'required': [
                    'symbol',
                ],
                'nullable': [
                ],
                'enum': [
                    'time_period',
                ],
                'validation': [
                    'symbol',
                    'attributes',
                    'pagination_offset',
                    'pagination_limit',
                ]
            },
            root_map={
                'validations': {
                    ('symbol',): {
                        'max_length': 10,
                    },
                    ('attributes',): {

                        'max_items': 50,
                    },
                    ('pagination_offset',): {

                        'inclusive_minimum': 0,
                    },
                    ('pagination_limit',): {

                        'inclusive_maximum': 500,
                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                    ('time_period',): {

                        "1M": "1M",
                        "3M": "3M",
                        "6M": "6M",
                        "YTD": "YTD",
                        "1Y": "1Y",
                        "3Y": "3Y",
                        "5Y": "5Y",
                        "10Y": "10Y",
                        "SI": "SI"
                    },
                },
                'openapi_types': {
                    'symbol':
                        (str,),
                    'time_period':
                        (str,),
                    'attributes':
                        ([str],),
                    'pagination_offset':
                        (float,),
                    'pagination_limit':
                        (float,),
                },
                'attribute_map': {
                    'symbol': 'symbol',
                    'time_period': 'timePeriod',
                    'attributes': '_attributes',
                    'pagination_offset': '_paginationOffset',
                    'pagination_limit': '_paginationLimit',
                },
                'location_map': {
                    'symbol': 'query',
                    'time_period': 'query',
                    'attributes': 'query',
                    'pagination_offset': 'query',
                    'pagination_limit': 'query',
                },
                'collection_format_map': {
                    'attributes': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def factset_etf_allocation_asset_list_by_symbol_get(
        self,
        symbol,
        **kwargs
    ):
        """This endpoint returns selected ETP's asset allocations.  # noqa: E501

        This endpoint returns selected ETP's allocations grouped by asset class. The response will be sorted by weight in descending order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.factset_etf_allocation_asset_list_by_symbol_get(symbol, async_req=True)
        >>> result = thread.get()

        Args:
            symbol (str): Market symbol of ETP defined by FactSet.

        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            pagination_offset (float): Non-negative number of entries to skip, or 0 (default).. [optional] if omitted the server will use the default value of 0.0
            pagination_limit (float): Non-negative maximum number of entries to return.. [optional] if omitted the server will use the default value of 20.0
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse2001
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['symbol'] = \
            symbol
        return self.factset_etf_allocation_asset_list_by_symbol_get_endpoint.call_with_http_info(**kwargs)

    def factset_etf_allocation_country_list_by_symbol_get(
        self,
        symbol,
        **kwargs
    ):
        """This endpoint returns selected ETP's country allocations.  # noqa: E501

        This endpoint returns selected ETP's allocations grouped by country names. The response will be sorted by weight in descending order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.factset_etf_allocation_country_list_by_symbol_get(symbol, async_req=True)
        >>> result = thread.get()

        Args:
            symbol (str): Market symbol of ETP defined by FactSet.

        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            pagination_offset (float): Non-negative number of entries to skip, or 0 (default).. [optional] if omitted the server will use the default value of 0.0
            pagination_limit (float): Non-negative maximum number of entries to return.. [optional] if omitted the server will use the default value of 20.0
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse2002
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['symbol'] = \
            symbol
        return self.factset_etf_allocation_country_list_by_symbol_get_endpoint.call_with_http_info(**kwargs)

    def factset_etf_allocation_exchange_list_by_symbol_get(
        self,
        symbol,
        **kwargs
    ):
        """This endpoint returns selected ETP's exchange allocations.  # noqa: E501

        This endpoint returns selected ETP's allocations grouped by exchanges. The response will be sorted by weight in descending order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.factset_etf_allocation_exchange_list_by_symbol_get(symbol, async_req=True)
        >>> result = thread.get()

        Args:
            symbol (str): Market symbol of ETP defined by FactSet.

        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            pagination_offset (float): Non-negative number of entries to skip, or 0 (default).. [optional] if omitted the server will use the default value of 0.0
            pagination_limit (float): Non-negative maximum number of entries to return.. [optional] if omitted the server will use the default value of 20.0
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse2003
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['symbol'] = \
            symbol
        return self.factset_etf_allocation_exchange_list_by_symbol_get_endpoint.call_with_http_info(**kwargs)

    def factset_etf_allocation_region_list_by_symbol_get(
        self,
        symbol,
        **kwargs
    ):
        """This endpoint returns selected ETP's region allocations.  # noqa: E501

        This endpoint returns selected ETP's allocations grouped by region names. The response will be sorted by weight in descending order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.factset_etf_allocation_region_list_by_symbol_get(symbol, async_req=True)
        >>> result = thread.get()

        Args:
            symbol (str): Market symbol of ETP defined by FactSet.

        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            pagination_offset (float): Non-negative number of entries to skip, or 0 (default).. [optional] if omitted the server will use the default value of 0.0
            pagination_limit (float): Non-negative maximum number of entries to return.. [optional] if omitted the server will use the default value of 20.0
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse2004
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['symbol'] = \
            symbol
        return self.factset_etf_allocation_region_list_by_symbol_get_endpoint.call_with_http_info(**kwargs)

    def factset_etf_allocation_sector_list_by_symbol_get(
        self,
        symbol,
        **kwargs
    ):
        """This endpoint returns selected ETP's sector allocations.  # noqa: E501

        This endpoint returns selected ETP's allocations grouped by sector names. The response will be sorted by weight in descending order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.factset_etf_allocation_sector_list_by_symbol_get(symbol, async_req=True)
        >>> result = thread.get()

        Args:
            symbol (str): Market symbol of ETP defined by FactSet.

        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            pagination_offset (float): Non-negative number of entries to skip, or 0 (default).. [optional] if omitted the server will use the default value of 0.0
            pagination_limit (float): Non-negative maximum number of entries to return.. [optional] if omitted the server will use the default value of 20.0
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse2005
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['symbol'] = \
            symbol
        return self.factset_etf_allocation_sector_list_by_symbol_get_endpoint.call_with_http_info(**kwargs)

    def factset_etf_characteristics_get_by_symbol_get(
        self,
        symbol,
        **kwargs
    ):
        """Retrieve basic characteristic information for a specified ETP.  # noqa: E501

        An ETP has many unique characteristics specific to its composition that differentiate it from other products. This includes details on leverage, hedging, derivatives, and service providers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.factset_etf_characteristics_get_by_symbol_get(symbol, async_req=True)
        >>> result = thread.get()

        Args:
            symbol (str): Market symbol of ETF defined by FactSet.

        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse2006
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['symbol'] = \
            symbol
        return self.factset_etf_characteristics_get_by_symbol_get_endpoint.call_with_http_info(**kwargs)

    def factset_etf_class_category_broad_list_get(
        self,
        **kwargs
    ):
        """List of ETP class broad categories.  # noqa: E501

        List of ETP class broad categories.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.factset_etf_class_category_broad_list_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse2008
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.factset_etf_class_category_broad_list_get_endpoint.call_with_http_info(**kwargs)

    def factset_etf_class_category_focus_list_get(
        self,
        **kwargs
    ):
        """List of ETP class focus categories.  # noqa: E501

        List of ETP class focus categories.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.factset_etf_class_category_focus_list_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            pagination_offset (float): Non-negative number of entries to skip, or 0 (default).. [optional] if omitted the server will use the default value of 0.0
            pagination_limit (float): Non-negative maximum number of entries to return.. [optional] if omitted the server will use the default value of 20.0
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse2009
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.factset_etf_class_category_focus_list_get_endpoint.call_with_http_info(**kwargs)

    def factset_etf_class_category_niche_list_get(
        self,
        **kwargs
    ):
        """List of ETP class niche categories.  # noqa: E501

        List of ETP class niche categories.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.factset_etf_class_category_niche_list_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            pagination_offset (float): Non-negative number of entries to skip, or 0 (default).. [optional] if omitted the server will use the default value of 0.0
            pagination_limit (float): Non-negative maximum number of entries to return.. [optional] if omitted the server will use the default value of 20.0
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse20010
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.factset_etf_class_category_niche_list_get_endpoint.call_with_http_info(**kwargs)

    def factset_etf_class_geography_list_get(
        self,
        **kwargs
    ):
        """List of ETP class geographies.  # noqa: E501

        List of ETP class geographies.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.factset_etf_class_geography_list_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse20011
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.factset_etf_class_geography_list_get_endpoint.call_with_http_info(**kwargs)

    def factset_etf_class_get_by_symbol_get(
        self,
        symbol,
        **kwargs
    ):
        """Retrieve an ETP's classification specific to asset class, geography, or investment strategy.  # noqa: E501

        ETP classification is divided into three categories: Asset Class, Geography, and Investment Strategy. Asset class is determined based on the various asset types held by the fund, A fund's geography can be classified by region (e.g. Asia-Pac), specific geography (e.g. China) or economic development (e.g. BRIC). An ETP's investment strategy is classified in broad categories (e.g. Large Cap) and more granular categorizations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.factset_etf_class_get_by_symbol_get(symbol, async_req=True)
        >>> result = thread.get()

        Args:
            symbol (str): Market symbol of ETP defined by FactSet.

        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse2007
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['symbol'] = \
            symbol
        return self.factset_etf_class_get_by_symbol_get_endpoint.call_with_http_info(**kwargs)

    def factset_etf_distribution_get_by_symbol_get(
        self,
        symbol,
        **kwargs
    ):
        """Retrieve an ETP's current distribution details.  # noqa: E501

        Retrieve distribution-related details for a specific ETP including dividend and capital gain distribution details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.factset_etf_distribution_get_by_symbol_get(symbol, async_req=True)
        >>> result = thread.get()

        Args:
            symbol (str): Market symbol of ETP defined by FactSet.

        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse20012
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['symbol'] = \
            symbol
        return self.factset_etf_distribution_get_by_symbol_get_endpoint.call_with_http_info(**kwargs)

    def factset_etf_fund_flows_get_by_symbol_get(
        self,
        symbol,
        **kwargs
    ):
        """Retrieve an ETP's cash inflow/outflows for various time periods.  # noqa: E501

        Retrieve the amount invested or divested in a specific ETP over various time periods including one-day, one-week, one-month, one-year, and YTD.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.factset_etf_fund_flows_get_by_symbol_get(symbol, async_req=True)
        >>> result = thread.get()

        Args:
            symbol (str): Market symbol of ETP defined by FactSet.

        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse20013
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['symbol'] = \
            symbol
        return self.factset_etf_fund_flows_get_by_symbol_get_endpoint.call_with_http_info(**kwargs)

    def factset_etf_get_by_symbol_get(
        self,
        symbol,
        **kwargs
    ):
        """Retrieve basic profile information for a specified ETP.  # noqa: E501

        An ETP can be profiled by defining several common attributes such as issuer, fund description, and benchmark.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.factset_etf_get_by_symbol_get(symbol, async_req=True)
        >>> result = thread.get()

        Args:
            symbol (str): Market symbol of ETP defined by FactSet.

        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse200
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['symbol'] = \
            symbol
        return self.factset_etf_get_by_symbol_get_endpoint.call_with_http_info(**kwargs)

    def factset_etf_growth_of_ten_k_list_by_symbol_get(
        self,
        symbol,
        **kwargs
    ):
        """This endpoint returns selected ETP's Growth of 10K calculated values.  # noqa: E501

        Growth of 10K (or growth of 10,000) is a commonly used chart that highlights the change in the value of an initial 10,000 investment in the ETP during a given period of time. Often, this period of time is either since inception or the calculation between the pre-defined range.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.factset_etf_growth_of_ten_k_list_by_symbol_get(symbol, async_req=True)
        >>> result = thread.get()

        Args:
            symbol (str): Market symbol of ETP defined by FactSet.

        Keyword Args:
            time_period (str): Historice NAV date value.. [optional]
            calculation_type (str): Historice NAV date value.. [optional]
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            pagination_offset (float): Non-negative number of entries to skip, or 0 (default).. [optional] if omitted the server will use the default value of 0.0
            pagination_limit (float): Non-negative maximum number of entries to return.. [optional] if omitted the server will use the default value of 20.0
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse20014
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['symbol'] = \
            symbol
        return self.factset_etf_growth_of_ten_k_list_by_symbol_get_endpoint.call_with_http_info(**kwargs)

    def factset_etf_holdings_list_by_symbol_get(
        self,
        symbol,
        **kwargs
    ):
        """Holdings details for an individual ETP.  # noqa: E501

        Retrieve an ETP's holdings information including security, shares held, and weight.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.factset_etf_holdings_list_by_symbol_get(symbol, async_req=True)
        >>> result = thread.get()

        Args:
            symbol (str): Market symbol of ETP defined by FactSet.

        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            pagination_offset (float): Non-negative number of entries to skip, or 0 (default).. [optional] if omitted the server will use the default value of 0.0
            pagination_limit (float): Non-negative maximum number of entries to return.. [optional] if omitted the server will use the default value of 20.0
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse20015
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['symbol'] = \
            symbol
        return self.factset_etf_holdings_list_by_symbol_get_endpoint.call_with_http_info(**kwargs)

    def factset_etf_price_get_by_symbol_get(
        self,
        symbol,
        **kwargs
    ):
        """Retrieve historical ETP NAV values.  # noqa: E501

        Retrieve an ETP's historical NAV and shares outstanding for a specified time range.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.factset_etf_price_get_by_symbol_get(symbol, async_req=True)
        >>> result = thread.get()

        Args:
            symbol (str): Market symbol of ETP defined by FactSet.

        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse20016
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['symbol'] = \
            symbol
        return self.factset_etf_price_get_by_symbol_get_endpoint.call_with_http_info(**kwargs)

    def factset_etf_returns_get_by_symbol_get(
        self,
        symbol,
        **kwargs
    ):
        """Retrieve total return data for a specified ETP.  # noqa: E501

        An ETP's total return data can be returned for various time frames including 1-month, 3-month, YTD, 1-year, 3-year, and 5-year. Total return market price is used to calcualte price returns. Total return nav is used to calcualte nav returns.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.factset_etf_returns_get_by_symbol_get(symbol, async_req=True)
        >>> result = thread.get()

        Args:
            symbol (str): Market symbol of ETP defined by FactSet.

        Keyword Args:
            return_type (str): Return type.. [optional] if omitted the server will use the default value of "price"
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse20017
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['symbol'] = \
            symbol
        return self.factset_etf_returns_get_by_symbol_get_endpoint.call_with_http_info(**kwargs)

    def factset_etf_strategy_get_by_symbol_get(
        self,
        symbol,
        **kwargs
    ):
        """Retrieve various classification details for a specified ETP.  # noqa: E501

        ETP's can be classified in many different ways including investment strategy, security weightings, and fund composition.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.factset_etf_strategy_get_by_symbol_get(symbol, async_req=True)
        >>> result = thread.get()

        Args:
            symbol (str): Market symbol of ETP defined by FactSet.

        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse20018
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['symbol'] = \
            symbol
        return self.factset_etf_strategy_get_by_symbol_get_endpoint.call_with_http_info(**kwargs)

    def factset_etf_strategy_segment_list_get(
        self,
        **kwargs
    ):
        """Retrieve a list of ETP strategy segments.  # noqa: E501

        Retrieve the various segments assigned to a specific ETP. Segment data is used to group funds for comparison and relative performance analyses.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.factset_etf_strategy_segment_list_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            pagination_offset (float): Non-negative number of entries to skip, or 0 (default).. [optional] if omitted the server will use the default value of 0.0
            pagination_limit (float): Non-negative maximum number of entries to return.. [optional] if omitted the server will use the default value of 20.0
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse20019
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.factset_etf_strategy_segment_list_get_endpoint.call_with_http_info(**kwargs)

    def factset_etf_structure_get_by_symbol_get(
        self,
        symbol,
        **kwargs
    ):
        """Retrieve the basic structure information for a specified ETP.  # noqa: E501

        Retrieve details on a fund's structure including its type, investment style (active/passive), and legal structure.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.factset_etf_structure_get_by_symbol_get(symbol, async_req=True)
        >>> result = thread.get()

        Args:
            symbol (str): Market symbol of ETP defined by FactSet.

        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse20020
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['symbol'] = \
            symbol
        return self.factset_etf_structure_get_by_symbol_get_endpoint.call_with_http_info(**kwargs)

    def factset_etf_taxes_and_fees_us_get_by_symbol_get(
        self,
        symbol,
        **kwargs
    ):
        """Retrieve the tax and fee related information for a specified ETP.  # noqa: E501

        Retrieve various fee and tax related details on a specified ETP including expense ratio and tax treatment for dividends and capital gains.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.factset_etf_taxes_and_fees_us_get_by_symbol_get(symbol, async_req=True)
        >>> result = thread.get()

        Args:
            symbol (str): Market symbol of ETP defined by FactSet.

        Keyword Args:
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse20021
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['symbol'] = \
            symbol
        return self.factset_etf_taxes_and_fees_us_get_by_symbol_get_endpoint.call_with_http_info(**kwargs)

    def factset_etf_time_series_list_by_symbol_get(
        self,
        symbol,
        **kwargs
    ):
        """Retrieve historical NAV data for a specified ETP.  # noqa: E501

        Retrieve the historical NAV data and the respective fund flows and shares outstanding for a specified fund and time period. Please refer currency.fund in /factset/etf/getBySymbol for currency value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.factset_etf_time_series_list_by_symbol_get(symbol, async_req=True)
        >>> result = thread.get()

        Args:
            symbol (str): Market symbol of ETP defined by FactSet.

        Keyword Args:
            time_period (str): Time frame of the data.. [optional] if omitted the server will use the default value of "1Y"
            attributes ([str]): Limit the attributes returned in the response to the specified set.. [optional]
            pagination_offset (float): Non-negative number of entries to skip, or 0 (default).. [optional] if omitted the server will use the default value of 0.0
            pagination_limit (float): Non-negative maximum number of entries to return.. [optional] if omitted the server will use the default value of 20.0
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse20022
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['symbol'] = \
            symbol
        return self.factset_etf_time_series_list_by_symbol_get_endpoint.call_with_http_info(**kwargs)

